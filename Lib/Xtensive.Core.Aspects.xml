<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Core.Aspects</name>
    </assembly>
    <members>
        <member name="M:Xtensive.Core.Aspects.ChangerAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.ErrorLog.MessageSource">
            <summary>
            Gets the message source this log is bound to.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.ErrorLog.Write(PostSharp.Extensibility.SeverityType,Xtensive.Core.Aspects.Helpers.AspectMessageType,System.Object[])">
            <summary>
            Writes the standard message to the underlying PostSharp <see cref="F:Xtensive.Core.Aspects.ErrorLog.MessageSource"/>.
            </summary>
            <param name="severity">The severity type.</param>
            <param name="messageType">The standard message type.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.ErrorLog.Write(PostSharp.Extensibility.SeverityType,System.String,System.Object[])">
            <summary>
            Writes the message to the underlying PostSharp <see cref="F:Xtensive.Core.Aspects.ErrorLog.MessageSource"/>.
            </summary>
            <param name="severity">The severity type.</param>
            <param name="format">The message format string.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.ErrorLog.Debug(System.String,System.Object[])">
            <summary>
            Writes the debug message to the underlying PostSharp <see cref="F:Xtensive.Core.Aspects.ErrorLog.MessageSource"/>.
            </summary>
            <param name="format">The message format string.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.AppliedAspectSet">
            <summary>
            A helper class allowing to apply the particular aspect just once.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AppliedAspectSet.Add``1(System.Object,System.Func{``0})">
            <summary>
            Adds a new aspect created by <paramref name="generator"/> 
            with the specified key to the set, if there is no aspect with the same key; 
            otherwise, does nothing.
            </summary>
            <typeparam name="T">The type of aspect to add.</typeparam>
            <param name="key">The key of aspect to add.</param>
            <param name="generator">The aspect generator.</param>
            <returns>A generated aspect, if aspect with the specified 
            <paramref name="key"/> was not found; 
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AppliedAspectSet.AddOrCombine``1(System.Object,``0,System.Action{``0,``0})">
            <summary>
            Adds an <paramref name="aspect"/> with the specified key to the set, 
            if there is no aspect with the same key; 
            otherwise, combines the <paramref name="aspect"/>
            with the existing one using <paramref name="combiner"/>.
            </summary>
            <typeparam name="T">The type of aspect to add.</typeparam>
            <param name="key">The key of aspect to add.</param>
            <param name="aspect">The aspect to add.</param>
            <param name="combiner">The aspect combiner. 
            Its first argument is an existing aspect, that should be modified; 
            the second one is <paramref name="aspect"/>.</param>
            <returns>A generated aspect, if aspect with the specified 
            <paramref name="key"/> was not found; 
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AppliedAspectSet.GetOrCreate``1(System.Object,System.Func{``0})">
            <summary>
            Adds a new aspect created by <paramref name="generator"/> 
            with the specified key to the set, if there is no aspect with the same key;
            </summary>
            <typeparam name="T">The type of aspect to add.</typeparam>
            <param name="key">The key of aspect to add.</param>
            <param name="generator">The aspect generator.</param>
            <returns>Aspect that was found in set by specified key or generated by <paramref name="generator"/>.</returns>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.AspectHelper">
            <summary>
            Helps to validate common aspect application errors.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.FormatType(System.Type)">
            <summary>
            Formats the type.
            </summary>
            <param name="type">The type to format.</param>
            <returns>String representation of the type.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.FormatConstructor(System.Type,System.Type,System.Type[])">
            <summary>
            Formats the method.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the constructed value.</param>
            <param name="parameterTypes">The method parameter types.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.FormatMethod(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Formats the method.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the return value.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameterTypes">The method parameter types.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.FormatMember(System.Type,System.Type,System.String)">
            <summary>
            Formats the member (field or property).
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null"/> means no type name must be included into the format string.</param>
            <param name="returnType">Type of the member.</param>
            <param name="name">Name of the member.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.FormatMember(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Formats the member name.
            </summary>
            <param name="type">The type where member is declared.
            <see langword="null" /> means no type name must be included into the format string.</param>
            <param name="member">The member to format.</param>
            <returns>String representation of the member.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.GetStandardMessage(Xtensive.Core.Aspects.Helpers.AspectMessageType)">
            <summary>
            Gets the standard localized message.
            </summary>
            <param name="messageType">Type of the message to get.</param>
            <returns>Standard localized message.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="messageType"/> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.AddStandardRequirements(PostSharp.Extensibility.PostSharpRequirements)">
            <summary>
            Adds the standard requirements to the specified <paramref name="requirements"/>.
            </summary>
            <param name="requirements">The requirements to modify.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateMemberType(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.MemberInfo,System.Boolean,System.Reflection.MemberTypes)">
            <summary>
            Validates the type of the member.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="member">The member to validate the type of.</param>
            <param name="containsFlags">If set to <see langword="true"/>, member type 
            must contain <paramref name="memberTypes"/> flags;
            otherwise, it must not contain them.</param>
            <param name="memberTypes">Expected (or not) type(s) of the member.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateMemberAttribute``1(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.MemberInfo,System.Boolean,Xtensive.Core.Reflection.AttributeSearchOptions)">
            <summary>
            Validates presence of the attribute.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="member">The member to validate the presence of attribute on.</param>
            <param name="mustHave">If set to <see langword="true"/>, member type 
            must have <typeparamref name="TAttribute"/> applied;
            otherwise, it must not have it.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateBaseType(System.Attribute,PostSharp.Extensibility.SeverityType,System.Type,System.Boolean,System.Type)">
            <summary>
            Validates the implementation of <paramref name="baseType"/> 
            (e.g. interface) on the <paramref name="type"/>.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="type">The type to validate for the implementation of <paramref name="baseType"/>.</param>
            <param name="mustImplement">If set to <see langword="true"/>, type 
            must implement <paramref name="baseType"/>;
            otherwise, it must not implement it.</param>
            <param name="baseType">The base type to validate the implementation of.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateFieldAttributes(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.FieldInfo,System.Boolean,System.Reflection.FieldAttributes)">
            <summary>
            Validates the attributes of the field.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="field">The field to validate the attributes of.</param>
            <param name="containsFlags">If set to <see langword="true"/>, field attributes
            must contain <paramref name="fieldAttributes"/> flags;
            otherwise, it must not contain them.</param>
            <param name="fieldAttributes">Expected (or not) attributes of the field.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidatePropertyAccessor(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.PropertyInfo,System.Boolean,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Validates the accessor of the property.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="property">The property to validate the accessor of.</param>
            <param name="mustHave">If set to <see langword="true"/>, property 
            must contain setter or getter;
            otherwise, it must not contain it.</param>
            <param name="nonPublic">Indicates whether expected accessor must be non-public or not.
            <see langword="null"/> means this does not matter.</param>
            <param name="setter">If <see langword="true"/>, property setter will be checked;
            otherwise, getter.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateMethodAttributes(System.Attribute,PostSharp.Extensibility.SeverityType,System.Reflection.MethodBase,System.Boolean,System.Reflection.MethodAttributes)">
            <summary>
            Validates the attributes of the method.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="method">The method to validate the attributes of.</param>
            <param name="containsFlags">If set to <see langword="true"/>, method attributes
            must contain <paramref name="methodAttributes"/> flags;
            otherwise, it must not contain them.</param>
            <param name="methodAttributes">Expected (or not) attributes of the method.</param>
            <returns><see langword="true"/> if validation has passed;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateMethod(System.Attribute,PostSharp.Extensibility.SeverityType,System.Type,System.Boolean,System.Reflection.BindingFlags,System.Type,System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Validates the presence of specified method on the <paramref name="type"/>.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="type">The type to get the method of.</param>
            <param name="mustHave">If set to <see langword="true"/>, type
            must have specified method;
            otherwise, it must not have it.</param>
            <param name="bindingFlags">Binding flags.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="name">The name of the method.</param>
            <param name="parameterTypes">The types of method arguments.</param>
            <param name="method">The found method, or <see langword="null"/> if specified method was not found.</param>
            <returns>
            <see langword="true"/> if validation has passed; otherwise, <see langword="false"/>.    
            </returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateContextBoundMethod``1(System.Attribute,System.Reflection.MethodBase)">
            <summary>
            Validates the method of <see cref="T:Xtensive.Core.IContextBound`1"/> object.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="aspect">The aspect.</param>
            <param name="method">The method.</param>
            <returns>
            <see langword="true"/> if validation has passed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateContextBoundMethod``1(System.Attribute,System.Reflection.MethodBase,System.Boolean,System.Boolean)">
            <summary>
            Validates the method of <see cref="T:Xtensive.Core.IContextBound`1"/> object.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <param name="aspect">The aspect.</param>
            <param name="method">The method.</param>
            <param name="allowConstructor">Indicates whether <see cref="T:System.Reflection.ConstructorInfo"/> is allowed in <paramref name="method"/>.</param>
            <param name="allowStatic">Indicates whether <paramref name="method"/> can be static.</param>
            <returns>
            <see langword="true"/> if validation has passed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateConstructor(System.Attribute,PostSharp.Extensibility.SeverityType,System.Type,System.Boolean,System.Reflection.BindingFlags,System.Type[],System.Reflection.ConstructorInfo@)">
            <summary>
            Validates the presence of specified constructor on the <paramref name="type"/>.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="severityType">The severity of the message to write to <see cref="T:Xtensive.Core.Aspects.ErrorLog"/>.</param>
            <param name="type">The type to get the constructor of.</param>
            <param name="mustHave">If set to <see langword="true"/>, type
            must have specified constructor;
            otherwise, it must not have it.</param>
            <param name="bindingFlags">Binding flags.</param>
            <param name="parameterTypes">The types of constructor arguments.</param>
            <param name="constructor">The found constructor, or <see langword="null"/> if specified method was not found.</param>
            <returns>
            <see langword="true"/> if validation has passed; otherwise, <see langword="false"/>.    
            </returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.ValidateNotInfrastructure(System.Attribute,System.Reflection.MethodBase)">
            <summary>
            Validates the method, that should not be infrastructure.
            </summary>
            <param name="aspect">The aspect.</param>
            <param name="method">The method to validate.</param>
            <returns>
            <see langword="true"/> if method is valid, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AspectHelper.IsInfrastructureMethod(System.Reflection.MethodBase)">
            <summary>
            Determines whether the specified method is infrastructure method.
            </summary>
            <param name="method">The method to check.</param>
            <returns>
            <see langword="true"/> if the specified method is infrastructure method; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.AspectMessageType">
            <summary>
            Defines standard aspect message types.
            </summary>  
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.AspectPossiblyMissapplied">
            <summary>
            "[{0}] attribute is possibly wrongly applied to '{1}'."
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.AspectRequiresToBe">
            <summary>
            "[{0}] attribute requires '{1}' to {2}be {3}."
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.AspectRequiresToHave">
            <summary>
            "[{0}] attribute requires '{1}' to {2}have {3}."
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.AspectMustBeSingle">
            <summary>
            "Multiple [{0}] attributes are applied to '{1}', but there must be a single one."
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.AutoProperty">
            <summary>
            "auto-property"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.PropertyAccessor">
            <summary>
            "property accessor"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.Getter">
            <summary>
            "getter"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.Setter">
            <summary>
            "setter"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.Public">
            <summary>
            "public"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.NonPublic">
            <summary>
            "non-public"
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.AspectMessageType.Not">
            <summary>
            "not "
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.Internals.ImplementProtectedConstructorAccessorAspect.CompileTimeValidate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.ImplementProtectedConstructorBodyAspect">
            <summary>
            Internally applied by <see cref="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.ProtectedConstructorAspectPriority">
            <summary>
            Priorities of aspects applied by <see cref="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.Internals.ProtectedConstructorAspectPriority.Declare">
            <summary>
            Priority of <see cref="T:Xtensive.Core.Aspects.Helpers.Internals.DeclareConstructorAspect"/>.
            Value is <see langword="-220"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.Internals.ProtectedConstructorAspectPriority.ImplementBody">
            <summary>
            Priority of <see cref="T:Xtensive.Core.Aspects.Helpers.Internals.ImplementProtectedConstructorBodyAspect"/>.
            Value is <see langword="-210"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.Internals.ProtectedConstructorAspectPriority.ImplementAccessor">
            <summary>
            Priority of <see cref="T:Xtensive.Core.Aspects.Helpers.Internals.ImplementProtectedConstructorAccessorAspect"/>.
            Value is <see langword="-200"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.DeclareConstructorAspect">
            <summary>
            Internally applied by <see cref="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.ErrorFlowBehavior">
            <summary>
            Specifies the control flow mode on catching an exception in the aspected method.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.ErrorFlowBehavior.Rethrow">
            <summary>
            Rethrow the original exception.
            This is default behavior.
            Value is <see langword="0" />.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.ErrorFlowBehavior.Reprocess">
            <summary>
            Reprocess aspected method.
            Value is <see langword="1" />.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.Helpers.ErrorFlowBehavior.Skip">
            <summary>
            Skip the exception.
            Value is <see langword="2" />.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.NotSupportedMethodAspect.#ctor">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.NotSupportedMethodAspect.#ctor(System.String)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect">
            <summary>
            Custom attribute that, when applied to a method defined in the current assembly, inserts a piece
            of code before and after the body of these methods. This custom attribute can be multicasted
            (see <see cref="T:PostSharp.Extensibility.MulticastAttribute"/>).
            </summary>
            <remarks>
            This custom attribute is useful to implement "boundary" functionalities like tracing (writing a 
            line to log) or transactions (automatically start a transaction at entry and commit or rollback
            at exit).
            </remarks>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnEntry(System.Object)">
            <summary>
            Method executed <b>before</b> the body of methods to which this aspect is applied.
            </summary>
            <param name="instance">Current object instance on which this attribute is applied.</param>
            <remarks>
            If the aspect is applied to a constructor, the current method is invoked
            after the <b>this</b> pointer has been initialized, that is, after
            the base constructor has been called.
            </remarks>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnExit(System.Object,System.Object)">
            <summary>
            Method executed <b>after</b> the body of methods to which this aspect is applied,
            even when the method exists with an exception (this method is invoked from
            the <b>finally</b> block).
            </summary>
            <param name="instance">Current object instance on which this attribute is applied.</param>
            <param name="onEntryResult">Result of <see cref="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnEntry(System.Object)"/> method call.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnSuccess(System.Object,System.Object)">
            <summary>
            Method executed <b>after</b> the body of methods to which this aspect is applied,
            but only when the method successfully returns (i.e. when no exception flies out
            the method.).
            </summary>
            <param name="instance">Current object instance on which this attribute is applied.</param>
            <param name="onEntryResult">Result of <see cref="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnEntry(System.Object)"/> method call.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ReprocessMethodBoundaryAspect.OnError(System.Object,System.Exception)">
            <summary>
            Method executed when the body of methods to which this aspect is applied throws an exception.
            </summary>
            <returns>An exception will be thrown when result is <see langword="true"/>.</returns>
            <param name="instance">Current object instance on which this attribute is applied.</param>
            <param name="e">Thrown exception.</param>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect">
            <summary>
            Protected constructor accessors aspect - provides an accessor (delegate)
            for the specified protected constructor of a type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.ApplyOnce(System.Type,System.Type[])">
            <summary>
            Applies this aspect to the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to apply the aspect to.</param>
            <param name="parameterTypes">Types of constructor parameters.</param>
            <returns>If it was the first application with the specified set of arguments, the newly created aspect;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.#ctor(System.Type[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parameterTypes"><see cref="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.ParameterTypes"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.ParameterTypes">
            <summary>
            Gets the protected constructor argument types.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect.TargetType">
            <summary>
            Gets or sets the target type.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect">
            <summary>
            Replaces auto-property implementation to invocation of property get and set generic handlers.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.CompileTimeValidate(System.Reflection.MethodBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.ApplyOnce(System.Reflection.MethodInfo,System.Type,System.String)">
            <summary>
            Applies this aspect to the specified <paramref name="getterOrSetter"/>.
            </summary>
            <param name="getterOrSetter">The property getter or setter to apply the aspect to.</param>
            <param name="handlerType"><see cref="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerType"/> property value.</param>
            <param name="handlerMethodSuffix"><see cref="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerMethodSuffix"/> property value.</param>
            <returns>If it was the first application with the specified set of arguments, the newly created aspect;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.#ctor(System.Type,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="handlerType"><see cref="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerType"/> property value.</param>
            <param name="handlerMethodSuffix"><see cref="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerMethodSuffix"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerType">
            <summary>
            Gets the type where handlers are declared.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect.HandlerMethodSuffix">
            <summary>
            Gets the name suffix of handler methods.
            </summary>
            <remarks>
            If suffix is "Value", handler methods should be
            <c>T GetValue&lt;T&gt;(string name)</c> and
            <c>void SetValue&lt;T&gt;(string name, T value)</c>.
            </remarks>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect">
            <summary>
            Implements protected constructor with a set of specified parameter types.
            Implemented constructor will call the constructor with the same set of arguments from the base type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.CompileTimeValidate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.ApplyOnce(System.Type,System.Type[])">
            <summary>
            Applies this aspect to the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to apply the aspect to.</param>
            <param name="parameterTypes">Types of constructor parameters.</param>
            <returns>If it was the first application with the specified set of arguments, the newly created aspect;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.#ctor(System.Type[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="parameterTypes"><see cref="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.ParameterTypes"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.ParameterTypes">
            <summary>
            Gets the constructor parameter types.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect.TargetType">
            <summary>
            Gets or sets the target type.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect">
            <summary>
            Implements epilogue call in constructor.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.CompileTimeValidate(System.Reflection.MethodBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.ApplyOnce(System.Reflection.ConstructorInfo,System.Type,System.String)">
            <summary>
            Applies this aspect to the specified <paramref name="ctor"/>.
            </summary>
            <param name="ctor">The constructor to apply the aspect to.</param>
            <param name="handlerType"><see cref="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerType"/> property value.</param>
            <param name="handlerMethodName"><see cref="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerMethodName"/> property value.</param>
            <returns>If it was the first application with the specified set of arguments, the newly created aspect;
            otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.#ctor(System.Type,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="handlerType"><see cref="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerType"/> property value.</param>
            <param name="handlerMethodName"><see cref="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerMethodName"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerType">
            <summary>
            Gets the type where epilogue method is declared.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.ConstructorEpilogueAspect.HandlerMethodName">
            <summary>
            Gets the name of the epilogue method to call.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.InfrastructureAttribute">
            <summary>
            Marks a method or property as infrastructure method or property.
            No any aspects will be applied to it by default.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.InitializableAttribute.ProvideAspects(System.Object,PostSharp.Laos.LaosReflectionAspectCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.InitializableAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.IInitializable">
            <summary>
            A tagging interface marking the types on which
            <see cref="T:Xtensive.Core.Aspects.InitializableAttribute"/> must implement
            "initializable" pattern.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.SuppressActivationAttribute">
            <summary>
            Suppresses the activation of context of specified <see cref="P:Xtensive.Core.Aspects.SuppressActivationAttribute.ContextType"/> 
            for the method it is applied on.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.SuppressActivationAttribute.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="contextType">Type of the context to suppress activation for.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.SuppressActivationAttribute.ContextType">
            <summary>
            Gets or sets the type of the context to suppress activation for.
            </summary>
            <remarks>If <see cref="P:Xtensive.Core.Aspects.SuppressActivationAttribute.ContextType"/> is <see langword="null"/>
             then context activation for all contexts must be suppressed.
            </remarks>
        </member>
        <member name="T:Xtensive.Core.Aspects.CoreAspectPriority">
            <summary>
            Priorities of key aspects.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.CoreAspectPriority.Trace">
            <summary>
            <see cref="T:Xtensive.Core.Aspects.TraceAttribute"/> aspect priority.
            Value is <see langword="-1000000"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Core.Aspects.CoreAspectPriority.Changer">
            <summary>
            <see cref="T:Xtensive.Core.Aspects.ChangerAttribute"/> aspect priority.
            Value is <see langword="1000000"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect">
            <summary>
            Private field accessors aspect - provides get and set accessors 
            for a set of private fields (<see cref="P:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.TargetFields"/>) of a type.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.CompileTimeValidate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.ApplyOnce(System.Reflection.FieldInfo)">
            <summary>
            Applies this aspect to the specified <paramref name="field"/>.
            </summary>
            <param name="field">The field to apply the aspect to.</param>
            <returns>If it was the first application with the specified set of arguments, the newly created aspect;
            otherwise, <see langword="null" />.</returns>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="targetFields"><see cref="P:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.TargetFields"/> property value.</param>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.#ctor(System.String[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="targetFields"><see cref="P:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.TargetFields"/> property value.</param>
        </member>
        <member name="P:Xtensive.Core.Aspects.Helpers.PrivateFieldAccessorsAspect.TargetFields">
            <summary>
             Gets a sequence of field names that should be provided with private accessors.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Helpers.ObjectFormatter.#ctor(System.Object)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="obj">The object to format.</param>
        </member>
        <member name="M:Xtensive.Core.Helpers.ObjectFormatter.#ctor(System.Object,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="obj">The object to format.</param>
            <param name="formatContentOnly">if set to <c>true</c> format content only.</param>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.ChangeNotifier">
            <summary>
            Provides implementation of of <see cref="T:Xtensive.Core.Notifications.IChangeNotifier"/>
            for <see cref="T:Xtensive.Core.Aspects.Helpers.Internals.ImplementChangeNotifierAspect"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.ImplementChangeNotifierAspect">
            <summary>
            Internally applied by <see cref="T:Xtensive.Core.Aspects.ChangerAttribute"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Helpers.Internals.NotifyOnChangeAspect">
            <summary>
            Internally applied by <see cref="T:Xtensive.Core.Aspects.ChangerAttribute"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.Internals.NotifyOnChangeAspect.CompileTimeValidate(System.Reflection.MethodBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.Internals.NotifyOnChangeAspect.OnEntry(PostSharp.Laos.MethodExecutionEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Core.Aspects.Helpers.Internals.NotifyOnChangeAspect.OnExit(PostSharp.Laos.MethodExecutionEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Core.Aspects.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="T:Xtensive.Core.Aspects.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExCannotFindLogFor">
            <summary>
              Looks up a localized string similar to Cannot find Log for type &apos;{0}&apos; in namespace &apos;{1}&apos; and above..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExMustBeSingle">
            <summary>
              Looks up a localized string similar to Multiple [{0}] attributes are applied to &apos;{1}&apos;, but there must be a single one..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExPossiblyMissapplied">
            <summary>
              Looks up a localized string similar to [{0}] attribute is possibly wrongly applied to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExRequiresToBe">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}be {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExRequiresToHave">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}have {3}..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectExRequiresToImplement">
            <summary>
              Looks up a localized string similar to [{0}] attribute requires &apos;{1}&apos; to {2}implement &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AspectXCanNotBeAppliedToInfrastructureMethod">
            <summary>
              Looks up a localized string similar to Aspect {0} can not be applied to infrastructure method..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.AutoProperty">
            <summary>
              Looks up a localized string similar to auto-property.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.Getter">
            <summary>
              Looks up a localized string similar to getter.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.LogCantLogNoLogError">
            <summary>
              Looks up a localized string similar to Can&apos;t log &apos;{0}&apos; invocation: Instance property of found Log object returned an object other then ILog..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.LogCantResolveLogType">
            <summary>
              Looks up a localized string similar to [{0}] attribute: can&apos;t resolve LogType, or underlying Log has no Instance property..
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.MemberFormat">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.MethodFormat">
            <summary>
              Looks up a localized string similar to {0} {1}({2}).
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.NonPublic">
            <summary>
              Looks up a localized string similar to non-public.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.Not">
            <summary>
              Looks up a localized string similar to not .
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.PropertyAccessor">
            <summary>
              Looks up a localized string similar to property accessor.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.Public">
            <summary>
              Looks up a localized string similar to public.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.Setter">
            <summary>
              Looks up a localized string similar to setter.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.XD0001">
            <summary>
              Looks up a localized string similar to Debug: {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Core.Aspects.Resources.Strings.XW0001">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
    </members>
</doc>
