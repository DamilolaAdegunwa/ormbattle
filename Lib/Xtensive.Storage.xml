<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Storage</name>
    </assembly>
    <members>
        <member name="T:Xtensive.Storage.Providers.SchemaUpgradeHandler">
            <summary>
            Upgrades storage schema.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.InitializableHandlerBase">
            <summary>
            Abstract base class for storage handlers having <see cref="M:Xtensive.Storage.Providers.InitializableHandlerBase.Initialize"/> method.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.HandlerBase">
            <summary>
            Abstract base class for any storage handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerBase.Handlers">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor"/> providing other available handlers.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.InitializableHandlerBase.Initialize">
            <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.GetTargetSchema">
            <summary>
            Gets the target schema.
            </summary>
            <returns>The target schema.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.GetExtractedSchema">
            <summary>
            Gets the extracted schema.
            </summary>
            <returns>The extracted schema.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo)">
            <summary>
            Upgrades the storage.
            </summary>
            <param name="upgradeActions">The upgrade actions.</param>
            <param name="sourceSchema">The source schema.</param>
            <param name="targetSchema">The target schema.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates the type info.
            </summary>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.Indexing.Model.TypeInfo"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.SaveSchemaInContext(System.Object)">
            <summary>
            Saves the schema in context.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitBinaryRecursive(System.Linq.Expressions.BinaryExpression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitTypeAs(System.Linq.Expressions.Expression,System.Type)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitOfType(System.Linq.Expressions.Expression,System.Type,System.Type)">
            <exception cref="T:System.NotSupportedException">OfType supports only 'Entity' conversion.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.VisitSequence(System.Linq.Expressions.Expression)">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Translator.#ctor(Xtensive.Storage.Linq.TranslatorContext)">
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Storage.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.RemapScope.#ctor(Xtensive.Storage.Linq.RemapContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Xtensive.Storage.Linq.RemapScope.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Linq.RemapScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Linq.RemapScope.Context">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Linq.QueryableExtensions">
            <summary>
            Extends Linq methods for <see cref="N:Xtensive.Storage.Linq"/> query.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.Prefetch``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,Xtensive.Storage.Entity}})">
            <summary>
            Fetches <see cref="T:Xtensive.Storage.Entity"/>, specified in <paramref name="selector"/>.
            This <see cref="T:Xtensive.Storage.Entity"/> will be queried along with base query.
            </summary>
            <typeparam name="TSource">Type of source.</typeparam>
            <param name="source">Source query.</param>
            <param name="selector"><see cref="T:Xtensive.Storage.Entity"/> selector.</param>
            <returns>The similar query. Only difference is request to storage. It will contains expanded <see cref="T:Xtensive.Storage.Entity"/> too.</returns>
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> argument is null.</exception>
            <remarks>Overrides <see cref="P:Xtensive.Storage.FieldAttribute.LazyLoad"/> setting for specified fields.</remarks>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.Prefetch``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Linq.IQueryable}})">
            <summary>
            Prefetches subquery, specified in <paramref name="selector"/>.
            This subquery will be queried along with base query.
            </summary>
            <typeparam name="TSource">Type of source.</typeparam>
            <param name="source">Source query.</param>
            <param name="selector">Subquery selector.</param>
            <returns>The similar query. Only difference is request to storage. It will contains expanded subquery too.</returns>
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> argument is null.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.ExcludeFields``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Excludes field, specified in <paramref name="selector"/> in query. 
            </summary>
            <typeparam name="TSource">Type of source.</typeparam>
            <typeparam name="TKey">Type of field to exclude from query.</typeparam>
            <param name="source">Source query.</param>
            <param name="selector">Field selector.</param>
            <returns>The similar query. Only difference is request to storage. 
            It will not contains excluded field. This field will become <see cref="P:Xtensive.Storage.FieldAttribute.LazyLoad"/> field.</returns>
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> argument is null.</exception>
            <remarks>Overrides <see cref="P:Xtensive.Storage.FieldAttribute.LazyLoad"/> setting for specified field.</remarks>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.IncludeFields``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Includes field, specified in <paramref name="selector"/> in query. 
            </summary>
            <typeparam name="TSource">Type of source.</typeparam>
            <typeparam name="TKey">Type of field to include into query.</typeparam>
            <param name="source">Source query.</param>
            <param name="selector">Field selector.</param>
            <returns>The similar query. Only difference is request to storage. 
            It will contains included field. This field will become non-<see cref="P:Xtensive.Storage.FieldAttribute.LazyLoad"/> field.</returns>
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> argument is null.</exception>
            <remarks>Overrides <see cref="P:Xtensive.Storage.FieldAttribute.LazyLoad"/> setting for specified field.</remarks>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.JoinLeft``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys. 
            </summary>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outerKeySelector"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerKeySelector"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="resultSelector"/> argument is null.</exception>
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryableExtensions.CallTranslator``1(System.Reflection.MethodInfo,System.Linq.IQueryable,System.Linq.Expressions.Expression,System.String)">
            <exception cref="T:System.NotSupportedException">Queryable is not <see cref="N:Xtensive.Storage.Linq"/> query.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Materialization.ItemMaterializationContext.Materialize(System.Int32,System.Int32,Xtensive.Storage.Model.TypeInfo,Xtensive.Core.Pair{System.Int32}[],Xtensive.Core.Tuples.Tuple)">
            <exception cref="T:System.InvalidOperationException">Something went wrong.</exception>
        </member>
        <member name="T:Xtensive.Storage.TransactionScope">
            <summary>
            An implementation of <see cref="T:Xtensive.Integrity.Transactions.TransactionScope"/>
            suitable for storage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.TransactionScope.Transaction">
            <summary>
            Gets the transaction this scope controls.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.Builders.DomainBuilder">
            <summary>
            Utility class for <see cref="N:Xtensive.Storage"/> building.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.DomainBuilder.BuildDomain(Xtensive.Storage.Configuration.DomainConfiguration,Xtensive.Storage.Building.Builders.DomainBuilderConfiguration)">
            <summary>
            Builds the domain.
            </summary>
            <param name="configuration">The domain configuration.</param>
            <param name="builderConfiguration">The builder configuration.</param>
            <returns>Built domain.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.DomainBuilder.CreateHandlerFactory">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.DomainBuilder.SynchronizeSchema(Xtensive.Storage.Building.SchemaUpgradeMode)">
            <exception cref="T:Xtensive.Storage.SchemaSynchronizationException">Extracted schema is incompatible 
            with the target schema in specified <paramref name="schemaUpgradeMode"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>schemaUpgradeMode</c> is out of range.</exception>
        </member>
        <member name="T:Xtensive.Storage.TableMappingAttribute">
            <summary>
            Table mapping attribute.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.StorageAttribute">
            <summary>
            Base class for all storage-related attributes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TableMappingAttribute.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingName"><see cref="P:Xtensive.Storage.TableMappingAttribute.Name"/> property value.</param>
        </member>
        <member name="P:Xtensive.Storage.TableMappingAttribute.Name">
            <summary>
            Gets the base part of the field's related column name 
            or the base part of the class' related table name.
            </summary>
            <remarks>
            You can use the following characters in <see cref="P:Xtensive.Storage.TableMappingAttribute.Name"/>s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Storage.TableMappingAttribute.Name"/> can't be an empty string or <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:Xtensive.Storage.Building.Definitions.DomainModelDef">
            <summary>
            Represents a definition of <see cref="T:Xtensive.Storage.Domain"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.DomainModelDef.DefineType(System.Type)">
            <summary>
            Defines new <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> and adds it to <see cref="T:Xtensive.Storage.Building.Definitions.DomainModelDef"/> instance.
            </summary>
            <param name="type">The underlying type.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.DomainModelDef.DefineHierarchy(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Defines new <see cref="T:Xtensive.Storage.Building.Definitions.HierarchyDef"/> and adds it to the <see cref="T:Xtensive.Storage.Building.Definitions.DomainModelDef"/> instance.
            </summary>
            <param name="root">The <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> instance that will be the root of the hierarchy.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.Building.Definitions.HierarchyDef"/> instance.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.DomainModelDef.FindRoot(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Finds the root of inheritance hierarchy for the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search root for.</param>
            <returns><see name="TypeDef"/> instance that is root of specified <paramref name="item"/> or 
            <see langword="null"/> if the root is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.DomainModelDef.FindHierarchy(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Finds the hierarchy.
            </summary>
            <param name="item">The type to search hierarchy for.</param>
            <returns><see cref="T:Xtensive.Storage.Building.Definitions.HierarchyDef"/> instance or <see langword="null"/> if hierarchy is not found.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.DomainModelDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Building.Definitions.DomainModelDef"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.DomainModelDef.Types">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> instances contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.DomainModelDef.Hierarchies">
            <summary>
            Gets the collection of <see cref="T:Xtensive.Storage.Building.Definitions.HierarchyDef"/> instances contained in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Session">
            <summary>
            Data context, which all persistent objects are bound to.
            </summary>
            <remarks>
            <para>
            Each session has its own connection to database and set of materialized persistent instates.
            It contains identity map and tracks changes in bound persistent classes.
            </para>
            <para>
            <c>Session</c> implements <see cref="T:Xtensive.Core.IContext"/> interface, it means that each <c>Session</c>
            can be either active or not active in particular thread (see <see cref="P:Xtensive.Storage.Session.IsActive"/> property).
            Each thread can contain only one active session, it can be a accessed via 
            <see cref="P:Xtensive.Storage.Session.Current">Session.Current</see> property or <see cref="M:Xtensive.Storage.Session.Demand">Session.Demand()</see> method.
            </para>
            <para>
            Session can be open and activated by <see cref="!:Domain.OpenSession()">Domain.OpenSession()</see> method. 
            Existing session can be activated by <see cref="M:Xtensive.Storage.Session.Activate"/> method.
            </para>
            </remarks>
            <example>
            <code source="..\..\Xtensive.Storage\Xtensive.Storage.Manual\DomainAndSessionSample.cs" region="Session sample"></code>
            </example>
            <seealso cref="T:Xtensive.Storage.Domain"/>
            <seealso cref="T:Xtensive.Storage.SessionBound"/>
        </member>
        <member name="T:Xtensive.Storage.DomainBound">
            <summary>
            Base class for all objects that are bound to the <see cref="P:Xtensive.Storage.DomainBound.Domain"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.DomainBound.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.DomainBound.#ctor(Xtensive.Storage.Domain)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="domain"><see cref="T:Xtensive.Storage.Domain"/>, to which current instance 
            is bound.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domain"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Storage.DomainBound.Domain">
            <summary>
            Gets <see cref="P:Xtensive.Storage.DomainBound.Domain"/> to which current instance is bound.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.DomainBound.Xtensive#Core#IContextBound{Xtensive#Storage#Domain}#Context">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.Xtensive#Core#IResource#AddConsumer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.Xtensive#Core#IResource#RemoveConsumer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Session"/>, 
            or throws <see cref="T:System.InvalidOperationException"/>, 
            if active <see cref="T:Xtensive.Storage.Session"/> is not found.
            </summary>
            <returns>Current session.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Session.Current"/> <see cref="T:Xtensive.Storage.Session"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Session.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.Xtensive#Core#IContext#Activate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.EnsureNotDisposed">
            <summary>
            Ensures the object is not disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object is already disposed.</exception>
        </member>
        <member name="M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain)">
            <summary>
            Opens and activates new <see cref="T:Xtensive.Storage.Session"/> with default <see cref="T:Xtensive.Storage.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <returns>
            New <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> object.
            </returns>
            <remarks>
            Session will be closed when returned <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> is disposed.
            </remarks>
            <sample><code>
            using (Session.Open(domain)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code></sample>
            <seealso cref="T:Xtensive.Storage.Session"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain,Xtensive.Storage.Configuration.SessionType)" -->
        <!-- Badly formed XML comment ignored for member "M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain,Xtensive.Storage.Configuration.SessionType,System.Boolean)" -->
        <member name="M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain,Xtensive.Storage.Configuration.SessionConfiguration)">
            <summary>
            Opens and activates new <see cref="T:Xtensive.Storage.Session"/> with specified <see cref="T:Xtensive.Storage.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <param name="configuration">The session configuration.</param>
            <returns>
            New <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> object.
            </returns>
            <remarks>
            Session will be closed when returned <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> is disposed.
            </remarks>
            <sample><code>
            using (Session.Open(domain, sessionConfiguration)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code></sample>
            <seealso cref="T:Xtensive.Storage.Session"/>
        </member>
        <member name="M:Xtensive.Storage.Session.Open(Xtensive.Storage.Domain,Xtensive.Storage.Configuration.SessionConfiguration,System.Boolean)">
            <summary>
            Opens new <see cref="T:Xtensive.Storage.Session"/> with specified <see cref="T:Xtensive.Storage.Configuration.SessionConfiguration"/>.
            </summary>
            <param name="domain">The domain.</param>
            <param name="configuration">The session configuration.</param>
            <param name="activate">Determines whether created session should be activated or not.</param>
            <returns>
            New <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> object.
            </returns>
            <remarks>
            Session will be closed when returned <see cref="T:Xtensive.Storage.SessionConsumptionScope"/> is disposed.
            </remarks>
            <sample><code>
            using (Session.Open(domain, sessionConfiguration, false)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code></sample>
            <seealso cref="T:Xtensive.Storage.Session"/>
        </member>
        <member name="M:Xtensive.Storage.Session.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Session.Dispose">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Session.Finalize">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Dtor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Session.UpdateEntityState(Xtensive.Storage.Key,Xtensive.Core.Tuples.Tuple)">
            <exception cref="T:System.InvalidOperationException">
            Attempt to associate non-null <paramref name="tuple"/> with <paramref name="key"/> of unknown type.
            </exception>
        </member>
        <member name="M:Xtensive.Storage.Session.CommitAmbientTransaction">
            <summary>
            Commits the ambient transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Session.RollbackAmbientTransaction">
            <summary>
            Rolls back the ambient transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Session.Persist">
            <summary>
            Persists all modified instances immediately.
            </summary>
            <remarks>
            <para>
            This method should be called to ensure that all delayed
            updates are flushed to the storage. 
            </para>
            <para>
            Note, that this method is called automatically when it's necessary,
            e.g. before beginning, committing and rolling back a transaction, performing a
            query and so further. So generally you should not worry
            about calling this method.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
        </member>
        <member name="P:Xtensive.Storage.Session.Configuration">
            <summary>
            Gets the configuration of the <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.Name">
            <summary>
            Gets the name of the <see cref="T:Xtensive.Storage.Session"/>
            (useful mainly for debugging purposes - e.g. it is used in logs).
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.IsDebugEventLoggingEnabled">
            <summary>
            Indicates whether debug event logging is enabled.
            Caches <see cref="!:Log.IsLogged"/> method result for <see cref="F:Xtensive.Core.Diagnostics.LogEventTypes.Debug"/> event.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.IsPersisting">
            <summary>
            Gets a value indicating whether <see cref="M:Xtensive.Storage.Session.Persist"/> method is running.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.IsSystemLogicOnly">
            <summary>
            Gets or sets a value indicating whether only a system logic is enabled.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.Resolver">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Storage.Session.Current"/> session resolver to use
            when there is no active <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <remarks>
            The setter of this property can be invoked just once per application lifetime; 
            assigned resolver can not be changed.
            </remarks>
            <exception cref="T:System.NotSupportedException">Resolver is already assigned.</exception>
        </member>
        <member name="P:Xtensive.Storage.Session.Services">
            <summary>
            Gets the session service provider.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.Xtensive#Core#IResource#HasConsumers">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Session.Current">
            <summary>
            Gets the current active <see cref="T:Xtensive.Storage.Session"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.IsActive">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Session.Extensions">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Session.ValidationContext">
            <summary>
            Gets the current validation context.
            </summary>
            <exception cref="T:System.InvalidOperationException">Can not get validation context: There is no active transaction.</exception>
        </member>
        <member name="P:Xtensive.Storage.Session.AtomicityContext">
            <summary>
            Gets the atomicity context.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.Transaction">
            <summary>
            Gets the active transaction.
            </summary>    
        </member>
        <member name="E:Xtensive.Storage.Session.TransactionOpen">
            <summary>
            Occurs on <see cref="P:Xtensive.Storage.Session.Transaction"/> opening.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.TransactionCommitting">
            <summary>
            Occurs when <see cref="P:Xtensive.Storage.Session.Transaction"/> is about to be committed.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.TransactionCommitted">
            <summary>
            Occurs when <see cref="P:Xtensive.Storage.Session.Transaction"/> is committed.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.TransactionRollbacking">
            <summary>
            Occurs when <see cref="P:Xtensive.Storage.Session.Transaction"/> is about to be rolled back.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.TransactionRollbacked">
            <summary>
            Occurs when <see cref="P:Xtensive.Storage.Session.Transaction"/> is rolled back.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnDisposing">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Session"/> is about to <see cref="M:Xtensive.Storage.Session.Dispose"/>.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnPersisting">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Session"/> is about to <see cref="M:Xtensive.Storage.Session.Persist"/>.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnPersist">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Session"/> persisted.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnCreateEntity">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Entity"/> created.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnRemovingEntity">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Entity"/> is about to remove.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Session.OnRemoveEntity">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Entity"/> removed.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Session.EntityEventBroker">
            <summary>
            The manager of <see cref="T:Xtensive.Storage.Entity"/>'s events.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.NameBuilder">
            <summary>
            Name builder for <see cref="T:Xtensive.Storage.Model.DomainModel"/> nodes 
            Provides names according to a set of naming rules contained in
            <see cref="P:Xtensive.Storage.Providers.NameBuilder.NamingConvention"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTypeName(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> object.
            </summary>
            <param name="type">The <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTableName(Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Build table name by index.
            </summary>
            <param name="indexInfo">Index to build table name for.</param>
            <returns>Table name</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTableColumnName(Xtensive.Storage.Model.ColumnInfo)">
            <summary>
            Build table column name by <see cref="T:Xtensive.Storage.Model.ColumnInfo"/>.
            </summary>
            <param name="columnInfo"><see cref="T:Xtensive.Storage.Model.ColumnInfo"/> to build column table name for.</param>
            <returns>Column name</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildForeignKeyName(Xtensive.Storage.Model.AssociationInfo,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Builds foreign key name by association.
            </summary>
            <returns>Foreign key name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildForeignKeyName(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Builds foreign key name for in-hierarchy primary key references.
            </summary>
            <returns>Foreign key name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildFieldName(Xtensive.Storage.Building.Definitions.FieldDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Building.Definitions.FieldDef"/> object.
            </summary>
            <param name="field">The <see cref="T:Xtensive.Storage.Building.Definitions.FieldDef"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildExplicitFieldName(Xtensive.Storage.Model.TypeInfo,System.String)">
            <summary>
            Builds the name of the explicitly implemented member.
            </summary>
            <param name="type">The type of interface explicit member implements.</param>
            <param name="name">The member name.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildNestedFieldName(Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Builds the full name of the <paramref name="childField"/>.
            </summary>
            <param name="complexField">The complex field.</param>
            <param name="childField">The child field.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildMappingName(Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Builds the <see cref="P:Xtensive.Storage.Model.MappingNode.MappingName"/>.
            </summary>
            <param name="complexField">The complex field.</param>
            <param name="childField">The child field.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildColumnName(Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Model.ColumnInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> object.
            </summary>
            <param name="field">The field info.</param>
            <param name="baseColumn">The <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildColumnName(Xtensive.Storage.Model.ColumnInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> object concatenating <see cref="!:TypeInfo.Name"/> with original column name.
            </summary>
            <param name="column">The <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildIndexName(Xtensive.Storage.Building.Definitions.TypeDef,Xtensive.Storage.Building.Definitions.IndexDef)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Building.Definitions.IndexDef"/> object.
            </summary>
            <param name="type">The type def.</param>
            <param name="index">The <see cref="T:Xtensive.Storage.Building.Definitions.IndexDef"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildIndexName(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Gets the name for <see cref="T:Xtensive.Storage.Building.Definitions.IndexDef"/> object.
            </summary>
            <param name="type">The type def.</param>
            <param name="index">The <see cref="T:Xtensive.Storage.Model.IndexInfo"/> object.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildAssociationName(Xtensive.Storage.Model.AssociationInfo)">
            <summary>
            Builds the name for the <see cref="T:Xtensive.Storage.Model.AssociationInfo"/>.
            </summary>
            <param name="target">The <see cref="T:Xtensive.Storage.Model.AssociationInfo"/> instance to build name for.</param>
            <returns>The built name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildGeneratorName(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            Builds the name for the <see cref="!:generatorInfo"/> instance.
            </summary>
            <param name="generatorInfo">The <see cref="!:generatorInfo"/> instance to build name for.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.ApplyNamingRules(System.String)">
            <summary>
            Applies current naming convention to the specified <paramref name="name"/>.
            </summary>
            <param name="name">Name to apply the convention to.</param>
            <returns>Processed name satisfying naming convention.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.GetHash(System.String)">
            <summary>
            Computes the hash for the specified <paramref name="name"/>.
            The length of the resulting hash is 8 characters.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.NameBuilder.Initialize(Xtensive.Storage.Configuration.NamingConvention)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Initialize" copy="true"/>
            </summary>
            <param name="namingConvention">The naming convention.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.NameBuilder.MaxIdentifierLength">
            <summary>
            Gets the maximum length of storage entity identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.NameBuilder.TypeIdColumnName">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.Entity.TypeId"/> column name.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.NameBuilder.NamingConvention">
            <summary>
            Gets the naming convention object.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.HandlerAccessor">
            <summary>
            Storage handler accessor.
            Provided by protected members, such as <see cref="P:Xtensive.Storage.Providers.HandlerBase.Handlers"/> 
            to provide access to other available handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerAccessor.Domain">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Domain"/> 
            this handler accessor is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerAccessor.HandlerFactory">
            <summary>
            Gets the handler provider 
            creating handlers in the <see cref="P:Xtensive.Storage.Providers.HandlerAccessor.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerAccessor.NameBuilder">
            <summary>
            Gets the name builder.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerAccessor.DomainHandler">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.Providers.HandlerAccessor.Domain"/> handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.HandlerAccessor.SessionHandler">
            <summary>
            Gets the handler of the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement">
            <summary>
            Type registration element within a configuration file.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.ConfigurationCollectionElementBase">
            <summary>
            Abstract base class for a configuration element within a configuration file
            that is nested to a collection of similar ones.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.ConfigurationCollectionElementBase.Identifier">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Core.Collections.TypeRegistration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Type">
            <summary>
            Gets or sets the name of the type to register.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Assembly">
            <summary>
            Gets or sets the assembly where types to register are located.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Namespace">
            <summary>
            Gets or sets the namespace withing the <see cref="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Assembly"/>, 
            where types to register are located.
            If <see langword="null"/> or <see cref="F:System.String.Empty"/>, 
            all the persistent types from the <see cref="P:Xtensive.Storage.Configuration.Elements.TypeRegistrationElement.Assembly"/> will be registered.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement">
            <summary>
            Namespace synonym configuration element within a configuration file.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement.Namespace">
            <summary>
            Gets or sets the namespace the <see cref="P:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement.Synonym"/> is defined for.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement.Synonym">
            <summary>
            Gets or sets the synonym for the <see cref="P:Xtensive.Storage.Configuration.Elements.NamespaceSynonymElement.Namespace"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.MaterializedViewAttribute">
            <summary>
            Indicates that materialized view should be created for
            the interface type it is applied on.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.SessionHandler">
            <summary>
            Base <see cref="P:Xtensive.Storage.Providers.SessionHandler.Session"/> handler class.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Persist(Xtensive.Storage.Internals.EntityChangeRegistry,System.Boolean)">
            <summary>
            Persists changed entities.
            </summary>
            <param name="registry">The registry.</param>
            <param name="dirtyFlush">if set to <see langword="true"/> dirty flush is allowed.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Storage.Internals.PersistAction},System.Boolean)">
            <summary>
            Persists changed entities.
            </summary>
            <param name="persistActions">The entity states and the corresponding actions.</param>
            <param name="dirty">if set to <see langword="true"/> dirty flush is allowed.</param>
        </member>
        <member name="F:Xtensive.Storage.Providers.SessionHandler.ConnectionSyncRoot">
            <summary>
            The <see cref="T:System.Object"/> to synchronize access to a connection.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Providers.SessionHandler.IsAutoshortenTransactionActivated">
            <summary>
            Determines whether an auto-shortened transaction is activated.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.BeginTransaction">
            <summary>
            Opens the transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>    
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.RollbackTransaction">
            <summary>
            Rollbacks the transaction.
            </summary>    
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.AcquireConnectionLock">
            <summary>
            Acquires the connection lock.
            </summary>
            <returns>An implementation of <see cref="T:System.IDisposable"/> which should be disposed 
            to release the connection lock.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Execute(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
            <summary>
            Executes the specified compiled RSE query.
            This method is used only for non-index storages.
            </summary>
            <param name="provider">The provider to execute.</param>
            <returns>Result of query execution.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.Execute(System.Collections.Generic.IList{Xtensive.Storage.Internals.QueryTask},System.Boolean)">
            <summary>
            Executes the specified query tasks.
            </summary>
            <param name="queryTasks">The query tasks to execute.</param>
            <param name="dirty">if set to <see langword="true"/> dirty execution is allowed.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.FetchInstance(Xtensive.Storage.Key)">
            <summary>
            Fetches an <see cref="T:Xtensive.Storage.EntityState"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The key of fetched <see cref="T:Xtensive.Storage.EntityState"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.SessionHandler.FetchField(Xtensive.Storage.Key,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Fetches the field of an <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="field">The field to be fetched.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.SessionHandler.Session">
            <summary>
            Gets the current <see cref="P:Xtensive.Storage.Providers.SessionHandler.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.SessionHandler.DefaultIsolationLevel">
            <summary>
             Gets the specified <see cref="T:System.Transactions.IsolationLevel"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.SessionHandler.Provider">
            <summary>
            Gets the query provider.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradingDomainBuilder">
            <summary>
            Builds domain in extended modes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradingDomainBuilder.Build(Xtensive.Storage.Configuration.DomainConfiguration)">
            <summary>
            Builds the new <see cref="T:Xtensive.Storage.Domain"/> by the specified configuration.
            </summary>
            <param name="configuration">The domain configuration.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.Domain"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="configuration"/> is null.</exception>
            <exception cref="T:Xtensive.Storage.DomainBuilderException">At least one error have been occurred 
            during storage building process.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>configuration.UpgradeMode</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradingDomainBuilder.BuildStageDomain(Xtensive.Storage.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>context.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradingDomainBuilder.BuildUpgradeHandlers">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">More then one enabled handler is provided for some assembly.</exception>
        </member>
        <member name="T:Xtensive.Storage.TupleEnumerableExtensions">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xtensive.Storage.TupleEnumerableExtensions.AsTupleEnumerable``1(System.Collections.Generic.IEnumerable{``0})" -->
        <member name="T:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration">
            <summary>
            Additional domain build process configuration 
            used by <see cref="T:Xtensive.Storage.Building.Builders.DomainBuilder"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.#ctor(Xtensive.Storage.Building.SchemaUpgradeMode,Xtensive.Storage.ModuleProvider)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="schemaUpgradeMode">The schema upgrade mode.</param>
            <param name="modules">The collection of modules.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.SchemaUpgradeMode">
            <summary>
            Gets or sets the schema upgrade mode.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.TypeFilter">
            <summary>
            Gets or sets the type filter.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.FieldFilter">
            <summary>
            Gets or sets the property filter.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.SchemaReadyHandler">
            <summary>
            Gets or sets the "schema ready" handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.UpgradeActionsReadyHandler">
            <summary>
            Gets or sets the "upgrade actions ready" handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.UpgradeHandler">
            <summary>
            Gets or sets the upgrade handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.TypeIdProvider">
            <summary>
            Gets or sets the type id provider.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Builders.DomainBuilderConfiguration.Modules">
            <summary>
            Gets or sets the collection of extension modules.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Query`1">
            <summary>
            Provides <see cref="T:System.Linq.IQueryable`1"/> queries for 
            <see cref="T:Xtensive.Storage.IEntity"/> implementors and <see cref="T:Xtensive.Storage.Entity"/> descendants.
            </summary>
            <typeparam name="T">The type of the content item of the data source. Must be assignable to 
            <see cref="T:Xtensive.Storage.Entity"/> or <see cref="T:Xtensive.Storage.IEntity"/> type.
            </typeparam>
        </member>
        <member name="M:Xtensive.Storage.Query`1.Single(Xtensive.Storage.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Query`1.Single(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="keyValues"/> identify.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Query`1.SingleOrDefault(Xtensive.Storage.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Query`1.SingleOrDefault(System.Object[])">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="keyValues"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="keyValues">Key values.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="keyValues"/> identify.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Query`1.GetKeyByValues(System.Object[])">
            <exception cref="T:System.ArgumentException"><paramref name="keyValues"/> array is empty.</exception>
        </member>
        <member name="P:Xtensive.Storage.Query`1.All">
            <summary>
            The "starting point" for any LINQ query -
            a <see cref="T:System.Linq.IQueryable`1"/> enumerating all the instances
            of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Persistent">
            <summary>
            Base class for all persistent classes.
            </summary>
            <seealso cref="T:Xtensive.Storage.Entity"/>
            <seealso cref="T:Xtensive.Storage.Structure"/>
        </member>
        <member name="T:Xtensive.Storage.SessionBound">
            <summary>
            Base class for all objects that are bound to the <see cref="P:Xtensive.Storage.SessionBound.Session"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SessionBound.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SessionBound.#ctor(Xtensive.Storage.Session)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/> 
            </summary>
            <param name="session"><see cref="T:Xtensive.Storage.Session"/>, to which current instance 
            is bound.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Xtensive.Storage.SessionBound.Session">
            <summary>
            Gets <see cref="P:Xtensive.Storage.SessionBound.Session"/> which current instance is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.SessionBound.CoreServices">
            <summary>
            Gets the core services accessor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Caller is not registered in <see cref="T:Xtensive.Storage.Model.DomainModel"/> of the 
            <see cref="T:Xtensive.Storage.Domain"/> this instance belongs to.</exception>
        </member>
        <member name="M:Xtensive.Storage.Persistent.GetProperty``1(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <returns>Property value.</returns>
            <remarks>
            Method calls property getter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Storage.Persistent.GetFieldValue``1(System.String)"/> directly if there is no property declared for this field.
            </remarks>
            <seealso cref="M:Xtensive.Storage.Persistent.SetProperty``1(System.String,``0)"/>
        </member>
        <member name="M:Xtensive.Storage.Persistent.SetProperty``1(System.String,``0)">
            <summary>
            Sets the property value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <param name="value">The value to set.</param>
            <remarks>
            Method calls property setter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Storage.Persistent.SetFieldValue``1(System.String,``0)"/> directly if there is no property declared for this field.
            </remarks>
            <seealso cref="M:Xtensive.Storage.Persistent.GetProperty``1(System.String)"/>
        </member>
        <member name="M:Xtensive.Storage.Persistent.GetFieldValue``1(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="fieldName">The field name.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Storage.Persistent.GetFieldValue``1(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="field">The field.</param>
            <returns>Field value.</returns>
        </member>
        <member name="M:Xtensive.Storage.Persistent.GetReferenceKey(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
            <remarks>
            Result is the same as <c>GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
            <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Storage.Entity"/> descendant.</param>
            <returns>Referenced entity key.</returns>
            <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
        </member>
        <member name="M:Xtensive.Storage.Persistent.SetFieldValue``1(System.String,``0)">
            <summary>
            Sets the field value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="fieldName">The field name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Storage.Persistent.SetFieldValue``1(Xtensive.Storage.Model.FieldInfo,``0)">
            <summary>
            Sets the field value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="field">The field.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Storage.Persistent.OnGettingFieldValue(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Called before field value is about to be read.
            </summary>
            <remarks>
            Override it to perform some actions before reading field value, e.g. to check access permissions.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Persistent.OnGetFieldValue(Xtensive.Storage.Model.FieldInfo,System.Object)">
            <summary>
            Called when field value has been read.
            </summary>
            <remarks>
            Override it to perform some actions when field value has been read, e.g. for logging purposes.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Persistent.OnSettingFieldValue(Xtensive.Storage.Model.FieldInfo,System.Object)">
            <summary>
            Called before field value is about to be changed.
            </summary>
            <remarks>
            Override it to perform some actions before changing field value, e.g. to check access permissions.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Persistent.OnSetFieldValue(Xtensive.Storage.Model.FieldInfo,System.Object,System.Object)">
            <summary>
            Called when field value has been changed.
            </summary>
            <remarks>
            Override it to perform some actions when field value has been changed, e.g. for logging purposes.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Persistent.OnValidate">
            <summary>
            Called when entity should be validated.
            </summary>
            <remarks>
            Override this method to perform custom object validation.
            </remarks>
            <example>
            <code>
            public override void OnValidate()
            {
              base.OnValidate();
              if (Age &lt;= 0) 
                throw new Exception("Age should be positive.");
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Storage.Persistent.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Persistent.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Persistent.Xtensive#Integrity#Validation#IValidationAware#OnValidate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Persistent.Initialize(System.Type)">
            <summary>
            Initializes this instance.
            </summary>
            <remarks>
            This method is called when custom constructor is finished.
            </remarks>
            <param name="ctorType">Type of the instance that is being constructed.</param>
        </member>
        <member name="P:Xtensive.Storage.Persistent.Type">
            <summary>
            Gets the type of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Persistent.Tuple">
            <summary>
            Gets the underlying tuple.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Persistent.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Persistent.Item(System.String)">
            <summary>
            Gets or sets the value of the field with specified name.
            </summary>
            <value>Field value.</value>
        </member>
        <member name="P:Xtensive.Storage.Persistent.CanBeValidated">
            <summary>
            Gets a value indicating whether validation can be performed for this entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Persistent.Xtensive#Core#IContextBound{Xtensive#Integrity#Validation#ValidationContextBase}#Context">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.ReprocessableException">
            <summary>
            Base class for any storage-level error,
            that can be recovered by rolling back active transaction
            and reprocessing all actions in a new one.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.StorageException">
            <summary>
            Base class for any storage-level exception.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.StorageException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Storage.StorageException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Xtensive.Storage.ReprocessableException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xtensive.Storage.ReprocessableException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradeStage">
            <summary>
            Upgrade stages enumeration.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Upgrade.UpgradeStage.Validation">
            <summary>
            The very fist upgrade stage.
            Only system types are visible;
            schema isn't upgraded, but only checked for compatibility with
            the model containing system types only (<see cref="F:Xtensive.Storage.Building.SchemaUpgradeMode.ValidateCompatible"/>).
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Upgrade.UpgradeStage.Upgrading">
            <summary>
            The second upgrade stage.
            All the types are visible, including upgrade-only types;
            schema is upgraded; 
            <see cref="M:Xtensive.Storage.Upgrade.IUpgradeHandler.OnStage"/> events are raised at the beginning of this stage;
            <see cref="M:Xtensive.Storage.Upgrade.UpgradeHandler.OnUpgrade"/> events are raised at the end of this stage.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Upgrade.UpgradeStage.Final">
            <summary>
            The final upgrade stage.
            Only runtime types are visible; upgrade-only types are invisible;
            schema is upgraded once more (upgrade-only types are removed); 
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Linq.Expressions.ParameterizedExpression.CanRemap">
            <summary>
            Check if <see cref="T:Xtensive.Storage.Linq.Expressions.ParameterizedExpression"/> can be remapped 
            according to current <see cref="T:Xtensive.Storage.Linq.RemapContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Linq.Expressions.SubQueryExpression.Mapping">
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
        </member>
        <member name="T:Xtensive.Storage.ForeignKeyMode">
            <summary>
            Enumerates possible foreign key build modes for <see cref="T:Xtensive.Storage.Domain"/>.
            <seealso cref="T:Xtensive.Storage.Domain"/>
            <seealso cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.ForeignKeyMode.Default">
            <summary>
            Default foreign key mode. Equlas to <see cref="F:Xtensive.Storage.ForeignKeyMode.All"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.ForeignKeyMode.None">
            <summary>
            No foreign keys will be built for storage.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.ForeignKeyMode.Hierarchy">
            <summary>
            Foreign keys for hierarchy inheritance will be built.
            <see cref="F:Xtensive.Storage.ForeignKeyMode.Hierarchy"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.ForeignKeyMode.Reference">
            <summary>
            Foreign keys for <see cref="T:Xtensive.Storage.Entity"/> references will be built. 
            <seealso cref="T:Xtensive.Storage.EntitySet`1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.ForeignKeyMode.All">
            <summary>
            All foreign keys (<see cref="F:Xtensive.Storage.ForeignKeyMode.Hierarchy"/> and <see cref="F:Xtensive.Storage.ForeignKeyMode.Reference"/>) will be built for storage.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.AssociationAttribute">
            <summary>
            Provides additional properties to association. 
            This attribute can be specified for <see cref="T:Xtensive.Storage.Entity"/> or <see cref="T:Xtensive.Storage.EntitySet`1"/> field only.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.AssociationAttribute.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.AssociationAttribute.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="pairTo">The pair to.</param>
        </member>
        <member name="P:Xtensive.Storage.AssociationAttribute.OnTargetRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> action that will be executed in case that 
            target (referenced) Entity is about to be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.AssociationAttribute.OnOwnerRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> action that will be executed in case that 
            owner Entity (the owner of the reference field) is about to be removed.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.AssociationAttribute.PairTo">
            <summary>
            Indicates that persistent collection or persistent field
            is a paired property with another collection or reference field.
            </summary>
            <remarks>
            <para>
            When reference field is paired to another reference field, their value is automatically synchronized.
            </para>
            <para>
            When collection is paired to reference field (One-to-Many association), 
            it does not allocate any space in the database and all operations on this EntitySet are 
            automatically synchronized to paired reference field.
            </para>
            <para>
            When collection is paired to another collection (Many-to-Many) association, auxiliary table
            will be automatically created to support this association.
            </para>
            </remarks>
            <example>In the following example User entity has three associations of different types.
            <code>
            public class User : Entity
            {
              ...
              
              // One-to-one association with "User" propery of "Account" class.
              [Association, Association(PairTo = "User")]
              public Account Account { get; private set; }
              
              // One-to-many association
              [Association, Association(PairTo = "Author")]
              public EntitySet&lt;BlogPost&gt; BlogPostss { get; private set; }
              
              // Many-to-many association
              [Association, Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code>
            </example>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradeScope">
            <summary>
            The scope for <see cref="T:Xtensive.Storage.Upgrade.UpgradeContext"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeScope.#ctor(Xtensive.Storage.Upgrade.UpgradeContext)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.ProviderAttribute">
            <summary>
            An attribute that must be applied to <see cref="T:Xtensive.Storage.Providers.HandlerFactory"/>
            to make it available for the storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.ProviderAttribute.Equals(Xtensive.Storage.Providers.ProviderAttribute)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.ProviderAttribute.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.ProviderAttribute.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.ProviderAttribute.Protocol">
            <summary>
            Gets or sets the protocol the provider is responsible for.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.ProviderAttribute.Description">
            <summary>
            Gets or sets the description of the provider.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.IndexInfoExtensions">
            <summary>
            <see cref="T:Xtensive.Storage.Model.IndexInfo"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.IndexInfoExtensions.ToRecordSet(Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.RecordSet"/> allowing to query the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index to create the <see cref="T:Xtensive.Storage.Rse.RecordSet"/> for.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSet"/> object.</returns>
        </member>
        <member name="T:Xtensive.Storage.Providers.EnumerationScope">
            <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope"/> 
            suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.EnumerationScope.#ctor(Xtensive.Storage.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.CompilationContext">
            <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext"/> suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.CompilationContext.CreateEnumerationContext">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.CompilationContext.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPostCompiler})">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Internals.FutureBase`1">
            <summary>
            Base class for a future implementation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.Internals.FutureBase`1.Materialize">
            <summary>
            Materializes a result.
            </summary>
            <returns>The materialized result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Internals.FutureBase`1.#ctor(Xtensive.Storage.Linq.TranslatedQuery{`0},Xtensive.Core.Parameters.ParameterContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="translatedQuery">The translated query.</param>
            <param name="parameterContext">The parameter context.</param>
        </member>
        <member name="P:Xtensive.Storage.Internals.FutureBase`1.Task">
            <summary>
            Gets the task for this future.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Serialization.EntityReference">
            <summary>
            Object to be serialized instead of <see cref="T:Xtensive.Storage.Entity"/> when serialization <see cref="F:Xtensive.Storage.Serialization.SerializationKind.ByReference"/> is used.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Internals.QueryCachingScope.ParameterizedQuery">
            <exception cref="T:System.NotSupportedException">Second attempt to set this property.</exception>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Upgrade.Log.Name">
            <summary>
            Gets the name of this log.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.ModuleProvider">
            <summary>
            Provides access to extension modules.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.ModuleProvider.Get(System.Type)">
            <summary>
            Gets instance of a module's type.
            </summary>
            <param name="type">The type of a module.</param>
            <returns>The instance of module's type or <see langword="null" /> 
            if <paramref name="type"/> is not registered.</returns>
        </member>
        <member name="M:Xtensive.Storage.ModuleProvider.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.ModuleProvider.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.ModuleProvider.UpgradeHandlers">
            <summary>
            Gets instances of all extension modules which implement <see cref="T:Xtensive.Storage.Upgrade.IUpgradeHandler"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.Expressions.MarkerExpression.#ctor(System.Linq.Expressions.Expression,Xtensive.Storage.Linq.Expressions.MarkerType)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Linq.ParameterExtractor">
            <summary>
            Expression visitor that determines whether <see cref="T:System.Linq.Expressions.Expression"/> could be parameter.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.ParameterExtractor.IsParameter(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified <paramref name="e"/> is parameter.
            </summary>
            <param name="e">The expression.</param>
            <returns>
              <see langword="true" /> if the specified <paramref name="e"/> is parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Linq.ParameterExtractor.ExtractParameter``1(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the parameter.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Xtensive.Storage.Linq.ParameterExtractor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.ParameterExtractor.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.ParameterExtractor.#ctor(Xtensive.Storage.Linq.ExpressionEvaluator)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.KeyFieldAccessor`1.GetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.KeyFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.PersistenceState">
            <summary>
            Defines possible persistence states of the entities.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.PersistenceState.Synchronized">
            <summary>
            The entity is synchronized with the database (there are no unsaved changes).
            </summary>
        </member>
        <member name="F:Xtensive.Storage.PersistenceState.New">
            <summary>
            The entity is created, but not persisted yet.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.PersistenceState.Modified">
            <summary>
            The entity presents in database, but has some unpersisted changes.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.PersistenceState.Removed">
            <summary>
            The entity is marked as removed, but is not removed from database yet.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Entity">
            <summary>
            Base class for all entities in a model.
            </summary>
            <remarks>
            <para>
            <see cref="T:Xtensive.Storage.Entity"/> class encapsulates infrastructure to store persistent transactional data.
            It has <see cref="P:Xtensive.Storage.Entity.Key"/> property that uniquely identifies the instance within its <see cref="T:Xtensive.Storage.Session"/>.
            </para>
            <para>All entities in a model should be inherited from this class.
            </para>
            </remarks>
            <example>
            <code>
            [HierarchyRoot]
            public class Customer : Entity
            {
              [Field, Key]
              public int Id { get; set; }
              
              [Field]
              public string Name { get; set; }
            }
            </code>
            </example>
            <seealso cref="T:Xtensive.Storage.Structure">Structure class</seealso>
            <seealso cref="T:Xtensive.Storage.EntitySet`1"><c>EntitySet</c> class</seealso>
        </member>
        <member name="T:Xtensive.Storage.IEntity">
            <summary>
            Should be implemented by any persistent entity.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.IEntity.Remove">
            <summary>
            Removes the instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IEntity.Key">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.IEntity.Key"/> of the <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IEntity.PersistenceState">
            <summary>
            Gets persistence state of the entity.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Entity.Remove">
            <summary>
            Removes this entity.
            </summary>
            <exception cref="T:Xtensive.Storage.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Storage.OnRemoveAction.Deny"/> on-remove action.</exception>
            <seealso cref="P:Xtensive.Storage.Entity.IsRemoved"/>
        </member>
        <member name="M:Xtensive.Storage.Entity.Lock(Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
            <summary>
            Locks this instance in the storage.
            </summary>
            <param name="lockMode">The lock mode.</param>
            <param name="lockBehavior">The lock behavior.</param>
        </member>
        <member name="M:Xtensive.Storage.Entity.OnRemoving">
            <summary>
            Called when entity is about to be removed.
            </summary>
            <remarks>
            Override it to perform some actions when entity is about to be removed.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Entity.OnRemove">
            <summary>
            Called when entity becomes removed.
            </summary>
            <remarks>
            Override this method to perform some actions when entity is removed.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Entity.EnsureNotRemoved">
            <exception cref="T:System.InvalidOperationException">Entity is removed.</exception>
        </member>
        <member name="M:Xtensive.Storage.Entity.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Entity.#ctor(System.Object[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="values">The field values that will be used for key building.</param>
            <remarks>Use this kind of constructor when you need to explicitly set key for this instance.</remarks>
            <example>
            <code>
            [HierarchyRoot]
            public class Book : Entity
            {
              [Field, KeyField]
              public string ISBN { get; set; }
              
              public Book(string isbn) : base(isbn) { }
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Storage.Entity.#ctor(Xtensive.Storage.EntityState)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.#ctor" copy="true"/>
            </summary>
            <param name="state">The initial state of this instance fetched from storage.</param>
        </member>
        <member name="M:Xtensive.Storage.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.Entity.TypeId">
            <exception cref="T:System.Exception">Property is already initialized.</exception>
        </member>
        <member name="P:Xtensive.Storage.Entity.Key">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.Entity.Key"/> that identifies this entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Entity.IsRemoved">
            <summary>
            Gets a value indicating whether this entity is removed.
            </summary>
            <seealso cref="M:Xtensive.Storage.Entity.Remove"/>
        </member>
        <member name="P:Xtensive.Storage.Entity.Type">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Entity.Tuple">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Entity.PersistenceState">
            <summary>
            Gets persistence state of the entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Entity.Xtensive#Core#IIdentified{Xtensive#Storage#Key}#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Entity.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Storage.Entity.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Entity.CanBeValidated">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Building.BuildingContext">
            <summary>
            Domain building context.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.BuildingContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Building.BuildingContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Building.BuildingContext.Current"/> <see cref="T:Xtensive.Storage.Building.BuildingContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.BuildingContext.#ctor(Xtensive.Storage.Configuration.DomainConfiguration)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Building.BuildingContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Stage">
            <summary>
            Gets the building stage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Log">
            <summary>
            Gets the log used by this builder.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Configuration">
            <summary>
            Gets the configuration of the building <see cref="T:Xtensive.Storage.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.BuilderConfiguration">
            <summary>
            Gets the building configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Domain">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Domain"/> object.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.HandlerFactory">
            <summary>
            Gets the handler factory.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.NameBuilder">
            <summary>
            Gets the name builder.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.SystemSessionHandler">
            <summary>
            Gets the system session handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.ModelDef">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Storage.Domain"/> model definition.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingContext.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Validator.EnsureNameIsValid(System.String,Xtensive.Storage.Building.ValidationRule)">
            <summary>
            Determines whether the specified name is valid.
            </summary>
            <param name="name">The name to validate.</param>
            <param name="rule">The validation rule.</param>
            <returns>
            <see langword="true"/> if the specified name is valid; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Validator.EnsureIsNullable(System.Type)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Field cannot be nullable.</exception>
        </member>
        <member name="T:Xtensive.Storage.ReferentialIntegrityException">
            <summary>
            Thrown on attempt to remove an object having
            reference with <see cref="F:Xtensive.Storage.OnRemoveAction.Deny"/>
            option pointing to it.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.ReferentialIntegrityException.#ctor(Xtensive.Storage.Model.AssociationInfo,Xtensive.Storage.Entity,Xtensive.Storage.Entity,Xtensive.Storage.Entity)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.ReferentialIntegrityException.Association">
            <summary>
            Gets the association.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.ReferentialIntegrityException.Initiator">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Key"/> of the initiator of removing action.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.ReferentialIntegrityException.ReferencingObject">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Key"/> of the referencing object.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.ReferentialIntegrityException.ReferencedObject">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Key"/> of the referenced object.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.Name">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.ConnectionUrl">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.ConnectionInfo" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.Types">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.Types" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.NamingConvention">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.NamingConvention" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.KeyCacheSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.KeyGeneratorCacheSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyGeneratorCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.QueryCacheSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.QueryCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.SessionPoolSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.SessionPoolSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.RecordSetMappingCacheSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.RecordSetMappingCacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.AutoValidation">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.AutoValidation" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.InconsistentTransactions">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.InconsistentTransactions" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.UpgradeMode">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.UpgradeMode" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.ForeignKeyMode">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.ForeignKeyMode" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.Sessions">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.Sessions" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.CompilerContainers">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.CompilerContainers" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.TypeAliases">
            <summary>
            Provides access to the type alias information in the section.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.Services">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> that stores the configuration information
            for a services provided by <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.ConfigurationSection">
            <summary>
            A root element of storage configuration section within a configuration file.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.ConfigurationSection.Domains">
            <summary>
            Gets the collection of domain configurations.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.IndexBuilder.BuildIndex(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Building.Definitions.IndexDef,System.Boolean)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="T:Xtensive.Storage.Metadata.Type">
            <summary>
            Persistent descriptor of registered type.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Metadata.MetadataBase">
            <summary>
            Abstract base class for any metadata type.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Metadata.MetadataBase.OnSettingFieldValue(Xtensive.Storage.Model.FieldInfo,System.Object)">
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="M:Xtensive.Storage.Metadata.MetadataBase.OnRemove">
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="M:Xtensive.Storage.Metadata.MetadataBase.EnsureIsWritable">
            <summary>
            Ensures the entity is writable.
            </summary>
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="M:Xtensive.Storage.Metadata.MetadataBase.#ctor(System.Int32)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Xtensive.Storage.Metadata.MetadataBase.#ctor(System.String)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The identifier.</param>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Type.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Type.#ctor(System.Int32,System.String)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="id">The type identifier.</param>
            <param name="name">The name of the type.</param>
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Type.Id">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Type.Name">
            <summary>
            Gets or sets the full type name.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.DomainConfiguration">
            <summary>
            The configuration of the <see cref="T:Xtensive.Storage.Domain"/>.
            </summary> 
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultUpgradeMode">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.UpgradeMode"/> value:
            "<see cref="F:Xtensive.Storage.DomainUpgradeMode.Default"/>".
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultForeignKeyMode">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.ForeignKeyMode"/> value:
            "<see cref="F:Xtensive.Storage.ForeignKeyMode.Default"/>".
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultKeyCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyCacheSize"/> value: 
            <see langword="16*1024"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyGeneratorCacheSize"/> value: 
            <see langword="128"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultQueryCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.QueryCacheSize"/> value: 
            <see langword="1024"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.RecordSetMappingCacheSize"/> value: 
            <see langword="1024"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultSessionPoolSize">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.SessionPoolSize"/> value: 
            <see langword="64"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultInconsistentTransactions">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.InconsistentTransactions"/> value: 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultAutoValidation">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.AutoValidation"/> value: 
            <see langword="true"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultSectionName">
            <summary>
            Default <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.SectionName"/> value:
            "<see langword="Xtensive.Storage"/>".
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Lock(System.Boolean)">
            <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be locked as well.</param>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.CreateClone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Clone(Xtensive.Core.Helpers.ConfigurationBase)">
            <summary>
            Copies the properties from the <paramref name="source"/>
            configuration to this one.
            Used by <see cref="M:Xtensive.Core.Helpers.ConfigurationBase.Clone"/> method implementation.
            </summary>
            <param name="source">The configuration to copy properties from.</param>
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The clone of this configuration.</returns>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Load(System.String)">
            <summary>
            Loads the <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/> for <see cref="T:Xtensive.Storage.Domain"/>
            with the specified <paramref name="name"/>
            from application configuration file (section with <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.SectionName"/>).
            </summary>
            <param name="name">Name of the <see cref="T:Xtensive.Storage.Domain"/>.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/> for the specified domain.
            </returns>
            <exception cref="T:System.InvalidOperationException">Section <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.SectionName"/>
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Storage.Domain"/> with specified <paramref name="name"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.Load(System.String,System.String)">
            <summary>
            Loads the <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/> for <see cref="T:Xtensive.Storage.Domain"/>
            with the specified <paramref name="name"/>
            from application configuration file (section with <paramref name="sectionName"/>).
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="name">Name of the <see cref="T:Xtensive.Storage.Domain"/>.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/> for the specified domain.
            </returns>
            <exception cref="T:System.InvalidOperationException">Section <paramref name="sectionName"/>
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Storage.Domain"/> with specified <paramref name="name"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="connectionUrl">The string containing connection URL for <see cref="T:Xtensive.Storage.Domain"/>.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="connectionUrl"/> is null or empty string.</exception>
        </member>
        <member name="M:Xtensive.Storage.Configuration.DomainConfiguration.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.SectionName">
            <summary>
            Gets or sets the name of the section where storage configuration is configuration.
            </summary>
            <exception cref="T:System.NotSupportedException">The property is already defined once.</exception>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.Name">
            <summary>
            Gets or sets the domain configuration name.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.ConnectionInfo">
            <summary>
            Gets or sets the connection info (URL).
            </summary>
            <example>
            <code lang="cs" source="..\..\Xtensive.Storage\Xtensive.Storage.Manual\DomainAndSessionSample.cs" region="Connection URL examples" />
            <code lang="cs">
            var configuration = new DomainConfiguration();
            configuration.ConnectionInfo = new UrlInfo(connectionUrl);
            </code>
            </example>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.UpgradeMode">
            <summary>
            Gets or sets a value indicating domain upgrade behavior. 
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultUpgradeMode"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.Types">
            <summary>
            Gets the collection of persistent <see cref="T:System.Type"/>s that are about to be 
            registered in the <see cref="T:Xtensive.Storage.Domain"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.NamingConvention">
            <summary>
            Gets or sets the naming convention.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyCacheSize">
            <summary>
            Gets or sets the size of the key cache.
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultKeyCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.KeyGeneratorCacheSize">
            <summary>
            Gets or sets the size of the key generator cache.
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.QueryCacheSize">
            <summary>
            Gets or sets the size of the query cache (see <see cref="!:CachedQuery"/>).
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultQueryCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.SessionPoolSize">
            <summary>
            Gets or sets the size of the session pool.
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultSessionPoolSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.RecordSetMappingCacheSize">
            <summary>
            Gets or sets the size of the record set mapping cache.
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.AutoValidation">
            <summary>
            Gets or sets the value indicating whether changed entities should be validated automatically.
            Default value is <see cref="P:Xtensive.Storage.Configuration.Elements.DomainConfigurationElement.AutoValidation"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.InconsistentTransactions">
            <summary>
            Gets or sets a value indicating whether inconsistent region should be automatically open within the transaction.
            I.e. all the entities changed within the transaction should be validated on transaction commit only.
            It is recommended to keep this option switched off and define inconsistent regions manually.    
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultInconsistentTransactions"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.ForeignKeyMode">
            <summary>
            Gets or sets a value indicating foreign key mode. 
            Default value is <see cref="F:Xtensive.Storage.Configuration.DomainConfiguration.DefaultForeignKeyMode"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.Sessions">
            <summary>
            Gets available session configurations.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.DomainConfiguration.CompilerContainers">
            <summary>
            Gets user defined method compiler containers.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.BuildingStage">
            <summary>
            Enumerates possible <see cref="P:Xtensive.Storage.Building.BuildingContext.Stage"/> values.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.BuildingStage.Created">
            <summary>
            Initial state.
            Value is <see langword="0x0"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.BuildingStage.Building">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/> is building (<see cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/> method is executing).
            Value is <see langword="0x1"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.BuildingStage.Upgrading">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/> is upgrading the schema.
            <see cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/> method is still executing.
            Value is <see langword="0x4"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.BuildingStage.Ready">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/> is ready to use.
            Value is <see langword="0x10"/>. 
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.BuildingStage.Failed">
            <summary>
            At least one error has occured during <see cref="T:Xtensive.Storage.Domain"/> building.
            Value is <see langword="0x100"/>. 
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.BuildingScope">
            <summary>
            The scope for <see cref="T:Xtensive.Storage.Building.BuildingContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.BuildingScope.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Log.Name">
            <summary>
            Gets the name of this log.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.DefaultFieldAccessor`1.GetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.DefaultFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
        </member>
        <member name="T:Xtensive.Storage.IFieldValueAdapter">
            <summary>
            An object exposing (i.e. providing access to) field value in custom fashion.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IFieldValueAdapter.Owner">
            <summary>
            Gets the owner of the value.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IFieldValueAdapter.Field">
            <summary>
            Gets the field this adapter handles.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.WellKnown">
            <summary>
            Various well-known constants related to this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.KeyFieldName">
            <summary>
            Name of the <see cref="P:Xtensive.Storage.Entity.Key"/> field.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.TypeIdFieldName">
            <summary>
            Name of the <see cref="P:Xtensive.Storage.Entity.TypeId"/> field.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.MasterFieldName">
            <summary>
            Name of the field that describes master in <see cref="F:Xtensive.Storage.Model.Multiplicity.ManyToMany"/>
            or <see cref="F:Xtensive.Storage.Model.Multiplicity.ZeroToMany"/> association.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.SlaveFieldName">
            <summary>
            Name of the field that describes slave in <see cref="F:Xtensive.Storage.Model.Multiplicity.ManyToMany"/>
            or <see cref="F:Xtensive.Storage.Model.Multiplicity.ZeroToMany"/> association.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.DomainModelExtensionName">
            <summary>
            Name of the <see cref="T:Xtensive.Storage.Metadata.Extension"/> that describes domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.GeneratorColumnName">
            <summary>
            Name of column in key generator table.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.MaxKeyFieldNumber">
            <summary>
            Max number of key fields.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.WellKnown.Protocol">
            <summary>
            Well-known storage protocol names.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Protocol.Memory">
            <summary>
            In-memory index storage.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Protocol.SqlServer">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Protocol.PostgreSql">
            <summary>
            PostgreSQL.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Protocol.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Protocol.All">
            <summary>
            All supported protocols (for exception messages, etc).
            </summary>
        </member>
        <member name="T:Xtensive.Storage.WellKnown.Sessions">
            <summary>
            Well-known session configuration names
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Sessions.Default">
            <summary>
            Name of default session configuration.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Sessions.System">
            <summary>
            System session name.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Sessions.Service">
            <summary>
            Service session name.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.WellKnown.Sessions.KeyGenerator">
            <summary>
            Generator session name.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.IUpgradeHandler">
            <summary>
            A handler responsible for upgrading a specific assembly or its part.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.OnBeforeStage">
            <summary>
            Override this method to modify the <see cref="P:Xtensive.Storage.Upgrade.UpgradeContext.Configuration"/>
            before starting the next upgrade stage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.OnSchemaReady">
            <summary>
            Override this method to handle "at schema ready" event. 
            The both extracted schema and target schema are ready at this moment.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.OnStage">
            <summary>
            Override this method to handle "at upgrade stage" event.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.CanUpgradeFrom(System.String)">
            <summary>
            Determines whether this handler can upgrade the assembly
            from the specified version of it.
            </summary>
            <param name="oldVersion">The old assembly version.</param>
            <returns>
            <see langword="true"/> if this instance can upgrade 
            from the specified version of an old assembly; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Storage.Upgrade.UpgradeStage)">
            <summary>
            Determines whether specified persistent type should be included into the model
            in the specified <paramref name="upgradeStage"/>, or not.
            </summary>
            <param name="type">The type to filter.</param>
            <param name="upgradeStage">The upgrade stage to check the availability at.</param>
            <returns>
            <see langword="true"/> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.IUpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Storage.Upgrade.UpgradeStage)">
            <summary>
            Determines whether specified persistent field (property) should be included into the model
            in the specified <paramref name="upgradeStage"/>, or not.
            </summary>
            <param name="field">The field to filter.</param>
            <param name="upgradeStage">The upgrade stage to check the availability at.</param>
            <returns>
              <see langword="true"/> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.IUpgradeHandler.IsEnabled">
            <summary>
            Gets a value indicating whether this handler is enabled.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.IUpgradeHandler.Assembly">
            <summary>
            Gets the assembly this handler is made for.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.IUpgradeHandler.AssemblyName">
            <summary>
            Gets the name of the assembly described by this handler.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.IUpgradeHandler.AssemblyVersion">
            <summary>
            Gets the version of the assembly described by this handler.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.RecycledAttribute">
            <summary>
            An attribute describing the recycled type or property.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RecycledAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RecycledAttribute.#ctor(System.String)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="originalName">The original name of the type or property.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RecycledAttribute.OriginalName">
            <summary>
            Gets or sets the original name of the type or property.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.Materialization.ExpressionMaterializer.CreateEntity(Xtensive.Storage.Linq.Expressions.IEntityExpression,System.Linq.Expressions.Expression)">
            <exception cref="T:System.InvalidOperationException">Unable to materialize Entity.</exception>
        </member>
        <member name="M:Xtensive.Storage.Linq.Materialization.ExpressionMaterializer.VisitEntityFieldExpression(Xtensive.Storage.Linq.Expressions.EntityFieldExpression)">
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="T:Xtensive.Storage.Internals.PersistActionKind">
            <summary>
            Action to be executed during a persisting.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.PersistActionKind.Insert">
            <summary>
            'Insert' action.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.PersistActionKind.Update">
            <summary>
            'Update' action.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.PersistActionKind.Remove">
            <summary>
            'Remove' action.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Key">
            <summary>
            Contains a set of identifying values of an <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
            <remarks>
            Every entity is uniquely identified by its <see cref="P:Xtensive.Storage.Entity.Key"/>.
            </remarks>
            <seealso cref="P:Xtensive.Storage.Entity.Key"/>
        </member>
        <member name="F:Xtensive.Storage.Key.MaxGenericKeyLength">
            <summary>
            Maximal supported length (count of values) of purely generic keys.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Key.Equals(Xtensive.Storage.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Key.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Key.op_Equality(Xtensive.Storage.Key,Xtensive.Storage.Key)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Key.op_Inequality(Xtensive.Storage.Key,Xtensive.Storage.Key)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Key.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Key.ValueEquals(Xtensive.Storage.Key)">
            <summary>
            Compares key value for equality.
            </summary>
            <param name="other">The other key to compare.</param>
            <returns>Equality comparison result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:Xtensive.Storage.Key"/> to its string representation.
            </summary>
            <param name="format">Indicates whether to use <see cref="M:Xtensive.Storage.Key.Format"/>,
            or <see cref="M:Xtensive.Storage.Key.ToString"/> method.</param>
            <returns>String representation of the <see cref="T:Xtensive.Storage.Key"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Format">
            <summary>
            Gets the string representation of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Key.Parse(System.String)">
            <summary>
            Parses the specified <paramref name="source"/> string 
            produced by <see cref="M:Xtensive.Storage.Key.Format"/> back to the <see cref="T:Xtensive.Storage.Key"/>
            instance.
            </summary>
            <param name="source">The string to parse.</param>
            <returns><see cref="T:Xtensive.Storage.Key"/> instance corresponding to the specified
            <paramref name="source"/> string.</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Key.CalculateHashCode">
            <summary>
            Calculates hash code.
            </summary>
            <returns>Calculated hash code.</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create``1">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> type <typeparamref name="T"/>
            with newly generated value.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Storage.Entity"/> descendant to get <see cref="T:Xtensive.Storage.Key"/> for.</typeparam>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(System.Type)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            with newly generated value.
            </summary>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(Xtensive.Storage.Model.HierarchyInfo)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/>
            with newly generated value.
            </summary>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
            <param name="hierarchy">The hierarchy.</param>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            with newly generated value.
            </summary>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create``1(Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance
            for the specified <see cref="T:Xtensive.Storage.Entity"/> type <typeparamref name="T"/>
            and with specified <paramref name="value"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Storage.Entity"/> descendant to get <see cref="T:Xtensive.Storage.Key"/> for.</typeparam>
            <param name="value">Key value.</param>
            <returns>
            A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(System.Type,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            and with specified <paramref name="value"/>.
            </summary>
            <param name="value">Key value.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(Xtensive.Storage.Model.TypeInfo,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            and with specified <paramref name="value"/>.
            </summary>
            <param name="value">Key value.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create``1(System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance
            for the specified <see cref="T:Xtensive.Storage.Entity"/> type <typeparamref name="T"/>
            and with specified <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Xtensive.Storage.Entity"/> descendant to get <see cref="T:Xtensive.Storage.Key"/> for.</typeparam>
            <param name="values">Key values.</param>
            <returns>
            A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(System.Type,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            and with specified <paramref name="values"/>.
            </summary>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(Xtensive.Storage.Model.TypeInfo,System.Object[])">
            <summary>
            Creates <see cref="T:Xtensive.Storage.Key"/> instance 
            for the specified <see cref="T:Xtensive.Storage.Entity"/> <paramref name="type"/>
            and with specified <paramref name="values"/>.
            </summary>
            <param name="values">Key values.</param>
            <returns>A newly created or existing <see cref="T:Xtensive.Storage.Key"/> instance .</returns>
        </member>
        <member name="M:Xtensive.Storage.Key.Create(Xtensive.Storage.Domain,Xtensive.Storage.Model.TypeInfo,Xtensive.Core.Tuples.Tuple,System.Int32[],System.Boolean,System.Boolean)">
            <exception cref="T:System.ArgumentException">Wrong key structure for the specified <paramref name="type"/>.</exception>
        </member>
        <member name="P:Xtensive.Storage.Key.Hierarchy">
            <summary>
            Gets the hierarchy identified entity belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Key.Value">
            <summary>
            Gets the key value.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Key.Type">
            <summary>
            Gets the type of <see cref="T:Xtensive.Storage.Entity"/> this instance identifies.
            </summary>
            <exception cref="T:System.NotSupportedException">Type is already initialized.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to resolve type for Key.</exception>
        </member>
        <member name="P:Xtensive.Storage.Key.IsTypeCached">
            <summary>
            Determines whether <see cref="P:Xtensive.Storage.Key.Type"/> property has cached type value or not.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.ServiceProvider">
            <summary>
            Provides access to services.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.ServiceProvider.Get``1">
            <summary>
            Gets the service of specified type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>Resolved service.</returns>
        </member>
        <member name="M:Xtensive.Storage.ServiceProvider.Get``1(System.String)">
            <summary>
            Gets the service with the specified type and name.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name of the service.</param>
            <returns>Resolved service.</returns>
        </member>
        <member name="M:Xtensive.Storage.ServiceProvider.Get(System.Type)">
            <summary>
            Gets the service of specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>Resolved service.</returns>
        </member>
        <member name="M:Xtensive.Storage.ServiceProvider.Get(System.Type,System.String)">
            <summary>
            Gets the service with the specified type and name.
            </summary>
            <param name="type">The service type type.</param>
            <param name="name">The service name.</param>
            <returns>Resolved service.</returns>
        </member>
        <member name="T:Xtensive.Storage.Providers.IsolationLevelConverter">
            <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.IsolationLevelConverter.Convert(System.Transactions.IsolationLevel)">
            <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">The specified <see cref="T:System.Transactions.IsolationLevel"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Storage.Linq.QueryProvider">
            <summary>
            <see cref="T:System.Linq.IQueryProvider"/> implementation.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryProvider.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryProvider.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Linq.QueryProvider.Instance">
            <summary>
            Gets the only instance of this provider.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.TransactionalStateContainer">
            <summary>
            An abstract base class for objects having associated transactional state.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer.EnsureStateIsActual">
            <summary>
            Ensures the state is actual. 
            If it really is now, this method does nothing.
            Otherwise it calls <see cref="M:Xtensive.Storage.TransactionalStateContainer.ResetState"/> method and sets
            <see cref="P:Xtensive.Storage.TransactionalStateContainer.StateTransaction"/> to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer.ResetState">
            <summary>
            Resets the cached transactional state.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer.BindStateTransaction">
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer.#ctor(Xtensive.Storage.Session)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.TransactionalStateContainer.StateTransaction">
            <summary>
            Gets the transaction where <see cref="T:Xtensive.Storage.TransactionalStateContainer"/>'s 
            state was acquired.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.TransactionalStateContainer.IsStateActual">
            <summary>
            Gets a value indicating whether this instance's state is actual now.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Internals.SessionBoundTypeRegistrationHandler">
            <summary>
            <see cref="T:Xtensive.Core.Collections.ITypeRegistrationHandler"/> for processing <see cref="T:Xtensive.Storage.SessionBound"/> 
            and <see cref="T:Xtensive.Storage.IEntity"/> descendants registration in 
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.Types"/> registry.
            </summary>
            <remarks>This implementation provides topologically sorted list 
            of <see cref="T:System.Type"/>s.</remarks>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Internals.SessionBoundTypeRegistrationHandler.Process(Xtensive.Core.Collections.TypeRegistry,Xtensive.Core.Collections.TypeRegistration,System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Internals.SessionBoundTypeRegistrationHandler.BaseInterface">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Internals.SessionBoundTypeRegistrationHandler.BaseType">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.FieldDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.Length">
            <summary>
            Gets or sets the maximal length of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether this instance should be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsNullable">
            <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsStructure">
            <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsEntitySet">
            <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsPrimitive">
            <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsEntity">
            <summary>
            Gets a value indicating whether this property is a reference to Entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsSystem">
            <summary>
            Gets a value indicating whether this property is system field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.IsTypeId">
            <summary>
            Gets a value indicating whether this property contains information about Type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.UnderlyingProperty">
            <summary>
            Gets the underlying system property.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.ValueType">
            <summary>
            Gets or sets the type of the value of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.ItemType">
            <summary>
            Gets or sets the item type for field that describes the EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.OnTargetRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> action that will be executed on referenced Entity removal.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Storage.EntitySet`1"/>.</exception>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.OnOwnerRemove">
            <summary>
            Gets or sets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> action that will be executed with referenced Entity on field owner removal.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Storage.EntitySet`1"/>.</exception>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.FieldDef.PairTo">
            <summary>
            Gets or sets the name of the paired field.
            </summary>
            <exception cref="T:System.InvalidOperationException">Field is not reference to entity.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.TypeBuilder.BuildType(System.Type)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Type is not registered.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.TypeBuilder.BuildInterfaceFields(Xtensive.Storage.Model.TypeInfo)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.TypeBuilder.BuildDeclaredFields(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Building.Definitions.TypeDef)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.TypeBuilder.BuildFieldMap(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="F:Xtensive.Storage.Building.Definitions.IndexDef.DefaultFillFactor">
            <summary>
            Default fill factor.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.IndexDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.IsSecondary">
            <summary>
            Gets or sets a value indicating whether this instance is secondary index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.FillFactor">
            <summary>
            Gets or sets the fill factor for index, must be a real number between <see langword="0"/> and <see langword="1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.KeyFields">
            <summary>
            Gets the key fields that are included in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.IndexDef.IncludedFields">
            <summary>
            Gets the non key fields that are included in this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityFieldAccessor`1.GetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.EntitySetAccessor">
            <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Storage.EntitySetBase"/> descendants.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.GetEntitySet(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets the entity set for the specified property.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Add(Xtensive.Storage.EntitySetBase,Xtensive.Storage.Entity)">
            <summary>
            Adds the item to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Add(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Entity)">
            <summary>
            Adds the item to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Remove(Xtensive.Storage.EntitySetBase,Xtensive.Storage.Entity)">
            <summary>
            Removes the item from the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Remove(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Entity)">
            <summary>
            Removes the item from the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <param name="item">The item.</param>
            <returns>
            <see langword="true"/>, if the item was added;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Clear(Xtensive.Storage.EntitySetBase)">
            <summary>
            Clears the specified target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.Clear(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Clears the entity set of the specified target field.
            </summary>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySetAccessor.#ctor(Xtensive.Storage.Session)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:Xtensive.Storage.HierarchyRootAttribute">
            <summary>
            Defines the root type of hierarchy of persistent types.
            </summary>
            <remarks>
            <para>
            All entities in your model can be divided into one or more persistent hierarchies. 
            Persistent hierarchy is a set of entities, that are inherited from one entity class(hierarchy root) 
            and have the same key structure. Hierarchy root entity should be marked by this attribute.
            </para>
            <para>
            Persistent hierarchies can use diffirent inheritance schemas, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class. Inheritance schema
            can be specified in <see cref="P:Xtensive.Storage.HierarchyRootAttribute.InheritanceSchema"/> property.
            </para>
            </remarks>
            <example>In following example two persistent type hierarchies are declared.
            Inheritance shema is specified for documents hierarchy.
            <code>
            [HerarchyRoot]
            public class Product : Entity  { ... }
            
            [HerarchyRoot(InheritanceSchema = InheritaceSchema.ClassTable)
            public class Document : Entity  { ... }
            
            public class Invoice : Document { ... }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Storage.HierarchyRootAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.HierarchyRootAttribute.#ctor(Xtensive.Storage.Model.InheritanceSchema)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="schema">The inheritance schema for the hierarchy.</param>
        </member>
        <member name="P:Xtensive.Storage.HierarchyRootAttribute.InheritanceSchema">
            <summary>
            Gets the inheritance schema for this hierarchy.
            </summary>
            <remarks>
            Persistent hierarchies can use diffirent inheritance schemas, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.HierarchyRootAttribute.IncludeTypeId">
            <summary>
            Gets or sets a value indicating whether key should include TypeId field.
            </summary>
            <remarks>
            TypeId can be included into entity Key for some specific optimization purposes.
            Default value is <see langword="false" />.
            </remarks>
        </member>
        <member name="T:Xtensive.Storage.Building.SchemaComparisonResult">
            <summary>
            The result of schema comparison.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.SchemaComparisonResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Building.SchemaComparisonResult.#ctor(Xtensive.Storage.Building.SchemaComparisonStatus,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Actions.ActionSequence,System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="status">The comparison status.</param>
            <param name="hints">The upgrade hints.</param>
            <param name="difference">The difference.</param>
            <param name="upgradeActions">The upgrade actions.</param>
            <param name="hasTypeChanges">if set to <see langword="true"/> extracted column type are 
            different with target column types.</param>
            <param name="canUpgradeTypesSafely">if set to <see langword="true"/> all types changes are safely.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.Status">
            <summary>
            Gets the comparison status.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.Hints">
            <summary>
            Gets upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.Difference">
            <summary>
            Gets the schema difference.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.UpgradeActions">
            <summary>
            Gets upgrade actions.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.HasTypeChanges">
            <summary>
            Gets or sets a value indicating whether extracted column types are different with target column types.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.SchemaComparisonResult.CanUpgradeTypesSafely">
            <summary>
            Gets a value indicating whether possible to upgrade data types safely.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.ReferentialHelper">
            <summary>
            Contains referential-related methods.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.ReferentialHelper.FindReferencingEntities(Xtensive.Storage.Entity)">
            <summary>
            Finds entities that reference the specified entity.
            </summary>
            <param name="entity">The entity to find references to.</param>
            <returns>The set of found entities.</returns>
        </member>
        <member name="M:Xtensive.Storage.ReferentialHelper.FindReferencingEntities(Xtensive.Storage.Entity,Xtensive.Storage.Model.AssociationInfo)">
            <summary>
            Finds entities that reference specified entity within specified <paramref name="association"/>.
            </summary>
            <param name="entity">The entity to find references to.</param>
            <param name="association">The association.</param>
            <returns>The set of found entities.</returns>
            <exception cref="T:System.InvalidOperationException">Type doesn't participate in the specified association.</exception>
        </member>
        <member name="T:Xtensive.Storage.Metadata.Extension">
            <summary>
            Persistent value of any kind indentified by its <see cref="P:Xtensive.Storage.Metadata.Extension.Name"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Extension.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Extension.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">A value for <see cref="P:Xtensive.Storage.Metadata.Extension.Name"/>.</param>
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Extension.Name">
            <summary>
            Gets or sets the name of the extension.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Extension.Text">
            <summary>
            Gets or sets the text data.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Extension.Data">
            <summary>
            Gets or sets the binary data.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.EntityEventArgs">
            <summary>
            Arguments for <see cref="P:Xtensive.Storage.EntityEventArgs.Entity"/>-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntityEventArgs.#ctor(Xtensive.Storage.Entity)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Xtensive.Storage.EntityEventArgs.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Transaction">
            <summary>
            An implementation of transaction suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Transaction.CreateScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Transaction.OnBegin">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Transaction.OnCommit">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Transaction.OnRollback">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(System.Boolean)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="autoTransaction">if set to <see langword="true"/> auto transaction is demanded.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(System.Transactions.IsolationLevel,System.Boolean)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <param name="autoTransaction">if set to <see langword="true"/> auto transaction is demanded.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(Xtensive.Storage.Session)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(Xtensive.Storage.Session,System.Transactions.IsolationLevel)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(Xtensive.Storage.Session,System.Boolean)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="autoTransaction">if set to <see langword="true"/> auto transaction is demanded.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.Open(Xtensive.Storage.Session,System.Transactions.IsolationLevel,System.Boolean)">
            <summary>
            Opens a new or already running transaction.
            </summary>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="autoTransaction">if set to <see langword="true"/> auto transaction is demanded.</param>
            <returns>
            A new <see cref="T:Xtensive.Storage.TransactionScope"/> object, if new <see cref="T:Xtensive.Storage.Transaction"/> is created;
            otherwise, <see langword="null"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Storage.Transaction.Session"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Transaction.#ctor(Xtensive.Storage.Session,System.Transactions.IsolationLevel)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.Transaction.#ctor(Xtensive.Storage.Session,System.Guid,System.Transactions.IsolationLevel)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="identifier">The identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="P:Xtensive.Storage.Transaction.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Transaction.TemporaryData">
            <summary>
            Gets the transaction-level temporary data.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Transaction.ValidationContext">
            <summary>
            Gets the validation context of this <see cref="T:Xtensive.Storage.Transaction"/>.
            </summary>    
        </member>
        <member name="P:Xtensive.Storage.Transaction.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Transaction"/> object
            using <see cref="P:Xtensive.Storage.Transaction.Session"/>.<see cref="P:Xtensive.Storage.Session.Current"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.NamingConvention">
            <summary>
            A set of rules for model definition objects naming.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.NamingConvention.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.NamingConvention.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.NamingConvention.Equals(Xtensive.Storage.Configuration.NamingConvention)">
            <summary>
            Indicates whether the current object is equal to another object of the same type. 
            </summary>
            <param name="other">The object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to the other parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Configuration.NamingConvention.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type. 
            </summary>
            <param name="obj">The object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to the other parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Configuration.NamingConvention.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:Xtensive.Storage.Configuration.NamingConvention.LetterCasePolicy">
            <summary>
            Gets or sets the letter case policy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.NamingConvention.NamespacePolicy">
            <summary>
            Gets or sets the namespace policy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.NamingConvention.NamingRules">
            <summary>
            Gets or sets the naming rules.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.NamingConvention.NamespaceSynonyms">
            <summary>
            Gets namespace synonyms dictionary where key is a namespace name and value is a synonym.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.LetterCasePolicy">
            <summary>
            Enumerates all possible modification types to names.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.LetterCasePolicy.Default">
            <summary>
            Default mode. The same as <see cref="F:Xtensive.Storage.Configuration.LetterCasePolicy.AsIs"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.LetterCasePolicy.AsIs">
            <summary>
            No modifications should be applied.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.LetterCasePolicy.Uppercase">
            <summary>
            Name should be in upper case.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.LetterCasePolicy.Lowercase">
            <summary>
            Name should be in lower case.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.Definitions.TypeDefCollection">
            <summary>
            Represents collection of objects indexed by <see cref="T:System.Type"/> and name.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.FindAncestor(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Finds the ancestor of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="item"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.FindAncestor(System.Type)">
            <summary>
            Finds the ancestor of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="type"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.FindInterfaces(System.Type)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="type"/> implements.
            </summary>
            <param name="type">The type to search interfaces for.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see name="TypeDef"/> instance that are implemented by the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.Contains(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Determines whether collection contains a specific item.
            </summary>
            <param name="item">Value to search for.</param>
            <returns>
              <see langword="True"/> if the object is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.Contains(System.Type)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.TryGetValue(System.Type)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDefCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Building.Definitions.TypeDefCollection"/> class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Xtensive.Storage.Building.Definitions.TypeDefCollection.Item(System.Type)" -->
        <member name="M:Xtensive.Storage.Internals.StructureFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.RecordSetExtensions">
            <summary>
            <see cref="T:Xtensive.Storage.Rse.RecordSet"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.RecordSetExtensions.ToEntities``1(Xtensive.Storage.Rse.RecordSet,System.Int32)">
            <summary>
            Converts the <see cref="T:Xtensive.Storage.Rse.RecordSet"/> items to <see cref="T:Xtensive.Storage.Entity"/> instances.
            </summary>
            <typeparam name="T">The type of <see cref="T:Xtensive.Storage.Entity"/> instances to get.</typeparam>
            <param name="source">The <see cref="T:Xtensive.Storage.Rse.RecordSet"/> to process.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Storage.Record"/>.</param>
            <returns>The sequence of <see cref="T:Xtensive.Storage.Entity"/> instances.</returns>
        </member>
        <member name="M:Xtensive.Storage.RecordSetExtensions.ToEntities(Xtensive.Storage.Rse.RecordSet,System.Int32)">
            <summary>
            Converts the <see cref="T:Xtensive.Storage.Rse.RecordSet"/> items to <see cref="T:Xtensive.Storage.Entity"/> instances.
            </summary>
            <param name="source">The <see cref="T:Xtensive.Storage.Rse.RecordSet"/> to process.</param>
            <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Storage.Record"/>.</param>
            <returns>The sequence of <see cref="T:Xtensive.Storage.Entity"/> instances.</returns>
        </member>
        <member name="T:Xtensive.Storage.CoreServiceAccessor">
            <summary>
            Provides access to core services bound to a <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.CoreServiceAccessor.OpenSystemLogicOnlyRegion">
            <summary>
            Opens the region in which only the system logic will be executed.
            </summary>
            <returns>An object implementing <see cref="T:System.IDisposable"/> which 
            may be disposed to restore a previous state of the 
            <see cref="P:Xtensive.Storage.Session.IsSystemLogicOnly"/> property.</returns>
        </member>
        <member name="M:Xtensive.Storage.CoreServiceAccessor.ChangeSessionHandler(Xtensive.Storage.Providers.SessionHandler)">
            <summary>
            Changes the value of <see cref="P:Xtensive.Storage.Session.Handler"/>.
            </summary>
            <param name="newHandler">The new handler.</param>
            <returns>An object implementing <see cref="T:System.IDisposable"/> which 
            may be disposed to restore a previous state of the 
            <see cref="P:Xtensive.Storage.Session.Handler"/> property.</returns>
        </member>
        <member name="M:Xtensive.Storage.CoreServiceAccessor.#ctor(Xtensive.Storage.Session)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.CoreServiceAccessor.PersistentAccessor">
            <summary>
            Gets the accessor for <see cref="T:Xtensive.Storage.Persistent"/> descendants.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.CoreServiceAccessor.EntitySetAccessor">
            <summary>
            Gets the accessor for <see cref="T:Xtensive.Storage.EntitySet`1"/> descendants.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.NamingConventionElement">
            <summary>
            <see cref="T:Xtensive.Storage.Configuration.NamingConvention"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.NamingConventionElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Storage.Configuration.NamingConvention"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamingConventionElement.LetterCasePolicy">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.NamingConvention.LetterCasePolicy" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamingConventionElement.NamespacePolicy">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.NamingConvention.NamespacePolicy" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamingConventionElement.NamingRules">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.NamingConvention.NamingRules" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.NamingConventionElement.NamespaceSynonyms">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.NamingConvention.NamespaceSynonyms" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.ConfigurationCollection`1">
            <summary>
            A typed version of <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <typeparam name="T">The type of the collection item.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.ConfigurationCollection`1.CreateNewElement">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.ConfigurationCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.ConfigurationCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Xtensive.Storage.Aspects.TransactionalAspect">
            <summary>
            Activates session on method boundary.
            Opens the transaction, if this is necessary.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Aspects.TransactionalAspect.OnEntry(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Aspects.TransactionalAspect.OnSuccess(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Aspects.TransactionalAspect.OnExit(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Aspects.TransactionalAspect.PostSharp#Laos#ILaosWeavableAspect#AspectPriority">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Aspects.TransactionalAspect.OpenSession">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Xtensive.Storage.Session"/>
            must be opened for the method this aspect is applied to.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Aspects.TransactionalAspect.OpenTransaction">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:Xtensive.Storage.Transaction"/>
            must be opened for the method this aspect is applied to.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.RenameFieldHint">
            <summary>
            Rename field hint.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradeHint">
            <summary>
            Abstract base class for any upgrade hint.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RenameFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RenameFieldHint.#ctor(System.Type,System.String,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="targetType">The current type.</param>
            <param name="oldFieldName">Old name of the field.</param>
            <param name="newFieldName">New name of the field.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RenameFieldHint.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RenameFieldHint.OldFieldName">
            <summary>
            Gets the old field name.
            </summary>    
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RenameFieldHint.NewFieldName">
            <summary>
            Gets new field name.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Serialization.SerializationScope">
            <summary>
            Serialization scope.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationScope.#ctor(Xtensive.Storage.Serialization.SerializationContext)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Storage.Serialization.SerializationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.AssemblyInfoAttribute">
            <summary>
            An attribute providing persistence-related information for the assembly.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.AssemblyInfoAttribute.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The name of the assembly.</param>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.AssemblyInfoAttribute.#ctor(System.String,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="version">The version of the assembly.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.AssemblyInfoAttribute.Name">
            <summary>
            Gets or sets the name of the assembly to use in <see cref="T:Xtensive.Storage.Upgrade.UpgradeHandler"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.AssemblyInfoAttribute.Version">
            <summary>
            Gets or sets the version of the assembly to use in <see cref="T:Xtensive.Storage.Upgrade.UpgradeHandler"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.SchemaComparisonStatus">
            <summary>
            Schema comparison status.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaComparisonStatus.Equal">
            <summary>
            Target schema is equal to the extracted schema.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaComparisonStatus.TargetIsSuperset">
            <summary>
            Target schema contains additional elements.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaComparisonStatus.TargetIsSubset">
            <summary>
            Target schema doesn't contain some elements of the extracted schema.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaComparisonStatus.NotEqual">
            <summary>
            Both new and removed elements are found.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.ChangeFieldTypeHint">
            <summary>
            Change field type enforced (ignore type conversion verification) hint.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.#ctor(System.Type,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">Value for <see cref="P:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.Type"/>.</param>
            <param name="fieldName">Value for <see cref="P:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.FieldName"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.Type">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.FieldName">
            <summary>
            Gets the target field name.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.ChangeFieldTypeHint.AffectedColumns">
            <summary>
            Gets or sets the affected column paths.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Internals.PersistAction">
            <summary>
            Information about an action to be executed during the persisting 
            of an <see cref="F:Xtensive.Storage.Internals.PersistAction.EntityState"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.PersistAction.EntityState">
            <summary>
            The state to persist.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.PersistAction.ActionKind">
            <summary>
            The action to be executed.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.PersistAction.#ctor(Xtensive.Storage.EntityState,Xtensive.Storage.Internals.PersistActionKind)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="entityState">The value of the <see cref="F:Xtensive.Storage.Internals.PersistAction.EntityState"/> field.</param>
            <param name="persistActionKind">The value of the <see cref="F:Xtensive.Storage.Internals.PersistAction.ActionKind"/> field.</param>
        </member>
        <member name="T:Xtensive.Storage.Record">
            <summary>
            A single item in <see cref="M:Xtensive.Storage.RecordSetExtensions.Read(Xtensive.Storage.Rse.RecordSet)"/> result 
            containing both raw <see cref="P:Xtensive.Storage.Record.Source"/> and parsed primary keys.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Record.GetKey">
            <summary>
            Gets the first primary key in the <see cref="T:Xtensive.Storage.Record"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Record.GetKey(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Key"/> by specified index.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Record.GetTuple">
            <summary>
            Gets the first tuple in the <see cref="T:Xtensive.Storage.Record"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Record.GetTuple(System.Int32)">
            <summary>
            Gets the <see cref="T:Xtensive.Core.Tuples.Tuple"/> by specified index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Record.Count">
            <summary>
            Gets the key count.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Record.Source">
            <summary>
            Gets raw tuple this record is build from.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.TransactionalStateContainer`1">
            <summary>
            An abstract base class for objects having base associated transactional <see cref="P:Xtensive.Storage.TransactionalStateContainer`1.State"/>
            of <typeparamref name="TState"/> type.
            </summary>
            <typeparam name="TState">The type of the transactional state.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer`1.ResetState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.TransactionalStateContainer`1.#ctor(Xtensive.Storage.Session)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.TransactionalStateContainer`1.State">
            <summary>
            Gets the base state.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.TransactionalStateContainer`1.IsStateLoaded">
            <summary>
            Gets a value indicating whether base state is loaded or not.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.Definitions.TypeDef">
            <summary>
            Represents a persistent type definition.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDef.DefineIndex(System.String)">
            <summary>
            Defines the index and adds it to the <see cref="P:Xtensive.Storage.Building.Definitions.TypeDef.Indexes"/>.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument "name" is invalid.</exception>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDef.DefineField(System.Reflection.PropertyInfo)">
            <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Storage.Building.Definitions.TypeDef.Fields"/>.
            </summary>
            <param name="property">The underlying property.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDef.DefineField(System.String,System.Type)">
            <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Storage.Building.Definitions.TypeDef.Fields"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="valueType">The type of the field value.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDef.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.TypeDef.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Building.Definitions.TypeDef"/> class.
            </summary>
            <param name="type">The underlying type.</param>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsEntity">
            <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsAbstract">
            <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsSystem">
            <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsInterface">
            <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsStructure">
            <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.UnderlyingType">
            <summary>
            Gets or sets the underlying system type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.Indexes">
            <summary>
            Gets the indexes for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.TypeDef.Fields">
            <summary>
            Gets the fields contained in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Internals.IncrementalKeyGenerator`1">
            <summary>
            Generator that provides incremental sequence of integer values.
            </summary>
            <typeparam name="TFieldType">The type of the field.</typeparam>
        </member>
        <member name="T:Xtensive.Storage.KeyGenerator">
            <summary>
             Base key generator class.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyGenerator.Next">
            <summary>
            Create the <see cref="T:Xtensive.Core.Tuples.Tuple"/> with the unique values in key sequence.
             </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyGenerator.Initialize">
            <summary>
            Initializer.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyGenerator.#ctor(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="generatorInfo">The <see cref="!:generatorInfo"/> instance that describes generator.</param>
        </member>
        <member name="P:Xtensive.Storage.KeyGenerator.GeneratorInfo">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Storage.KeyGenerator.GeneratorInfo"/> instance that describes <see cref="T:Xtensive.Storage.KeyGenerator"/> object.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.KeyGenerator.Handlers">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor"/> providing other available handlers.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.IncrementalKeyGenerator`1.Next">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.IncrementalKeyGenerator`1.#ctor(Xtensive.Storage.Model.GeneratorInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Internals.IncrementalKeyGenerator`1.Arithmetic">
            <summary>
            Gets the <see cref="T:Xtensive.Core.Arithmetic.ArithmeticStruct`1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.SessionOptions">
            <summary>
            Enumerates possible options of the <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionOptions.Default">
            <summary>
            Default options is <see cref="F:Xtensive.Storage.Configuration.SessionOptions.None"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionOptions.None">
            <summary>
            None of <see cref="T:Xtensive.Storage.Configuration.SessionOptions"/>.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionOptions.AutoTransactions">
            <summary>
            Session allows automatic transaction.
            If transactions is required (i.e. for transactional method),
            but there is no current transaction, transaction is automatically opened.
            If this option is not specified and
            transactional method is called without active transaction an exception is thrown.
            Value is <see langword="0x1"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionOptions.AmbientTransactions">
            <summary>
            Session uses ambient transactions.
            This option implicitly enables <see cref="F:Xtensive.Storage.Configuration.SessionOptions.AutoTransactions"/>.
            This mode must be normally used for UI sessions.
            Value is <see langword="0x3"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionOptions.AutoShortenTransactions">
            <summary>
            Transactions will actually be opened just before execution of DB command. 
            This option is ignored fo our in-memory provider.
            Value is <see langword="0x4" />.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.EntityEventBroker">
            <summary>
            Manages events related to <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.GettingFieldEventKey">
            <summary>
            The key for 'Getting field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.GetFieldEventKey">
            <summary>
            The key of 'Get field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.SettingFieldEventKey">
            <summary>
            The key of 'Setting field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.SetFieldEventKey">
            <summary>
            The key of 'Set field' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.PropertyChangedEventKey">
            <summary>
            The key of 'Property changed' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.CollectionChangedEventKey">
            <summary>
            The key of 'Collection changed' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.InitializingPersistentEventKey">
            <summary>
            The key of 'Initializing persistent' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.InitializePersistentEventKey">
            <summary>
            The key of 'Initialize persistent' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.RemovingEntityEventKey">
            <summary>
            The key of 'Removing entity' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.RemoveEntityEventKey">
            <summary>
            The key of 'Remove entity' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.InitializeEntitySetEventKey">
            <summary>
            The key of 'Initialize entity set' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.AddingEntitySetItemEventKey">
            <summary>
            The key of 'Adding entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.AddEntitySetItemEventKey">
            <summary>
            The key of 'Add entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.RemovingEntitySetItemEventKey">
            <summary>
            The key of 'Removing entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.RemoveEntitySetItemEventKey">
            <summary>
            The key of 'Remove entity set item' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.ClearingEntitySetEventKey">
            <summary>
            The key of 'Clearing entity set' event.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.EntityEventBroker.ClearEntitySetEventKey">
            <summary>
            The key of 'Clear entity set' event.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.AddSubscriber(Xtensive.Storage.Key,Xtensive.Storage.Model.FieldInfo,System.Object,System.Delegate)">
            <summary>
            Adds the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Storage.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.AddSubscriber(Xtensive.Storage.Key,System.Object,System.Delegate)">
            <summary>
            Adds the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.RemoveSubscriber(Xtensive.Storage.Key,Xtensive.Storage.Model.FieldInfo,System.Object,System.Delegate)">
            <summary>
            Removes the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Storage.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.RemoveSubscriber(Xtensive.Storage.Key,System.Object,System.Delegate)">
            <summary>
            Removes the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <param name="subscriber">The delegate.</param>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.GetSubscriber(Xtensive.Storage.Key,Xtensive.Storage.Model.FieldInfo,System.Object)">
            <summary>
            Gets the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="fieldInfo">The <see cref="T:Xtensive.Storage.Entity"/>'s field containing a nested object 
            which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <returns>A delegate registered for the event or <see langword="null"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.EntityEventBroker.GetSubscriber(Xtensive.Storage.Key,System.Object)">
            <summary>
            Gets the subscriber.
            </summary>
            <param name="key">The key of <see cref="T:Xtensive.Storage.Entity"/> which will be watched for events.</param>
            <param name="eventKey">The event key.</param>
            <returns>A delegate registered for the event or <see langword="null"/>.</returns>
        </member>
        <member name="P:Xtensive.Storage.EntityEventBroker.HasSubscribers">
            <summary>
            Gets a value indicating whether at least a one subscriber has registered.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Structure">
            <summary>
            Persistent type that has a value-type behavior.
            </summary>
            <remarks>
            Like <see cref="T:Xtensive.Storage.Entity"/>, it supports inheritance and consists of one or more properties 
            of value type, <see cref="T:Xtensive.Storage.Structure"/>, or <see cref="T:Xtensive.Storage.Entity"/> references.
            However unlike entity, structure is not identified by <see cref="T:Xtensive.Storage.Key"/>
            and has value type behavior: it can exist only inside entity, it is stored in
            its owners space and cannot be referenced directly.
            </remarks>
            <example> In following example address fields (City, Street and Building) will be included in Person table.
            <code>
            public class Person : Entity
            {
              [Field, Key]
              public int Id { get; set; }
            
              public string Name { get; set; }
            
              public Address Address { get; set; }
            }
            
            public class Address : Structure
            {
              [Field]
              public City City { get; set; }
              
              [Field]
              public string Street { get; set; }
            
              [Field]
              public string Building { get; set; }
            }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Storage.Structure.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Structure.Equals(Xtensive.Storage.Structure)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Structure.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Structure.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Structure.#ctor(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="owner">The owner of this instance.</param>
            <param name="field">The owner field that describes this instance.</param>
        </member>
        <member name="M:Xtensive.Storage.Structure.#ctor(Xtensive.Core.Tuples.Tuple)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="data">Underlying <see cref="P:Xtensive.Storage.Structure.Tuple"/> value.</param>
        </member>
        <member name="M:Xtensive.Storage.Structure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.Structure.Type">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Structure.Owner">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Structure.Field">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Structure.IsBoundToEntity">
            <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Storage.Structure"/> instance is bound to entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Structure.Tuple">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Structure.CanBeValidated">
            <inheritdoc/> 
        </member>
        <member name="E:Xtensive.Storage.Structure.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.SessionScope">
            <summary>
            <see cref="P:Xtensive.Storage.SessionScope.Session"/> activation scope. 
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SessionScope.#ctor(Xtensive.Storage.Session)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session to activate.</param>
        </member>
        <member name="M:Xtensive.Storage.SessionScope.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.SessionScope.CurrentSession">
            <summary>
            Gets the current <see cref="P:Xtensive.Storage.SessionScope.Session"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.SessionScope.Session">
            <summary>
            Gets the context of this scope.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EnumFieldAccessor`1.GetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.EnumFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Internals.ChainingSessionHandler">
            <summary>
            The base class for <see cref="T:Xtensive.Storage.Providers.SessionHandler"/>s which support the chaining 
            with another handler.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Internals.ChainingSessionHandler.ChainedHandler">
            <summary>
            The chained handler.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.ChainingSessionHandler.BeginTransaction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.ChainingSessionHandler.CommitTransaction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.ChainingSessionHandler.RollbackTransaction">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.ChainingSessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.ChainingSessionHandler.#ctor(Xtensive.Storage.Providers.SessionHandler)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="chainedHandler">The handler to be chained.</param>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.HierarchyDefCollection.Contains(Xtensive.Storage.Building.Definitions.HierarchyDef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.HierarchyDefCollection.TryGetValue(Xtensive.Storage.Building.Definitions.TypeDef)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <member name="M:Xtensive.Storage.Building.Definitions.HierarchyDefCollection.TryGetValue(System.Type)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value associated with the specified <paramref name="key"/> or <see langword="null"/> 
            if item was not found.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Xtensive.Storage.Building.Definitions.HierarchyDefCollection.Item(System.Type)" -->
        <member name="T:Xtensive.Storage.EntitySetBase">
            <summary>
            Base class for <see cref="T:Xtensive.Storage.EntitySet`1"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Contains(Xtensive.Storage.Key)">
            <summary>
            Determines whether <see cref="T:Xtensive.Storage.EntitySetBase"/> contains the specified <see cref="T:Xtensive.Storage.Key"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if <see cref="T:Xtensive.Storage.EntitySetBase"/> contains the specified <see cref="T:Xtensive.Storage.Key"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Entity type is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Contains(Xtensive.Storage.Entity)">
            <summary>
            Determines whether this collection contains the specified item.
            </summary>
            <param name="item">The item to check for containment.</param>
            <returns>
            <see langword="true"/> if this collection contains the specified item; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Add(Xtensive.Storage.Entity)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>
            <see langword="True"/>, if the item is added to the collection;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Remove(Xtensive.Storage.Entity)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            <see langword="True"/>, if the item is removed from the collection;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.GetItemsQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets a delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            fetching items associated with this instance.
            </summary>
            <param name="field">The field containing <see cref="T:Xtensive.Storage.EntitySet`1"/>.</param>
            <returns>
            The created delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            fetching items associated with this instance.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.GetItemCountQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets a delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            returning count of items associated with this instance.
            </summary>
            <param name="field">The field containing <see cref="T:Xtensive.Storage.EntitySet`1"/>.</param>
            <returns>
            The created delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            returning count of items associated with this instance.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.GetItemsLimitedQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets a delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            fetching limited number of items associated with this instance.
            </summary>
            <param name="field">The field containing <see cref="T:Xtensive.Storage.EntitySet`1"/>.</param>
            <returns>
            The created delegate which returns an <see cref="T:System.Linq.IQueryable`1"/>
            fetching limited number of items associated with this instance.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Initialize(System.Type)">
            <summary>
            Performs initialization (see <see cref="M:Xtensive.Storage.EntitySetBase.Initialize"/>) of the <see cref="T:Xtensive.Storage.EntitySetBase"/> 
            if type of <see langword="this"/> is the same as <paramref name="ctorType"/>.
            Invoked by <see cref="T:Xtensive.Core.Aspects.InitializableAttribute"/> aspect in the epilogue of any 
            constructor of this type and its ancestors.
            </summary>
            <param name="ctorType">The type, which constructor has invoked this method.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.Initialize">
            <summary>
            Performs initialization of the <see cref="T:Xtensive.Storage.EntitySetBase"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.#ctor(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="owner">Persistent this entity set belongs to.</param>
            <param name="field">Field corresponds to this entity set.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySetBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.EntitySetBase.Owner">
            <summary>
            Gets the owner of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntitySetBase.Xtensive#Storage#IFieldValueAdapter#Owner">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySetBase.Field">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySetBase.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Xtensive.Storage.EntitySetBase"/>.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.EntitySetBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Storage.EntitySetBase.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.WellKnownMembers.GetMethod(System.Type,System.String,System.Int32,System.Int32)">
            <exception cref="T:System.InvalidOperationException">Method not found.</exception>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.TypeConversionVerifier">
            <summary>
            Verifies whether the conversion between types is allowed or not.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.TypeConversionVerifier.CanConvert(Xtensive.Storage.Indexing.Model.TypeInfo,Xtensive.Storage.Indexing.Model.TypeInfo)">
            <summary>
            Verifies whether the source type can be converted to the target type. 
            Loss of data is allowed.
            </summary>
            <param name="from">The source type.</param>
            <param name="to">The target type.</param>
            <returns>
            <see langword="true"/> if the source type can be converted to the 
            target type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.TypeConversionVerifier.CanConvertSafely(Xtensive.Storage.Indexing.Model.TypeInfo,Xtensive.Storage.Indexing.Model.TypeInfo)">
            <summary>
            Verifies whether the source type can be converted to the target 
            type without loss of data.
            </summary>
            <param name="from">The source type.</param>
            <param name="to">The target type.</param>
            <returns>
            <see langword="true"/> if the source type can be converted to the 
            target type without loss of data; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.SystemUpgradeHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Upgrade.UpgradeHandler"/> implementation 
            for <see cref="N:Xtensive.Storage"/> assembly.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradeHandler">
            <summary>
            Default <see cref="T:Xtensive.Storage.Upgrade.IUpgradeHandler"/> implementation.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Upgrade.UpgradeHandler.RecycledSuffix">
            <summary>
            The ".Recycled" suffix.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.OnBeforeStage">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>context.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.OnSchemaReady">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.OnStage">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>context.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.CanUpgradeFrom(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Storage.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>UpgradeContext.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Storage.Upgrade.UpgradeStage)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>UpgradeContext.Stage</c> is out of range.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.OnUpgrade">
            <summary>
            Override this method to implement custom persistent data migration logic.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.AddUpgradeHints">
            <summary>
            Override this method to add upgrade hints to 
            <see cref="P:Xtensive.Storage.Upgrade.UpgradeContext.Hints"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.DetectAssembly">
            <summary>
            Detects the assembly this handler is made for.
            </summary>
            <returns>The assembly.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.DetectAssemblyName">
            <summary>
            Detects the name of the assembly this handler is made for.
            </summary>
            <returns>The name of the assembly.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.DetectAssemblyVersion">
            <summary>
            Detects the version of the assembly this handler is made for.
            </summary>
            <returns>The version of the assembly.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.AddAutoHints">
            <summary>
            Adds the "auto" hints - e.g. hints for recycled types.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.GetOriginalName(System.Type)">
            <summary>
            Gets the original name of the recycled type.
            </summary>
            <param name="recycledType">The recycled type to get the original name for.</param>
            <returns>The original name of the recycled type.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.TryStripRecycledSuffix(System.String)">
            <summary>
            Tries to strip the ".Recycled" suffix from the namespace.
            </summary>
            <param name="nameSpace">The namespace to remove the suffix from.</param>
            <returns>
            The namespace without ".Recycled" suffix, if it was there;
            otherwise the same value.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeHandler.#ctor(System.Reflection.Assembly)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="assembly">The assembly this handler is bound to.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeHandler.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeHandler.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeHandler.AssemblyName">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeHandler.AssemblyVersion">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.SystemUpgradeHandler.OnStage">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.SystemUpgradeHandler.CheckAssemblies">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Impossible to upgrade all assemblies.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.SystemUpgradeHandler.UpdateAssemblies">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Impossible to upgrade all assemblies.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.SystemUpgradeHandler.UpdateTypes">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="T:Xtensive.Storage.KeyGeneratorAttribute">
            <summary>
            Optional attribute that is responsible for key generator creation and configuration.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyGeneratorAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyGeneratorAttribute.#ctor(System.Type)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The generator type. Must be inherited from the <see cref="T:Xtensive.Storage.KeyGenerator"/> type</param>
            <remarks><paramref name="type"/> can be null.</remarks>
        </member>
        <member name="P:Xtensive.Storage.KeyGeneratorAttribute.Type">
            <summary>
            Gets or sets the key generator type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value is not inherited from <see cref="T:Xtensive.Storage.KeyGenerator"/> type.</exception>
        </member>
        <member name="P:Xtensive.Storage.KeyGeneratorAttribute.CacheSize">
            <summary>
            Gets or sets the size of the key generator cache.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Metadata.Assembly">
            <summary>
            Persistent descriptor of an assembly with registered persistent types.
            Used for schema upgrade purposes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Assembly.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Metadata.Assembly.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The assembly name.</param>
            <exception cref="T:System.Exception">Object is read-only.</exception>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Assembly.Name">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Metadata.Assembly.Version">
            <summary>
            Gets or sets the assembly version.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.TransactionScopeExtensions">
            <summary>
            <see cref="T:Xtensive.Storage.TransactionScope"/> related extension methods.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionScopeExtensions.Complete(Xtensive.Storage.TransactionScope)">
            <summary>
            Marks the scope as successfully completed 
            (i.e. all operations within the scope are completed successfully).
            Does nothing if scope is <see langword="null" />.
            </summary>
            <param name="scope">The scope to mark as completed.</param>
        </member>
        <member name="T:Xtensive.Storage.Internals.CachingKeyGenerator`1">
            <summary>
            Generator with caching capabilities.
            </summary>
            <typeparam name="TFieldType">The type of the field.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.Internals.CachingKeyGenerator`1.Next">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.CachingKeyGenerator`1.CacheNext">
            <summary>
            Caches the next portion of unique values.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.CachingKeyGenerator`1.#ctor(Xtensive.Storage.Model.GeneratorInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Internals.CachingKeyGenerator`1.Cache">
            <summary>
            Gets the cache.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Internals.CachingKeyGenerator`1.CacheSize">
            <summary>
            Gets the size of the cache.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Internals.GuidKeyGenerator">
            <summary>
            <see cref="T:System.Guid"/> generator.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.GuidKeyGenerator.Next">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.FutureScalar`1">
            <summary>
            Future returning a scalar result.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.FutureScalar`1.#ctor(Xtensive.Storage.Linq.TranslatedQuery{`0},Xtensive.Core.Parameters.ParameterContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="translatedQuery">The translated query.</param>
            <param name="parameterContext">The parameter context.</param>
        </member>
        <member name="P:Xtensive.Storage.FutureScalar`1.Value">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.DomainModelConverter">
            <summary>
            Converts <see cref="T:Xtensive.Storage.Model.DomainModel"/> to indexing storage model.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.Convert(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Converts the specified <see cref="T:Xtensive.Storage.Model.DomainModel"/> to
            <see cref="P:Xtensive.Storage.Upgrade.DomainModelConverter.StorageInfo"/>.
            </summary>
            <param name="domainModel">The domain model.</param>
            <returns>The storage model.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.Visit(Xtensive.Storage.Model.Node)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitDomainModel(Xtensive.Storage.Model.DomainModel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitIndexInfo(Xtensive.Storage.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitColumnInfo(Xtensive.Storage.Model.ColumnInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitAssociationInfo(Xtensive.Storage.Model.AssociationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitPrimaryIndexInfo(Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Visits primary index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitGeneratorInfo(Xtensive.Storage.Model.GeneratorInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.FindIndex(Xtensive.Storage.Indexing.Model.TableInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Finds the specific index by key columns.
            </summary>
            <param name="table">The table.</param>
            <param name="keyColumns">The key columns.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.ConvertReferentialAction(Xtensive.Storage.OnRemoveAction)">
            <summary>
            Converts the <see cref="T:Xtensive.Storage.OnRemoveAction"/> to 
            <see cref="T:Xtensive.Storage.Indexing.Model.ReferentialAction"/>.
            </summary>
            <param name="toConvert">The action to convert.</param>
            <returns>Converted action.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.FindIndex(Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Finds the index of the real.
            </summary>
            <param name="index">The index.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.FindNonVirtualPrimaryIndex(Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Finds the non virtual primary index.
            </summary>
            <param name="index">The index.</param>
            <returns>Primary index.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.GetPrimaryIndexColumnName(Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.ColumnInfo,Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Gets the name of the primary index column.
            </summary>
            <param name="primaryIndex">Index of the primary.</param>
            <param name="secondaryIndexColumn">The secondary index column.</param>
            <param name="secondaryIndex">Index of the secondary.</param>
            <returns>Columns name.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.GetTable(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Gets the table.
            </summary>
            <param name="type">The type.</param>
            <returns>Table.</returns>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.#ctor(System.Boolean,System.Func{Xtensive.Storage.Model.AssociationInfo,Xtensive.Storage.Model.FieldInfo,System.String},System.Boolean,System.Func{Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo,System.String},System.Func{Xtensive.Storage.Model.GeneratorInfo,System.Boolean},Xtensive.Storage.Providers.ProviderInfo,System.Func{System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Xtensive.Storage.Indexing.Model.TypeInfo})">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="buildForeignKeys">If set to <see langword="true"/> foreign keys
            will be created for associations.</param>
            <param name="foreignKeyNameGenerator">The foreign key name generator.</param>
            <param name="buildHierarchyForeignKeys">If set to <see langword="true"/> foreign keys
            will be created for hierarchies.</param>
            <param name="hierarchyForeignKeyNameGenerator">The hierarchy foreign key name generator.</param>
            <param name="persistentGeneratorFilter">The persistent generator filter.</param>
            <param name="providerInfo">The provider info.</param>
            <param name="typeBuilder">The type builder.</param>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitKeyField(Xtensive.Storage.Model.KeyField)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitFieldInfo(Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitKeyInfo(Xtensive.Storage.Model.KeyInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitHierarchyInfo(Xtensive.Storage.Model.HierarchyInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.DomainModelConverter.VisitTypeInfo(Xtensive.Storage.Model.TypeInfo)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.PersistentGeneratorFilter">
            <summary>
            Gets the persistent generator filter.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.ProviderInfo">
            <summary>
            Gets the provider info.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.TypeBuilder">
            <summary>
            Gets the type builder.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.StorageInfo">
            <summary>
            Gets the storage info.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.Model">
            <summary>
            Gets the currently converting model.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.BuildForeignKeys">
            <summary>
            Gets a value indicating whether 
            build foreign keys for associations.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.ForeignKeyNameGenerator">
            <summary>
            Gets the foreign key name generator.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.BuildHierarchyForeignKeys">
            <summary>
            Gets or sets a value indicating whether 
            build foreign keys for hierarchies.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.HierarchyForeignKeyNameGenerator">
            <summary>
            Gets the hierarchy foreign key name generator.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.DomainModelConverter.CurrentTable">
            <summary>
            Gets or sets the currently visiting table.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.ProviderInfo">
            <summary>
            Provider's features provider.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.ProviderInfo.Supports(Xtensive.Storage.Providers.ProviderFeatures)">
            <summary>
            Determines whether the specified features are supported.
            </summary>
            <param name="required">The required feature set.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.ProviderInfo.#ctor(System.Version,Xtensive.Storage.Providers.ProviderFeatures,System.Int32)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.ProviderInfo.StorageVersion">
            <summary>
            Version of the underlying storage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.ProviderInfo.MaxIdentifierLength">
            <summary>
            Maximal identifier length.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.DomainBuilderException">
            <summary>
            Describes various errors detected during <see cref="T:Xtensive.Storage.Domain"/>.<see cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.DomainBuilderException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Storage.DomainBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Xtensive.Storage.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ActualModel">
            <summary>
              Looks up a localized string similar to Actual Model.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.AspectExMultipleAttributesOfTypeXAreNotAllowedHere">
            <summary>
              Looks up a localized string similar to {0}: multiple attributes of type &apos;{1}&apos; are not allowed here..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Associations">
            <summary>
              Looks up a localized string similar to Associations.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.CantUpgradeTypeSafely">
            <summary>
              Looks up a localized string similar to Can&apos;t upgrade types safely.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.CanUpgradeTypeSafely">
            <summary>
              Looks up a localized string similar to Can upgrade types safely.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Columns">
            <summary>
              Looks up a localized string similar to Columns.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.CustomDefinitions">
            <summary>
              Looks up a localized string similar to Custom Definitions.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.EntityStateFormat">
            <summary>
              Looks up a localized string similar to Key = &apos;{0}&apos;, Tuple = {1}, State = {2}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.EntityWithKeyXDoesNotExist">
            <summary>
              Looks up a localized string similar to Entity with Key = &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExActiveSerializationContextIsNotFound">
            <summary>
              Looks up a localized string similar to Active serialization context is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExActiveSessionIsRequiredForThisOperation">
            <summary>
              Looks up a localized string similar to Active Session is required for this operation. Use Session.Open(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExActualSchemaVersionOfAssemblyXIsExpectedToBeYButCurrentlyItIsZ">
            <summary>
              Looks up a localized string similar to Actual schema version of assembly &apos;{0}&apos; is expected to be &apos;{1}&apos;, but currently it is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExAsOperatorSupportsEntityOnly">
            <summary>
              Looks up a localized string similar to &apos;as&apos; operator supports casting only inside Entity hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExAssociationAttributeCanNotBeAppliedToXField">
            <summary>
              Looks up a localized string similar to &apos;AssociationAttribute&apos; can&apos;t be applied to &apos;{0}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExAssociationMultiplicityIsNotValidForField">
            <summary>
              Looks up a localized string similar to Association multiplicity &apos;{0}&apos; is not valid for field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExBinaryExpressionsWithNodeTypeXAreNotSupported">
            <summary>
              Looks up a localized string similar to Binary expressions with NodeType = &apos;ExpressionType.{0}&apos; aren&apos;t supported..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotAssociateNonEmptyEntityStateWithKeyOfUnknownType">
            <summary>
              Looks up a localized string similar to Attempt to associate non-empty EntityState with Key of unknown type..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotCommitATransactionValidationContextIsInInconsistentState">
            <summary>
              Looks up a localized string similar to Cannot commit a transaction: ValidationContext is in inconsistent state..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCanNotCommitATransactionValidationContextIsInInvalidState">
            <summary>
              Looks up a localized string similar to Can not commit a transaction. Validation context is in invalid state..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotFindHandlerOfTypeX">
            <summary>
              Looks up a localized string similar to Cannot find a hanlder of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCanNotGetValidationContextThereIsNoActiveTransaction">
            <summary>
              Looks up a localized string similar to Can not get validation context: there is no active transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCanNotOpenTransactionNoCurrentSession">
            <summary>
              Looks up a localized string similar to Can not open a transaction: there is no current Session..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotResolveEntityWithKeyX">
            <summary>
              Looks up a localized string similar to Cannot resolve entity with key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotUpgradeSchemaSafely">
            <summary>
              Looks up a localized string similar to Cannot upgrade schema safely..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCannotUseDefaultGeneratorForComplexKeys">
            <summary>
              Looks up a localized string similar to Cannot use default generator for complex (multicolumn) Keys..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExColumnLength">
            <summary>
              Looks up a localized string similar to Value length {0} is greater than column length {1}..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExColumnNotNullable">
            <summary>
              Looks up a localized string similar to Unable to assign null to non-nullable column..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExColumnXIsNotFound">
            <summary>
              Looks up a localized string similar to Column &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExColumnXIsNotFoundInTableY">
            <summary>
              Looks up a localized string similar to Column with name &apos;{0}&apos; is not found in table &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExComparerForTypeIsNotAvailable">
            <summary>
              Looks up a localized string similar to Comparer for type &apos;{0}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCompilerContainerAttributeIsNotAppliedToTypeX">
            <summary>
              Looks up a localized string similar to &apos;CompilerContainer&apos; attribute isn&apos;t applied to type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile">
            <summary>
              Looks up a localized string similar to Configuration for Domain with name &apos;{0}&apos; is not found in application configuration file (section &apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExConstraintViolation">
            <summary>
              Looks up a localized string similar to Constraint violation: constraint {0} on field &apos;{1}.{2}&apos; of object &apos;{3}&apos; failed on value {4}..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotFindAnonymousMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find anonymous mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotFindEntityMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find entity mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotFindFieldSegmentForFieldX">
            <summary>
              Looks up a localized string similar to Could not find field segment for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotFindGroupingMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find grouping mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotFindSubqueryMappingForFieldX">
            <summary>
              Looks up a localized string similar to Could not find subquery mapping for field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCouldNotLoadTypesFromAssembly">
            <summary>
              Looks up a localized string similar to Could not load types from assembly &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCurrentSessionGetterIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to Current session getter is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExCurrentTransactionIsDifferentFromTransactionBoundToThisInstance">
            <summary>
              Looks up a localized string similar to The current transaction is different from the transaction bound to this instance..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField">
            <summary>
              Looks up a localized string similar to Default generator can serve hierarchy with exactly one key field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExDowncastFromXToXNotSupportedUseOfTypeOrAsOperatorInstead">
            <summary>
              Looks up a localized string similar to Downcast from &apos;{0}&apos; to &apos;{1}&apos; not supported. Use &apos;OfType&apos; or &apos;as&apos; operator instead..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExDuplicateAssemblyNameX">
            <summary>
              Looks up a localized string similar to Duplicate assembly name: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExElementWithNameContainedInThisInstanceAlready">
            <summary>
              Looks up a localized string similar to Element with name &apos;{0}&apos; is contained in this instance already..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExElementWithTypeIsContainedInThisInstanceAlready">
            <summary>
              Looks up a localized string similar to Element with type &apos;{0}&apos; is already contained in this instance..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntityIsInInconsistentState">
            <summary>
              Looks up a localized string similar to Entity is in inconsistent state..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntityIsRemoved">
            <summary>
              Looks up a localized string similar to Entity is removed..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntityOfTypeXIsIncompatibleWithThisEntitySet">
            <summary>
              Looks up a localized string similar to Entity of type &apos;{0}&apos; is incompatible with this EntitySet..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntityRemoved">
            <summary>
              Looks up a localized string similar to Unable to modify removed entity..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntitySetCanTBeAssigned">
            <summary>
              Looks up a localized string similar to EntitySet can&apos;t be assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntitySetInvalidBecauseTransactionIsNotActive">
            <summary>
              Looks up a localized string similar to Entity set is invalid due to current transaction is not active..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExEntityXIsBoundToAnotherSession">
            <summary>
              Looks up a localized string similar to Entity &apos;{0}&apos; is bound to another Session..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExErrorsDuringStorageBuild">
            <summary>
              Looks up a localized string similar to Some errors have been occurred during storage build. See error log for details..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExExcludeFieldsDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to ExcludeFields does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExExpressionOfTypeXIsNotASequence">
            <summary>
              Looks up a localized string similar to The expression of type &apos;{0}&apos; is not a sequence..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExExtractedSchemaIsNotCompatibleWithTheTargetSchema">
            <summary>
              Looks up a localized string similar to Extracted schema is not compatible with the target schema..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExExtractedSchemaIsNotEqualToTheTargetSchema">
            <summary>
              Looks up a localized string similar to Extracted schema is not equal to the target schema..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldIsNotAnEntityField">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an Entity field in Type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldMustBeOfEntitySetType">
            <summary>
              Looks up a localized string similar to Field must be of EntitySet&lt;&gt; type..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldNotFoundInModel">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not found in model..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldWithNameAlreadyExistsInEntityFieldsCollection">
            <summary>
              Looks up a localized string similar to Field with name &apos;{0}&apos; already exists in EntityInfo.Fields collection..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldWithNameXIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Field with name &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXCanTBeLoadOnDemandAsItIsIncludedInPrimaryKey">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; can&apos;t have LazyLoad attribute as it is included into primary key..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXCanTBeNullableAsItIsIncludedInPrimaryKey">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; cannot be Nullable as it is included into primary key..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXHasYTypeButIsMarkedAsNotNullable">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; has &apos;{1}&apos; type but is marked as not nullable..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXIsAlreadyDefinedInTypeXOrItsAncestor">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is already defined in type &apos;{1}&apos; or in its ancestor..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXIsNotAnEntitySetField">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is not an EntitySet field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExFieldXYIsNotFound">
            <summary>
              Looks up a localized string similar to Field &apos;{0}.{1}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExHintXIsConflictingWithHintY">
            <summary>
              Looks up a localized string similar to Hint &apos;{0}&apos; is conflicting with hint &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIncludeFieldsDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to IncludeFields does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexAlreadyContainsField">
            <summary>
              Looks up a localized string similar to Index already contains field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexedPropertiesAreNotSupported">
            <summary>
              Looks up a localized string similar to Indexed properties are not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexFieldXIsIncorrect">
            <summary>
              Looks up a localized string similar to Index field &apos;{0}&apos; is incorrect..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexMustContainAtLeastOneField">
            <summary>
              Looks up a localized string similar to Index must contain at least one field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexNameXIsInvalid">
            <summary>
              Looks up a localized string similar to Index name &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection">
            <summary>
              Looks up a localized string similar to Index with name &apos;{0}&apos; already exists in EntityInfo.Indexes collection..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExIndexWithNameXIsAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Index with name &apos;{0}&apos; is already registered..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInterfaceXDoesNotBelongToXHierarchy">
            <summary>
              Looks up a localized string similar to Interface &apos;{0}&apos; does not belong to &apos;{1}&apos; hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidFieldValueConstraintXIsViolated">
            <summary>
              Looks up a localized string similar to Invalid field value, constraint {0} is violated..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidFillFactorXValueMustBeBetween0And1">
            <summary>
              Looks up a localized string similar to Invalid fill factor &apos;{0}&apos;. Value must be between 0 and 1..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidKeyParams">
            <summary>
              Looks up a localized string similar to Unable to create Key. Key params do not correspond to its structure..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidKeyString">
            <summary>
              Looks up a localized string similar to String representaion of the Key has invalid format..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidLengthAttributeOnXField">
            <summary>
              Looks up a localized string similar to Invalid &apos;Length&apos; attribute on &apos;{0}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidMappingNameX">
            <summary>
              Looks up a localized string similar to Invalid mapping name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidOnDeleteAttributeUsageOnFieldXFieldIsNotEntityReference">
            <summary>
              Looks up a localized string similar to Invalid &apos;OnDelete&apos; attribute usage on field &apos;{0}&apos;. Field is not entity reference..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidPrefetchSelectorX">
            <summary>
              Looks up a localized string similar to Invalid prefetch selector &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidSession">
            <summary>
              Looks up a localized string similar to The Session of specified ISessionBound object is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExInvalidUpgraderVersion">
            <summary>
              Looks up a localized string similar to Invalid upgrader version..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExItemNotFoundInEntitySet">
            <summary>
              Looks up a localized string similar to Item is not found in EntitySet..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExJoinLeftDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to JoinLeft does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyCanNotBeNull">
            <summary>
              Looks up a localized string similar to Key can not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyComparerNotSupportedInGroupJoin">
            <summary>
              Looks up a localized string similar to Key comparer is not supported in GroupJoin..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyFieldXInTypeYShouldNotHaveSetAccessor">
            <summary>
              Looks up a localized string similar to Key property &apos;{0}&apos; declared in &apos;{1}&apos; should not have public or protected set accessor. Use base protected constructor to set Key value..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyFieldXWasNotFoundInTypeY">
            <summary>
              Looks up a localized string similar to Key field &apos;{0}&apos; was not found in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyIndexesAreSpecifiedForNonGenericKey">
            <summary>
              Looks up a localized string similar to Key indexes are specified for non-generic Key..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyOfXDoesNotMatchKeyOfY">
            <summary>
              Looks up a localized string similar to Key of &apos;{0}&apos; does not match key of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch">
            <summary>
              Looks up a localized string similar to Key provider &apos;{0}&apos; and hierarchy {1} key field amount mismatch..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyProviderXShouldDefineAtLeastOneKeyField">
            <summary>
              Looks up a localized string similar to Key provider &apos;{0}&apos; should define at least one key field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyValuesArrayIsEmpty">
            <summary>
              Looks up a localized string similar to Key values array is empty..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExKeyXWasNotFoundInStorage">
            <summary>
              Looks up a localized string similar to Key &apos;{0}&apos; was not found in storage..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExLambdaParameterIsOutOfScope">
            <summary>
              Looks up a localized string similar to Lambda parameter is out of scope!.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExLengthConstraintViolationOnFieldX">
            <summary>
              Looks up a localized string similar to &apos;Length&apos; constraint violation on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExLockDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to Lock does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExMasterAssociationIsAlreadyPaired">
            <summary>
              Looks up a localized string similar to Master association &apos;{0}&apos; is already paired with &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExMaterializationErrorTypeIdColumnDoesNotExistsInTheUnderlyingRecordSet">
            <summary>
              Looks up a localized string similar to Materialization error: Entity&apos;s TypeId column does not exist in the underlying RecordSet..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExMethodXNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExMoreThanOneEnabledXIsProvidedForAssemblyY">
            <summary>
              Looks up a localized string similar to More than one enabled {0} is provided for assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExMultipleHierarchyAttributesAreNotAllowed">
            <summary>
              Looks up a localized string similar to Multiple hierarchy attributes are not allowed..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExNameXIsInvalid">
            <summary>
              Looks up a localized string similar to Name &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExNoCurrentSession">
            <summary>
              Looks up a localized string similar to There is no current Session..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExNotNullableConstraintViolationOnFieldX">
            <summary>
              Looks up a localized string similar to &apos;NotNullable&apos; constraint violation on field &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExNoUpgradeHandlerIsFoundForAssemblyXVersionY">
            <summary>
              Looks up a localized string similar to No upgrade handler is found for assembly &apos;{0}&apos;, version &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExOfTypeSupportsOnlyEntityConversion">
            <summary>
              Looks up a localized string similar to OfType supports casting only inside Entity hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExOnlyEqualityRangesAreSupported">
            <summary>
              Looks up a localized string similar to Only equality ranges are supported..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExOutOfTransactionScope">
            <summary>
              Looks up a localized string similar to Object is outside of initial transaction scope..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPairedFieldXHasWrongTypeItShouldBeReferenceToEntityOrAEntitySet">
            <summary>
              Looks up a localized string similar to Paired field &apos;{0}&apos; has wrong type. A descendant of Entity or EntitySet is expected..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPairedFieldXWasNotFoundInYType">
            <summary>
              Looks up a localized string similar to Paired field &apos;{0}&apos; was not found in &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPairToAttributeCanNotBeAppliedToXField">
            <summary>
              Looks up a localized string similar to &apos;PairTo&apos; attribute can not be applied to field &apos;{0}&apos; of type &apos;{1}&apos;. It is already applied to field &apos;{2}&apos; of type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPersistentAttributeIsNotSetOnTypeX">
            <summary>
              Looks up a localized string similar to Persistent attribute isn&apos;t applied. Add the following line to AssemblyInfo.cs for &quot;{0}&quot; assembly: [assembly: Persistent(AttributeTargetAssemblies = &quot;{0}&quot;)]..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExplicitIsNullableAttributeIsRedundant">
            <summary>
              Looks up a localized string similar to Explicit &apos;IsNullable&apos; attribute is redundant.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExplicitLazyLoadAttributeOnFieldXIsRedundant">
            <summary>
              Looks up a localized string similar to Explicit &apos;LazyLoad&apos; attribute on field &apos;{0}&apos; is redundant.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically">
            <summary>
              Looks up a localized string similar to Explicit mapping name setting is redundant. The same name &apos;{0}&apos; will be generated automatically..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPrefetchDoesNotSupportQueryProviderOfTypeX">
            <summary>
              Looks up a localized string similar to Prefetch does not support query provider of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPrimaryKeyFieldCantBeChanged">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; is a part of primary key. It can&apos;t be changed..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExPropertyXMustBeDeclaredInTypeY">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; must be declared in type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExProtocolXIsNotSupportedUseOneOfTheFollowingY">
            <summary>
              Looks up a localized string similar to Protocol &quot;{0}&quot; is not supported. Use one of the following: &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExQueryContainsClosuresOfDifferentTypes">
            <summary>
              Looks up a localized string similar to The query contains closures of different types..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExReferencedFieldXAndPairedFieldAreEqual">
            <summary>
              Looks up a localized string similar to Referenced field &apos;{0}&apos; and paired field are equal..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExReferentialIntegrityViolation">
            <summary>
              Looks up a localized string similar to Referential integrity violation..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExResultTypeIncorrect">
            <summary>
              Looks up a localized string similar to Value of &apos;{0}&apos; type cannot be assigned to property of &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSectionIsNotFoundInApplicationConfigurationFile">
            <summary>
              Looks up a localized string similar to Section &apos;{0}&apos; is not found in application configuration file..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSequenceContainsNoElements">
            <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection">
            <summary>
              Looks up a localized string similar to Service with name &apos;{0}&apos; already exists in StorageInfo.Services collection..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSessionBoundObjectOutOfSessionScope">
            <summary>
              Looks up a localized string similar to Session bound object is out of session scope..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSessionIsAlreadyDisposed">
            <summary>
              Looks up a localized string similar to Session is already disposed..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSessionIsNotOpen">
            <summary>
              Looks up a localized string similar to Session is not open. Use Session.Open(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSessionWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Session with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExSpecifiedValuesArentEnoughToCreateKeyForTypeX">
            <summary>
              Looks up a localized string similar to Specified values aren&apos;t enough to create key for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExStateTransactionIsDifferent">
            <summary>
              Looks up a localized string similar to StateTransaction property value differs from the current transaction..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExStorageProviderNotFound">
            <summary>
              Looks up a localized string similar to Handler provider is not found for &quot;{0}&quot; connection type..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExStructureOfFieldXDoesNotMatchStructureOfFieldY">
            <summary>
              Looks up a localized string similar to Structure of field &apos;{0}&apos; does not match structure of field &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExStructuresDoNotSupportFieldsOfTypeX">
            <summary>
              Looks up a localized string similar to Structures do not support fields of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTableXIsNotFound">
            <summary>
              Looks up a localized string similar to Table with name &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExThereAreNoSuitableTypes">
            <summary>
              Looks up a localized string similar to There are no suitable types in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExThereIsNoCurrentHttpRequestOrSessionManagerIsnTBoundToItYet">
            <summary>
              Looks up a localized string similar to There is no current HttpRequest, or SessionManager is not bound to it yet..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTransactionRequired">
            <summary>
              Looks up a localized string similar to Unable to process operation without a transaction. Use Transaction.Open(...) to open it..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeCantBeNull">
            <summary>
              Looks up a localized string similar to Type cannot be null..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY">
            <summary>
              Looks up a localized string similar to TypeDef &apos;{0}&apos; already belongs to hierarchy with &apos;{1}&apos; root..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeIdForTypeXIsNotFound">
            <summary>
              Looks up a localized string similar to TypeId for type &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeInfoHierarchyMistmatch">
            <summary>
              Looks up a localized string similar to TypeInfo hierarchy does not correspond to provided hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeMustBeEntityDescendant">
            <summary>
              Looks up a localized string similar to Invalid type specified..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeNotFoundInModel">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not found in model..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeWithNameXIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Type with name &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeWithNameXIsNotFoundInMetadata">
            <summary>
              Looks up a localized string similar to Type with name &apos;{0}&apos; is not found in metadata..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeWithTypeIdXIsNotFound">
            <summary>
              Looks up a localized string similar to Type with type TypeId=&apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXDoesNotContainYField">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not contain &apos;{1}&apos; field..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXDoesNotHaveAParameterlessConstructor">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a parameterless constructor..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXDoesNotImplementYInterface">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement &apos;{1}&apos; interface..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXIsAlreadyDefined">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is already defined..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXIsNotCollatable">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not collatable..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXIsNotFound">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXIsNotRegisteredInTheModel">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not registered in the model..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXIsNotSupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXMustBelongToHierarchy">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must belong to hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExTypeXWasNotRegisteredForActivation">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; was not registered for activation..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToActivateEntitySetWithoutAssociation">
            <summary>
              Looks up a localized string similar to Unable to activate EntitySet for &apos;{0}&apos; field because it does not has association..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToCloneNonUserSessionConfiguration">
            <summary>
              Looks up a localized string similar to Unable to clone non-user session configuration..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToCreateKeyForXHierarchy">
            <summary>
              Looks up a localized string similar to Unable to create key for &apos;{0}&apos; hierarchy. Key value or key generator should be specified..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToModifyDeletedObject">
            <summary>
              Looks up a localized string similar to Unable to modify removed object..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToResolveTypeForKeyX">
            <summary>
              Looks up a localized string similar to Unable to resolve type for Key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnableToSetKeyFieldXExplicitly">
            <summary>
              Looks up a localized string similar to Unable to set Key field &apos;{0}&apos; explicitly..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnauthorizedAccessDeclarationOfCallerTypeIsNotInRegisteredAssembly">
            <summary>
              Looks up a localized string similar to Unauthorized: the caller is declared outside of any of registered assemblies..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnknownEntitySerializationKindX">
            <summary>
              Looks up a localized string similar to Unknown entity serialization kind &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnknownExpressionType">
            <summary>
              Looks up a localized string similar to Unknown expression type: &apos;{0} ({1})&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnsupportedExpressionType">
            <summary>
              Looks up a localized string similar to Unsupported expression type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnsupportedFieldTypeX">
            <summary>
              Looks up a localized string similar to Unsupported field type: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUnsupportedType">
            <summary>
              Looks up a localized string similar to Unsupported type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExUpgradeOfAssemblyXFromVersionYToZIsNotSupported">
            <summary>
              Looks up a localized string similar to Upgrade of assembly &apos;{0}&apos; from version &apos;{1}&apos; to &apos;{2}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExValueIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to Value is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExValueShouldBeXDescendant">
            <summary>
              Looks up a localized string similar to Value should be &apos;{0}&apos; descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExWrongKeyStructure">
            <summary>
              Looks up a localized string similar to Wrong key structure..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExWrongPersistentTypeCandidate">
            <summary>
              Looks up a localized string similar to Wrong persistent type candidate: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ExXDescendantIsAlreadyARootOfAnotherHierarchy">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; descendant is already a root of another hierarchy..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Generators">
            <summary>
              Looks up a localized string similar to Generators.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.HierarchyColumns">
            <summary>
              Looks up a localized string similar to Hierarchy columns.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Indexes">
            <summary>
              Looks up a localized string similar to Indexes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.InvalidPrecisionAttributeOnFieldX">
            <summary>
              Looks up a localized string similar to Invalid &apos;Precision&apos; attribute on field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.InvalidScaleAttributeOnFieldX">
            <summary>
              Looks up a localized string similar to Invalid &apos;Scale&apos; attribute on field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.KeyFormat">
            <summary>
              Looks up a localized string similar to {0}, {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.KeyFormatUnknownKeyType">
            <summary>
              Looks up a localized string similar to {0} (unknown), {1}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogBuildingDeclaredFieldXY">
            <summary>
              Looks up a localized string similar to Building declared field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogBuildingIndexX">
            <summary>
              Looks up a localized string similar to Building index &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogBuildingInheritedFieldXY">
            <summary>
              Looks up a localized string similar to Building inherited field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogBuildingInterfaceFieldXY">
            <summary>
              Looks up a localized string similar to Building interface field &apos;{0}.{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogBuildingX">
            <summary>
              Looks up a localized string similar to Building {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogClearingComparisonResultX">
             <summary>
               Looks up a localized string similar to Clearing comparison result:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogComparisonResultX">
             <summary>
               Looks up a localized string similar to Comparison result:
            {0}.
             </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogCreatingX">
            <summary>
              Looks up a localized string similar to Creating {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogDefiningFieldX">
            <summary>
              Looks up a localized string similar to Defining field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogDefiningHierarchyForTypeX">
            <summary>
              Looks up a localized string similar to Defining hierarchy for type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogDefiningIndexes">
            <summary>
              Looks up a localized string similar to Defining indexes..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogDefiningX">
            <summary>
              Looks up a localized string similar to Defining &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogDomainModelIsNotFoundInStorage">
            <summary>
              Looks up a localized string similar to Domain model is not found in the storage..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogExtractedSchema">
            <summary>
              Looks up a localized string similar to Extracted schema:.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogFailedToExtractDomainModelFromStorage">
            <summary>
              Looks up a localized string similar to Failed to extract domain model from the storage..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogMetadataAssemblyCreatedX">
            <summary>
              Looks up a localized string similar to Metadata.Assembly created: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogMetadataAssemblyUpdatedXFromVersionYToZ">
            <summary>
              Looks up a localized string similar to Metadata.Assembly updated: &apos;{0}&apos;, from version &apos;{1}&apos; to &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogMetadataTypeRenamedXToY">
            <summary>
              Looks up a localized string similar to Metadata.Type renamed: &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogSessionBoundMethodXOfTypeY">
            <summary>
              Looks up a localized string similar to SessionBound method &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogSkippingEntityXAsItDoesNotBelongToAnyHierarchyThusItCannotBePersistent">
            <summary>
              Looks up a localized string similar to Skipping entity &apos;{0}&apos; as it does not belong to any hierarchy thus it cannot be persistent..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogSynchronizingSchemaInXMode">
            <summary>
              Looks up a localized string similar to Synchronizing schema in {0} mode.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogTargetSchema">
            <summary>
              Looks up a localized string similar to Target schema:.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.LogValidatingX">
            <summary>
              Looks up a localized string similar to Validating {0}.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.MetadataAssemblyFormat">
            <summary>
              Looks up a localized string similar to {0} (Version={1}).
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.MetadataTypeFormat">
            <summary>
              Looks up a localized string similar to {0} (Id={1}).
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Model">
            <summary>
              Looks up a localized string similar to Model.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ModelDefinition">
            <summary>
              Looks up a localized string similar to Model Definition.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.NA">
            <summary>
              Looks up a localized string similar to n/a.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ReferentialIntegrityViolationOnAttemptToRemoveXKeyY">
            <summary>
              Looks up a localized string similar to Referential integrity violation on attempt to remove &apos;{0}&apos;, Key=&apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.SchemaComparisonResultFormat">
             <summary>
               Looks up a localized string similar to Status: {0}
            Hints:
            {1}
            Difference:
            {2}
            Actions:
            {3}.
             </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.SystemTypes">
            <summary>
              Looks up a localized string similar to system types.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.Types">
            <summary>
              Looks up a localized string similar to Types.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.TypeXDoesNotImplementYZField">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement &apos;{1}.{2}&apos; property..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.TypeXDoesNotParticipateInTheSpecifiedAssociation">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not participate in the specified association..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.TypeXIsNotAnYDescendant">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not an &apos;{1}&apos; descendant..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueCanNotBeLessThenX">
            <summary>
              Looks up a localized string similar to Value can not be less then {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueCanNotBeNull">
            <summary>
              Looks up a localized string similar to Value can not be null..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueCanNotBeRemovedEntity">
            <summary>
              Looks up a localized string similar to Value can not be an entity that is already removed..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueLengthCanNotExceedX">
            <summary>
              Looks up a localized string similar to Value can not exceed {0}..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueShouldMatchRegexPatternX">
            <summary>
              Looks up a localized string similar to Value should match regex pattern &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ValueTypeMismatchForFieldX">
            <summary>
              Looks up a localized string similar to Value type mismatch for field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.XIsNotApplicableToYDescendants">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not applicable to &apos;{1}&apos; descendants..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Resources.Strings.ZeroAssemblyVersion">
            <summary>
              Looks up a localized string similar to &lt;none&gt;.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.EntitySet`1">
            <summary>
            Non-ordered persistent entity-bound set (with no duplicate items).
            </summary>
            <typeparam name="TItem">The type of the entities in this set.</typeparam>
            <remarks>
            <para>
            Use <see cref="T:Xtensive.Storage.EntitySet`1"/> when you need to declare persistent property of entity set type.
            </para>
            <para>
            <c>EntitySets</c> can be used as a <see cref="P:Xtensive.Storage.AssociationAttribute.PairTo">paired property</see> with reference 
            (One-To-Many) or EntitySet (Many-To-Many) properties. In such case DataObjects.Net automatically
            modifies collection or it's paired property. If paired property is not specified, auxiliary table
            will be automatically created in database.
            </para>
            <para>EntitySet class implements <see cref="T:System.Linq.IQueryable`1"/> interface and fully supported by 
            DataObjects.Net LINQ translator.</para>
            </remarks>
            <example>In following example User entity has three EntitySet properties with different association kinds.
            <code>
            public class User : Entity
            {
              ...
              
              // persistent collection with auxiliary table
              [Field]
              public EntitySet&lt;Photo&gt; Photos { get; private set; }
              
              // One-to-many association
              [Field, Association(PairTo = "Author")]
              public EntitySet&lt;BlogItem&gt; BlogItems { get; private set; }
              
              // Many-to-many association
              [Field, Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code>
            </example>
            <seealso cref="T:Xtensive.Storage.Entity">Entity class</seealso>
            <seealso cref="P:Xtensive.Storage.AssociationAttribute.PairTo">Using EntitySets with paired associations</seealso>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>
            <see langword="True"/>, if the item is added to the collection;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.IntersectWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Modifies the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object
            to contain only elements that are present in that object and in the specified collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.UnionWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Modifies the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object
            to contain all elements that are present in both itself and in the specified collection.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.ExceptWith``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all elements in the specified collection from the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="other">The collection to compare to the current <see cref="T:Xtensive.Storage.EntitySet`1"/> object.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.System#Collections#Generic#ICollection{TItem}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.LoadState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.GetItemsQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.GetItemCountQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.GetItemsLimitedQueryDelegate(Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.#ctor(Xtensive.Storage.Entity,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="owner">Persistent this entity set belongs to.</param>
            <param name="field">Field corresponds to this entity set.</param>
        </member>
        <member name="M:Xtensive.Storage.EntitySet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.System#Collections#Generic#ICollection{TItem}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntitySet`1.Entities">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.SessionElement">
            <summary>
            <see cref="T:Xtensive.Storage.Session"/> configuration element within a configuration file.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Elements.SessionElement.ToNative">
            <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Storage.Configuration.SessionConfiguration"/> object.
            </summary>
            <returns>The result of conversion.</returns>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.Name">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.Name" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.UserName">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.UserName" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.Password">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.Password" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.CacheSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.CacheSize" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.CacheType">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.CacheType" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.Options">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.Options" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.DefaultIsolationLevel">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.DefaultIsolationLevel" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.SessionElement.BatchSize">
            <summary>
            <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.BatchSize" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.AtomicityContext">
            <summary>
            The context describing current atomic operation.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.AtomicityContext.#ctor(Xtensive.Storage.Session)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Storage.AtomicityContext.#ctor(Xtensive.Storage.Session,Xtensive.Integrity.Atomicity.IOperationLog)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="operationLog">The operation log.</param>
        </member>
        <member name="M:Xtensive.Storage.AtomicityContext.#ctor(Xtensive.Storage.Session,Xtensive.Integrity.Atomicity.AtomicityContextOptions)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="options">The atomicity context options.</param>
        </member>
        <member name="M:Xtensive.Storage.AtomicityContext.#ctor(Xtensive.Storage.Session,Xtensive.Integrity.Atomicity.AtomicityContextOptions,Xtensive.Integrity.Atomicity.IOperationLog)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="options">The atomicity context options.</param>
            <param name="operationLog">The operation log.</param>
        </member>
        <member name="P:Xtensive.Storage.AtomicityContext.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Web.SessionManager">
            <summary>
            Provides access to current <see cref="P:Xtensive.Storage.Web.SessionManager.Domain"/> and <see cref="P:Xtensive.Storage.Web.SessionManager.Session"/> for web applications;
            ensures <see cref="P:Xtensive.Storage.Web.SessionManager.Domain"/> is built, and built just once.
            </summary>
            <remarks>
            To initialize this class, add it to <see cref="T:System.Web.Configuration.HttpModulesSection"/> configuration section 
            in <c>web.config</c> file and set its <see cref="P:Xtensive.Storage.Web.SessionManager.DomainBuilder"/> in
            <c>Application_Start</c> method of your <c>Global.asax.cs</c> file.
            </remarks>
            <example>
            <c>web.config</c>:
            <code>
            &lt;configuration&gt;
              &lt;system.web&gt;
                &lt;httpModules&gt;
                  &lt;add name="SessionManager" type="Xtensive.Storage.Web.SessionManager, Xtensive.Storage"/&gt;
                &lt;/httpModules&gt;
              &lt;/system.web&gt;
            &lt;/configuration&gt;
            </code>
            <c>Global.asax.cs</c>:
            <code>
              public class Global : System.Web.HttpApplication
              {
                protected void Application_Start(object sender, EventArgs e)
                {
                  SessionManager.DomainBuilder = DomainBuilder.Build;
                }
              }
            </code>
            <c>DomainBuilder.cs</c>:
            <code>
              public static class DomainBuilder
              {
                public static Domain Build()
                {
                  var config = DomainConfiguration.Load("mssql");
                  var domain = Domain.Build(config);
                  return domain;
                }
              }
            </code>
            </example>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.Demand">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Web.SessionManager"/> instance 
            bound to the current <see cref="T:System.Web.HttpRequest"/>,
            or throws <see cref="T:System.InvalidOperationException"/>, 
            if <see cref="P:Xtensive.Storage.Web.SessionManager.Current"/> is <see langword="null"/>.
            </summary>
            <returns>Current <see cref="T:Xtensive.Storage.Web.SessionManager"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Web.SessionManager.Current"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles request beginning.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.Error(System.Object,System.EventArgs)">
            <summary>
            Handles request processing error.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.EndRequest(System.Object,System.EventArgs)">
            <summary>
            Completes request processing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.ProvideSession">
            <summary>
            Default <see cref="P:Xtensive.Storage.Web.SessionManager.SessionProvider"/> implementation.
            </summary>
            <returns>A pair of <see cref="P:Xtensive.Storage.Web.SessionManager.Session"/> and <see cref="T:System.IDisposable"/> 
            to invoke on request completion.</returns>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Web.SessionManager.System#Web#IHttpModule#Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.DomainBuilder">
            <summary>
            Sets the domain builder delegate.
            This delegate is invoked to build the domain on first request.
            </summary>
            <remarks>
            <para>
            The setter of this property can be invoked just once per application lifetime,
            usually in <c>Application_Start</c> method in <c>Global.asax.cs</c>.
            Assigned domain builder can not be changed.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Domain builder is already assigned.</exception>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.SessionProvider">
            <summary>
            Sets the session provider delegate.    
            </summary>
            <remarks>
            <para>
            This delegate is invoked to open the <see cref="P:Xtensive.Storage.Web.SessionManager.Session"/> on the first attempt
            to read this property (see <see cref="P:Xtensive.Storage.Web.SessionManager.HasSession"/> as well) in each web request.
            Normally, this delegate must also ensure a transaction is created there as well - 
            either by opening it explicitly, or by using 
            <see cref="F:Xtensive.Storage.Configuration.SessionOptions.AmbientTransactions"/>.
            </para>
            <para>
            The setter of this property can be invoked just once per application lifetime; 
            assigned session provider can not be changed.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Session provider is already assigned.</exception>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.Current">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Web.SessionManager"/> instance 
            bound to the current <see cref="T:System.Web.HttpRequest"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.Domain">
            <summary>
            Gets the domain used in web application.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.HasSession">
            <summary>
            Gets a value indicating whether current <see cref="T:Xtensive.Storage.Web.SessionManager"/> has session.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.Session">
            <summary>
            Gets or sets the session for the current <see cref="T:System.Web.HttpContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Web.SessionManager.HasErrors">
            <summary>
            Gets a value indicating whether an error has occurred 
            on execution of the current request and transaction should be rollbacked.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Serialization.SerializationContext">
            <summary>
            Serialization context.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Serialization.SerializationContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Serialization.SerializationContext.Current"/> <see cref="T:Xtensive.Storage.Serialization.SerializationContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.GetEntityValueData(Xtensive.Storage.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the entity value data, i.e. data which will be deserialized as a new <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Storage.Entity"/> to serialize.</param>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.GetEntityReferenceData(Xtensive.Storage.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the entity reference data, i.e. data which will be deserialized as a reference to existing <see cref="T:Xtensive.Storage.Entity"/>
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Storage.Entity"/> to serialize.</param>
            <param name="info">The object to be populated with serialization information.</param>
            <param name="context">The destination context of the serialization.</param>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.GetSerializationKind(Xtensive.Storage.Entity)">
            <summary>
            Gets the kind of serialization for the specified <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Storage.Entity"/> to be serialized.</param>
            <returns>Serialization kind.</returns>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.#ctor(Xtensive.Storage.Serialization.SerializationKind)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="serializationKind">Default <see cref="T:Xtensive.Storage.Serialization.SerializationKind"/>.</param>
        </member>
        <member name="M:Xtensive.Storage.Serialization.SerializationContext.#ctor(System.Func{Xtensive.Storage.Entity,Xtensive.Storage.Serialization.SerializationKind})">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="serializationKindGetter">The <see cref="T:Xtensive.Storage.Serialization.SerializationKind"/> getter.</param>
        </member>
        <member name="P:Xtensive.Storage.Serialization.SerializationContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Serialization.SerializationContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Serialization.SerializationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.CopyFieldHint">
            <summary>
            Copy field hint.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.CopyFieldHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="sourceField">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetType"/>.</param>
            <param name="targetField">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetField"/>.</param>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="sourceType">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceType"/>.</param>
            <param name="field">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceField"/> and <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetField"/>.</param>
            <param name="targetType">Value for <see cref="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetType"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceType">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.CopyFieldHint.SourceField">
            <summary>
            Gets the source field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.CopyFieldHint.TargetField">
            <summary>
            Gets the target field.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.SessionEventArgs">
            <summary>
            Provides data for <see cref="E:Xtensive.Storage.Domain.SessionOpen"/> event.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SessionEventArgs.#ctor(Xtensive.Storage.Session)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:Xtensive.Storage.SessionEventArgs.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Query">
            <summary>
            Access point to a single <see cref="T:Xtensive.Storage.Key"/> resolving.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Query.Single(Xtensive.Storage.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="key"/> identifies.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Entity with the specified key is not found.</exception>
        </member>
        <member name="M:Xtensive.Storage.Query.SingleOrDefault(Xtensive.Storage.Key)">
            <summary>
            Resolves (gets) the <see cref="T:Xtensive.Storage.Entity"/> by the specified <paramref name="key"/>
            in the current <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> specified <paramref name="key"/> identifies.
            <see langword="null"/>, if there is no such entity.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Query.Execute``1(System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate 
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them if it's already cached; 
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the result element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.Execute``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them if it's already cached; 
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TElement">The type of the result element.</typeparam>
            <param name="key">An cache item's key.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.Execute``1(System.Func{``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="query"/> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo"/> instance)
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.Execute``1(System.Object,System.Func{``0})">
            <summary>
            Finds compiled query in cache by provided <paramref name="key"/>
            and executes them if it's already cached;
            otherwise executes the <paramref name="query"/> delegate
            and caches the result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An cache item's key.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>Query result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.ExecuteFutureScalar``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates the future and registers it for the later execution.
            The query associated with the future will be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="key">An cache item's key.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>The future that will be executed when its result is requested.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.ExecuteFutureScalar``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates the future and registers it for the later execution.
            The query associated with the future will NOT be cached.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>The future that will be executed when its result is requested.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.ExecuteFuture``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Creates the future and registers it for the later execution.
            The query associated with the future will be cached.
            </summary>
            <typeparam name="TElement">The type of the result element.</typeparam>
            <param name="key">An cache item's key.</param>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>The future that will be executed when its result is requested.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.ExecuteFuture``1(System.Func{System.Linq.IQueryable{``0}})">
            <summary>
            Creates the future and registers it for the later execution.
            The query associated with the future will be cached.
            </summary>
            <typeparam name="TElement">The type of the result element.</typeparam>
            <param name="query">A delegate performing the query to cache.</param>
            <returns>The future that will be executed when its result is requested.</returns>
        </member>
        <member name="M:Xtensive.Storage.Query.SingleOrDefault(Xtensive.Storage.Session,Xtensive.Storage.Key)">
            <summary>
            Resolves the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to resolve.</param>
            <param name="session">The session to resolve the <paramref name="key"/> in.</param>
            <returns>
            The <see cref="T:Xtensive.Storage.Entity"/> the specified <paramref name="key"/> identifies or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Xtensive.Storage.Validation">
            <summary>
            Validation related helper class.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Validation.Disable">
            <summary>
            Opens the "inconsistent region" - the code region, in which validation is
            just queued for delayed execution rather then performed immediately.
            Actual validation will happen on disposal of <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion"/>.
            </summary>
            <returns>
            <see cref="T:System.IDisposable"/> object, which disposal will identify the end of the region.
            </returns>
            <remarks>
            <para>
            The beginning of the region is the place where this method is called.
            </para>
            <para>
            The end of the region is the place where returned <see cref="T:System.IDisposable"/> object is disposed.
            The validation of all queued to validate objects will be performed during disposal, if
            <see cref="M:Xtensive.Integrity.Validation.InconsistentRegionExtensions.Complete(Xtensive.Integrity.Validation.InconsistentRegion)"/> method was called on
            <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion"/> object before disposal.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Validation.Disable(Xtensive.Storage.Session)">
            <summary>
            Opens the "inconsistent region" - the code region, in which validation is
            just queued for delayed execution rather then performed immediately.
            Actual validation will happen on disposal of <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion"/>.
            </summary>
            <returns>
            <see cref="T:System.IDisposable"/> object, which disposal will identify the end of the region.
            </returns>
            <remarks>
            <para>
            The beginning of the region is the place where this method is called.
            </para>
            <para>
            The end of the region is the place where returned <see cref="T:System.IDisposable"/> object is disposed.
            The validation of all queued to validate objects will be performed during disposal, if
            <see cref="M:Xtensive.Integrity.Validation.InconsistentRegionExtensions.Complete(Xtensive.Integrity.Validation.InconsistentRegion)"/> method was called on
            <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion"/> object before disposal.
            </para>
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Validation.Enforce">
            <summary>
            Validates all instances registered in <see cref="T:Xtensive.Storage.ValidationContext"/>
            of current <see cref="T:Xtensive.Storage.Session"/> regardless if inconsistency
            regions are open or not.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Validation.Enforce(Xtensive.Storage.Session)">
            <summary>
            Validates all instances registered in <see cref="T:Xtensive.Storage.ValidationContext"/>
            of specified <paramref name="session"/> regardless if inconsistency
            regions are open or not.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:Xtensive.Storage.SchemaSynchronizationException">
            <summary>
            Describes schema synchronization errors 
            detected during <see cref="T:Xtensive.Storage.Domain"/>.<see cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/> execution.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SchemaSynchronizationException.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Xtensive.Storage.SchemaSynchronizationException.#ctor(System.String,System.Exception)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Xtensive.Storage.FieldMappingAttribute">
            <summary>
            Field mapping attribute.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.FieldMappingAttribute.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingName">Field mapping name.</param>
        </member>
        <member name="M:Xtensive.Storage.FieldMappingAttribute.#ctor(System.String,System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="mappingName">Field mapping name.</param>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="P:Xtensive.Storage.FieldMappingAttribute.Name">
            <summary>
            Gets the base part of the field's related column name.
            </summary>
            <remarks>
            You can use the following characters in <see cref="P:Xtensive.Storage.FieldMappingAttribute.Name"/>s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Storage.FieldMappingAttribute.Name"/> can't be an empty string or <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.FieldMappingAttribute.FieldName">
            <summary>
            Gets or sets the base part of the field's related column name.
            </summary>
            <remarks>
            You can use the following characters in <see cref="P:Xtensive.Storage.FieldMappingAttribute.FieldName"/>s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Storage.FieldMappingAttribute.FieldName"/> can't be an empty string or <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.UpgradeContext">
            <summary>
            Upgrade context.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Upgrade.UpgradeContext"/>, or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Upgrade.UpgradeContext.Current"/> <see cref="T:Xtensive.Storage.Upgrade.UpgradeContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.UpgradeContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Upgrade.UpgradeContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.Stage">
            <summary>
            Gets the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.OriginalConfiguration">
            <summary>
            Gets the original <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.Configuration">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/>
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.OrderedUpgradeHandlers">
            <summary>
            Gets the ordered collection of upgrade handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.UpgradeHandlers">
            <summary>
            Gets the map of upgrade handlers.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.Hints">
            <summary>
            Gets the upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.SchemaHints">
            <summary>
            Gets the schema upgrade hints.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.SchemaDifference">
            <summary>
            Gets the storage model difference 
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.SchemaUpgradeActions">
            <summary>
            Gets the schema upgrade actions
            at the current upgrade stage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.ExtractedDomainModel">
            <summary>
            Gets the domain model that was extracted from storage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.NativeExtractedSchema">
            <summary>
            Gets the native storage schema.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.Modules">
            <summary>
            Gets or sets the collection of extension modules.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.UpgradeContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.SystemTypeAttribute">
            <summary>
            Marks persistent type as a system type.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SystemTypeAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SystemTypeAttribute.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="typeId">The type identifier.</param>
        </member>
        <member name="P:Xtensive.Storage.SystemTypeAttribute.TypeId">
            <summary>
            Type identifier to preserve for it.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Internals.EntitySetState">
            <summary>
            Describes cached state of <see cref="T:Xtensive.Storage.EntitySetBase"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.Contains(Xtensive.Storage.Key)">
            <summary>
            Determines whether cached state contains specified item.
            </summary>
            <param name="key">The key.</param>
            <returns>Check result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.Register(Xtensive.Storage.Key)">
            <summary>
            Registers the specified fetched key in cached state.
            </summary>
            <param name="key">The key to register.</param>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.Add(Xtensive.Storage.Key)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key to add.</param>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.Remove(Xtensive.Storage.Key)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetState.#ctor(System.Int64)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="maxCacheSize">Maximal count of items to cache.</param>
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Internals.EntitySetState.Version">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Internals.EntitySetState.Xtensive#Core#IHasVersion#Version">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Internals.EntitySetState.IsFullyLoaded">
            <summary>
            Gets a value indicating whether state is fully loaded.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Internals.EntitySetState.Count">
            <summary>
            Gets the count of cached items.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Serialization.SerializationKind">
            <summary>
            Serialization kind (serialization by reference or by value).
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Serialization.SerializationKind.ByReference">
            <summary>
            Serialization by reference.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Serialization.SerializationKind.ByValue">
            <summary>
            Serialization by value 
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Serialization.DeserializationContext">
            <summary>
            Deserialization context.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationContext.Demand">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Serialization.DeserializationContext"/>, 
            or throws <see cref="T:System.InvalidOperationException"/>, if active context is not found.
            </summary>
            <returns>Current context.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Xtensive.Storage.Serialization.DeserializationContext.Current"/> <see cref="T:Xtensive.Storage.Serialization.DeserializationContext"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationContext.InitializeEntity(Xtensive.Storage.Entity)">
            <summary>
            Initializes the <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Storage.Entity"/> to initialize.</param>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationContext.InitializeEntity(Xtensive.Storage.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes the entity, i.e. deserializes or generates its <see cref="T:Xtensive.Storage.Key"/> and creates its <see cref="T:Xtensive.Storage.EntityState"/>.
            </summary>    
            <param name="entity">The entity to initialize.</param>
            <param name="serializationInfo">The information to populate the <see cref="P:Xtensive.Storage.Entity.Key"/>.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <remarks>
            Target <see cref="T:Xtensive.Storage.Entity"/> is not initialized on this step, therefore it is unable to get or set its field values.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationContext.DeserializeEntityFields(Xtensive.Storage.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the <see cref="T:Xtensive.Storage.Entity"/>'s field values.
            </summary>
            <param name="entity">The <see cref="T:Xtensive.Storage.Entity"/> to deserialize.</param>
            <param name="serializationInfo">The information to populate the <see cref="T:Xtensive.Storage.Entity"/>'s field values.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <remarks>
            <see cref="P:Xtensive.Storage.Entity.Key"/> is already deserialized and all another <see cref="T:Xtensive.Storage.Entity">Entities</see> is already initialized on this step.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Serialization.DeserializationContext.Current">
            <summary>
            Gets the current <see cref="T:Xtensive.Storage.Serialization.DeserializationContext"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Serialization.DeserializationContext.IsActive">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Internals.CompilerContainerRegistrationHandler">
            <summary>
            <see cref="T:Xtensive.Core.Collections.ITypeRegistrationHandler"/> for processing compiler container
            types registration in 
            <see cref="P:Xtensive.Storage.Configuration.DomainConfiguration.CompilerContainers"/> registry.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Internals.CompilerContainerRegistrationHandler.Process(Xtensive.Core.Collections.TypeRegistry,Xtensive.Core.Collections.TypeRegistration,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.Internals.CompilerContainerRegistrationHandler.IsAcceptable(Xtensive.Core.Collections.TypeRegistry,Xtensive.Core.Collections.TypeRegistration,System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Internals.CompilerContainerRegistrationHandler.BaseType">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Building.SchemaUpgradeMode">
            <summary>
            Schema upgrade modes.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaUpgradeMode.ValidateExact">
            <summary>
            Validate schema to be equal to the domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaUpgradeMode.ValidateCompatible">
            <summary>
            Validate schema to be compatible (equal or greater) with the domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaUpgradeMode.Perform">
            <summary>
            Upgrade schema to domain model.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaUpgradeMode.PerformSafely">
            <summary>
            Upgrade schema to domain model safely - 
            i.e. without any operations leading to data lost.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.SchemaUpgradeMode.Recreate">
            <summary>
            Completely recreate the schema.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Aspects.AspectBehaviorAttribute">
            <summary>
            Describes aspect behavior related to a particular method.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Aspects.AspectBehaviorAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Aspects.AspectBehaviorAttribute.#ctor(System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="openSessionAndTransaction">Mutually sets values of <see cref="P:Xtensive.Storage.Aspects.AspectBehaviorAttribute.OpenSession"/>
            and <see cref="P:Xtensive.Storage.Aspects.AspectBehaviorAttribute.OpenTransaction"/>.</param>
        </member>
        <member name="P:Xtensive.Storage.Aspects.AspectBehaviorAttribute.OpenSession">
            <summary>
            Indicates whether a <see cref="T:Xtensive.Storage.Session"/> must 
            be activated for the method this attribute is applied to.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Aspects.AspectBehaviorAttribute.OpenTransaction">
            <summary>
            Indicates whether a <see cref="T:Xtensive.Storage.Transaction"/> must 
            be opened for the method this attribute is applied to.
            Default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.FieldAttribute">
            <summary>
            Indicates that property is persistent field,
            and defines its persistence-related properties.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.FieldAttribute.Length">
            <summary>
            Gets or sets the length of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.String"/> or array of <see cref="T:System.Byte"/> fields.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.FieldAttribute.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.Decimal"/> type.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.FieldAttribute.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
            <remarks>
            This property can be specified for <see cref="T:System.Decimal"/> type.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.FieldAttribute.LazyLoad">
            <summary>
            Gets or sets a value indicating whether value of this field should be loaded on demand.
            </summary>
            <remarks>
            Usually lazy loading is used for byte-arrays, large string fields or <see cref="T:Xtensive.Storage.Structure">structures</see>.
            <see cref="T:Xtensive.Storage.Entity"/> and <see cref="T:Xtensive.Storage.EntitySet`1"/> fields are always loaded on demand.
            </remarks>
        </member>
        <member name="T:Xtensive.Storage.Providers.DomainHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/>-level handler.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.GetMemberCompilerProvider``1">
            <summary>
            Gets the member compiler provider by its type parameter.
            </summary>
            <typeparam name="T">The type of member compiler provider type parameter.</typeparam>
            <returns>
            Found member compiler provider;
            <see langword="null"/>, if it was not found.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.CreateCompiler(Xtensive.Core.Collections.BindingCollection{System.Object,Xtensive.Storage.Rse.Providers.ExecutableProvider})">
            <summary>
            Creates the compiler.
            </summary>
            <param name="compiledSources">The compiled sources. Shared across all compilers.</param>
            <returns>A new compiler.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.CreatePreCompiler">
            <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler"/>.
            </summary>
            <returns>A new pre-compiler.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.CreatePostCompiler">
            <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler"/>.
            </summary>
            <returns>A new post-compiler.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.GetCompilerProviderContainerTypes">
            <summary>
            Gets the sequence of compiler provider container types.
            </summary>
            <returns>The sequence of compiler provider container types.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.BuildMapping">
            <summary>
            Builds the mapping schema.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.CreateProviderInfo">
            <summary>
            Creates <see cref="P:Xtensive.Storage.Providers.DomainHandler.ProviderInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.BuildMemberCompilerProviders">
            <exception cref="T:System.InvalidOperationException">One of compiler containers is 
            improperly described.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.DomainHandler.Initialize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.DomainHandler.Domain">
            <summary>
            Gets the domain this handler is bound to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.DomainHandler.CompilationContext">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext"/>
            associated with the domain.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.DomainHandler.ServerSideCompiler">
            <summary>
            Builds the <see cref="T:Xtensive.Storage.Rse.Compilation.ICompiler"/>.
            Invoked from <see cref="M:Xtensive.Storage.Providers.DomainHandler.Initialize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.DomainHandler.ProviderInfo">
            <summary>
            Gets the information about provider's capabilities.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.EntityState">
            <summary>
            The underlying state of the <see cref="T:Xtensive.Storage.Entity"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntityState.RollbackDifference">
            <summary>
            Reverts the state to the origin by discarding the difference.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntityState.CommitDifference">
            <summary>
            Commits the state difference to the origin.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.EntityState.Update(Xtensive.Core.Tuples.Tuple)">
            <summary>
            Updates the entity state to the most current one.
            </summary>
            <param name="update">The state change tuple, or a new state tuple. 
            If <see langword="null" />, the entity is considered as removed.</param>
        </member>
        <member name="M:Xtensive.Storage.EntityState.LoadState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntityState.ResetState">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntityState.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntityState.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntityState.Equals(Xtensive.Storage.EntityState)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.EntityState.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.EntityState.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.Tuple">
            <summary>
            Gets the values as <see cref="P:Xtensive.Storage.EntityState.Tuple"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.DifferentialTuple">
            <summary>
            Gets the values as <see cref="P:Xtensive.Storage.EntityState.DifferentialTuple"/>.
            </summary>
            <returns>A <see cref="P:Xtensive.Storage.EntityState.DifferentialTuple"/> corresponding to the current state.</returns>
        </member>
        <member name="P:Xtensive.Storage.EntityState.IsTupleLoaded">
            <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Storage.EntityState.Tuple"/> value is already loaded.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.Entity">
            <summary>
            Gets the owner of this instance.
            </summary>
            <exception cref="T:System.NotSupportedException">Property value is already set.</exception>
        </member>
        <member name="P:Xtensive.Storage.EntityState.PersistenceState">
            <summary>
            Gets or sets the persistence state.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.IsNotAvailable">
            <summary>
            Gets a value indicating whether this entity is available (has a <see cref="P:Xtensive.Storage.EntityState.Tuple"/>).
            Tuple does not exist, if there is no row corresponding to the <see cref="P:Xtensive.Storage.EntityState.Entity"/>
            in the storage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.EntityState.IsNotAvailableOrMarkedAsRemoved">
            <summary>
            Gets a value indicating whether the state is either <see cref="P:Xtensive.Storage.EntityState.IsNotAvailable"/>
            or is marked as removed (see <see cref="P:Xtensive.Storage.EntityState.PersistenceState"/>).
            </summary>
        </member>
        <member name="T:Xtensive.Storage.PersistentAccessor">
            <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Storage.Persistent"/> descendants.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Xtensive.Storage.PersistentAccessor.CreateEntity(System.Type)" -->
        <member name="M:Xtensive.Storage.PersistentAccessor.CreateEntity(System.Type,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates new entity instance of the specified type with the specified value.
            </summary>
            <param name="entityType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Storage.Entity"/> type.</param>
            <param name="tuple">The tuple with entity data.</param>
            <returns>Created entity.</returns>
        </member>
        <member name="M:Xtensive.Storage.PersistentAccessor.CreateStructure(System.Type)">
            <summary>
            Creates new <see cref="T:Xtensive.Storage.Structure"/> of the specified type.
            </summary>
            <param name="structureType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Storage.Structure"/> type.</param>
            <returns>Created structure.</returns>
        </member>
        <member name="M:Xtensive.Storage.PersistentAccessor.GetFieldValue``1(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets the value of the specified persistent field of the target.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.PersistentAccessor.SetFieldValue``1(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,``0)">
            <summary>
            Sets the value of the specified persistent field of the target.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="target">The target persistent object.</param>
            <param name="field">The field to set value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Xtensive.Storage.PersistentAccessor.GetReferenceKey(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
            <remarks>
            Result is the same as <c>target.GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
            <param name="target">The target persistent object.</param>
            <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Storage.Entity"/> descendant.</param>
            <returns>Referenced entity key.</returns>
            <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
        </member>
        <member name="M:Xtensive.Storage.PersistentAccessor.Remove(Xtensive.Storage.Entity)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="target">The entity to remove.</param>
        </member>
        <member name="T:Xtensive.Storage.Aspects.PersistentAttribute">
            <summary>
            Provides necessary aspects to <see cref="T:Xtensive.Storage.Persistent"/> and <see cref="T:Xtensive.Storage.SessionBound"/> descendants.
            </summary>
            <remarks>
            <list>
              <listheader>PersistentAttribute applies following aspects on a target class:</listheader>
              <item><see cref="T:Xtensive.Storage.Aspects.TransactionalAspect"/> on all methods of <see cref="T:Xtensive.Storage.SessionBound"/></item>
              <item><see cref="T:Xtensive.Core.Aspects.Helpers.AutoPropertyReplacementAspect"/> on auto-properties with <see cref="T:Xtensive.Storage.FieldAttribute">[Field] attribute</see></item>
              <item><see cref="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAspect"/> on <see cref="T:Xtensive.Storage.Persistent"/> and <see cref="T:Xtensive.Storage.EntitySet`1"/> classes</item>
              <item><see cref="T:Xtensive.Core.Aspects.Helpers.ProtectedConstructorAccessorAspect"/> on <see cref="T:Xtensive.Storage.Persistent"/> and <see cref="T:Xtensive.Storage.EntitySet`1"/> classes</item>
            </list>
            It is possible to apply <see cref="T:Xtensive.Storage.Aspects.PersistentAttribute"/> to the whole assembly with persistent model, 
            in order to automatically apply this attribute to all types.
            </remarks>
        </member>
        <member name="M:Xtensive.Storage.Aspects.PersistentAttribute.CompileTimeValidate(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Aspects.PersistentAttribute.ProvideAspects(System.Object,PostSharp.Laos.LaosReflectionAspectCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Aspects.PersistentAttribute.GetPostSharpRequirements">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Aspects.PersistentAttribute.GetInternalConstructorSignatures(System.Type)">
            <exception cref="T:System.InvalidOperationException">[Suppresses warning]</exception>
        </member>
        <member name="T:Xtensive.Storage.Building.SchemaComparer">
            <summary>
            Compares storage models.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.SchemaComparer.Compare(Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Modelling.Comparison.Hints.HintSet)">
            <summary>
            Compares <paramref name="sourceSchema"/> and <paramref name="targetSchema"/>.
            </summary>
            <param name="sourceSchema">The source schema.</param>
            <param name="targetSchema">The target schema.</param>
            <param name="hints">The upgrade hints.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="T:Xtensive.Storage.TransactionEventArgs">
            <summary>
            Provides data for <see cref="T:Xtensive.Storage.Session"/> transaction-related events.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionEventArgs.#ctor(Xtensive.Storage.Transaction)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:Xtensive.Storage.TransactionEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.TransactionalExtensions">
            <summary>
            Various extensions related to transactions.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Storage.Session,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Storage.Session,System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the action argument.</typeparam>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally(System.Action)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Storage.Session)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally(System.Action,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Storage.Session,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
            <param name="action">The action.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Storage.Session,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Storage.Session,System.Transactions.IsolationLevel,``0)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="T">The type of the function argument.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0})">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Storage.Session)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},System.Transactions.IsolationLevel)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Xtensive.Storage.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Storage.Session,System.Transactions.IsolationLevel)">
            <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="function">The function.</param>
            <param name="session">The session.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="T:Xtensive.Storage.Configuration.SessionConfigurationCollection">
            <summary>
            <see cref="T:Xtensive.Storage.Configuration.SessionConfiguration"/> collection.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Insert(System.Int32,Xtensive.Storage.Configuration.SessionConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Add(Xtensive.Storage.Configuration.SessionConfiguration)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Equals(Xtensive.Storage.Configuration.SessionConfigurationCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfigurationCollection.Clone">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfigurationCollection.Default">
            <summary>
             Gets the default session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfigurationCollection.System">
            <summary>
             Gets the system session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfigurationCollection.Service">
            <summary>
             Gets the service session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfigurationCollection.KeyGenerator">
            <summary>
             Gets the key generator session configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfigurationCollection.Item(System.String)">
            <summary>
             Gets the element with the specified name.
            </summary>
            <param name="name">The string name of the element to get.</param>
        </member>
        <member name="T:Xtensive.Storage.IndexAttribute">
            <summary>
            Defines secondary index.
            </summary>
            <example>
              <code lang="cs" source="..\..\Xtensive.Storage\Xtensive.Storage.Manual\IndexAttributeSample.cs" region="Sample" />
            </example>
        </member>
        <member name="M:Xtensive.Storage.IndexAttribute.#ctor(System.String,System.String[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="keyField">The first key field.</param>
            <param name="keyFields">The other (optional) key fields.</param>
        </member>
        <member name="P:Xtensive.Storage.IndexAttribute.Name">
            <summary>
            Gets or sets the index name.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IndexAttribute.KeyFields">
            <summary>
            Key fields that compose the index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IndexAttribute.IncludedFields">
            <summary>
            Non key fields that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IndexAttribute.FillFactor">
            <summary>
            Fill factor for this index, must be a real number between 
            <see langword="0"/> and <see langword="1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.IndexAttribute.Unique">
            <summary>
            Gets or sets a value indicating whether the index is unique.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.NamingRules">
            <summary>
            Miscellaneous naming policy rules.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamingRules.Default">
            <summary>
            No modification should be applied.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamingRules.UnderscoreHyphens">
            <summary>
            All hyphens should be replaced with underscore symbol.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamingRules.UnderscoreDots">
            <summary>
            All dots should be replaced with underscore symbol.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Building.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Building.Log.Name">
            <summary>
            Gets the name of this log.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.HierarchyBuilder.BuildHierarchy(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Building.Definitions.HierarchyDef)">
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
        </member>
        <member name="T:Xtensive.Storage.Providers.EnumerationContext">
            <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext"/> 
            suitable for storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.EnumerationContext.CreateNew">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.EnumerationContext.CreateActiveScope">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.EnumerationContext.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.EnumerationContext.GlobalTemporaryData">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.EnumerationContext.TransactionTemporaryData">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Serialization.DeserializationScope">
            <summary>
            Deserialization scope.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Serialization.DeserializationScope.#ctor(Xtensive.Storage.Serialization.DeserializationContext)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Xtensive.Storage.Serialization.DeserializationScope.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.SessionCacheType">
            <summary>
            Enumerate possible types of session caches.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionCacheType.Default">
            <summary>
            Default cache type.
            Value is <see langword="0x0" />.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionCacheType.LruWeak">
            <summary>
            <see cref="T:Xtensive.Core.Caching.LruCache`2"/> with chained <see cref="T:Xtensive.Core.Caching.WeakCache`2"/>.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionCacheType.Infinite">
            <summary>
            <see cref="T:Xtensive.Core.Caching.InfiniteCache`2"/>.
            Value is <see langword="0x1"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Linq.Queryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T">The type of the content item of the data source.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.Linq.Queryable`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.Queryable`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.Queryable`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.Queryable`1.#ctor(System.Linq.Expressions.Expression)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="expression"/>  is out of range.</exception>
        </member>
        <member name="P:Xtensive.Storage.Linq.Queryable`1.Expression">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Linq.Queryable`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Linq.Queryable`1.System#Linq#IQueryable#Provider">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Linq.Queryable`1.Compiled">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSet"/> this query is compiled to.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Linq.ExpressionEvaluator">
            <summary>
            Expression visitor that checks ability to evaluate expression to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Linq.ExpressionEvaluator.CanBeEvaluated(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether specified <paramref name="e"/> can be evaluated.
            </summary>
            <param name="e">The expression.</param>
            <returns>
              <see langword="true" /> if <paramref name="e"/> can be evaluated; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Linq.ExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the specified <paramref name="e"/> into <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="e">The expression.</param>
        </member>
        <member name="M:Xtensive.Storage.Linq.ExpressionEvaluator.Visit(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.ExpressionEvaluator.VisitUnknown(System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Linq.ExpressionEvaluator.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.ValidationContext">
            <summary>
            Validation context used by <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.DomainUpgradeMode">
            <summary>
            Enumerates possible <see cref="T:Xtensive.Storage.Domain"/> upgrade modes.
            <seealso cref="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)"/>
            <seealso cref="T:Xtensive.Storage.Domain"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.DomainUpgradeMode.Default">
            <summary>
            Default upgrade mode.
            The same as <see cref="F:Xtensive.Storage.DomainUpgradeMode.PerformSafely"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.DomainUpgradeMode.Validate">
            <summary>
            Restricts any modifications to storage.
            <see cref="T:Xtensive.Storage.DomainBuilderException"/> will be 
            thrown if storage schema differs from the expected one.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.DomainUpgradeMode.Recreate">
            <summary>
            Recreates all storage structures. Storage will
            contain no instances after this type of update.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.DomainUpgradeMode.Perform">
            <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, excess columns and tables will be removed.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.DomainUpgradeMode.PerformSafely">
            <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, 
            excess columns and tables will be removed only if there are corresponding hints.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Building.Builders.FieldBuilder.BuildDeclaredField(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Building.Definitions.FieldDef)">
            <summary>
            Builds the declared field.
            </summary>
            <param name="type">The type field belongs to.</param>
            <param name="fieldDef">The field definition.</param>
        </member>
        <member name="T:Xtensive.Storage.Internals.EntityChangeRegistry">
            <summary>
            Registers <see cref="T:Xtensive.Storage.EntityState"/> changes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityChangeRegistry.Register(Xtensive.Storage.EntityState)">
            <summary>
            Registers the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityChangeRegistry.GetItems(Xtensive.Storage.PersistenceState)">
            <summary>
            Gets the items with specified <paramref name="state"/>.
            </summary>
            <param name="state">The state of items to get.</param>
            <returns>The sequence of items with specified state.</returns>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityChangeRegistry.Clear">
            <summary>
            Clears the registry.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntityChangeRegistry.GetContainer(Xtensive.Storage.PersistenceState)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="state"/> is out of range.</exception>
        </member>
        <member name="P:Xtensive.Storage.Internals.EntityChangeRegistry.Count">
            <summary>
            Gets the count of registered entities.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.Elements.BuilderElement">
            <summary>
            Builder configuration element within a configuration file.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.BuilderElement.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Configuration.Elements.BuilderElement.Type">
            <summary>
            Gets or sets the type of the builder.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Aspects.StorageAspectPriority">
            <summary>
            Defines priority of storage-related aspects.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Aspects.StorageAspectPriority.Transactional">
            <summary>
            Priority of <see cref="T:Xtensive.Storage.Aspects.TransactionalAspect"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Upgrade.RenameTypeHint">
            <summary>
            Rename type hint.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RenameTypeHint.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Upgrade.RenameTypeHint.#ctor(System.String,System.Type)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="oldType">The old type.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RenameTypeHint.NewType">
            <summary>
            Gets the new type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Upgrade.RenameTypeHint.OldType">
            <summary>
            Gets the name of old type.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.IModule">
            <summary>
            The contract of extension module.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.IModule.OnBuilt(Xtensive.Storage.Domain)">
            <summary>
            Called when 'complex' build process is completed.
            </summary>
            <param name="domain">The built domain.</param>
        </member>
        <member name="M:Xtensive.Storage.IModule.OnDefinitionsBuilt(Xtensive.Storage.Building.BuildingContext,Xtensive.Storage.Building.Definitions.DomainModelDef)">
            <summary>
            Called when the build of <see cref="T:Xtensive.Storage.Building.Definitions.DomainModelDef"/> is completed.
            </summary>
            <param name="context">The domain building context.</param>
            <param name="model">The domain model definition.</param>
        </member>
        <member name="T:Xtensive.Storage.KeyAttribute">
            <summary>
            Marks persistent property as a part of primary key and 
            specifies <see cref="P:Xtensive.Storage.KeyAttribute.Position"/> and <see cref="P:Xtensive.Storage.KeyAttribute.Direction"/> of the field in key.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyAttribute.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.KeyAttribute.#ctor(System.Int32)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="position">The <see cref="P:Xtensive.Storage.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
        </member>
        <member name="M:Xtensive.Storage.KeyAttribute.#ctor(Xtensive.Core.Direction)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="direction">The <see cref="P:Xtensive.Storage.KeyAttribute.Direction">sort direction</see>.</param>
        </member>
        <member name="M:Xtensive.Storage.KeyAttribute.#ctor(System.Int32,Xtensive.Core.Direction)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="position">The <see cref="P:Xtensive.Storage.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
            <param name="direction">The <see cref="P:Xtensive.Storage.KeyAttribute.Direction">sort direction</see>.</param>
        </member>
        <member name="P:Xtensive.Storage.KeyAttribute.Position">
            <summary>
            Gets or sets the position of persistent property inside primary key.
            </summary>
            <remarks>
            <para>Each key in hierarchy should have an unique position from 0 to N-1 where N is number of key fields.</para>
            <para>
            Key fields positions and <see cref="P:Xtensive.Storage.KeyAttribute.Direction">directions</see> choise can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and <see cref="P:Xtensive.Storage.KeyAttribute.Direction"/> of key fields.
            </para>
            <para>Default position is <c>0</c>.</para>
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.KeyAttribute.Direction">
            <summary>
            Gets or sets the sort direction. Default is <see cref="F:Xtensive.Core.Direction.Positive"/>.
            </summary>
            <para>
            Key fields <see cref="P:Xtensive.Storage.KeyAttribute.Position">positions</see> and directions choise can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and direction of key fields.
            </para>
        </member>
        <member name="T:Xtensive.Storage.Domain">
            <summary>
            An access point to a single storage.
            </summary>
            <sample>
            <code source="..\..\Xtensive.Storage\Xtensive.Storage.Manual\DomainAndSessionSample.cs" region="Domain sample"></code>
            </sample>
        </member>
        <member name="M:Xtensive.Storage.Domain.Demand">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Domain"/> of the current <see cref="T:Xtensive.Storage.Session"/>, or throws <see cref="T:System.InvalidOperationException"/>, 
            if active <see cref="T:Xtensive.Storage.Session"/> is not found.
            </summary>
            <returns>Current domain.</returns>
            <exception cref="T:System.InvalidOperationException">Current session is <see langword="null"/>.</exception>
            <seealso cref="M:Xtensive.Storage.Session.Demand">Session.Current property</seealso>
        </member>
        <member name="M:Xtensive.Storage.Domain.Build(Xtensive.Storage.Configuration.DomainConfiguration)">
            <summary>
            Builds the new <see cref="T:Xtensive.Storage.Domain"/> according to the specified <see cref="T:Xtensive.Storage.Configuration.DomainConfiguration"/>.
            </summary>
            <param name="configuration">The configuration of domain to build.</param>
            <returns>Newly built <see cref="T:Xtensive.Storage.Domain"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Domain.Dispose">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Storage.Domain.SessionOpen">
            <summary>
            Occurs when new <see cref="T:Xtensive.Storage.Session"/> is open and activated.
            </summary>
            <seealso cref="!:OpenSession()"/>
        </member>
        <member name="E:Xtensive.Storage.Domain.Disposing">
            <summary>
            Occurs when <see cref="T:Xtensive.Storage.Domain"/> is about to be disposed.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.Current">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Domain"/> of the current <see cref="T:Xtensive.Storage.Session"/>. 
            </summary>
            <seealso cref="P:Xtensive.Storage.Session.Current"/>
            <seealso cref="M:Xtensive.Storage.Domain.Demand"/>
        </member>
        <member name="P:Xtensive.Storage.Domain.Configuration">
            <summary>
            Gets the domain configuration.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.RecordSetReader">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.Domain.RecordSetReader"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.DisposingState">
            <summary>
            Gets the disposing state of the domain.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.Model">
            <summary>
            Gets the domain model.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.Schema">
            <summary>
            Gets the storage schema.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.ExtractedSchema">
            <summary>
            Gets the extracted storage schema.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.HandlerFactory">
            <summary>
            Gets the handler factory.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.NameBuilder">
            <summary>
            Gets the name builder.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.TemporaryData">
            <summary>
            Gets the domain-level temporary data.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.ServiceContainer">
            <summary>
            Gets the service container.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.IsDebugEventLoggingEnabled">
            <summary>
            Indicates whether debug event logging is enabled.
            </summary>
            <remarks>
            Caches <see cref="!:Log.IsLogged"/> method result for <see cref="F:Xtensive.Core.Diagnostics.LogEventTypes.Debug"/> event.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.Domain.StorageProviderInfo">
            <summary>
            Gets the information about provider's capabilities.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.Modules">
            <summary>
            Gets the collection of extension modules.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Domain.Extensions">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Configuration.SessionConfiguration">
            <summary>
            <see cref="T:Xtensive.Storage.Session"/> configuration.
            </summary>
            <remarks>
            <para id="About"><see cref="T:Xtensive.Core.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true"/></para>
            </remarks>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultCacheSize">
            <summary>
            Default cache size.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultCacheType">
            <summary>
            Default cache type.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultIsolationLevelValue">
            <summary>
             Default isolation level.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultBatchSize">
            <summary>
            Default batch size.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionConfiguration.Default">
            <see cref="P:Xtensive.Core.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.Validate">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.CreateClone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.Clone(Xtensive.Core.Helpers.ConfigurationBase)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.Clone">
            <summary>
            Clones this configuration.
            </summary>
            <returns>The clone of this configuration.</returns>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">Value for <see cref="P:Xtensive.Storage.Configuration.SessionConfiguration.Name"/>.</param>
        </member>
        <member name="M:Xtensive.Storage.Configuration.SessionConfiguration.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.Name">
            <summary>
            Gets the session name.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.UserName">
            <summary>
            Gets or sets user name to authenticate.
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.Password">
            <summary>
            Gets or sets password to authenticate.
            Default value is <see langword="null" />.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.CacheSize">
            <summary>
            Gets or sets the size of the session entity state cache. 
            Default value is <see cref="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultCacheSize"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.CacheType">
            <summary>
            Gets or sets the type of the session cache.
            Default value is <see cref="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultCacheType"/>.
            </summary>
            <value>The type of the cache.</value>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.DefaultIsolationLevel">
            <summary>
            Gets or sets the default isolation level. 
            Default value is <see cref="F:Xtensive.Storage.Configuration.SessionConfiguration.DefaultIsolationLevelValue"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.Type">
            <summary>
            Gets session type.
            Default value is <see cref="F:Xtensive.Storage.Configuration.SessionType.Default"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.BatchSize">
            <summary>
            Gets or sets the size of the batch.
            This affects create, update, delete operations and future queries.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.Options">
            <summary>
            Gets or sets session options.
            Default value is <see cref="F:Xtensive.Storage.Configuration.SessionOptions.Default"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.UsesAmbientTransactions">
            <summary>
            Gets a value indicating whether session uses ambient transactions.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Configuration.SessionConfiguration.AllowsAutoTransactions">
            <summary>
            Gets a value indicating whether session allows automatic transactions.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Configuration.NamespacePolicy">
            <summary>
            Enumerates all possible namespace treatment options in naming policy.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamespacePolicy.Default">
            <summary>
            The same as <see cref="F:Xtensive.Storage.Configuration.NamespacePolicy.Omit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamespacePolicy.Synonymize">
            <summary>
            Name of the type and namespace synonym will be used to derive 
            the name of the table or view.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamespacePolicy.AsIs">
            <summary>
            Name of the type and namespace name will be used to derive 
            the name of the table or view.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamespacePolicy.Hash">
            <summary>
            Name of the type and namespace hashes will be used to derive 
            the name of the table or view. Driver decides on the type of hashing
            algorythm to use.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.NamespacePolicy.Omit">
            <summary>
            Only name of the type will be used to derive the name of
            the table or view.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.Root">
            <summary>
            Gets the root of the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.KeyFields">
            <summary>
            Gets the fields that are included in the key for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.IncludeTypeId">
            <summary>
            Gets or sets a value indicating whether key should include TypeId field.
            </summary>
            <value>
            <see langword="true"/> if TypeId field should be included into key; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.Schema">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.InheritanceSchema"/> for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.KeyGeneratorCacheSize">
            <summary>
            Gets or sets the size of the key generator cache.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Building.Definitions.HierarchyDef.KeyGenerator">
            <summary>
            Gets or sets the type instance of which is responsible for key generation.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.HandlerFactory">
            <summary>
            An abstract base class for any storage factories.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.HandlerFactory.CreateHandler``1">
            <summary>
            Creates the handler of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the handler to create.</typeparam>
            <returns>A newly created handler of requested type;</returns>
            <exception cref="T:System.NotSupportedException">Handler for type <typeparamref name="T"/> was not found.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.HandlerFactory.CreateHandler(System.Type)">
            <summary>
            Creates the handler of specified type <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Type of the handler to create.</param>
            <returns>A newly created handler of requested type;</returns>
            <exception cref="T:System.NotSupportedException">Handler for type <paramref name="handlerType"/> was not found.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.HandlerFactory.TryCreateHandler``1">
            <summary>
            Creates the handler of the specified type.
            </summary>
            <typeparam name="T">Type of the handler to create.</typeparam>
            <returns>
            Created handler or <see langword="null" /> if handler of specified type was now found.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.HandlerFactory.TryCreateHandler(System.Type)">
            <summary>
            Creates the handler of type <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Type of the handler to create.</param>
            <returns>
            Created handler or <see langword="null" /> if handler of specified type was now found.
            </returns>
        </member>
        <member name="T:Xtensive.Storage.SessionConsumptionScope">
            <summary>
            Consumption scope for <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.SessionConsumptionScope.#ctor(Xtensive.Storage.Session,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="session">The session.</param>
            <param name="activate">Determines whether session should be activated or not.</param>
        </member>
        <member name="M:Xtensive.Storage.SessionConsumptionScope.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.SessionConsumptionScope.Current">
            <summary>
            Gets the current scope.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.SessionConsumptionScope.CurrentSession">
            <summary>
            Gets the current session.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.SessionConsumptionScope.Session">
            <summary>
            Gets the session for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.SessionConsumptionScope.SessionScope">
            <summary>
            Gets the session scope that is controlled by this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.KeyGeneratorFactory">
            <summary>
            Generator factory.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.KeyGeneratorFactory.CreateGenerator(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            Creates the generator according to the specified <paramref name="generatorInfo"/>.
            </summary>
            <param name="generatorInfo">The <see cref="!:generatorInfo"/> instance that describes generator.</param>
            <returns><see cref="T:Xtensive.Storage.KeyGenerator"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">when <paramref name="generatorInfo"/> contains more then one key field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <see cref="T:System.Type"/> of the key field is not supported.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.KeyGeneratorFactory.IsSchemaBoundGenerator(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            Determines whether specific generator requires corresponding object in schema.
            </summary>
            <param name="generatorInfo">The generator info.</param>
            <returns>
            <see langword="true"/> if generator requires corresponding object in schema.
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.KeyGeneratorFactory.CreateGenerator``1(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            Creates the generator.
            </summary>
            <typeparam name="TFieldType">The type of the field.</typeparam>
            <param name="generatorInfo">The generator info.</param>
            <returns>Newly created <see cref="T:Xtensive.Storage.KeyGenerator"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Internals.EntitySetFieldAccessor`1.SetValue(Xtensive.Storage.Persistent,Xtensive.Storage.Model.FieldInfo,`0)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Always thrown by this method.</exception>
        </member>
        <member name="T:Xtensive.Storage.Configuration.SessionType">
            <summary>
            Enumerates possible types of the <see cref="T:Xtensive.Storage.Session"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionType.Default">
            <summary>
            Default session type - <see cref="F:Xtensive.Storage.Configuration.SessionType.User"/>.
            Value is <see langword="0x0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionType.User">
            <summary>
            A regular user session.
            Value is <see langword="0x0" />.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionType.System">
            <summary>
            A system session.
            Value is <see langword="0x1" />.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionType.KeyGenerator">
            <summary>
            A generator session.
            Value is <see langword="0x2"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Configuration.SessionType.Service">
            <summary>
            A service session.
            Value is <see langword="0x3"/>
            </summary>
        </member>
    </members>
</doc>
