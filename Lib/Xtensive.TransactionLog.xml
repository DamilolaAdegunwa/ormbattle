<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.TransactionLog</name>
    </assembly>
    <members>
        <member name="T:Xtensive.TransactionLog.SortedCollection`1">
            <summary>
            Generic collection, that stores values in order of <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">Type parameter of an element of the collection.</typeparam>
        </member>
        <member name="M:Xtensive.TransactionLog.SortedCollection`1.#ctor">
            <summary>
            <see cref="T:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.TransactionLog.SortedCollection`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            <see cref="T:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate" copy="true"/>
            </summary>
            <param name="comparer">Comparer for elements of the collection.</param>
        </member>
        <member name="T:Xtensive.TransactionLog.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.TransactionLog.Log.Name">
            <summary>
            Log name.
            </summary>
        </member>
        <member name="T:Xtensive.TransactionLog.PersistCounter`1">
            <summary>
            A counter periodically persisting its value (of <typeparamref name="TKey"/> type) 
            to the specified <see cref="T:Xtensive.TransactionLog.Providers.ILogProvider"/>.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
        </member>
        <member name="M:Xtensive.TransactionLog.PersistCounter`1.Flush">
            <summary>
            Persists counter's value to <see cref="T:Xtensive.TransactionLog.Providers.ILogProvider"/>.
            </summary>
        </member>
        <member name="M:Xtensive.TransactionLog.PersistCounter`1.#ctor(System.String,Xtensive.TransactionLog.Providers.ILogProvider,System.TimeSpan,Xtensive.Core.Serialization.ValueSerializer{`0})">
            <summary>
            Creates new instance of <see cref="T:Xtensive.TransactionLog.PersistCounter`1"/>.
            </summary>
            <param name="name">Name of counter (with path).</param>
            <param name="logProvider"><see cref="T:Xtensive.TransactionLog.Providers.ILogProvider"/> to store or restore counter's value.</param>
            <param name="flushTimeout">Time period of automatic persist</param>
            <param name="keySerializer"><see cref="T:Xtensive.Core.Serialization.IValueSerializer`1"/> to serialize/deserialize values.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.PersistCounter`1.Dispose(System.Boolean)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)" copy="true"/>
        </member>
        <member name="M:Xtensive.TransactionLog.PersistCounter`1.Dispose">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true"/>
        </member>
        <member name="M:Xtensive.TransactionLog.PersistCounter`1.Finalize">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dtor" copy="true"/>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.Value">
            <summary>
            Gets counter value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Counter has no values yet.</exception>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.PersistedValue">
            <summary>
            Gets last persisted value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Counter has no values yet.</exception>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.HasValue">
            <summary>
            Gets <see langword="true"/> if counter has values, otherwise gets <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.FlushTimeout">
            <summary>
            Gets time period of automatic persist.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.TransactionLog.PersistCounter`1.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.TransactionLog.ITransactionInfo`1">
            <summary>
            Describes entities for <see cref="T:Xtensive.TransactionLog.TransactionLog`1"/>.
            </summary>
            <typeparam name="TKey">Type of key for entities.</typeparam>
        </member>
        <member name="P:Xtensive.TransactionLog.ITransactionInfo`1.State">
            <summary>
            Gets <see cref="T:Xtensive.Integrity.Transactions.TransactionState"/>.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.ITransactionInfo`1.Data">
            <summary>
            Gets transaction data.
            </summary>
        </member>
        <member name="T:Xtensive.TransactionLog.TransactionInfo`1">
            <summary>
            Basic implementation for <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/>.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionInfo`1.#ctor(`0,Xtensive.Integrity.Transactions.TransactionState,System.Object)">
            <summary>
            Creates new instance of <see cref="T:Xtensive.TransactionLog.TransactionInfo`1"/>.
            </summary>
            <param name="identifier">Transaction identifier.</param>
            <param name="state">Transaction state.</param>
            <param name="data">Transaction data.</param>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionInfo`1.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionInfo`1.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionInfo`1.State">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionInfo`1.Data">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.TransactionLog.TransactionLog`1">
            <summary>
            Transaction log. 
            Stores and reads <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/> records.
            </summary>
            <typeparam name="TKey">Type of the key of <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/> records.</typeparam>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Append(Xtensive.TransactionLog.ITransactionInfo{`0})">
            <summary>
            Appends <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/> to the log.
            </summary>
            <param name="record">Serializable <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/> object to store to log.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Truncate(`0)">
            <summary>
            Truncates log due to specified record. Deletes all records with key less than specified.
            </summary>
            <param name="recordKey">Key of record to truncate from.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Read(`0)">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerator`1"/> enumerating (reading) all the records starting
            from the transaction with specified <paramref name="startFromKey"/> and all
            successive records.
            </summary>
            <param name="startFromKey">Transaction key to enumerate the records from.</param>
            <returns>Described enumerator.</returns>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.#ctor(Xtensive.TransactionLog.Providers.ILogProvider,System.String,Xtensive.Core.Conversion.Biconverter{`0,System.String},System.TimeSpan,System.Int64,System.Runtime.Serialization.IFormatter,Xtensive.Core.Serialization.ValueSerializer{`0})">
            <summary>
            Creates new instance of <see cref="T:Xtensive.TransactionLog.TransactionLog`1"/>.
            </summary>
            <param name="provider">Log provider.</param>
            <param name="logName">Log name.</param>
            <param name="keyToFileNameConverter">A converter that formats <typeparamref name="TKey"/> to file name and visa versa.</param>
            <param name="autoFlushTimeout">Period of time than counters flushes their state to media.</param>
            <param name="maxSegmentLength">Max length of segment in megabytes.</param>
            <param name="transactionFormatter"><see cref="T:System.Runtime.Serialization.IFormatter"/> that serializes and deserializes <see cref="T:Xtensive.TransactionLog.ITransactionInfo`1"/>.</param>
            <param name="keySerializer"><see cref="T:Xtensive.Core.Serialization.IValueSerializer`1"/> that serializes specified <typeparamref name="TKey"/>.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Dispose(System.Boolean)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dispose(System.Boolean)" copy="true"/>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Dispose">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true"/>
        </member>
        <member name="M:Xtensive.TransactionLog.TransactionLog`1.Finalize">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.DisposableDocTemplate.Dtor" copy="true"/>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionLog`1.Provider">
            <summary>
            Gets <see cref="T:Xtensive.TransactionLog.Providers.ILogProvider"/> used by log to store data to media.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionLog`1.Name">
            <summary>
            Gets log name
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.TransactionLog`1.FirstUncommitted">
            <summary>
            Gets key of first uncommitted record. 
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if no uncommitted records are available.</exception>
        </member>
        <member name="T:Xtensive.TransactionLog.Providers.ILogProvider">
            <summary>
            Log provider.
            </summary>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.FolderExists(System.String)">
            <summary>
            Checks if specified folder exists.
            </summary>
            <param name="name">Full name (with path) of folder.</param>
            <returns><see langword="True"/> if specified folder exists, otherwise gets <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.CreateFolder(System.String)">
            <summary>
            Creates new folder.
            </summary>
            <param name="name">Full name (with path) of folder.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.GetFolderFiles(System.String)">
            <summary>
            Gets list of files in specified folder.
            </summary>
            <param name="name">Full name (with path) of folder.</param>
            <returns>Array of <see cref="T:System.String"/> with names of files in specified folder.</returns>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.GetFileStream(System.String,System.IO.FileMode)">
            <summary>
            Gets file's stream for read or write.
            </summary>
            <param name="name">Full name (with path) of file.</param>
            <param name="mode"><see cref="T:System.IO.FileMode"/> for get <see cref="T:System.IO.Stream"/>.</param>
            <returns><see cref="T:System.IO.Stream"/> for specified file and <see cref="T:System.IO.FileMode"/>.</returns>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.DeleteFolder(System.String)">
            <summary>
            Deletes folder.
            </summary>
            <param name="name">Full name (with path) of folder.</param>
        </member>
        <member name="M:Xtensive.TransactionLog.Providers.ILogProvider.DeleteFile(System.String)">
            <summary>
            Deletes file.
            </summary>
            <param name="name">Full name (with path) of file.</param>
        </member>
        <member name="T:Xtensive.TransactionLog.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExCounterHasNoValue">
            <summary>
              Looks up a localized string similar to Counter has no value..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExInvalidCounterSequence">
            <summary>
              Looks up a localized string similar to Current counter value is greater or equal to the new one..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExInvalidKeySequance">
            <summary>
              Looks up a localized string similar to Invalid key sequence or transaction is already committed..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExRecordIsAlreadyAppended">
            <summary>
              Looks up a localized string similar to Record is already appended to the log..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExRecordXxxStateIsInvalid">
            <summary>
              Looks up a localized string similar to Record {0} state is invalid.
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExTransactionIsAlreadyStarted">
            <summary>
              Looks up a localized string similar to Unable to start the transaction because it already started..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExTransactionIsNotActive">
            <summary>
              Looks up a localized string similar to Transaction is not active. It may be missing or is already committed..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExTransactionNotFound">
            <summary>
              Looks up a localized string similar to Transaction is not found in the log..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.ExUnsupportedTransactionState">
            <summary>
              Looks up a localized string similar to Transaction state &apos;{0}&apos; is not supported..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.LogUnableToDisposeSlotXxx">
            <summary>
              Looks up a localized string similar to Unable to dispose slot {0}..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.LogUnableToRestoreDataFromXxxSlot">
            <summary>
              Looks up a localized string similar to Unable to restore data from {0} slot..
            </summary>
        </member>
        <member name="P:Xtensive.TransactionLog.Resources.Strings.LogUnableToRestoreFileXxx">
            <summary>
              Looks up a localized string similar to Unable to restore file {0}.
            </summary>
        </member>
    </members>
</doc>
