<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Integrity</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.EmailConstraint">
      <summary>
            Ensures that email address is in correct format.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.PropertyConstraintAspect">
      <summary>
            Base class for all property-constraints attributes.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.OnEntry(PostSharp.Aspects.MethodExecutionArgs)">
      <summary>
            Method executed <b>before</b> the body of methods to which this aspect is applied.
            </summary>
      <param name="args">Event arguments specifying which method
            is being executed, which are its arguments, and how should the execution continue
            after the execution of <see cref="M:PostSharp.Aspects.IOnMethodBoundaryAspect.OnEntry(PostSharp.Aspects.MethodExecutionArgs)" />.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.CompileTimeValidate(System.Reflection.MethodBase)">
      <summary>
            Method invoked at build time to ensure that the aspect has been applied to
            the right target.
            </summary>
      <param name="target">Target element.</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable target, otherwise
            <c>false</c>.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.ValidateSelf(System.Boolean)">
      <summary>
            Validates itself.
            </summary>
      <param name="compileTime">Indicates whether this method is invoked 
            in compile time or in runtime.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Check(Xtensive.Integrity.Validation.IValidationAware)">
      <summary>
            Validates the <paramref name="target" /> against this constraint.
            </summary>
      <param name="target">The validation target.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.CheckValue(Xtensive.Integrity.Validation.IValidationAware,System.Object)">
      <summary>
            Validates the specified value. 
            Throws <see cref="T:Xtensive.Integrity.ConstraintViolationException" /> on failure.
            </summary>
      <param name="target">The validation target.</param>
      <param name="value">The property value.</param>
      <exception cref="T:Xtensive.Integrity.ConstraintViolationException">Value is not valid.</exception>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.GetPropertyValue(Xtensive.Integrity.Validation.IValidationAware)">
      <summary>
            Gets the property value.
            </summary>
      <param name="target">The target to get the property value of.</param>
      <returns>Property value.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds custom message parameters.
            </summary>
      <param name="parameters">The parameters to add to.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Initialize">
      <summary>
            Initializes this instance in runtime.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.PropertyConstraintAspect.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Aspects.PropertyConstraintAspect" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Property">
      <summary>
            Gets the validated property.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Mode">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Integrity.Validation.ConstrainMode" /> to be used on setting property value.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Message">
      <summary>
            Gets or sets the message of exception to show if property value is invalid.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Message" /> property.
            </remarks>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceName">
      <summary>
            Gets or sets the property name on the resource type that provides the localizable error message.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Message" /> property.
            </remarks>
      <seealso cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceType" />
    </member>
    <member name="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceType">
      <summary>
            Gets or sets the resource type that provides the localizable error message.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.Message" /> property.
            </remarks>
      <see cref="P:Xtensive.Integrity.Aspects.PropertyConstraintAspect.MessageResourceName" />
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.EmailConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.EmailConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.EmailConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.EmailConstraint.Initialize">
      <summary>
            Initializes this instance in runtime.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.FutureConstraint">
      <summary>
            Ensures that date value is in the future.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.FutureConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.FutureConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.FutureConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.NotEmptyConstraint">
      <summary>
            Ensures that property value is not <see cref="F:System.String.Empty" />.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotEmptyConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotEmptyConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotEmptyConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.NotNullConstraint">
      <summary>
            Ensures property value is not <see langword="null" />.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.NotNullOrEmptyConstraint">
      <summary>
            Ensures that property value is not 
            <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullOrEmptyConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullOrEmptyConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.NotNullOrEmptyConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.PastConstraint">
      <summary>
            Ensures that date value is in the past.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.PastConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.PastConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.PastConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.RangeConstraint">
      <summary>
            Ensures field value fits in the specified range.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.ValidateSelf(System.Boolean)">
      <summary>
            Validates itself.
            </summary>
      <param name="compileTime">Indicates whether this method is invoked 
            in compile time or in runtime.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds custom message parameters.
            </summary>
      <param name="parameters">The parameters to add to.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.Initialize">
      <summary>
            Initializes this instance in runtime.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
                    Runs when the entire object graph has been deserialized.
                </summary>
      <param name="sender">
                    The object that initiated the callback. The functionality for this parameter is not currently implemented. 
                </param>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.Min">
      <summary>
            Gets or sets the minimal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.RangeConstraint.Max">
      <summary>
            Gets or sets the maximal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.LengthConstraint">
      <summary>
            Ensures field length (or item count) fits in specified range.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.ValidateSelf(System.Boolean)">
      <summary>
            Validates itself.
            </summary>
      <param name="compileTime">Indicates whether this method is invoked 
            in compile time or in runtime.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds custom message parameters.
            </summary>
      <param name="parameters">The parameters to add to.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Aspects.Constraints.LengthConstraint" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.Min">
      <summary>
            Gets or sets the minimal allowed length.
            Default is 0.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.LengthConstraint.Max">
      <summary>
            Gets or sets the maximal allowed length.
            Default is <see cref="F:System.Int64.MaxValue" />.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.Constraints.RegexConstraint">
      <summary>
            Ensures property value matches specified regular expression.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.ValidateSelf(System.Boolean)">
      <summary>
            Validates itself.
            </summary>
      <param name="compileTime">Indicates whether this method is invoked 
            in compile time or in runtime.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds custom message parameters.
            </summary>
      <param name="parameters">The parameters to add to.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.Initialize">
      <summary>
            Initializes this instance in runtime.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Aspects.Constraints.RegexConstraint" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.Pattern">
      <summary>
            Gets or sets the regular expression pattern.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Aspects.Constraints.RegexConstraint.Options">
      <summary>
            Gets or sets the options, default value is <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.ConstraintRegistry">
      <summary>
            The registry of all applied constraints.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.ConstraintRegistry.GetConstraints(System.Type)">
      <summary>
            Gets all constraints targeted to the specified type and it's ancestors.
            </summary>
      <param name="targetType">The target type.</param>
      <returns>Enumerable of constraints.</returns>
    </member>
    <member name="T:Xtensive.Integrity.ConstraintViolationException">
      <summary>
            Thrown as the result of violation of constraint.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.ConstraintViolationException.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.ConstraintViolationException" /> class.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Integrity.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes the instance of <see cref="T:Xtensive.Integrity.ConstraintViolationException" /> class.
            </summary>
      <param name="info">Serialization info to get the deserialized data from.</param>
      <param name="context">Streaming context.</param>
    </member>
    <member name="P:Xtensive.Integrity.ConstraintViolationException.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.ConstraintViolationException.TargetProperty">
      <summary>
            Gets the target property.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.ConstraintViolationException.PropertyValue">
      <summary>
            Gets the string representation of property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="T:Xtensive.Integrity.Aspects.InconsistentRegionAttribute">
      <summary>
            Wraps a method of property body into so-called "inconsistent region"
            using <see cref="M:Xtensive.Integrity.Validation.ValidationContextBase.OpenInconsistentRegion" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.InconsistentRegionAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
      <summary>
            Method invoked at build time to ensure that the aspect has been applied to
            the right target.
            </summary>
      <param name="method">Target element.</param>
      <returns>
        <c>true</c> if the aspect was applied to an acceptable target, otherwise
            <c>false</c>.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.InconsistentRegionAttribute.OnEntry(PostSharp.Aspects.MethodExecutionArgs)">
      <summary>
            Method executed <b>before</b> the body of methods to which this aspect is applied.
            </summary>
      <param name="eventArgs">Event arguments specifying which method
            is being executed, which are its arguments, and how should the execution continue
            after the execution of <see cref="M:PostSharp.Aspects.IOnMethodBoundaryAspect.OnEntry(PostSharp.Aspects.MethodExecutionArgs)" />.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.InconsistentRegionAttribute.OnSuccess(PostSharp.Aspects.MethodExecutionArgs)">
      <summary>
            Method executed <b>after</b> the body of methods to which this aspect is applied,
            but only when the method successfully returns (i.e. when no exception flies out
            the method.).
            </summary>
      <param name="eventArgs">Event arguments specifying which method
            is being executed and which are its arguments.</param>
    </member>
    <member name="M:Xtensive.Integrity.Aspects.InconsistentRegionAttribute.OnExit(PostSharp.Aspects.MethodExecutionArgs)">
      <summary>
            Method executed <b>after</b> the body of methods to which this aspect is applied,
            even when the method exists with an exception (this method is invoked from
            the <c>finally</c> block).
            </summary>
      <param name="eventArgs">Event arguments specifying which method
            is being executed and which are its arguments.</param>
    </member>
    <member name="T:Xtensive.Integrity.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExApplyingXToPropertyYFailedZ">
      <summary>
              Looks up a localized string similar to Applying [{0}] to property '{1}' failed. {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExBothLocalizableMessageResourceAndNotLocalizableMessageCanNotBeSpecifiedAtOnceLocationX">
      <summary>
              Looks up a localized string similar to Both localizable message resource and not localizable message can not be specified at once (location: {0})..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExFieldConstraintCanNotBeAppliedToReadOnlyPropertyX">
      <summary>
              Looks up a localized string similar to Field constraint can not be applied to read only property {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExNoComparer">
      <summary>
              Looks up a localized string similar to [{0}] attribute on '{1}' requires a comparer for type '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExXAndYPropertiesMustBeUsedTogetherLocationZ">
      <summary>
              Looks up a localized string similar to '{0}' and '{1}' properties must be used together (location: {2})..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.AspectExXDoesNotSupportYValueTypeLocationZ">
      <summary>
              Looks up a localized string similar to '{0}' does not support '{1}' value type (location: {2})..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeEmpty">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be empty..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeLessThanMin">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be less than {Min}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeLessThanMinOrGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be less than {Min} or greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeNull">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueCanNotBeNullOrEmpty">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be null or empty..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueFormatIsIncorrect">
      <summary>
              Looks up a localized string similar to {PropertyName} format is incorrect..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueLengthCanNotBeGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueLengthCanNotBeLessThanMin">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be less than {Min}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueLengthCanNotBeLessThanMinAndGreaterThenMax">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be less than {Min} and greater then {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueMustBeInTheFuture">
      <summary>
              Looks up a localized string similar to {PropertyName} must be in the future..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ConstraintMessageValueMustBeInThePast">
      <summary>
              Looks up a localized string similar to {PropertyName} must be in the past..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.DateMustBeInThePast">
      <summary>
              Looks up a localized string similar to Date must be in the past..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExAlreadyCompleted">
      <summary>
              Looks up a localized string similar to UndoDescriptor is already completed..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExAtomicContextIsSuspended">
      <summary>
              Looks up a localized string similar to AtomicContext is suspended..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExCantInvokeBlockingDescriptor">
      <summary>
              Looks up a localized string similar to Blocking descriptor can't be invoked..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExComparerForTypeXIsNotFound">
      <summary>
              Looks up a localized string similar to Comparer for type '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExCompleteMustBeCalledJustOnce">
      <summary>
              Looks up a localized string similar to Complete method must be called just once..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExConcurrencyConflict">
      <summary>
              Looks up a localized string similar to Concurrency conflict..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExContextMustBeActivated">
      <summary>
              Looks up a localized string similar to Context is not activated..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExDeadlock">
      <summary>
              Looks up a localized string similar to Deadlock was found..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExExpressionPatternIsNotSpecified">
      <summary>
              Looks up a localized string similar to Regular expression pattern is not specified..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExIncorrectStageValue">
      <summary>
              Looks up a localized string similar to Incorrect Stage value: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExInvalidTransactionState">
      <summary>
              Looks up a localized string similar to Invalid transaction state ('{0}'). Expected state(s) is (are) '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExMaxOrMinPropertyMustBeSpecified">
      <summary>
              Looks up a localized string similar to 'Max' or 'Min' property must be specified..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExObjectAndContextAreIncompatible">
      <summary>
              Looks up a localized string similar to The specified object and the context are incompatible..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExOldActiveOperationIsStillRunning">
      <summary>
              Looks up a localized string similar to You can't Activate new operation, since old ActiveOperation is still running..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExScopeBoundTransactionCanBeCommittedOnlyByItsScope">
      <summary>
              Looks up a localized string similar to Scope-bound transaction can be committed only by its scope. Use TransactionScopeBase.Complete() \  Dispose() methods of  appropriate TransactionScopeBase descendant instance to do this..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExSpecifiedRedoDescriptorCantBeLogged">
      <summary>
              Looks up a localized string similar to Specified RedoDescriptor can't be logged..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExTransactionIsAlreadyActivated">
      <summary>
              Looks up a localized string similar to Transaction is already activated..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExTransactionScopeIsCompletedCanNotBeSetToFalse">
      <summary>
              Looks up a localized string similar to TransactionScope.IsCompleted can not be set to 'false'..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExValidationContextIsInvalid">
      <summary>
              Looks up a localized string similar to Validation context is in invalid state. This means that some validation error has happened, but later it was suppressed..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExValidationFailed">
      <summary>
              Looks up a localized string similar to Validation failed..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExVersionConflict">
      <summary>
              Looks up a localized string similar to Version conflict..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.ExVersionConflictEx">
      <summary>
              Looks up a localized string similar to Version conflict on object {0}: expected: {1} = {2}, but it is {3}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.LogRelationSyncUndoError">
      <summary>
              Looks up a localized string similar to Error during undoing the relation synchronization..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.LogUndoError">
      <summary>
              Looks up a localized string similar to Error during Undo execution: descriptor {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.Null">
      <summary>
              Looks up a localized string similar to null.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.PropertyValueCanNotBeEmpty">
      <summary>
              Looks up a localized string similar to {0}: value can not be empty..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.PropertyValueCanNotBeNull">
      <summary>
              Looks up a localized string similar to {0}: value can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.PropertyValueDoesNotMatchRegexPattern">
      <summary>
              Looks up a localized string similar to Property value '{value}' does not match regex pattern '{Pattern}'..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.PropertyValueLengthMustBeInXYRange">
      <summary>
              Looks up a localized string similar to {0}: length of the value must be in [{1} ... {2}] range..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.PropertyValueMustBeInXYRange">
      <summary>
              Looks up a localized string similar to {0}: value must be in [{1} ... {2}] range..
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Resources.Strings.X">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.ITransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.ITransaction.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.ITransaction.State">
      <summary>
             Gets the <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.ITransaction.IsolationLevel">
      <summary>
            Gets the isolation level of the transaction.
            </summary>
      <value>The isolation level.</value>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.ITransaction.TimeStamp">
      <summary>
            Gets the start time of the current transaction.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Transactions.TransactionBase">
      <summary>
            Base class for any transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.Begin">
      <summary>
            Begins this transaction.
            </summary>
      <returns>Scope of this transaction.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.CreateScope">
      <summary>
            Creates the scope for this transaction.
            </summary>
      <returns>Created scope.</returns>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.OnBegin">
      <summary>
            Called when transaction is beginning.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.OnCommit">
      <summary>
            Called when transaction is about to commit.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.OnRollback">
      <summary>
            Called when transaction is about to rollback.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionBase.#ctor(System.Guid,System.Transactions.IsolationLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Transactions.TransactionBase" /> class.
            </summary>
      <param name="identifier">The identifier.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionBase.Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionBase.Xtensive#Core#IIdentified#Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionBase.State">
      <summary>
             Gets the <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionBase.IsolationLevel">
      <summary>
            Gets the isolation level of the transaction.
            </summary>
      <value>The isolation level.</value>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionBase.TimeStamp">
      <summary>
            Gets the start time of the current transaction.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Transactions.TransactionScopeExtensions">
      <summary>
        <see cref="T:Xtensive.Integrity.Transactions.TransactionScope" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionScopeExtensions.Complete(Xtensive.Integrity.Transactions.TransactionScope)">
      <summary>
            Marks the scope as successfully completed 
            (i.e. all operations within the scope are completed successfully).
            Does nothing if scope is <see langword="null" />.
            </summary>
      <param name="scope">The scope to mark as completed.</param>
    </member>
    <member name="T:Xtensive.Integrity.Transactions.TransactionState">
      <summary>
            Indicates operational state of the <see cref="T:Xtensive.Integrity.Transactions.TransactionBase" /> instance.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Default">
      <summary>
            Default transaction state (<see cref="F:Xtensive.Integrity.Transactions.TransactionState.NotActivated" />).
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.NotActivated">
      <summary>
            The transaction state is not activated.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Completed">
      <summary>
            The transaction is completed.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Active">
      <summary>
            The transaction is active (is running).
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Completing">
      <summary>
            The transaction is completing.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Committed">
      <summary>
            The transaction has been committed successfully.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.Committing">
      <summary>
            The transaction has started <see cref="M:Xtensive.Integrity.Transactions.TransactionBase.Commit" /> method but still running.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.RolledBack">
      <summary>
            The transaction has been rolled back.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Transactions.TransactionState.RollingBack">
      <summary>
            The transaction has started <see cref="M:Xtensive.Integrity.Transactions.TransactionBase.Rollback" /> method but still running.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Transactions.TransactionScope">
      <summary>
            Transaction activation scope.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionScope.#ctor(Xtensive.Integrity.Transactions.TransactionBase)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Transactions.TransactionScope" /> class.
            </summary>
      <param name="transaction">The transaction this scope controls.</param>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionScope.Dispose">
      <summary>
            Performs the tasks associated with freeing, releasing, or resetting unmanaged resources
            or associated <see cref="T:System.IDisposable" /> objects.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionScope.IsCompleted">
      <summary>
            Gets or sets a value indicating whether this scope is successfully completed.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Transactions.TransactionScope.Transaction">
      <summary>
            Gets the transaction this scope controls.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Transactions.TransactionStateExtensions">
      <summary>
        <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Transactions.TransactionStateExtensions.IsActive(Xtensive.Integrity.Transactions.TransactionState)">
      <summary>
            Determines whether the specified transaction state describes active transaction.
            </summary>
      <param name="state">The state to check.</param>
      <returns>
        <see langword="True" /> if the specified state describes active transaction;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Integrity.Validation.InconsistentRegion">
      <summary>
            Inconsistent region implementation.
            Returned by <see cref="M:Xtensive.Integrity.Validation.ValidationContextBase.OpenInconsistentRegion" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.InconsistentRegion.Complete">
      <summary>
            Completes the region.
            </summary>
      <remarks>
        <para>
            This method must be called before disposal of
            any <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" />. Is invocation
            indicates <see cref="T:Xtensive.Integrity.Validation.ValidationContextBase" /> must
            perform validation of region disposal. 
            </para>
        <para>
            If this method isn't called before region disposal, validation will be performed on transaction commit.
            </para>
      </remarks>
    </member>
    <member name="M:Xtensive.Integrity.Validation.InconsistentRegion.#ctor(Xtensive.Integrity.Validation.ValidationContextBase)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" /> class.
            </summary>
      <param name="context">The validation context this region belongs to.</param>
    </member>
    <member name="M:Xtensive.Integrity.Validation.InconsistentRegion.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Integrity.Validation.InconsistentRegion.VoidRegionInstance">
      <summary>
        <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" /> instance that is used for all <see cref="P:Xtensive.Integrity.Validation.InconsistentRegion.IsVoid">nested</see> regions.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Validation.InconsistentRegion.IsVoid">
      <summary>
            Gets a value indicating whether this instance is void region, 
            i.e. is included into another <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" /> 
            and therefore does nothing on opening or disposing.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Validation.InconsistentRegionExtensions">
      <summary>
        <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.InconsistentRegionExtensions.Complete(Xtensive.Integrity.Validation.InconsistentRegion)">
      <summary>
            Completes the specified region.
            </summary>
      <param name="region">The region to complete.</param>
      <remarks>
        <para>
            This method must be called before disposal of
            any <see cref="T:Xtensive.Integrity.Validation.InconsistentRegion" />. Is invocation
            indicates <see cref="T:Xtensive.Integrity.Validation.ValidationContextBase" /> must
            perform validation of region disposal. 
            </para>
        <para>
            If this method isn't called before region disposal, 
            validation context will receive <see cref="P:Xtensive.Integrity.Validation.ValidationContextBase.IsConsistent" />
            status, and any further attempts to validate there will fail.
            </para>
      </remarks>
    </member>
    <member name="T:Xtensive.Integrity.Validation.IValidationAware">
      <summary>
            Implemented by objects supporting validation framework.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.IValidationAware.OnValidate">
      <summary>
            Validates the object state right now - i.e. without any delays.
            </summary>
      <remarks>
            Throws an exception on validation failure.
            </remarks>
    </member>
    <member name="T:Xtensive.Integrity.Validation.ValidationAwareExtensions">
      <summary>
        <see cref="T:Xtensive.Integrity.Validation.IValidationAware" /> related extensions methods.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.Validate(Xtensive.Integrity.Validation.IValidationAware,System.Action{Xtensive.Integrity.Validation.IValidationAware},System.Boolean)">
      <summary>
            Partially validates the <paramref name="target" /> with specified delegate, 
            or enqueues it for delayed validation.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="validator">The delegate to invoke for validation. 
            If <paramref name="validator" /> is <see langword="null" />, 
            the whole object should be validated.</param>
      <param name="immediately">
        <see langword="true" /> if instance should be immediately validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.Validate(Xtensive.Integrity.Validation.IValidationAware,System.Action{Xtensive.Integrity.Validation.IValidationAware})">
      <summary>
            Partially validates the <paramref name="target" /> with specified delegate.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="validator">The delegate to invoke for validation. 
            If <paramref name="validator" /> is <see langword="null" />, 
            the whole object should be validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.Validate(Xtensive.Integrity.Validation.IValidationAware,System.Boolean)">
      <summary>
            Validates the specified <paramref name="target" />, or enqueues it for delayed validation.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="immediately">
        <see langword="true" /> if instance should be immediately validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.Validate(Xtensive.Integrity.Validation.IValidationAware)">
      <summary>
            Validates the specified <paramref name="target" />.
            </summary>
      <param name="target">The object to validate.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.CheckConstraints(Xtensive.Integrity.Validation.IValidationAware)">
      <summary>
            Checks all the constraints applied to specified 
            <see cref="T:Xtensive.Integrity.Validation.IValidationAware" /> object.
            </summary>
      <param name="target">The object to validate.</param>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationAwareExtensions.GetPropertyValidationError(Xtensive.Integrity.Validation.IValidationAware,System.String)">
      <summary>
            Gets the validation error for the property with specified <paramref name="propertyName" />.
            </summary>
      <param name="target">The object to validate the property of.</param>
      <param name="propertyName">Name of the property to get the error for.</param>
      <returns>
            An exception, if property validation has failed;
            otherwise, <see langword="null" />.
            </returns>
    </member>
    <member name="T:Xtensive.Integrity.Validation.ValidationContextBase">
      <summary>
            Provides consistency validation for see <see cref="T:Xtensive.Integrity.Validation.IValidationAware" /> implementors.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.OpenInconsistentRegion">
      <summary>
            Opens the "inconsistent region" - the code region, in which Validate method
            should just queue the validation rather then perform it immediately.
            </summary>
      <returns>
        <see cref="T:System.IDisposable" /> object, which disposal will identify the end of the region.
            <see langowrd="Null" />, if <see cref="P:Xtensive.Integrity.Validation.ValidationContextBase.IsConsistent" /> is <see langword="false" />.
            </returns>
      <remarks>
        <para>
            The beginning of the region is the place where this method is called.
            </para>
        <para>
            The end of the region is the place where returned <see cref="T:System.IDisposable" /> object is disposed.
            The validation of all queued to-validate objects will be performed during disposal.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Context <see cref="P:Xtensive.Integrity.Validation.ValidationContextBase.IsConsistent">is invalid</see>.</exception>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.Validate">
      <summary>
            Validates all registered instances even if inconsistent region is open.
            </summary>
      <exception cref="T:Xtensive.Core.AggregateException">Validation failed.</exception>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.EnqueueValidate(Xtensive.Integrity.Validation.IValidationAware,System.Action{Xtensive.Integrity.Validation.IValidationAware})">
      <summary>
            Enqueues the object for delayed partial validation.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Integrity.Validation.IValidationAware" /> object to enqueue.</param>
      <param name="validationDelegate">The validation delegate partially validating the <paramref name="target" />.
            If <see langword="null" />, whole object should be validated.
            </param>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.EnqueueValidate(Xtensive.Integrity.Validation.IValidationAware)">
      <summary>
            Enqueues the object for delayed validation.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Integrity.Validation.IValidationAware" /> object to enqueue.</param>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.LeaveInconsistentRegion(Xtensive.Integrity.Validation.InconsistentRegion)">
      <summary>
            Leaves the inconsistent region.
            </summary>
      <exception cref="T:Xtensive.Core.AggregateException">Validation failed.</exception>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.Reset">
      <summary>
            Resets the state of this context to initial.
            </summary>
    </member>
    <member name="M:Xtensive.Integrity.Validation.ValidationContextBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Integrity.Validation.ValidationContextBase" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Integrity.Validation.ValidationContextBase.IsConsistent">
      <summary>
            Gets the value indicating whether this context is in inconsistent state.
            </summary>
    </member>
    <member name="T:Xtensive.Integrity.Validation.ConstrainMode">
      <summary>
            Possible validation modes.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Validation.ConstrainMode.Default">
      <summary>
            The same as <see cref="F:Xtensive.Integrity.Validation.ConstrainMode.OnValidate" />.
            </summary>
    </member>
    <member name="F:Xtensive.Integrity.Validation.ConstrainMode.OnValidate">
      <summary>
            Property value will be checked on object validation.
            </summary>
      <remarks>
            Note that when inconsistent region is not open validation can be performed immediatly after setting property value.
            </remarks>
    </member>
    <member name="F:Xtensive.Integrity.Validation.ConstrainMode.OnSetValue">
      <summary>
            Validation is performed before property value is set.
            </summary>
    </member>
  </members>
</doc>