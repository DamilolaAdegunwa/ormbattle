<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Storage.Model</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Storage.Model.AssociationInfo">
      <summary>
            Describes single association.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Node">
      <summary>
            An abstract base class for model node.
             </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.ValidateName(System.String)">
      <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
      <param name="newName">The new name of this instance.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.UpdateState">
      <summary>
            Updates the internal state of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.Node" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.Node" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Node.Name">
      <summary>
            Gets the name of this instance.
            </summary>
    </member>
    <member name="E:Xtensive.Storage.Model.Node.Changing">
      <summary>
            Occurs when this instance is about to be changed.
            </summary>
    </member>
    <member name="E:Xtensive.Storage.Model.Node.Changed">
      <summary>
            Occurs when this instance is changed.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfo.ExtractForeignKey(Xtensive.Storage.Model.TypeInfo,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Extracts the foreign key from the specified <see cref="T:Xtensive.Core.Tuples.Tuple" />.
            </summary>
      <param name="tuple">The tuple.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfo.#ctor(Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.Multiplicity,System.Nullable{Xtensive.Storage.OnRemoveAction},System.Nullable{Xtensive.Storage.OnRemoveAction})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.AssociationInfo" /> class.
            </summary>
      <param name="ownerField">The referencing field.</param>
      <param name="targetType">The referenced type.</param>
      <param name="multiplicity">The association multiplicity.</param>
      <param name="onTargetRemove">The <see cref="T:Xtensive.Storage.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType" /> object removal.</param>
      <param name="onOwnerRemove">The <see cref="T:Xtensive.Storage.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerType" /> object removal.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.OwnerType">
      <summary>
            Gets the owner type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.OwnerField">
      <summary>
            Gets the owner field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.AuxiliaryType">
      <summary>
            Gets the auxiliary persistent type that represents this association.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.UnderlyingIndex">
      <summary>
            Gets the underlying index for this instance.
            </summary>
      <value>The underlying index.</value>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.IsMaster">
      <summary>
            Gets a value indicating whether this instance is master association.
            </summary>
      <value>
        <see langword="true" /> if this instance is master association; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.IsPaired">
      <summary>
            Gets a value indicating whether this instance is paired.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.IsLoop">
      <summary>
            Gets a value indicating whether this instance represents a loop.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.Master">
      <summary>
            Gets master association.
            </summary>
      <remarks>
            If association is master, returns it. Otherwise returns paired association.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Unable to find master association.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.Multiplicity">
      <summary>
            Gets the association multiplicity.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.Reversed">
      <summary>
            Gets or sets the reversed paired <see cref="T:Xtensive.Storage.Model.AssociationInfo" /> for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.OnTargetRemove">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType" /> object removal.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.AssociationInfo.OnOwnerRemove">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerType" /> object removal.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.NodeCollection`1">
      <summary>
            A base class for collection of nodes in model.
            </summary>
      <typeparam name="TNode">The type of the node.</typeparam>
    </member>
    <member name="F:Xtensive.Storage.Model.NodeCollection`1.Empty">
      <summary>
            Gets empty collection.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.Add(`0)">
      <summary>
            Adds new element to the collection.
            </summary>
      <param name="item">Item to add.</param>
      <exception cref="T:System.InvalidOperationException">Item already exists.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.Contains(System.String)">
      <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if this instance contains the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.TryGetValue(System.String,`0@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">
        <typeparamref name="TNode" /> if it was found; otherwise <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if value is found by specified <paramref name="key" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollection`1.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.NodeCollection`1" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.NodeCollection`1.Owner">
      <summary>
            Gets the owner.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.NodeCollection`1.Name">
      <summary>
            Gets the name of this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.NodeCollection`1.FullName">
      <summary>
            Gets the full name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.NodeCollection`1.Item(System.String)">
      <summary>
            An indexer that provides access to collection items.
            Returns <see langword="default(TNode)" /> if there is no such item.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfoCollection.Find(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
      <param name="type">
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> to find associations for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfoCollection.Find(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
      <param name="type">
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> to find outgoing associations for.</param>
      <param name="target">if set to <see langword="true" /> then only target associations will be returned; otherwise only owner associations.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.AssociationInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.ColumnGroup">
      <summary>
            Describes a group of columns that belongs to the specified <see cref="P:Xtensive.Storage.Model.ColumnGroup.TypeInfoRef" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnGroup.#ctor(Xtensive.Storage.Model.TypeInfoRef,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnGroup" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="keys">The keys.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnGroup.#ctor(Xtensive.Storage.Model.TypeInfoRef,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnGroup" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="keys">The keys.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnGroup.TypeInfoRef">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.TypeInfoRef" /> pointing to <see cref="T:Xtensive.Storage.Model.TypeInfo" />
            this column group belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnGroup.Keys">
      <summary>
            Gets the indexes of key columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnGroup.Columns">
      <summary>
            Gets the indexes of all columns.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnIndexMap.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnIndexMap" /> class.
            </summary>
      <param name="system">The system columns.</param>
      <param name="lazyLoad">The regular columns.</param>
      <param name="regular">The lazy load columns.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnIndexMap.System">
      <summary>
            Gets or sets positions of system columns within <see cref="T:Xtensive.Storage.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnIndexMap.LazyLoad">
      <summary>
            Gets or sets positions of lazy load columns within <see cref="T:Xtensive.Storage.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnIndexMap.Regular">
      <summary>
            Gets or sets positions of regular columns (not system and not lazy load) within <see cref="T:Xtensive.Storage.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.GetComparer(System.Globalization.CultureInfo)">
      <summary>
            Gets the <see cref="T:System.Collections.IComparer" /> instance.
            </summary>
      <param name="cultureInfo">The <see cref="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo" /> object.</param>
      <returns>The instance in <see cref="T:System.Collections.IComparer" /> to compare values of type <see cref="P:Xtensive.Storage.Model.ColumnInfo.ValueType" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.Equals(Xtensive.Storage.Model.ColumnInfo)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.System#ICloneable#Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.FieldInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> class.
            </summary>
      <param name="field">The <see cref="P:Xtensive.Storage.Model.ColumnInfo.Field" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.FieldInfo,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> class.
            </summary>
      <param name="field">
        <see cref="P:Xtensive.Storage.Model.ColumnInfo.Field" /> property value.</param>
      <param name="valueType">
        <see cref="P:Xtensive.Storage.Model.ColumnInfo.ValueType" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsSystem">
      <summary>
            Gets or sets a value indicating whether this column is system.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsDeclared">
      <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsInherited">
      <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsPrimaryKey">
      <summary>
            Gets a value indicating whether this column is contained by primary key.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsNullable">
      <summary>
            Gets or sets a value indicating whether column is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.IsLazyLoad">
      <summary>
            Gets or sets a value indicating whether  property will be loaded on demand.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Field">
      <summary>
            Gets or sets corresponding field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Length">
      <summary>
            Gets or sets the length of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Scale">
      <summary>
            Gets or sets the scale of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Precision">
      <summary>
            Gets or sets the precision of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.ValueType">
      <summary>
            Specifies the type that should be used to store the
            value of the field (available for properties that can be mapped
            to multiple data types).
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo">
      <summary>
            Gets or sets column <see cref="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo" /> info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Indexes">
      <summary>
            Gets or the indexes this field is included to.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.ColumnInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Implicit(Xtensive.Storage.Model.ColumnInfo)~Xtensive.Storage.Model.ColumnInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Inequality(Xtensive.Storage.Model.ColumnInfoRef,Xtensive.Storage.Model.ColumnInfoRef)">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for equality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Equality(Xtensive.Storage.Model.ColumnInfoRef,Xtensive.Storage.Model.ColumnInfoRef)">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for inequality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Equals(Xtensive.Storage.Model.ColumnInfoRef)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Equals(System.Object)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.#ctor(Xtensive.Storage.Model.ColumnInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnInfoRef" /> class.
            </summary>
      <param name="columnInfo">The <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> instance.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.ColumnInfoRef" /> class.
            </summary>
      <param name="typeName">Column type name.</param>
      <param name="columnName">Column name.</param>
      <param name="cultureInfo">The culture info.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfoRef.TypeName">
      <summary>
            Gets type name of reflecting <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfoRef.FieldName">
      <summary>
            Gets name of the <see cref="T:Xtensive.Storage.Model.FieldInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfoRef.ColumnName">
      <summary>
            Gets name of the <see cref="T:Xtensive.Storage.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfoRef.CultureInfo">
      <summary>
            Gets <see cref="P:Xtensive.Storage.Model.ColumnInfoRef.CultureInfo" /> info of the <see cref="T:Xtensive.Storage.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ComparerProvider">
      <summary>
            Provides comparers for primitive types and strings.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ComparerProvider.GetComparer(System.Type,System.Globalization.CultureInfo)">
      <summary>
            Gets the comparer according to type and culture.
            </summary>
      <param name="type">The type.</param>
      <param name="cultureInfo">The culture info.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Storage.Model.FieldInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.FieldInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.FieldInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.op_Implicit(Xtensive.Storage.Model.FieldInfo)~Xtensive.Storage.Model.FieldInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.op_Inequality(Xtensive.Storage.Model.FieldInfoRef,Xtensive.Storage.Model.FieldInfoRef)">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for equality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.op_Equality(Xtensive.Storage.Model.FieldInfoRef,Xtensive.Storage.Model.FieldInfoRef)">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for inequality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.Equals(Xtensive.Storage.Model.FieldInfoRef)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.Equals(System.Object)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoRef.#ctor(Xtensive.Storage.Model.FieldInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.FieldInfoRef" /> class.
            </summary>
      <param name="fieldInfo">
        <see cref="T:Xtensive.Storage.Model.FieldInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfoRef.TypeRef">
      <summary>
            Name of the type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfoRef.FieldName">
      <summary>
            Name of the field.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.DomainModelExtensions">
      <summary>
            Extension methods related to <see cref="T:Xtensive.Storage.Model.DomainModel" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.DomainModelExtensions.ToStoredModel(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Converts speicified <see cref="T:Xtensive.Storage.Model.DomainModel" /> to corresponding <see cref="T:Xtensive.Storage.Model.Stored.StoredDomainModel" />.
            </summary>
      <param name="model">The model to convert.</param>
      <returns>A result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnInfo.#ctor(Xtensive.Storage.Model.ColumnInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.FullTextColumnInfo" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnInfoCollection.Insert(System.Int32,Xtensive.Storage.Model.FullTextColumnInfo)">
      <exception cref="T:System.NotSupportedException">
      </exception>
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted.
                </param>
      <param name="value">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnInfoCollection.RemoveAt(System.Int32)">
      <exception cref="T:System.NotSupportedException">
      </exception>
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.FullTextIndexInfo">
      <summary>
            Describes a full-text index in terms of storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.#ctor(Xtensive.Storage.Model.IndexInfo,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.FullTextIndexInfo" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FullTextIndexInfo.PrimaryIndex">
      <summary>
            Gets the primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FullTextIndexInfo.Columns">
      <summary>
            Gets the full-text index columns.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfoCollection.TryGetValue(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.FullTextIndexInfo@)">
      <summary>
            Tries get <see cref="T:Xtensive.Storage.Model.FullTextIndexInfo" /> by provided <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
      <param name="typeInfo">The type info.</param>
      <param name="fullTextIndexInfo">The full text index info.</param>
      <returns>
        <see langword="true" /> when the full-text index is found; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfoCollection.Add(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.FullTextIndexInfo)">
      <summary>
            Registers specified full-text index by type key.
            </summary>
      <param name="typeInfo">The type info.</param>
      <param name="fullTextIndexInfo">The full text index info.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfoCollection.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfoCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Model.FullTextIndexInfoCollection.Item(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.FullTextIndexInfo" /> by the specified type.
            </summary>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Index is not found.</exception>
    </member>
    <member name="T:Xtensive.Storage.Model.SequenceInfo">
      <summary>
            Provides information about sequence associated with <see cref="T:Xtensive.Storage.Model.KeyInfo" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.MappingNode">
      <summary>
            A <see cref="T:Xtensive.Storage.Model.Node" /> that can be mapped to existing schema node.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.MappingNode.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.MappingNode.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.MappingNode" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.MappingNode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.MappingNode" /> class.
            </summary>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.MappingNode.MappingName">
      <summary>
            Gets or sets mapping name of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SequenceInfo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.SequenceInfo" /> class.
            </summary>
      <param name="name">The sequence name.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Seed">
      <summary>
            Gets or sets the seed value.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Increment">
      <summary>
            Gets or sets the increment value.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.FieldInfo.NoFieldId">
      <summary>
            "No <see cref="F:Xtensive.Storage.Model.FieldInfo.NoFieldId" />" value (<see cref="F:Xtensive.Storage.Model.FieldInfo.NoFieldId" /> is unknown or undefined).
            Value is <see langword="0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.FieldInfo.MinFieldId">
      <summary>
            Minimal possible <see cref="P:Xtensive.Storage.Model.FieldInfo.FieldId" /> value.
            Value is <see langword="100" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.ExtractValue(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Extracts the field value from the specified <see cref="T:Xtensive.Core.Tuples.Tuple" />.
            </summary>
      <param name="tuple">The tuple to extract value from.</param>
      <returns>
        <see cref="T:Xtensive.Core.Tuples.Tuple" /> instance with the extracted value.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.Equals(Xtensive.Storage.Model.FieldInfo)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.System#ICloneable#Clone">
      <summary>
                    Creates a new object that is a copy of the current instance.
                </summary>
      <returns>
                    A new object that is a copy of this instance.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.FieldAttributes)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.FieldInfo" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="attributes">The attributes.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.FieldId">
      <summary>
            Gets or sets the field identifier uniquely identifying the field
            in <see cref="P:Xtensive.Storage.Model.TypeInfo.Fields" /> collection of <see cref="P:Xtensive.Storage.Model.FieldInfo.ReflectedType" />.
            </summary>
      <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsSystem">
      <summary>
            Gets a value indicating whether this property is system.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsTypeId">
      <summary>
            Gets a value indicating whether this property contains type identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsTypeDiscriminator">
      <summary>
            Gets a value indicating whether this property is type discriminator.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsDeclared">
      <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsEnum">
      <summary>
            Gets a value indicating whether this property is enum.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsInherited">
      <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsPrimaryKey">
      <summary>
            Gets a value indicating whether this property is contained by primary key.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsNested">
      <summary>
            Gets a value indicating whether this property is nested.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsExplicit">
      <summary>
            Gets a value indicating whether this property explicitly implemented.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsInterfaceImplementation">
      <summary>
            Gets a value indicating whether this property implements property of one or more interfaces.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsPrimitive">
      <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsEntity">
      <summary>
            Gets a value indicating whether this property is reference to Entity.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsStructure">
      <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsEntitySet">
      <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsNullable">
      <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsLazyLoad">
      <summary>
            Gets or sets a value indicating whether property will be loaded on demand.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.IsVersion">
      <summary>
            Gets or sets a value indicating whether property is part of version.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.OriginalName">
      <summary>
            Gets or sets original name of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.ValueType">
      <summary>
            Gets or sets the type of the value of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.ItemType">
      <summary>
            Gets or sets the item type for field that describes the EntitySet.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Length">
      <summary>
            Gets or sets the maximal length of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Scale">
      <summary>
            Gets or sets the scale of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Precision">
      <summary>
            Gets or sets the precision of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.MappingInfo">
      <summary>
            Gets <see cref="P:Xtensive.Storage.Model.FieldInfo.MappingInfo" /> for current field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.UnderlyingProperty">
      <summary>
            Gets the underlying system property.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.DeclaringField">
      <summary>
            Gets or sets the declaring field.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Parent">
      <summary>
            Gets or sets the parent field for nested fields.
            </summary>
      <remarks>
            For not nested fields return value is <see langword="null" />.
            </remarks>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.ReflectedType">
      <summary>
            Gets the type that was used to obtain this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.DeclaringType">
      <summary>
            Gets the type where the field is declared.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Fields">
      <summary>
            Gets the nested fields.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Column">
      <summary>
            Gets or sets the column associated with this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Association">
      <summary>
            Gets or sets the field association.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.AdapterIndex">
      <summary>
            Gets or sets field's adapter index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.FieldInfo.Columns">
      <summary>
            Gets field columns.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoCollection.Find(Xtensive.Storage.Model.FieldAttributes)">
      <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria" />.
            </summary>
      <param name="criteria">The object to filter initial collection with.</param>
      <returns>
        <see cref="T:Xtensive.Core.Collections.ICountable`1" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoCollection.Find(Xtensive.Storage.Model.FieldAttributes,Xtensive.Core.MatchType)">
      <summary>
            Finds the items from initial collection according to specified filter <paramref name="criteria" />.
            </summary>
      <param name="criteria">The object to filter initial collection with.</param>
      <param name="matchType">Type of the match.</param>
      <returns>
        <see cref="T:Xtensive.Core.Collections.ICountable`1" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoCollection.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FieldInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.HierarchyInfoCollection">
      <summary>
            A collection of hierarchies.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.HierarchyInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.HierarchyInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.HierarchyInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.HierarchyInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.KeyInfo,Xtensive.Storage.Model.InheritanceSchema,Xtensive.Storage.Model.TypeDiscriminatorMap)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.HierarchyInfo" /> class.
            </summary>
      <param name="root">The hierarchy root.</param>
      <param name="key">The key info.</param>
      <param name="inheritanceSchema">The inheritance schema.</param>
      <param name="typeDiscriminatorMap">The type discriminator map.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.HierarchyInfo.Root">
      <summary>
            Gets the root of the hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.HierarchyInfo.InheritanceSchema">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.InheritanceSchema" /> for this hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.HierarchyInfo.Types">
      <summary>
            Gets the types of the current <see cref="T:Xtensive.Storage.Model.HierarchyInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.HierarchyInfo.Key">
      <summary>
            Gets the <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Key" /> for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.HierarchyInfo.TypeDiscriminatorMap">
      <summary>
            Gets the type discriminator.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.IndexInfo">
      <summary>
            Describes a single index in terms of storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexAttributes)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.IndexInfo" /> class.
            </summary>
      <param name="declaringType">The <see cref="T:Xtensive.Storage.Model.TypeInfo" /> that declares this instance.</param>
      <param name="indexAttributes">
        <see cref="T:Xtensive.Storage.Model.IndexAttributes" /> attributes for this instance.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexAttributes,Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.IndexInfo" /> class.
            </summary>
      <param name="reflectedType">Reflected type.</param>
      <param name="ancestorIndex">The ancestors index.</param>
      <param name="indexAttributes">
        <see cref="T:Xtensive.Storage.Model.IndexAttributes" /> attributes for this instance.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexAttributes,Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.IndexInfo[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.IndexInfo" /> class.
            </summary>
      <param name="reflectedType">Reflected type.</param>
      <param name="indexAttributes">The index attributes.</param>
      <param name="baseIndex">Base index.</param>
      <param name="baseIndexes">The base indexes.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.ColumnIndexMap">
      <summary>
            Gets or sets the column index map.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.Columns">
      <summary>
            Gets a collection of all the columns that are included into the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.KeyColumns">
      <summary>
            Gets a collection of columns that are included into the index as index key.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.ValueColumns">
      <summary>
            Gets a collection of non key columns that are included into the index as index value.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IncludedColumns">
      <summary>
            Gets a Collection of columns that are included into the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor containing all the <see cref="P:Xtensive.Storage.Model.IndexInfo.Columns" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.KeyTupleDescriptor">
      <summary>
            Gets the tuple descriptor containing just <see cref="P:Xtensive.Storage.Model.IndexInfo.KeyColumns" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.UnderlyingIndexes">
      <summary>
            Gets the underlying indexes for this instance. 
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.DeclaringType">
      <summary>
            Gets the type that declares this member.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.ReflectedType">
      <summary>
            Gets the type that was used to obtain this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.DeclaringIndex">
      <summary>
            Gets the declaring index for this index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.FilterByTypes">
      <summary>
            Gets the types for <see cref="F:Xtensive.Storage.Model.IndexAttributes.Filtered" /> index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.SelectColumns">
      <summary>
            Gets the column indexes for <see cref="F:Xtensive.Storage.Model.IndexAttributes.View" /> index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsPrimary">
      <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsTyped">
      <summary>
            Gets or sets a value indicating whether this instance is typed index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsUnique">
      <summary>
            Gets or sets a value indicating whether this instance is unique index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsAbstract">
      <summary>
            Gets or sets a value indicating whether this instance is abstract.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.Attributes">
      <summary>
            Gets or sets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsVirtual">
      <summary>
            Gets or sets a value indicating whether this instance is virtual index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsSecondary">
      <summary>
            Gets a value indicating whether this instance is secondary index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.IndexInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.IndexInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.IndexInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Implicit(Xtensive.Storage.Model.IndexInfo)~Xtensive.Storage.Model.IndexInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.Equals(Xtensive.Storage.Model.IndexInfoRef)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="other">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="other" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="other">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="other" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Equality(Xtensive.Storage.Model.IndexInfoRef,Xtensive.Storage.Model.IndexInfoRef)">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for inequality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Inequality(Xtensive.Storage.Model.IndexInfoRef,Xtensive.Storage.Model.IndexInfoRef)">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for equality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfoRef.#ctor(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.IndexInfoRef" /> class.
            </summary>
      <param name="indexInfo">
        <see cref="T:Xtensive.Storage.Model.IndexInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfoRef.IndexName">
      <summary>
            Name of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfoRef.TypeName">
      <summary>
            Name of the reflecting type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.InheritanceSchema">
      <summary>
            Enumerates all supported 'class to tables mapping' schemes.
            </summary>
      <remarks>See M.Fowler - "Patterns of Enterprise Application Architecture".</remarks>
    </member>
    <member name="F:Xtensive.Storage.Model.InheritanceSchema.Default">
      <summary>
            Is equal to <see cref="F:Xtensive.Storage.Model.InheritanceSchema.ClassTable" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.InheritanceSchema.ClassTable">
      <summary>
            One table per class in the inheritance structure. Inherited properties are stored in the parent class.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.InheritanceSchema.SingleTable">
      <summary>
            Maps all fields of all classes of an inheritance structure into a single table.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.InheritanceSchema.ConcreteTable">
      <summary>
            One table for each concrete class in the inheritance hierarchy. 
            Inherited properties are duplicated in the descendant tables.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.KeyInfo">
      <summary>
            Describes key for a particular <see cref="F:Xtensive.Storage.Model.KeyInfo.hierarchy" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyInfo.Lock(System.Boolean)">
      <exception cref="T:System.InvalidOperationException">Hierarchy must be set before locking this instance.</exception>
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyInfo.#ctor(Xtensive.Core.Collections.ReadOnlyList{Xtensive.Storage.Model.FieldInfo},Xtensive.Core.Collections.ReadOnlyList{Xtensive.Storage.Model.ColumnInfo},System.Type,System.String,Xtensive.Core.Tuples.TupleDescriptor,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.KeyInfo" /> class.
            </summary>
      <param name="fields">The key fields.</param>
      <param name="columns">The key columns.</param>
      <param name="generatorType">Type of the key generator.</param>
      <param name="generatorName">Name of the key generator (<see langword="null" /> means unnamed).</param>
      <param name="tupleDescriptor">Key tuple descriptor.</param>
      <param name="typeIdColumnIndex">Index of the type id column.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.Hierarchy">
      <summary>
            Gets the hierarchy this key belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.Fields">
      <summary>
            Gets the fields forming the key.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.Columns">
      <summary>
            Gets the columns forming the key.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.GeneratorType">
      <summary>
            Gets the key generator type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.GeneratorName">
      <summary>
            Gets the key generator name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor of the key.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.TypeIdColumnIndex">
      <summary>
            Gets the index of the column related to field with <see cref="P:Xtensive.Storage.Model.FieldInfo.IsTypeId" />==<see langword="true" />.
            If there is no such field, returns <see langword="-1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.ContainsForeignKeys">
      <summary>
            Gets or sets a value indicating whether key contains foreign keys.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.Sequence">
      <summary>
            Gets the information on associated sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.IsFirstAmongSimilarKeys">
      <summary>
            Gets the value indicating this key is the first one built among similar keys.
            All similar keys share the same <see cref="P:Xtensive.Storage.Model.KeyInfo.EqualityIdentifier" /> value.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyInfo.EqualityIdentifier">
      <summary>
            Gets the equality identifier for this key.
            <see cref="P:Xtensive.Storage.Model.KeyInfo.EqualityIdentifier" /> is used as an additional value to compare
            when actual keys are compared for equality. 
            So two keys are equal when their fields are equal and 
            they share the same <see cref="P:Xtensive.Storage.Model.KeyInfo.EqualityIdentifier" /> value.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ModelVisitor`1">
      <summary>
            An abstract base class for all <see cref="T:Xtensive.Storage.Model.DomainModel" /> visitors.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.Visit(Xtensive.Storage.Model.Node)">
      <summary>
            Visits the specified node.
            </summary>
      <param name="node">The node.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitKeyField(Xtensive.Storage.Model.KeyField)">
      <summary>
            Visits key field.
            </summary>
      <param name="keyField">The key field.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitColumnInfo(Xtensive.Storage.Model.ColumnInfo)">
      <summary>
            Visits a column.
            </summary>
      <param name="column">The column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitFieldInfo(Xtensive.Storage.Model.FieldInfo)">
      <summary>
            Visits a field.
            </summary>
      <param name="field">The field.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitKeyInfo(Xtensive.Storage.Model.KeyInfo)">
      <summary>
            Visits a <see cref="T:Xtensive.Storage.Model.KeyInfo" /> node.
            </summary>
      <param name="keyInfo">The key provider.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitSequenceInfo(Xtensive.Storage.Model.SequenceInfo)">
      <summary>
            Visits a <see cref="T:Xtensive.Storage.Model.SequenceInfo" /> node.
            </summary>
      <param name="sequenceInfo">The sequence info.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitIndexInfo(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Visits an index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitHierarchyInfo(Xtensive.Storage.Model.HierarchyInfo)">
      <summary>
            Visits a hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitTypeInfo(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Visits a type.
            </summary>
      <param name="type">The type.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitAssociationInfo(Xtensive.Storage.Model.AssociationInfo)">
      <summary>
            Visits an association.
            </summary>
      <param name="association">The association.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitDomainModel(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Visits domain model.
            </summary>
      <param name="domainModel">The domain model.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitFullTextIndexInfo(Xtensive.Storage.Model.FullTextIndexInfo)">
      <summary>
            Visits the full text index info.
            </summary>
      <param name="fullTextIndex">Full index of the text.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.Multiplicity">
      <summary>
            Multiplicity of relationship.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.ZeroToOne">
      <summary>
            Zero to one. 
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.ZeroToMany">
      <summary>
            Zero to many.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.OneToOne">
      <summary>
            One to one.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.OneToMany">
      <summary>
            One to many.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.ManyToOne">
      <summary>
            Many to one.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Multiplicity.ManyToMany">
      <summary>
            Many to many.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.OnRemoveAction">
      <summary>
            Defines actions that can be taken to preserve referential integrity.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.OnRemoveAction.Default">
      <summary>
            The same as <see cref="F:Xtensive.Storage.OnRemoveAction.Deny" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.OnRemoveAction.Deny">
      <summary>
            Indicates that exception will be thrown in case that removing object 
            is referenced by other object.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.OnRemoveAction.Cascade">
      <summary>
            Indicates that delete cascading operation will be taken on objects 
            that are referenced by removing object.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.OnRemoveAction.Clear">
      <summary>
            Indicates that <see langword="null" /> value will be assigned 
            to corresponding reference fields of referencing object
            or the whole item that is used in n-ry relations will be removed.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.OnRemoveAction.None">
      <summary>
            Indicates that no action will be executed to corresponding reference field 
            of referencing object.
            </summary>
      <remarks>This option is prohibited for fields of <c>EntitySet&lt;T&gt;</c> type.</remarks>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredAssociationInfo">
      <summary>
            An xml serializable representation of <see cref="T:Xtensive.Storage.Model.AssociationInfo" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredNode">
      <summary>
            A xml serializable representation of <see cref="F:Xtensive.Storage.Model.Stored.StoredNode.MappingName" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredNode.Name">
      <summary>
        <see cref="P:Xtensive.Storage.Model.Node.Name" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredNode.MappingName">
      <summary>
        <see cref="P:Xtensive.Storage.Model.MappingNode.MappingName" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingField">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerField" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingFieldName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingField" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedTypeName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedType" /></summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Multiplicity">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.Multiplicity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.MultiplicityName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Multiplicity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Reversed">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.Reversed" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReversedName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Reversed" /></summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.IsMaster">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.IsMaster" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.AssociationInfo.AuxiliaryType" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorTypeName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorType" /></summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredDomainModel">
      <summary>
            An xml serializable representation of <see cref="T:Xtensive.Storage.Model.DomainModel" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Types">
      <summary>
        <see cref="P:Xtensive.Storage.Model.DomainModel.Types" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Associations">
      <summary>
        <see cref="P:Xtensive.Storage.Model.DomainModel.Associations" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Hierarchies">
      <summary>
        <see cref="P:Xtensive.Storage.Model.DomainModel.Hierarchies" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Stored.StoredDomainModel.UpdateReferences">
      <summary>
            Updates all references within this model.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredFieldInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.FieldInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.DeclaringType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.DeclaringType" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.PropertyName">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.UnderlyingProperty" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.OriginalName">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.OriginalName" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.ValueType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.ValueType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Parent">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.Parent" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Fields">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.Fields" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Length">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.Length" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.ItemType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.ItemType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsSystem">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsSystem" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsTypeId">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsTypeId" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEnum">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEnum" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsPrimaryKey">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsPrimaryKey" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsExplicit">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsExplicit" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsInterfaceImplementation">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsInterfaceImplementation" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsPrimitive">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsPrimitive" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEntity">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEntity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsStructure">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsStructure" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEntitySet">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEntitySet" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsNullable">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsNullable" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsLazyLoad">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsLazyLoad" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredFieldInfo.PrimitiveFields">
      <summary>
            Gets the primitive fields.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsNested">
      <summary>
        <see cref="P:Xtensive.Storage.Model.FieldInfo.IsNested" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredHierarchyInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.HierarchyInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.Root">
      <summary>
        <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Root" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.InheritanceSchema">
      <summary>
        <see cref="P:Xtensive.Storage.Model.HierarchyInfo.InheritanceSchema" />
      </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.Types">
      <summary>
        <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Types" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Stored.StoredTypeInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.UnderlyingType">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.UnderlyingType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.TypeId">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.HierarchyRoot">
      <summary>
            If is not <see langword="null" /> declares this instance as hierarchy root
            and value of this property specifies <see cref="T:Xtensive.Storage.Model.InheritanceSchema" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Hierarchy">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.Hierarchy" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Fields">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.Fields" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllFields">
      <summary>
            Contains all fields inherited by this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />
            plus all fields in declared in this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Associations">
      <summary>
            Associations outgoing from this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Ancestor">
      <summary>
            Gets the ancestors of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AncestorName">
      <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Ancestor" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllAncestors">
      <summary>
            Gets both direct and indirect ancestors of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Descendants">
      <summary>
            Gets direct descendants of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllDescendants">
      <summary>
            Gets both direct and indirect descendants of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsEntity">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.IsEntity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsAbstract">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.IsAbstract" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsInterface">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.IsInterface" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsStructure">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.IsStructure" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsSystem">
      <summary>
        <see cref="P:Xtensive.Storage.Model.TypeInfo.IsSystem" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.Stored.StoredTypeInfo.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.GenericTypeDefinition">
      <summary>
            Gets the name of the generic definition type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.GenericArguments">
      <summary>
            Gets the name of the generic argument type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsHierarchyRoot">
      <summary>
            Gets a value indicating whether this instance is hierarchy root.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsGeneric">
      <summary>
            Gets a value indicating whether underlying type is generic.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeDiscriminatorMap.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeDiscriminatorMap.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeIndexInfoCollection.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeIndexInfoCollection.GetIndexesContainingAllData">
      <summary>
            Gets the minimal set of indexes containing all data for the type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeIndexInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.TypeIndexInfoCollection.PrimaryIndex">
      <summary>
            Gets the primary index in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeIndexInfoCollection.RealPrimaryIndexes">
      <summary>
            Gets the list of real primary index in this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.KeyField">
      <summary>
            Describes a field that is a part of a primary key.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyField.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyField.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyField.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.KeyField" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyField.#ctor(System.String,Xtensive.Core.Direction)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.KeyField" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="direction">The direction.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyField.Direction">
      <summary>
            Gets or sets the direction.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExCanNotExtractForeignKey">
      <summary>
              Looks up a localized string similar to Can't extract foreign key..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExComparerForTypeIsNotAvailable">
      <summary>
              Looks up a localized string similar to Comparer for type '{0}' is not available..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExCouldNotResolveXYWithinDomain">
      <summary>
              Looks up a localized string similar to Could not resolve {0} '{1}' within the domain..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExDefaultTypeIsAlreadyRegistered">
      <summary>
              Looks up a localized string similar to Default type is already registered..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInstanceMustBeLockedBeforeThisOperation">
      <summary>
              Looks up a localized string similar to Instance must be locked before this operation..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExItemWithKeyXWasNotFound">
      <summary>
              Looks up a localized string similar to Item with key '{0}' was not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExItemWithNameXAlreadyExistsInY">
      <summary>
              Looks up a localized string similar to Item with name '{0}' already exists in '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExKeyContainsMultipleFieldsWithIsTypeIdTrueFlag">
      <summary>
              Looks up a localized string similar to Key contains multiple fields with IsTypeId==true flag..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExNodeTypeIsUnknown">
      <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExTypeDiscriminatorFieldIsAlreadySet">
      <summary>
              Looks up a localized string similar to TypeDiscriminator field is already set..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExTypeIdIsNotAssignedForTypeX">
      <summary>
              Looks up a localized string similar to TypeId is not assigned for type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUnableToFindMasterAssociation">
      <summary>
              Looks up a localized string similar to Unable to find master association of association '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.NodeCollectionFullNameFormat">
      <summary>
              Looks up a localized string similar to {0}.{1}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.NodeFormat">
      <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeIdForTypeXIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to TypeId for type {0} is already assigned..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeIdXIsNotRegistered">
      <summary>
              Looks up a localized string similar to Type with TypeId={0} is not registered..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeXIsNotRegistered">
      <summary>
              Looks up a localized string similar to Type '{0}' is not registered..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.UnnamedNodeDisplayName">
      <summary>
              Looks up a localized string similar to &lt;Unnamed&gt;.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.DomainModel">
      <summary>
            Represents a model of <see cref="N:Xtensive.Storage" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.DomainModel.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.DomainModel.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.DomainModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.DomainModel" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.DomainModel.Types">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instances contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.DomainModel.RealIndexes">
      <summary>
            Gets real indexes contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.DomainModel.FullTextIndexes">
      <summary>
            Gets full-text indexes contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.DomainModel.Hierarchies">
      <summary>
            Gets the hierarchies.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.DomainModel.Associations">
      <summary>
            Gets the collection providing information about associations.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.TypeAttributes">
      <summary>
            Type attributes.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Entity">
      <summary>
            Type is entity.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Structure">
      <summary>
            Type is structure.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Interface">
      <summary>
            Type is persistent interface.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Abstract">
      <summary>
            Type is abstract.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Materialized">
      <summary>
            Type is materialized interface.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.System">
      <summary>
            Type is system.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.Auxiliary">
      <summary>
            Type is auxilary (entity set item).
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.GenericTypeDefinition">
      <summary>
            Type is generic type definition.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeAttributes.AutoGenericInstance">
      <summary>
            Type is automatically registered generic type instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.TypeInfo">
      <summary>
            Represents an object describing any persistent type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeInfo.NoTypeId">
      <summary>
            "No <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId" />" value (<see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId" /> is unknown or undefined).
            Value is <see langword="0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.TypeInfo.MinTypeId">
      <summary>
            Minimal possible <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId" /> value.
            Value is <see langword="100" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.CreateEntityTuple(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Creates the tuple prototype with specified <paramref name="primaryKey" />.
            </summary>
      <param name="primaryKey">The primary key to use.</param>
      <returns>
            The <see cref="P:Xtensive.Storage.Model.TypeInfo.TuplePrototype" /> with "injected" <paramref name="primaryKey" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.InjectPrimaryKey(Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Injects the primary key into specified <paramref name="entityTuple" /></summary>
      <param name="primaryKey">The primary key to inject.</param>
      <returns>
            The <paramref name="entityTuple" /> with "injected" <paramref name="primaryKey" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetDescendants">
      <summary>
            Gets the direct descendants of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetDescendants(System.Boolean)">
      <summary>
            Gets descendants of this instance.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested descendants will be returned.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetInterfaces">
      <summary>
            Gets the direct persistent interfaces this instance implements.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetInterfaces(System.Boolean)">
      <summary>
            Gets the persistent interfaces this instance implements.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implemented interfaces will be returned.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetImplementors">
      <summary>
            Gets the direct implementors of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetImplementors(System.Boolean)">
      <summary>
            Gets the direct implementors of this instance.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implementors will be returned.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetAncestor">
      <summary>
            Gets the ancestor.
            </summary>
      <returns>The ancestor</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetAncestors">
      <summary>
            Gets the ancestors recursively. Root-to-inheritor order.
            </summary>
      <returns>The ancestor</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetRoot">
      <summary>
            Gets the root of the hierarchy.
            </summary>
      <returns>The hierarchy root.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetTargetAssociations">
      <summary>
            Gets the associations this instance is participating in as target (it is referenced by other entities).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetOwnerAssociations">
      <summary>
            Gets the associations this instance is participating in as owner (it has references to other entities).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetRemovalAssociationSequence">
      <summary>
            Gets the association sequence for entity removal.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetVersionFields">
      <summary>
            Gets the version field sequence.
            </summary>
      <returns>The version field sequence.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetVersionColumns">
      <summary>
            Gets the version columns.
            </summary>
      <returns>The version columns.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(Xtensive.Storage.Model.DomainModel,Xtensive.Storage.Model.TypeAttributes)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.TypeInfo" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="typeAttributes">The type attributes.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsEntity">
      <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsAbstract">
      <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsInterface">
      <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsMaterialized">
      <summary>
            Gets a value indicating whether this instance is materialized interface.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsStructure">
      <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsSystem">
      <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsLeaf">
      <summary>
            Gets a value indicating whether this instance is a leaf type,
            i.e. its <see cref="M:Xtensive.Storage.Model.TypeInfo.GetDescendants" /> method returns <see langword="0" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsAuxiliary">
      <summary>
            Gets or sets a value indicating whether this instance is auxiliary type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsGenericTypeDefinition">
      <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsAutoGenericInstance">
      <summary>
            Gets a value indicating whether this instance is automatically registered generic type instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.TypeId">
      <summary>
            Gets or sets the type identifier uniquely identifying the type in the domain model.
            </summary>
      <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.UnderlyingType">
      <summary>
            Gets or sets the underlying system type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Columns">
      <summary>
            Gets the columns contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Indexes">
      <summary>
            Gets the indexes for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.FullTextIndex">
      <summary>
            Gets full-text index if any, otherwise gets <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Fields">
      <summary>
            Gets the fields contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.FieldMap">
      <summary>
            Gets the field map for implemented interfaces.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Model">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.DomainModel" /> this instance belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Hierarchy">
      <summary>
            Gets or sets the hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.TypeDiscriminatorValue">
      <summary>
            Gets or sets the type discriminator value.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.TuplePrototype">
      <summary>
            Gets the persistent type prototype.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.VersionExtractor">
      <summary>
            Gets the version tuple extractor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.HasVersionFields">
      <summary>
            Gets a value indicating whether this instance has version fields.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.HasVersionRoots">
      <summary>
            Gets or sets a value indicating whether this instance has version roots.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.StructureFieldMapping">
      <summary>
            Gets the structure field mapping.
            </summary>
      <value>The structure field mapping.</value>
    </member>
    <member name="T:Xtensive.Storage.Model.TypeInfoCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instances and is indexed by <see cref="T:System.Type" /> and name.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Contains(System.Type)">
      <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if this instance contains the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.TryGetValue(System.Type,Xtensive.Storage.Model.TypeInfo@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> if it was found; otherwise <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if value is found by specified <paramref name="key" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Remove(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Removes element from the the collection.
            </summary>
      <param name="value">Item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Clear">
      <summary>
            Removes all objects from the
            collection instance.
            </summary>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Contains(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Determines whether collection contains a specific item.
            </summary>
      <param name="item">Value to search for.</param>
      <returns>
        <see langword="True" /> if the object is found; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Find(System.String)">
      <summary>
            Finds the type by its full name.
            </summary>
      <param name="fullName">The full name of the type to find.</param>
      <returns>Found type, if any; 
            <see langword="null" />, if there is no type with specified full name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindAncestor(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Finds the ancestor of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search ancestor for.</param>
      <returns>
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that is ancestor of specified <paramref name="item" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindDescendants(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Finds the set of direct descendants of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search descendants for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are descendants of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindDescendants(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the set of descendants of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search descendants for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested descendants will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are descendants of specified <paramref name="item" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="item" /> implements.
            </summary>
      <param name="item">The type to search interfaces for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are implemented by specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="item" /> implements.
            </summary>
      <param name="item">The type to search interfaces for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implemented interfaces will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are implemented by specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindImplementors(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Finds the set of direct implementors of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search implementors for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are implementors of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindImplementors(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the set of implementors of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search implementors for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested implementors will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that are implementors of specified <paramref name="item" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindRoot(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Finds the root of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search root for.</param>
      <returns>
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance that is root of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindAncestor(System.Type)">
      <summary>
            Finds the ancestor of the specified <paramref name="type" />.
            </summary>
      <param name="type">The type to search ancestor for.</param>
      <returns>
        <see name="TypeDef" /> instance that is ancestor of specified <paramref name="type" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(System.Type)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="type" /> implements.
            </summary>
      <param name="type">The type to search interfaces for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see name="TypeDef" /> instance that are implemented by the specified <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Find(Xtensive.Storage.Model.TypeAttributes)">
      <summary>
            Finds all <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instances according to specified criteria.
            </summary>
      <param name="criteria">The attributes.</param>
      <returns>
        <see cref="T:Xtensive.Core.Collections.ICountable`1" /> that contains all found instances.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.OnInserted(Xtensive.Storage.Model.TypeInfo,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.BuildTypeIdIndex">
      <summary>
            Generates the type ids.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.RegisterInheritance(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Registers the connection between ancestor &amp; descendant.
            </summary>
      <param name="ancestor">The ancestor.</param>
      <param name="descendant">The descendant.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.RegisterImplementation(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Registers the connection between interface and implementor.
            </summary>
      <param name="interface">The interface.</param>
      <param name="implementor">The implementor.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoCollection.#ctor(Xtensive.Storage.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Item(System.Type)">
      <summary>
            An indexer that provides access to collection items.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Item(System.Int32)">
      <summary>
            An indexer that provides access to collection items by their <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId" />.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Structures">
      <summary>
            Gets the structures that are contained in this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Entities">
      <summary>
            Gets the entities that are contained in this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Interfaces">
      <summary>
            Gets the interfaces that are contained in this collection.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.TypeInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.TypeInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Implicit(Xtensive.Storage.Model.TypeInfo)~Xtensive.Storage.Model.TypeInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Inequality(Xtensive.Storage.Model.TypeInfoRef,Xtensive.Storage.Model.TypeInfoRef)">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for equality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Equality(Xtensive.Storage.Model.TypeInfoRef,Xtensive.Storage.Model.TypeInfoRef)">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for inequality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.Equals(Xtensive.Storage.Model.TypeInfoRef)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.Equals(System.Object)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfoRef.#ctor(Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.TypeInfoRef" /> class.
            </summary>
      <param name="typeInfo">
        <see cref="T:Xtensive.Storage.Model.TypeInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfoRef.TypeName">
      <summary>
            Name of the type.
            </summary>
    </member>
  </members>
</doc>