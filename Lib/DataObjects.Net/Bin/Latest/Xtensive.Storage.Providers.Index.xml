<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Storage.Providers.Index</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Storage.Providers.Index.HandlerFactory">
      <summary>
            Base handler factory for indexing storages.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Indexing.IIndexResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexCompiler" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexCompiler.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> object providing access to available storage handlers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.ClientStorageView">
      <summary>
            Client-side storage view proxy.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Execute(Xtensive.Storage.Indexing.Command)">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <summary>
            Updates the <see cref="P:Xtensive.Storage.Indexing.IModelManager.Model" /> by applying specified 
            action sequence to it.
            </summary>
      <param name="sequence">The sequence to apply.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.#ctor(Xtensive.Storage.Providers.Index.IndexStorageView)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.ClientStorageView" /> class.
            </summary>
      <param name="realStorageView">The real storage view.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.RealStorageView">
      <summary>
            Gets the real storage view.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.Model">
      <summary>
            Gets the current storage model.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.Transaction">
      <summary>
            Gets the transaction this view belongs to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.ClientTransaction">
      <summary>
            Client-side transaction object proxy.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientTransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.ClientTransaction.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.Xtensive#Core#IIdentified#Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.State">
      <summary>
             Gets the <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.IsolationLevel">
      <summary>
            Gets the isolation level of the transaction.
            </summary>
      <value>The isolation level.</value>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.TimeStamp">
      <summary>
            Gets the start time of the current transaction.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexResolver">
      <summary>
            An <see cref="T:Xtensive.Storage.Indexing.IIndexResolver" /> implementation that forwards all requests
            to current <see cref="T:Xtensive.Storage.Providers.Index.SessionHandler" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexResolver.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexResolver.#ctor(Xtensive.Storage.Providers.HandlerAccessor)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexResolver" /> class.
            </summary>
      <param name="handlers">The handlers.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexStorage">
      <summary>
            An abstract base class for all index storages.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.CreateView(System.Transactions.IsolationLevel)">
      <summary>
            Creates a new transactional view.
            </summary>
      <param name="isolationLevel">Required isolation level.</param>
      <returns>New transactional view.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetView(System.Guid)">
      <summary>
            Gets the transactional view.
            </summary>
      <param name="transactionId">The transaction identifier to get the view for.</param>
      <returns>The transactional view;
            <see langword="null" />, if no view is available for the specified transaction.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetRealIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets real index.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>The real index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetTransform(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the transform for index.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>The index transform.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.Ping">
      <summary>
            Used to periodically ping this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.InitializeLifetimeService">
      <summary>
                    Obtains a lifetime service object to control the lifetime policy for this instance.
                </summary>
      <returns>
                    An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> property.
                </returns>
      <exception cref="T:System.Security.SecurityException">
                    The immediate caller does not have infrastructure permission. 
                </exception>
      <filterpriority>2</filterpriority>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure" />
      </PermissionSet>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexStorage" /> class.
            </summary>
      <param name="name">The storage name.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexStorage.Model">
      <summary>
            Gets the model.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexStorage.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexProvider">
      <summary>
            General index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.GetService``1">
      <summary>
            Gets the service of the specified type <typeparamref name="T" />.
            Returns <see langword="null" />, if there is no such service.
            </summary>
      <typeparam name="T">The type of the service to get.</typeparam>
      <returns>The service of specified type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Indexing.Model.IndexInfo,Xtensive.Storage.Indexing.IIndexResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="indexDescriptor">Descriptor of the index.</param>
      <param name="indexResolver">Index resolver.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.MergedStatisticsProvider.#ctor(Xtensive.Indexing.Optimization.IOptimizationInfoProvider{Xtensive.Core.Tuples.Tuple}[])">
      <exception cref="T:System.Exception">
        <paramref name="underlyingProviders" /> is empty.</exception>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExCanNotFindIndexXInStorage">
      <summary>
              Looks up a localized string similar to Can not find index '{0}' in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExCollectionIsEmpty">
      <summary>
              Looks up a localized string similar to The collection is empty.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExIndexingStoragesSupportOnlyConnectionUrls">
      <summary>
              Looks up a localized string similar to Indexing storages support only connection URLs.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExInstanceXIsNotFound">
      <summary>
              Looks up a localized string similar to Instance of type '{0}' with specified key is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExTransactionIsAlreadyOpened">
      <summary>
              Looks up a localized string similar to Transaction is already opened..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExTransactionIsNotOpened">
      <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExUnsupportedIndex">
      <summary>
              Looks up a localized string similar to Index '{0}' with attributes '{1}' is not supported..
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Creates the type info.
            </summary>
      <param name="type">The type.</param>
      <param name="length">The length.</param>
      <returns>Newly created <see cref="T:Xtensive.Storage.Indexing.Model.TypeInfo" />.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Session" />-level handler for index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.BeginTransaction(System.Transactions.IsolationLevel)">
      <summary>
            Opens the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.CreateSavepoint(System.String)">
      <summary>
            Makes the savepoint.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.RollbackToSavepoint(System.String)">
      <summary>
            Rollbacks to savepoint.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.CommitTransaction">
      <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.RollbackTransaction">
      <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
      <summary>
            Rollbacks the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Storage.Internals.PersistAction},System.Boolean)">
      <summary>
            Persists changed entities.
            </summary>
      <param name="persistActions">The registry.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> dirty flush is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.SessionHandler.StorageView">
      <summary>
            Gets the storage view.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.SessionHandler.TransactionIsStarted">
      <summary>
            Gets a value indicating whether transaction is actually started.
            This indicates presence of outermost transaction only.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Domain" />-level handler for index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetCompilerProviderContainerTypes">
      <summary>
            Gets the sequence of compiler provider container types.
            </summary>
      <returns>The sequence of compiler provider container types.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreatePreCompiler">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" />.
            </summary>
      <returns>A new pre-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler" />.
            </summary>
      <param name="compiler">Currently used compiler instance.</param>
      <returns>A new post-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.BuildMapping">
      <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
      <summary>
            Builds the mapping schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetStorageIndexInfo(Xtensive.Storage.Model.IndexInfoRef)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Indexing.Model.IndexInfo" />
            by <see cref="T:Xtensive.Storage.Model.IndexInfoRef" />. 
            </summary>
      <param name="indexInfoRef">The index info.</param>
      <returns>Converted index info.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateProviderInfo">
      <summary>
            Creates <see cref="P:Xtensive.Storage.Providers.DomainHandler.ProviderInfo" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetIndexStorage">
      <summary>
            Gets the storage of real indexes.
            </summary>
      <returns>The storage.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.TryGetRemoteStorage(System.String,Xtensive.Storage.Providers.Index.IndexStorage@)">
      <summary>
            Tries get remote storage.
            </summary>
      <param name="url">The remote URL.</param>
      <param name="remoteStorage">The remote storage.</param>
      <returns>
        <see langword="true" /> if remote storage has been found, 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.MarshalStorage(Xtensive.Storage.Providers.Index.IndexStorage,System.String,System.Int32)">
      <summary>
            Shares the storage by remoting.
            </summary>
      <param name="localStorage">The local storage.</param>
      <param name="url">The URL.</param>
      <param name="port">The port.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateLocalStorage(System.String)">
      <summary>
            Creates the local index storage.
            </summary>
      <param name="name">The name of storage.</param>
      <returns>Newly created index storage.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.DomainHandler.Storage">
      <summary>
            Gets the index storage.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexStorageView">
      <summary>
            An abstract base class for all index storage views.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Execute(Xtensive.Storage.Indexing.Command)">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <summary>
            Updates the <see cref="P:Xtensive.Storage.Indexing.IModelManager.Model" /> by applying specified 
            action sequence to it.
            </summary>
      <param name="sequence">The sequence to apply.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.ClearSchema">
      <summary>
            Clears the schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.CreateNewSchema(Xtensive.Storage.Indexing.Model.StorageInfo)">
      <summary>
            Creates the new schema.
            </summary>
      <param name="newSchema">The new schema.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Ping">
      <summary>
            Used to periodically ping this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.#ctor(Xtensive.Storage.Providers.Index.IndexStorage,Xtensive.Storage.Indexing.Model.StorageInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexStorageView" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="model">The model.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Storage">
      <summary>
            Gets the storage.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Model">
      <summary>
            Gets the current storage model.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Transaction">
      <summary>
            Gets the transaction this view belongs to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexTransaction">
      <summary>
            An abstract base implementation of <see cref="T:Xtensive.Integrity.Transactions.ITransaction" />
            for indexing engines.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexTransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexTransaction.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.Xtensive#Core#IIdentified#Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.Identifier">
      <summary>
            Gets object identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.IsolationLevel">
      <summary>
            Gets the isolation level of the transaction.
            </summary>
      <value>The isolation level.</value>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.TimeStamp">
      <summary>
            Gets the start time of the current transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.State">
      <summary>
             Gets the <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> of this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.IndexUpdateCommand">
      <summary>
            Update command for indexing storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Update(System.String,Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Creates update command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <param name="newValue">The new value.</param>
      <returns>Update command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Insert(System.String,Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Creates insert command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>Insert command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Remove(System.String,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Creates remove command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <returns>Remove command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.IndexUpdateCommand" /> class.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Domain" />-level handler for memory index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.DomainHandler.CreateLocalStorage(System.String)">
      <summary>
            Creates the local index storage.
            </summary>
      <param name="name">The name of storage.</param>
      <returns>Newly created index storage.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.HandlerFactory">
      <summary>
            Handlers factory for memory index storage.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage">
      <summary>
            In memory index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.CreateView(System.Transactions.IsolationLevel)">
      <summary>
            Creates a new transactional view.
            </summary>
      <param name="isolationLevel">Required isolation level.</param>
      <returns>New transactional view.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetView(System.Guid)">
      <summary>
            Gets the transactional view.
            </summary>
      <param name="transactionId">The transaction identifier to get the view for.</param>
      <returns>The transactional view;
            <see langword="null" />, if no view is available for the specified transaction.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetRealIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets real index.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>The real index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetTransform(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the transform for index.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>The index transform.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView">
      <summary>
            View of "in memory" indexing storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Execute(Xtensive.Storage.Indexing.Command)">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <summary>
            Updates the <see cref="P:Xtensive.Storage.Indexing.IModelManager.Model" /> by applying specified 
            action sequence to it.
            </summary>
      <param name="sequence">The sequence to apply.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.ClearSchema">
      <summary>
            Clears the schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.CreateNewSchema(Xtensive.Storage.Indexing.Model.StorageInfo)">
      <summary>
            Creates the new schema.
            </summary>
      <param name="model">The new schema.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.FindTuple(System.String,Xtensive.Core.Tuples.Tuple)">
      <exception cref="T:System.InvalidOperationException">Instance with specific key is not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.#ctor(Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage,Xtensive.Storage.Indexing.Model.StorageInfo,System.Transactions.IsolationLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView" /> class.
            </summary>
      <param name="storage">The storage.</param>
      <param name="model">The model.</param>
      <param name="isolationLevel">The transaction isolation level.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Transaction">
      <summary>
            Gets the transaction this view belongs to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction">
      <summary>
            Indexing storage transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.Commit">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.Rollback">
      <summary>
            Rolls back the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.#ctor(System.Guid,System.Transactions.IsolationLevel)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction" /> class.
            </summary>
      <param name="identifier">The identifier.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.TimeStamp">
      <summary>
            Gets the start time of the current transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.State">
      <summary>
             Gets the <see cref="T:Xtensive.Integrity.Transactions.TransactionState" /> of this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.ExtractSchema">
      <summary>
            Extracts the schema.
            </summary>
      <returns>The extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.ExtractNativeSchema">
      <summary>
            Extracts the native schema.
            </summary>
      <returns>The native extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo)">
      <summary>
            Upgrades the storage.
            </summary>
      <param name="upgradeActions">The upgrade actions.</param>
      <param name="sourceSchema">The source schema.</param>
      <param name="targetSchema">The target schema.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.StorageView">
      <summary>
            Gets the storage view.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Index.Memory.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Session" />-level handler for memory index storage.
            </summary>
    </member>
  </members>
</doc>