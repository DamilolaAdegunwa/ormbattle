<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Storage.Providers.Index</name>
    </assembly>
    <members>
        <member name="T:Xtensive.Storage.Providers.Index.HandlerFactory">
            <summary>
            Base handler factory for indexing storages.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexCompiler">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexCompiler.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Indexing.IIndexResolver)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexCompiler.Handlers">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor"/> object providing access to available storage handlers.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.ClientStorageView">
            <summary>
            Client-side storage view proxy.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Execute(Xtensive.Storage.Indexing.Command)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientStorageView.#ctor(Xtensive.Storage.Providers.Index.IndexStorageView)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="realStorageView">The real storage view.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.RealStorageView">
            <summary>
            Gets the real storage view.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientStorageView.Transaction">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.ClientTransaction">
            <summary>
            Client-side transaction object proxy.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientTransaction.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.ClientTransaction.Rollback">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.State">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.IsolationLevel">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.ClientTransaction.TimeStamp">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexResolver">
            <summary>
            An <see cref="T:Xtensive.Storage.Indexing.IIndexResolver"/> implementation that forwards all requests
            to current <see cref="T:Xtensive.Storage.Providers.Index.SessionHandler"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexResolver.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexResolver.#ctor(Xtensive.Storage.Providers.HandlerAccessor)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="handlers">The handlers.</param>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexStorage">
            <summary>
            An abstract base class for all index storages.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.CreateView(System.Transactions.IsolationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetView(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetRealIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <summary>
            Gets real index.
            </summary>
            <param name="indexInfo">The index info.</param>
            <returns>The real index.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.GetTransform(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <summary>
            Gets the transform for index.
            </summary>
            <param name="indexInfo">The index info.</param>
            <returns>The index transform.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.Ping">
            <summary>
            Used to periodically ping this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorage.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The storage name.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexStorage.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexStorage.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexProvider">
            <summary>
            General index provider for all indexing storage handlers.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.GetService``1">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Indexing.Model.IndexInfo,Xtensive.Storage.Indexing.IIndexResolver)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin"/> property value.</param>
            <param name="indexDescriptor">Descriptor of the index.</param>
            <param name="indexResolver">Index resolver.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.MergedStatisticsProvider.#ctor(Xtensive.Indexing.Optimization.IOptimizationInfoProvider{Xtensive.Core.Tuples.Tuple}[])">
            <exception cref="T:System.Exception"><paramref name="underlyingProviders"/> is empty.</exception>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExCanNotFindIndexXInStorage">
            <summary>
              Looks up a localized string similar to Can not find index &apos;{0}&apos; in storage..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to The collection is empty.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExIndexingStoragesSupportOnlyConnectionUrls">
            <summary>
              Looks up a localized string similar to Indexing storages support only connection URLs.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExInstanceXIsNotFound">
            <summary>
              Looks up a localized string similar to Instance of type &apos;{0}&apos; with specified key is not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExTransactionIsAlreadyOpened">
            <summary>
              Looks up a localized string similar to Transaction is already opened..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExTransactionIsNotOpened">
            <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Resources.Strings.ExUnsupportedIndex">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; with attributes &apos;{1}&apos; is not supported..
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.SchemaUpgradeHandler">
            <summary>
            Upgrades storage schema.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.SessionHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Session"/>-level handler for index storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.BeginTransaction(System.Transactions.IsolationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.CreateSavepoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.RollbackToSavepoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.CommitTransaction">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.RollbackTransaction">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Storage.Internals.PersistAction},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.SessionHandler.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.SessionHandler.StorageView">
            <summary>
            Gets the storage view.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.SessionHandler.TransactionIsStarted">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.DomainHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/>-level handler for index storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetCompilerProviderContainerTypes">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateCompiler">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreatePreCompiler">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.BuildMapping">
            <inheritdoc/>
            <exception cref="T:Xtensive.Storage.DomainBuilderException">Somethig went wrong.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetStorageIndexInfo(Xtensive.Storage.Model.IndexInfoRef)">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Indexing.Model.IndexInfo"/>
            by <see cref="T:Xtensive.Storage.Model.IndexInfoRef"/>. 
            </summary>
            <param name="indexInfoRef">The index info.</param>
            <returns>Converted index info.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateProviderInfo">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.GetIndexStorage">
            <summary>
            Gets the storage of real indexes.
            </summary>
            <returns>The storage.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.TryGetRemoteStorage(System.String,Xtensive.Storage.Providers.Index.IndexStorage@)">
            <summary>
            Tries get remote storage.
            </summary>
            <param name="url">The remote URL.</param>
            <param name="remoteStorage">The remote storage.</param>
            <returns><see langword="true"/> if remote storage has been found, 
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.MarshalStorage(Xtensive.Storage.Providers.Index.IndexStorage,System.String,System.Int32)">
            <summary>
            Shares the storage by remoting.
            </summary>
            <param name="localStorage">The local storage.</param>
            <param name="url">The URL.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.CreateLocalStorage(System.String)">
            <summary>
            Creates the local index storage.
            </summary>
            <param name="name">The name of storage.</param>
            <returns>Newly created index storage.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.DomainHandler.Initialize">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.DomainHandler.Storage">
            <summary>
            Gets the index storage.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexStorageView">
            <summary>
            An abstract base class for all index storage views.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Execute(Xtensive.Storage.Indexing.Command)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.ClearSchema">
            <summary>
            Clears the schema.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.CreateNewSchema(Xtensive.Storage.Indexing.Model.StorageInfo)">
            <summary>
            Creates the new schema.
            </summary>
            <param name="newSchema">The new schema.</param>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.Ping">
            <summary>
            Used to periodically ping this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexStorageView.#ctor(Xtensive.Storage.Providers.Index.IndexStorage,Xtensive.Storage.Indexing.Model.StorageInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="storage">The storage.</param>
            <param name="model">The model.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Storage">
            <summary>
            Gets the storage.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Model">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexStorageView.Transaction">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexTransaction">
            <summary>
            An abstract base implementation of <see cref="T:Xtensive.Integrity.Transactions.ITransaction"/>
            for indexing engines.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexTransaction.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexTransaction.Rollback">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.Xtensive#Core#IIdentified#Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.IsolationLevel">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.TimeStamp">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.IndexTransaction.State">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.IndexUpdateCommand">
            <summary>
            Update command for indexing storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Update(System.String,Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates update command.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="newValue">The new value.</param>
            <returns>Update command.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Insert(System.String,Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates insert command.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Insert command.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.Remove(System.String,Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates remove command.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <returns>Remove command.</returns>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.IndexUpdateCommand.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.DomainHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Domain"/>-level handler for memory index storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.DomainHandler.CreateLocalStorage(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.HandlerFactory">
            <summary>
            Handlers factory for memory index storage.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage">
            <summary>
            In memory index storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.CreateView(System.Transactions.IsolationLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetView(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetRealIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.GetTransform(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView">
            <summary>
            View of "in memory" indexing storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Execute(Xtensive.Storage.Indexing.Command)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Indexing.Command})">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.ClearSchema">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.CreateNewSchema(Xtensive.Storage.Indexing.Model.StorageInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.GetIndex(Xtensive.Storage.Indexing.Model.IndexInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.FindTuple(System.String,Xtensive.Core.Tuples.Tuple)">
            <exception cref="T:System.InvalidOperationException">Instance with specific key is not found.</exception>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.#ctor(Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorage,Xtensive.Storage.Indexing.Model.StorageInfo,System.Transactions.IsolationLevel)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="storage">The storage.</param>
            <param name="model">The model.</param>
            <param name="isolationLevel">The transaction isolation level.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexStorageView.Transaction">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction">
            <summary>
            Indexing storage transaction.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.Commit">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.Rollback">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.#ctor(System.Guid,System.Transactions.IsolationLevel)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.TimeStamp">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Memory.MemoryIndexTransaction.State">
            <inheritdoc/>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler">
            <summary>
            Upgrades storage schema.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.GetExtractedSchema">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Providers.Index.Memory.SchemaUpgradeHandler.StorageView">
            <summary>
            Gets the storage view.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Providers.Index.Memory.SessionHandler">
            <summary>
            <see cref="T:Xtensive.Storage.Session"/>-level handler for memory index storage.
            </summary>
        </member>
    </members>
</doc>
