<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Orm</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Orm.TransactionalAttribute">
      <summary>
            Activates session on method boundary.
            Opens the transaction, if this is necessary.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.CompileTimeInitialize(System.Reflection.MethodBase,PostSharp.Aspects.AspectInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.OnEntry(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Session switching is detected.</exception>
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.OnSuccess(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.OnExit(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalAttribute.#ctor(Xtensive.Orm.TransactionalBehavior)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="mode">The transaction opening mode.</param>
    </member>
    <member name="P:Xtensive.Orm.TransactionalAttribute.Mode">
      <summary>
            Gets or sets value describing transaction opening mode.
            Default value is <see cref="F:Xtensive.Orm.TransactionOpenMode.Auto" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionalAttribute.ActivateSession">
      <summary>
            Gets or sets a value indicating whether a session should be activated on the method boundaries.
             </summary>
      <remarks>When the value is not set explicitely actual value will be resolved according to 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag of the current session.</remarks>
    </member>
    <member name="T:Xtensive.Orm.NonTransactionalAttribute">
      <summary>
            Indicates whether transactional aspect should not be applied to the method, property or constructor.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ISessionBound">
      <summary>
            Contract for all the objects that are bound to the <see cref="P:Xtensive.Orm.ISessionBound.Session" /> instance.
            Methods of implementors of this interface must be processed by PostSharp 
            to ensure their own <see cref="P:Xtensive.Orm.ISessionBound.Session" /> is activated inside their method bodies, 
            and transaction is already opened there.
            </summary>
      <remarks>
            Only public and protected methods and properties are processed by
            <see cref="T:Xtensive.Orm.TransactionalTypeAttribute" /> aspect.
            To override the default behavior, use <see cref="T:Xtensive.Orm.TransactionalAttribute" /> and
            <see cref="T:Xtensive.Aspects.InfrastructureAttribute" />.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.ISessionBound.Session">
      <summary>
            Gets the session this instance is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Session">
      <summary>
        <c>DataContext</c> analogue maintaining database connection
            and entity cache (identity map in the simplest case).
            </summary>
      <remarks>
        <para>
            Each session maintains its own connection to the database and 
            caches a set of materialized persistent instates.
            </para>
        <para>
          <c>Session</c> implements <see cref="T:Xtensive.IoC.IContext" /> interface, that means each <c>Session</c>
            can be either active or not active in a particular thread (see <see cref="P:Xtensive.Orm.Session.IsActive" /> property).
            Each thread can contain only one active session in each point of time, such session 
            can be a accessed via <see cref="P:Xtensive.Orm.Session.Current">Session.Current</see> property 
            or <see cref="M:Xtensive.Orm.Session.Demand">Session.Demand()</see> method.
            </para>
        <para>
            Sessions are opened (and, optionally, activated) by 
            <see cref="M:Xtensive.Orm.Domain.OpenSession">Domain.OpenSession()</see> method. 
            Existing session can be activated by <see cref="M:Xtensive.Orm.Session.Activate" /> method.
            </para>
      </remarks>
      <example>
        <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Session sample">
        </code>
      </example>
      <seealso cref="T:Xtensive.Orm.Domain" />
      <seealso cref="T:Xtensive.Orm.SessionBound" />
    </member>
    <member name="T:Xtensive.Orm.Session.QueryEndpoint">
      <summary>
            Provides methods allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key" />s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.All``1">
      <summary>
            The "starting point" for any LINQ query -
            a <see cref="T:System.Linq.IQueryable`1" /> enumerating all the instances
            of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">Type of the sequence element.</typeparam>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> enumerating all the instances
            of type <typeparamref name="T" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.All(System.Type)">
      <summary>
            The "starting point" for dynamic LINQ query -
            a <see cref="T:System.Linq.IQueryable" /> enumerating all the instances
            of type <paramref name="elementType" />.
            </summary>
      <param name="elementType">Type of the sequence element.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable" /> enumerating all the instances
            of type <paramref name="elementType" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.FreeText``1(System.String)">
      <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
      <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
      <param name="searchCriteria">The search criteria in free text form.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Xtensive.Orm.FullTextMatch`1" />
            allowing to continue building the query.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.FreeText``1(System.Linq.Expressions.Expression{System.Func{System.String}})">
      <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
      <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
      <param name="searchCriteria">The search criteria in free text form.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Xtensive.Orm.FullTextMatch`1" />
            allowing to continue building the query.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Single(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            </returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Entity with the specified key is not found.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.SingleOrDefault(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Single``1(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Single``1(System.Object[])">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="keyValues" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="keyValues">Key values.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="keyValues" /> identify.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.SingleOrDefault``1(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.SingleOrDefault``1(System.Object[])">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="keyValues" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="keyValues">Key values.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="keyValues" /> identify.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Many``1(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
      <summary>
            Fetches multiple instances of specified type  by provided <paramref name="keys" />.
            </summary>
      <param name="keys">The source sequence.</param>
      <returns>The sequence of entities of type <typeparam name="T" /> matching provided <paramref name="keys" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Many``2(System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Fetches multiple instances of specified type  by provided <paramref name="keys" />.
            </summary>
      <param name="keys">The source sequence.</param>
      <returns>The sequence of entities of type <typeparam name="T" /> matching provided <paramref name="keys" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Execute``1(System.Func{Xtensive.Orm.Session.QueryEndpoint,System.Linq.IQueryable{``0}})">
      <summary>
            Finds compiled query in cache by provided <paramref name="query" /> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo" /> instance)
            and executes them if it's already cached;
            otherwise executes the <paramref name="query" /> delegate
            and caches the result.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Execute``1(System.Object,System.Func{Xtensive.Orm.Session.QueryEndpoint,System.Linq.IQueryable{``0}})">
      <summary>
            Finds compiled query in cache by provided <paramref name="key" />
            and executes them if it's already cached;
            otherwise executes the <paramref name="query" /> delegate
            and caches the result.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Execute``1(System.Func{Xtensive.Orm.Session.QueryEndpoint,``0})">
      <summary>
            Finds compiled query in cache by provided <paramref name="query" /> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo" /> instance)
            and executes them if it's already cached;
            otherwise executes the <paramref name="query" /> delegate
            and caches the result.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.Execute``1(System.Object,System.Func{Xtensive.Orm.Session.QueryEndpoint,``0})">
      <summary>
            Finds compiled query in cache by provided <paramref name="key" />
            and executes them if it's already cached;
            otherwise executes the <paramref name="query" /> delegate
            and caches the result.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.ExecuteDelayed``1(System.Object,System.Func{Xtensive.Orm.Session.QueryEndpoint,``0})">
      <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will be cached.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.ExecuteDelayed``1(System.Func{Xtensive.Orm.Session.QueryEndpoint,``0})">
      <summary>
            Creates future scalar query and registers it for the later execution.
            The query associated with the future scalar will not be cached.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.ExecuteDelayed``1(System.Object,System.Func{Xtensive.Orm.Session.QueryEndpoint,System.Linq.IQueryable{``0}})">
      <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.ExecuteDelayed``1(System.Func{Xtensive.Orm.Session.QueryEndpoint,System.Linq.IQueryable{``0}})">
      <summary>
            Creates future query and registers it for the later execution.
            The associated query will be cached.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.GetKeyByValues``1(System.Object[])">
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> array is empty.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.QueryEndpoint.BuildQueryParameter(System.Object,Xtensive.Orm.Linq.Expressions.Visitors.ExtendedExpressionReplacer@)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.NotifyChanged">
      <summary>
            Raises events on all <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> subscribers stating that
            all entities and collections are changed.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Session.NotifyChanged(Xtensive.Orm.NotifyChangedOptions)">
      <summary>
            Raises events on all <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> and
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" /> subscribers stating that
            all entities and collections are changed.
            </summary>
      <param name="options">The options.</param>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenTransaction">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenTransaction(System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenTransaction(Xtensive.Orm.TransactionOpenMode)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="mode">The mode.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenTransaction(Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="mode">The mode.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenAutoTransaction">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenAutoTransaction(Xtensive.Orm.TransactionalBehavior)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="behavior">The automatic transaction behavior.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenAutoTransaction(System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.OpenAutoTransaction(Xtensive.Orm.TransactionalBehavior,System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="behavior">The automatic transaction behavior.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Session.EnsureIsolationLevelCompatibility(System.Transactions.IsolationLevel,System.Transactions.IsolationLevel)">
      <exception cref="T:System.InvalidOperationException">Can't create a transaction
            with requested isolation level.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Session" />, 
            or throws <see cref="T:System.InvalidOperationException" />, 
            if active <see cref="T:Xtensive.Orm.Session" /> is not found.
            </summary>
      <returns>Current session.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Session.Current" />
        <see cref="T:Xtensive.Orm.Session" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.Activate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Session.Activate(System.Boolean)">
      <summary>
            Activates the session.
            See <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching" /> for more detailed explanation
            of purpose of this method.
            </summary>
      <param name="checkSwitching">If set to <see langword="true" />, 
            <see cref="T:System.InvalidOperationException" /> is thrown if another session is active, and
            either this or active session does not have <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching" /> flag.</param>
      <returns>A disposable object reverting the action.</returns>
      <exception cref="T:System.InvalidOperationException">Session switching is detected.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.Deactivate">
      <summary>
            Deactivates <see cref="P:Xtensive.Orm.Session.Current" /> session making it equal to <see langword="null" />.
            See <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching" /> for more detailed explanation
            of purpose of this method.
            </summary>
      <returns>A disposable object reverting the action.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.OverrideCommandTimeout(System.Nullable{System.Int32})">
      <summary>
            Temporary overrides <see cref="P:Xtensive.Orm.Session.CommandTimeout" />.
            </summary>
      <param name="newTimeout">New <see cref="P:Xtensive.Orm.Session.CommandTimeout" /> value.</param>
      <returns>Command timeout overriding scope.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Removes the specified set of entities.
            </summary>
      <typeparam name="T">Entity type.</typeparam>
      <param name="entities">The entities.</param>
      <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny" /> on-remove action.
            </exception>
    </member>
    <member name="M:Xtensive.Orm.Session.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Session.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Session.DisableValidation">
      <summary>
            Opens the "inconsistent region" - the code region, in which validation is
            just queued for delayed execution rather then performed immediately.
            Actual validation will happen on disposal of <see cref="T:Xtensive.Disposing.ICompletableScope" />.
            </summary>
      <returns>
        <see cref="T:System.IDisposable" /> object, which disposal will identify the end of the region.
            </returns>
      <remarks>
        <para>
            The beginning of the region is the place where this method is called.
            </para>
        <para>
            The end of the region is the place where returned <see cref="T:System.IDisposable" /> object is disposed.
            The validation of all queued to validate objects will be performed during disposal, if
            <see cref="M:Xtensive.Disposing.ICompletableScope.Complete" /> method was called on
            <see cref="T:Xtensive.Disposing.ICompletableScope" /> object before disposal.
            </para>
      </remarks>
    </member>
    <member name="M:Xtensive.Orm.Session.Validate">
      <summary>
            Validates all instances registered in <see cref="P:Xtensive.Orm.Session.ValidationContext" />
            of current <see cref="T:Xtensive.Orm.Session" /> regardless if inconsistency
            regions are open or not.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Session.UpdateEntityState(Xtensive.Orm.Key,Xtensive.Tuples.Tuple,System.Boolean)">
      <exception cref="T:System.InvalidOperationException">
            Attempt to associate non-null <paramref name="tuple" /> with <paramref name="key" /> of unknown type.
            </exception>
    </member>
    <member name="M:Xtensive.Orm.Session.Persist">
      <summary>
            Saves all modified instances immediately to the database.
            Obsolete, use <see cref="M:Xtensive.Orm.Session.SaveChanges" /> method instead.
            </summary>
      <remarks>
        <para>
            This method should be called to ensure that all delayed
            updates are flushed to the storage.
            </para>
        <para>
            For non-disconnected (without <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected" /> option) session this method is called automatically when it's necessary,
            e.g. before beginning, committing and rolling back a transaction, performing a
            query and so further. So generally you should not worry
            about calling this method.
            </para>
        <para>
            For disconnected session (with <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected" /> option) you should call this method manually.
            </para>
      </remarks>
      <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.SaveChanges">
      <summary>
            Saves all modified instances immediately to the database.
            </summary>
      <remarks>
        <para>
            This method should be called to ensure that all delayed
            updates are flushed to the storage.
            </para>
        <para>
            For non-disconnected (without <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected" /> option) session this method is called automatically when it's necessary,
            e.g. before beginning, committing and rolling back a transaction, performing a
            query and so further. So generally you should not worry
            about calling this method.
            </para>
        <para>
            For disconnected session (with <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected" /> option) you should call this method manually.
            </para>
      </remarks>
      <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.CancelChanges">
      <summary>
            Cancels all changes and resets modified entities to their original state.
            </summary>
      <exception cref="T:System.ObjectDisposedException">Session is already disposed.</exception>
      <exception cref="T:System.NotSupportedException">Unable to cancel changes for non-disconnected session. Use transaction boundaries to control the state.</exception>
    </member>
    <member name="M:Xtensive.Orm.Session.DisableSaveChanges(Xtensive.Orm.IEntity)">
      <summary>
            Temporarily disables all save changes operations (both explicit ant automatic) 
            for specified <paramref name="target" />.
            Such entity is prevented from being persisted to the database,
            when <see cref="M:Xtensive.Orm.Session.SaveChanges" /> is called or query is executed.
            If persist is to be performed due to starting a nested transaction or committing a transaction,
            the presence of such an entity will lead to failure.
            If <paramref name="target" /> is not present in the database,
            all entities that reference <paramref name="target" /> are also pinned automatically.
            </summary>
      <param name="target">The entity to disable persisting.</param>
      <returns>A special object that controls lifetime of such behavior if <paramref name="target" /> was not previously processed by the method,
            otherwise <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Session.DisableSaveChanges">
      <summary>
            Temporarily disables only automatic save changes operations before queries, etc.
            Explicit call of <see cref="M:Xtensive.Orm.Session.SaveChanges" /> will lead to flush changes anyway.
            If save changes is to be performed due to starting a nested transaction or committing a transaction,
            active disabling save changes scope will lead to failure.
            <returns>A special object that controls lifetime of such behavior if there is no active scope,
            otherwise <see langword="null" />.</returns></summary>
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <param name="domain">The domain.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = Domain.OpenSession()) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" />, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate" />.
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,System.Boolean)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <param name="domain">The domain.</param>
      <param name="activate">Determines whether created session should be activated or not.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = domain.OpenSession(false)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" />, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate" />.
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionType)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType" />.
            </summary>
      <param name="domain">The domain.</param>
      <param name="type">The type of session.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = domain.OpenSession(sessionType)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" />, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate" />.
            }
            </code>
      </sample>
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionType,System.Boolean)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType" />.
            </summary>
      <param name="domain">The domain.</param>
      <param name="type">The type of session.</param>
      <param name="activate">Determines whether created session should be activated or not.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (domain.OpenSession(sessionType, true)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code>
      </sample>
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionConfiguration)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <param name="domain">The domain.</param>
      <param name="configuration">The session configuration.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = domain.OpenSession(configuration)) {
            // work with persistent objects here
            // Session is available through static Session.Current property when <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag is set for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" />, 
            // or the session is activate explicitely through <see cref="M:Xtensive.Orm.Session.Activate" />.
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain,Xtensive.Orm.Configuration.SessionConfiguration,System.Boolean)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <param name="domain">The domain.</param>
      <param name="configuration">The session configuration.</param>
      <param name="activate">Determines whether created session should be activated or not.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (domain.OpenSession(sessionConfiguration, false)) {
            // work with persistent objects here
            // Session is available through static Session.Current property
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="P:Xtensive.Orm.Session.Events">
      <summary>
            Gets access point to all <see cref="T:Xtensive.Orm.Session" />-related events.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.SystemEvents">
      <summary>
            Gets access point to all system <see cref="T:Xtensive.Orm.Session" />-related events.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.EntityEvents">
      <summary>
            The manager of <see cref="T:Xtensive.Orm.Entity" />'s events.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Query">
      <summary>
            Single access point allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key" />s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Transaction">
      <summary>
            Gets the active transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Configuration">
      <summary>
            Gets the configuration of the <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Name">
      <summary>
            Gets the name of the <see cref="T:Xtensive.Orm.Session" />
            (useful mainly for debugging purposes - e.g. it is used in logs).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.IsDebugEventLoggingEnabled">
      <summary>
            Indicates whether debug event logging is enabled.
            Caches <see cref="M:Xtensive.Diagnostics.ILogBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)" /> method result for <see cref="F:Xtensive.Diagnostics.LogEventTypes.Debug" /> event.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.IsPersisting">
      <summary>
            Gets a value indicating whether <see cref="M:Xtensive.Orm.Session.SaveChanges" /> method is running.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.IsDisconnected">
      <summary>
            Gets or sets a value indicating whether session is disconnected:
            a <see cref="P:Xtensive.Orm.Session.DisconnectedState" /> is attached to it (not <see langword="null" />).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.DisconnectedState">
      <summary>
            Gets the attached <see cref="T:Xtensive.Orm.DisconnectedState" /> object, if any.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Operations">
      <summary>
            Gets the operations registry of this <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.CommandTimeout">
      <summary>
            Gets or sets timeout for all <see cref="T:System.Data.IDbCommand" />s that
            are executed within this session.
            <seealso cref="P:System.Data.IDbCommand.CommandTimeout" /></summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Resolver">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Orm.Session.Current" /> session resolver to use
            when there is no active <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <remarks>
            The setter of this property can be invoked just once per application lifetime; 
            assigned resolver can not be changed.
            </remarks>
      <exception cref="T:System.NotSupportedException">Resolver is already assigned.</exception>
    </member>
    <member name="P:Xtensive.Orm.Session.Services">
      <summary>
            Gets the session service provider.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.Current">
      <summary>
            Gets the current active <see cref="T:Xtensive.Orm.Session" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Session.IsActive">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Session.Extensions">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Session.ValidationContext">
      <summary>
            Gets the current validation context.
            </summary>
      <exception cref="T:System.InvalidOperationException">Can not get validation context: There is no active transaction.</exception>
    </member>
    <member name="P:Xtensive.Orm.Session.IsSystemLogicOnly">
      <summary>
            Gets a value indicating whether only a system logic is enabled.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionScope">
      <summary>
            An implementation of <see cref="T:Xtensive.Transactions.TransactionScope" />
            suitable for storage.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionScope.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.TransactionScope.VoidScopeInstance">
      <summary>
        <see cref="T:Xtensive.Orm.TransactionScope" /> instance that is used for all <see cref="P:Xtensive.Orm.TransactionScope.IsVoid">nested</see> scopes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionScope.Transaction">
      <summary>
            Gets the transaction this scope controls.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionScope.IsVoid">
      <summary>
            Gets a value indicating whether this scope is void,
            i.e. is included into another <see cref="T:Xtensive.Orm.TransactionScope" /> 
            and therefore does nothing on opening and disposing.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.SessionConfiguration">
      <summary>
        <see cref="T:Xtensive.Orm.Session" /> configuration.
            </summary>
      <remarks>
        <para id="About">
          <see cref="T:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate" copy="true" />
        </para>
      </remarks>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCacheSize">
      <summary>
            Default cache size.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultDefaultIsolationLevel">
      <summary>
             Default isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultBatchSize">
      <summary>
            Default batch size.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultEntityChangeRegistrySize">
      <summary>
            Default size of entity change registry.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionConfiguration.Default">
      <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.Clone">
      <summary>
            Clones this configuration.
            </summary>
      <returns>The clone of this configuration.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(Xtensive.Orm.Configuration.SessionOptions)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sessionOptions">The session options.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Value for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfiguration.#ctor(System.String,Xtensive.Orm.Configuration.SessionOptions)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Value for <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name" />.</param>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Name">
      <summary>
            Gets the session name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.UserName">
      <summary>
            Gets or sets user name to authenticate.
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Password">
      <summary>
            Gets or sets password to authenticate.
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheSize">
      <summary>
            Gets or sets the size of the session entity state cache. 
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheType">
      <summary>
            Gets or sets the type of the session cache.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultIsolationLevel">
      <summary>
            Gets or sets the default isolation level. 
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionConfiguration.DefaultDefaultIsolationLevel" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout">
      <summary>
            Gets or sets the default command timeout.
            Default value is <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Type">
      <summary>
            Gets session type.
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionType.User" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.BatchSize">
      <summary>
            Gets or sets the size of the batch.
            This affects create, update, delete operations and future queries.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.Options">
      <summary>
            Gets or sets session options.
            Default value is <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Default" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ReaderPreloading">
      <summary>
            Gets or sets the reader preloading policy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.EntityChangeRegistrySize">
      <summary>
            Gets or sets the size of the entity change registry.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ServiceContainerType">
      <summary>
            Gets or sets the type of the service container.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfiguration.ConnectionInfo">
      <summary>
            Gets or sets the custom <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.ConnectionInfo" /> for session.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.SessionOptions">
      <summary>
            Enumerates possible options of the <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.Default">
      <summary>
            Default option set.
            The same as <see cref="F:Xtensive.Orm.Configuration.SessionOptions.ServerProfile" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.None">
      <summary>
            None of <see cref="T:Xtensive.Orm.Configuration.SessionOptions" /> is on.
            Value is <see langword="0x0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.AllowSwitching">
      <summary>
            Enables activation of this <see cref="T:Xtensive.Orm.Session" /> from another session having this option.
            </summary>
      <remarks>
        <para>
            By default, activation of a session inside another one with running transaction 
            (i.e. when another session is active, and transaction is already running there)
            leads to <see cref="T:System.InvalidOperationException" />, 
            since normally this indicates the same thread controls two sessions and transactions,
            which is dangerous (may lead to application-level deadlock).
            </para>
        <para>
            Alternatively, this might indicate unintentional usage of data fetched by 
            one session inside another.
            </para>
        <para>
            So to activate one session from another, you must use either <see cref="M:Xtensive.Orm.Session.Deactivate" />
            method or this option.
            </para>
        <para>
            See <see href="http://support.x-tensive.com/question/2870/nested-sessions-and-transactions">description of 
            this feature on Support@x-tensive.com</see> for further details and examples.
            </para>
      </remarks>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation">
      <summary>
            Enables automatic activation of session on all public members of <see cref="T:Xtensive.Orm.ISessionBound" /> implementors 
            (e.g. <see cref="T:Xtensive.Orm.Entity" />, <see cref="T:Xtensive.Orm.Structure" /> and their inheritors).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected">
      <summary>
        <see cref="T:Xtensive.Orm.DisconnectedState" /> will be created and attached in the session constructor.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.AutoTransactionSuppressMode">
      <summary>
            as <see cref="F:Xtensive.Orm.TransactionalBehavior.Suppress" /> when processing <see cref="T:Xtensive.Orm.TransactionalAttribute" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.AutoTransactionOpenMode">
      <summary>
            Consider <see cref="F:Xtensive.Orm.TransactionalBehavior.Auto" /> option 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.ReadRemovedObjects">
      <summary>
            Enables reading of fields of removed objects.
            By default this leads no an exception - only <see cref="P:Xtensive.Orm.Entity.Key" />, <see cref="P:Xtensive.Orm.Entity.TypeId" /> and
            few other system properties of removed objects can be accessed.
            This option allows to read all the properties of removed objects, which values are available.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.ServerProfile">
      <summary>
            Predefined option set for server-side sessions (ASP.NET, ASP.NET MVC, services, etc.).
            Includes only <see cref="F:Xtensive.Orm.Configuration.SessionOptions.None" /> flag.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.ClientProfile">
      <summary>
            Predefined option set for client-side sessions (WPF, Windows Forms, console applications, etc.).
            Combines 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoTransactionOpenMode" /> | 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.Disconnected" /> flags.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionOptions.LegacyProfile">
      <summary>
            Predefined option set for compatibility with previous versions of DataObjects.Net (4.3.* and earlier).
            Combines 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoTransactionOpenMode" /> | 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flags.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.SessionScope">
      <summary>
        <see cref="P:Xtensive.Orm.SessionScope.Session" /> activation scope. 
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SessionScope.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session to activate.</param>
    </member>
    <member name="P:Xtensive.Orm.SessionScope.CurrentSession">
      <summary>
            Gets the current <see cref="P:Xtensive.Orm.SessionScope.Session" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.SessionScope.Session">
      <summary>
            Gets the context of this scope.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionalTypeAttribute">
      <summary>
            Activates session on method boundary for <see cref="T:Xtensive.Orm.ISessionBound" /> implementors on public instance methods.
            Opens the transaction for public methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalTypeAttribute.CompileTimeValidate(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalTypeAttribute.ProvideAspects(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalTypeAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalTypeAttribute.#ctor(Xtensive.Orm.TransactionalBehavior)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="mode">The transactional behavior.</param>
    </member>
    <member name="P:Xtensive.Orm.TransactionalTypeAttribute.Mode">
      <summary>
            Gets or sets value describing transaction opening mode.
            Default value is <see cref="F:Xtensive.Orm.TransactionalBehavior.Auto" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionalTypeAttribute.ActivateSession">
      <summary>
            Gets or sets a value indicating whether a session should be activated on the method boundaries.
             </summary>
      <remarks>When the value is not set explicitely actual value will be resolved according to 
            <see cref="F:Xtensive.Orm.Configuration.SessionOptions.AutoActivation" /> flag of the current session.</remarks>
    </member>
    <member name="T:Xtensive.Orm.EntityState">
      <summary>
            The underlying state of the <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityState.TryGetEntity">
      <summary>
            Tries to get entity.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityState.RollbackDifference">
      <summary>
            Reverts the state to the origin by discarding the difference.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityState.CommitDifference">
      <summary>
            Commits the state difference to the origin.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityState.Update(Xtensive.Tuples.Tuple)">
      <summary>
            Updates the entity state to the most current one.
            </summary>
      <param name="update">The state change tuple, or a new state tuple. 
            If <see langword="null" />, the entity is considered as removed.</param>
    </member>
    <member name="M:Xtensive.Orm.EntityState.Refresh">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntityState.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntityState.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntityState.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntityState.Equals(Xtensive.Orm.EntityState)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntityState.ToString">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.EntityState.Key">
      <summary>
            Gets the key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.Type">
      <summary>
            Gets the entity type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.Tuple">
      <summary>
            Gets the values as <see cref="P:Xtensive.Orm.EntityState.Tuple" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.DifferentialTuple">
      <summary>
            Gets the values as <see cref="P:Xtensive.Orm.EntityState.DifferentialTuple" />.
            </summary>
      <returns>A <see cref="P:Xtensive.Orm.EntityState.DifferentialTuple" /> corresponding to the current state.</returns>
    </member>
    <member name="P:Xtensive.Orm.EntityState.IsTupleLoaded">
      <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.EntityState.Tuple" /> value is already loaded.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.Entity">
      <summary>
            Gets the owner of this instance.
            </summary>
      <exception cref="T:System.NotSupportedException">Property value is already set.</exception>
    </member>
    <member name="P:Xtensive.Orm.EntityState.PersistenceState">
      <summary>
            Gets or sets the persistence state.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.IsNotAvailable">
      <summary>
            Gets a value indicating whether this entity is available (has a <see cref="P:Xtensive.Orm.EntityState.Tuple" />).
            Tuple does not exist, if there is no row corresponding to the <see cref="P:Xtensive.Orm.EntityState.Entity" />
            in the storage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.IsNotAvailableOrMarkedAsRemoved">
      <summary>
            Gets a value indicating whether the state is either <see cref="P:Xtensive.Orm.EntityState.IsNotAvailable" />
            or is marked as removed (see <see cref="P:Xtensive.Orm.EntityState.PersistenceState" />).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.IsStale">
      <summary>
            Gets a value indicating whether this state is stale (taken from cache).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityState.IsVersionInfoUpdated">
      <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.Entity.VersionInfo" /> already updated.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Entity">
      <summary>
            Abstract base class for any persistent entity.
            </summary>
      <remarks>
        <para>
          <see cref="T:Xtensive.Orm.Entity" /> class encapsulates infrastructure to store persistent transactional data.
            It has <see cref="P:Xtensive.Orm.Entity.Key" /> property that uniquely identifies the instance within its <see cref="T:Xtensive.Orm.Session" />.
            </para>
        <para>All entities in a model should be inherited from this class.
            </para>
      </remarks>
      <example>
        <code>
            [HierarchyRoot]
            public class Customer : Entity
            {
              [Field, Key]
              public int Id { get; set; }
              
              [Field]
              public string Name { get; set; }
            }
            </code>
      </example>
      <seealso cref="T:Xtensive.Orm.Structure">Structure class</seealso>
      <seealso cref="T:Xtensive.Orm.EntitySet`1">
        <c>EntitySet</c> class</seealso>
    </member>
    <member name="M:Xtensive.Orm.Entity.Remove">
      <summary>
            Removes this entity.
            </summary>
      <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny" /> on-remove action.</exception>
      <seealso cref="P:Xtensive.Orm.Entity.IsRemoved" />
    </member>
    <member name="M:Xtensive.Orm.Entity.RemoveLater">
      <summary>
            Register the entity in removing queue. Removal operation will be postponed 
            until <see cref="M:Xtensive.Orm.Session.SaveChanges" /> method is called; some query is executed 
            or current transaction is being committed.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Entity.Lock(Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Entity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Entity.IdentifyAs(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Entity.OnRemoving">
      <summary>
            Called when entity is about to be removed.
            </summary>
      <remarks>
            Override it to perform some actions when entity is about to be removed.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Entity.OnRemove">
      <summary>
            Called when entity becomes removed.
            </summary>
      <remarks>
            Override this method to perform some actions when entity is removed.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Entity.UpdateVersionInfo(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Invoked to update <see cref="P:Xtensive.Orm.Entity.VersionInfo" />.
            </summary>
      <param name="changedEntity">The changed entity.</param>
      <param name="changedField">The changed field.</param>
      <returns>
        <see langword="True" />, if <see cref="P:Xtensive.Orm.Entity.VersionInfo" /> was changed;
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.NotSupportedException">Version root can't implement
            <see cref="T:Xtensive.Orm.IHasVersionRoots" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Entity.UpdateVersion(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Called to update the fields describing <see cref="T:Xtensive.Orm.Entity" />'s version.
            </summary>
      <param name="changedEntity">The changed entity.</param>
      <param name="changedField">The changed field.</param>
      <returns>
        <see langword="True" />, if <see cref="P:Xtensive.Orm.Entity.VersionInfo" /> was changed;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Entity.EnsureNotRemoved">
      <exception cref="T:System.InvalidOperationException">Entity is removed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Entity.GetSubscription(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Entity.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(System.Object[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="values">The field values that will be used for key building.</param>
      <remarks>Use this kind of constructor when you need to explicitly set key for this instance.</remarks>
      <example>
        <code>
            [HierarchyRoot]
            public class Book : Entity
            {
              [Field, KeyField]
              public string ISBN { get; set; }
              
              public Book(string isbn) : base(isbn) { }
            }
            </code>
      </example>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session,System.Object[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="values">The field values that will be used for key building.</param>
      <remarks>Use this kind of constructor when you need to explicitly set key for this instance.</remarks>
      <example>
        <code>
            [HierarchyRoot]
            public class Book : Entity
            {
            [Field, KeyField]
            public string ISBN { get; set; }
            public Book(string isbn) : base(isbn) { }
            }
            </code>
      </example>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.EntityState)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.#ctor" copy="true" />
            Used internally to initialize the entity on materialization.
            </summary>
      <param name="state">The initial state of this instance fetched from storage.</param>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(Xtensive.Orm.Session,Xtensive.Orm.EntityState)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.#ctor" copy="true" />
            Used internally to initialize the entity on materialization.
            </summary>
      <param name="state">The initial state of this instance fetched from storage.</param>
    </member>
    <member name="M:Xtensive.Orm.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="P:Xtensive.Orm.Entity.State">
      <exception cref="T:System.InvalidOperationException">Entity is already detached from Session.</exception>
    </member>
    <member name="P:Xtensive.Orm.Entity.TypeId">
      <exception cref="T:System.Exception">Property is already initialized.</exception>
    </member>
    <member name="P:Xtensive.Orm.Entity.Key">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Entity.Key" /> that identifies this entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Entity.VersionInfo">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Entity.TypeInfo">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Entity.Tuple">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Entity.PersistenceState">
      <summary>
            Gets persistence state of the entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Entity.IsRemoved">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Entity.CanBeValidated">
      <inheritdoc />
    </member>
    <member name="E:Xtensive.Orm.Entity.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.FieldInfo">
      <summary>
            Describes a single field.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.FieldInfo.NoFieldId">
      <summary>
            "No <see cref="F:Xtensive.Orm.Model.FieldInfo.NoFieldId" />" value (<see cref="F:Xtensive.Orm.Model.FieldInfo.NoFieldId" /> is unknown or undefined).
            Value is <see langword="0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.FieldInfo.MinFieldId">
      <summary>
            Minimal possible <see cref="P:Xtensive.Orm.Model.FieldInfo.FieldId" /> value.
            Value is <see langword="100" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.GetAssociation(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Gets or sets the field association.
            </summary>
      <param name="targetType">
      </param>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.ExtractValue(Xtensive.Tuples.Tuple)">
      <summary>
            Extracts the field value from the specified <see cref="T:Xtensive.Tuples.Tuple" />.
            </summary>
      <param name="tuple">The tuple to extract value from.</param>
      <returns>
        <see cref="T:Xtensive.Tuples.Tuple" /> instance with the extracted value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.Equals(Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FieldAttributes)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="attributes">The attributes.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.FieldId">
      <summary>
            Gets or sets the field identifier uniquely identifying the field
            in <see cref="P:Xtensive.Orm.Model.TypeInfo.Fields" /> collection of <see cref="P:Xtensive.Orm.Model.FieldInfo.ReflectedType" />.
            </summary>
      <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsSystem">
      <summary>
            Gets a value indicating whether this property is system.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.SkipVersion">
      <summary>
            Gets a value indicating whether this property is not used within an entity version.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.ManualVersion">
      <summary>
            Gets a value indicating whether this property belongs to an entity version. Updated manually.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.AutoVersion">
      <summary>
            Gets a value indicating whether this property belongs to an entity version. Updated automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsTypeId">
      <summary>
            Gets a value indicating whether this property contains type identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsTypeDiscriminator">
      <summary>
            Gets a value indicating whether this property is type discriminator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsDeclared">
      <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsEnum">
      <summary>
            Gets a value indicating whether this property is enum.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsInherited">
      <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsPrimaryKey">
      <summary>
            Gets a value indicating whether this property is contained by primary key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsNested">
      <summary>
            Gets a value indicating whether this property is nested.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsExplicit">
      <summary>
            Gets a value indicating whether this property explicitly implemented.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsInterfaceImplementation">
      <summary>
            Gets a value indicating whether this property implements property of one or more interfaces.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsPrimitive">
      <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsEntity">
      <summary>
            Gets a value indicating whether this property is reference to Entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsStructure">
      <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsEntitySet">
      <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsNullable">
      <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.IsLazyLoad">
      <summary>
            Gets or sets a value indicating whether property will be loaded on demand.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.OriginalName">
      <summary>
            Gets or sets original name of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.ValueType">
      <summary>
            Gets or sets the type of the value of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.ItemType">
      <summary>
            Gets or sets the item type for field that describes the EntitySet.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Length">
      <summary>
            Gets or sets the maximal length of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Scale">
      <summary>
            Gets or sets the scale of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Precision">
      <summary>
            Gets or sets the precision of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.DefaultValue">
      <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.MappingInfo">
      <summary>
            Gets <see cref="P:Xtensive.Orm.Model.FieldInfo.MappingInfo" /> for current field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.UnderlyingProperty">
      <summary>
            Gets the underlying system property.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.DeclaringField">
      <summary>
            Gets or sets the declaring field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Parent">
      <summary>
            Gets or sets the parent field for nested fields.
            </summary>
      <remarks>
            For not nested fields return value is <see langword="null" />.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.ReflectedType">
      <summary>
            Gets the type that was used to obtain this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.DeclaringType">
      <summary>
            Gets the type where the field is declared.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Fields">
      <summary>
            Gets the nested fields.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Column">
      <summary>
            Gets or sets the column associated with this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.AdapterIndex">
      <summary>
            Gets or sets field's adapter index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfo.Columns">
      <summary>
            Gets field columns.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.FieldAttribute">
      <summary>
            Indicates that property is persistent field
            and defines its persistence-related properties.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.Indexed">
      <summary>
            Gets or sets whether the field should be indexed.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.Length">
      <summary>
            Gets or sets the length of the field.
            </summary>
      <remarks>
            This property can be specified for <see cref="T:System.String" /> or array of <see cref="T:System.Byte" /> fields.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.Scale">
      <summary>
            Gets or sets the scale of the field.
            </summary>
      <remarks>
            This property can be specified for <see cref="T:System.Decimal" /> type.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.Precision">
      <summary>
            Gets or sets the precision of the field.
            </summary>
      <remarks>
            This property can be specified for <see cref="T:System.Decimal" /> type.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.Nullable">
      <summary>
            Gets or sets a value indicating whether this field is nullable.
            </summary>
      <remarks>
            Note that this should be applied to reference fields only. For value-based fields
            consider using <see cref="T:System.Nullable`1" /> approach.
            </remarks>
      <value>
        <see langword="true" /> if field nullable; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.NullableOnUpgrade">
      <summary>
            Gets or sets a value indicating whether this field must be <see cref="P:Xtensive.Orm.FieldAttribute.Nullable" /> during upgrade.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.DefaultValue">
      <summary>
            Gets or sets the default value for this property.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FieldAttribute.LazyLoad">
      <summary>
            Gets or sets a value indicating whether value of this field should be loaded on demand.
            </summary>
      <remarks>
            Usually lazy loading is used for byte-arrays, large string fields or <see cref="T:Xtensive.Orm.Structure">structures</see>.
            <see cref="T:Xtensive.Orm.Entity" /> and <see cref="T:Xtensive.Orm.EntitySet`1" /> fields are always loaded on demand.
            </remarks>
    </member>
    <member name="T:Xtensive.Orm.KeyAttribute">
      <summary>
            Marks persistent property as a part of primary key and 
            specifies <see cref="P:Xtensive.Orm.KeyAttribute.Position" /> and <see cref="P:Xtensive.Orm.KeyAttribute.Direction" /> of the field in key.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyAttribute.#ctor(System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="position">The <see cref="P:Xtensive.Orm.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
    </member>
    <member name="M:Xtensive.Orm.KeyAttribute.#ctor(Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="direction">The <see cref="P:Xtensive.Orm.KeyAttribute.Direction">sort direction</see>.</param>
    </member>
    <member name="M:Xtensive.Orm.KeyAttribute.#ctor(System.Int32,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="position">The <see cref="P:Xtensive.Orm.KeyAttribute.Position">position</see> of persistent property inside primary key.</param>
      <param name="direction">The <see cref="P:Xtensive.Orm.KeyAttribute.Direction">sort direction</see>.</param>
    </member>
    <member name="P:Xtensive.Orm.KeyAttribute.Position">
      <summary>
            Gets or sets the position of persistent property inside primary key.
            </summary>
      <remarks>
        <para>Each key in hierarchy should have an unique position from 0 to N-1 where N is number of key fields.</para>
        <para>
            Key fields positions and <see cref="P:Xtensive.Orm.KeyAttribute.Direction">directions</see> choice can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and <see cref="P:Xtensive.Orm.KeyAttribute.Direction" /> of key fields.
            </para>
        <para>Default position is <c>0</c>.</para>
      </remarks>
    </member>
    <member name="P:Xtensive.Orm.KeyAttribute.Direction">
      <summary>
            Gets or sets the sort direction. Default is <see cref="F:Xtensive.Core.Direction.Positive" />.
            </summary>
      <para>
            Key fields <see cref="P:Xtensive.Orm.KeyAttribute.Position">positions</see> and directions choice can be based on some optimization purposes, 
            e.g. sometimes it can be better to have specific order and direction of key fields.
            </para>
    </member>
    <member name="T:Xtensive.Orm.Validation.PropertyConstraintAspect">
      <summary>
            Base class for all property-constraints attributes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.OnEntry(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.CompileTimeValidate(System.Reflection.MethodBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.IsSupported(System.Type)">
      <summary>
            Determines whether the specified <paramref name="valueType" /> 
            is supported by this constraint.
            </summary>
      <param name="valueType">The value type to check.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.ValidateSelf(System.Boolean)">
      <summary>
            Validates itself.
            </summary>
      <param name="compileTime">Indicates whether this method is invoked 
            in compile time or in runtime.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.Check(Xtensive.Orm.Validation.IValidationAware)">
      <summary>
            Validates the <paramref name="target" /> against this constraint.
            </summary>
      <param name="target">The validation target.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.CheckValue(Xtensive.Orm.Validation.IValidationAware,System.Object)">
      <summary>
            Validates the specified value. 
            Throws <see cref="T:Xtensive.Orm.Validation.ConstraintViolationException" /> on failure.
            </summary>
      <param name="target">The validation target.</param>
      <param name="value">The property value.</param>
      <exception cref="T:Xtensive.Orm.Validation.ConstraintViolationException">Value is not valid.</exception>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.CheckValue(System.Object)">
      <summary>
            Validates the specified value.
            </summary>
      <param name="value">The value to check.</param>
      <returns>
        <see langword="true" /> if the specified value is valid; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.GetPropertyValue(Xtensive.Orm.Validation.IValidationAware)">
      <summary>
            Gets the property value.
            </summary>
      <param name="target">The target to get the property value of.</param>
      <returns>Property value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.GetDefaultMessage">
      <summary>
            Gets the default message.
            </summary>
      <returns>Default message.</returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Adds custom message parameters.
            </summary>
      <param name="parameters">The parameters to add to.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.Initialize">
      <summary>
            Initializes this instance in runtime.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.PropertyConstraintAspect.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Property">
      <summary>
            Gets the validated property.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Mode">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.Validation.ConstrainMode" /> to be used on setting property value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Message">
      <summary>
            Gets or sets the message of exception to show if property value is invalid.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Message" /> property.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceName">
      <summary>
            Gets or sets the property name on the resource type that provides the localizable error message.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Message" /> property.
            </remarks>
      <seealso cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceType" />
    </member>
    <member name="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceType">
      <summary>
            Gets or sets the resource type that provides the localizable error message.
            </summary>
      <remarks>
            You use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceName" /> and <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceType" /> properties to provide localizable error messages. 
            To provide a non-localizable error message, use the <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.Message" /> property.
            </remarks>
      <see cref="P:Xtensive.Orm.Validation.PropertyConstraintAspect.MessageResourceName" />
    </member>
    <member name="T:Xtensive.Orm.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ActualModel">
      <summary>
              Looks up a localized string similar to Actual Model.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.AspectExMultipleAttributesOfTypeXAreNotAllowedHere">
      <summary>
              Looks up a localized string similar to {0}: multiple attributes of type '{1}' are not allowed here..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Associations">
      <summary>
              Looks up a localized string similar to Associations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.CantAccessMemberX">
      <summary>
              Looks up a localized string similar to Can't access member '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.CantChangeTypeOfColumnX">
      <summary>
              Looks up a localized string similar to  (can't change type of column '{0}').
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.CantRemoveColumnX">
      <summary>
              Looks up a localized string similar to  (can't remove column '{0}').
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.CantRemoveTableX">
      <summary>
              Looks up a localized string similar to  (can't remove table '{0}').
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Columns">
      <summary>
              Looks up a localized string similar to Columns.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.CustomDefinitions">
      <summary>
              Looks up a localized string similar to Custom Definitions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.EntityStateFormat">
      <summary>
              Looks up a localized string similar to Key = '{0}', Tuple = {1}, State = {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.EntityWithKeyXDoesNotExist">
      <summary>
              Looks up a localized string similar to Entity with Key = '{0}' does not exist..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAccessedMemberIsNotProperty">
      <summary>
              Looks up a localized string similar to The accessed member is not a property..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAccessToTypeMemberCanNotBeExtractedFromSpecifiedExpression">
      <summary>
              Looks up a localized string similar to The access to a type's member can not be extracted from the specified expression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExActiveSerializationContextIsNotFound">
      <summary>
              Looks up a localized string similar to Active serialization context is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExActiveSessionIsRequiredForThisOperation">
      <summary>
              Looks up a localized string similar to Active Session is required for this operation. Use Session.Open(...) to open it..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExActiveTransactionIsRequiredForThisOperationUseTransactionOpenToOpenIt">
      <summary>
              Looks up a localized string similar to Active Transaction is required for this operation. Use Transaction.Open(...) to open it..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExActualSchemaVersionOfAssemblyXIsExpectedToBeYButCurrentlyItIsZ">
      <summary>
              Looks up a localized string similar to Actual schema version of assembly '{0}' is expected to be '{1}', but currently it is '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAggregateMethodXIsNotSupported">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}' expression. Aggregate method '{1} is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAggregatesForNonPrimitiveTypesAreNotSupported">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}' expression. Aggregates for non primitive types are not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAllMethodIsOnlySupportedForRootExpressionsOrSubqueries">
      <summary>
              Looks up a localized string similar to 'All' method is only supported for root expressions or subqueries..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAnyMethodIsOnlySupportedForRootExpressionsOrSubqueries">
      <summary>
              Looks up a localized string similar to 'Any' method is only supported for root expressions or subqueries..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAsOperatorSupportsEntityOnly">
      <summary>
              Looks up a localized string similar to 'as' operator supports casting only inside Entity hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAssociationAttributeCanNotBeAppliedToXField">
      <summary>
              Looks up a localized string similar to 'AssociationAttribute' can't be applied to '{0}' field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAssociationMultiplicityIsNotValidForField">
      <summary>
              Looks up a localized string similar to Association multiplicity '{0}' is not valid for field '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAtLeastOneLoopHaveBeenFoundInPersistentTypeDependenciesGraphSuspiciousTypesX">
      <summary>
              Looks up a localized string similar to At least one loop have been found in persistent type dependencies graph. Suspicious types: {0}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExAttemptToAutomaticallyActivateSessionXInsideSessionYIsBlocked">
      <summary>
               Looks up a localized string similar to An attempt to automatically activate Session '{0}' inside Session '{1}' (Session switching) is blocked. 
            Most likely, mixed usage of objects from different Sessions is a result of a bug in your code. 
            Use manual Session activation (Session.Deactivate(), Session.Activate()) or 
            SessionOptions.AllowSwitching flag to avoid this exception, if this is intentional..
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBinaryExpressionsWithNodeTypeXAreNotSupported">
      <summary>
              Looks up a localized string similar to Binary expressions with NodeType = 'ExpressionType.{0}' aren't supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBinaryExpressionXOfTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Binary expression '{0}' of type '{1}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotEntityExpressionEntityFieldExpression">
      <summary>
              Looks up a localized string similar to Both left and right part of binary expression '{0}' are NULL or not EntityExpression(EntityFieldExpression)..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotKeyExpression">
      <summary>
              Looks up a localized string similar to Both left and right part of binary expression '{0}' are NULL or not KeyExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBothLeftAndRightPartOfBinaryExpressionXAreNULLOrNotStructureExpression">
      <summary>
              Looks up a localized string similar to Both left and right part of binary expression '{0}' are NULL or not StructureExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExBothPartsOfBinaryExpressionXAreOfTheDifferentType">
      <summary>
              Looks up a localized string similar to Both parts of binary expression '{0}' are of the different type. Use type cast..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCannotAssociateNonEmptyEntityStateWithKeyOfUnknownType">
      <summary>
              Looks up a localized string similar to Attempt to associate non-empty EntityState with Key of unknown type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotCommitATransactionEntitiesValidationFailed">
      <summary>
              Looks up a localized string similar to Can not commit a transaction. Entities validation failed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotCommitATransactionValidationContextIsInInconsistentState">
      <summary>
              Looks up a localized string similar to Can not commit a transaction: ValidationContext is in inconsistent state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotCommitATransactionValidationContextIsInInvalidState">
      <summary>
              Looks up a localized string similar to Can not commit a transaction. Validation context is in invalid state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotCompleteOuterTransactionInnerTransactionIsActive">
      <summary>
              Looks up a localized string similar to Can not complete outer transaction: inner transaction is active..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCannotFindHandlerOfTypeX">
      <summary>
              Looks up a localized string similar to Cannot find a handler of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCannotGenerateNextVersionValueOfTypeX">
      <summary>
              Looks up a localized string similar to Can't generate next version value of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotGetValidationContextThereIsNoActiveTransaction">
      <summary>
              Looks up a localized string similar to Can not get validation context: there is no active transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotMarkStateAsModifiedItIsNotValidInCurrentTransaction">
      <summary>
              Looks up a localized string similar to Can not mark state as modified: it is not valid in current transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotMergeTheState">
      <summary>
              Looks up a localized string similar to Can't merge the state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotOpenMoreThanOneInnerTransaction">
      <summary>
              Looks up a localized string similar to Can not open more than one inner transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotOpenTransactionNoCurrentSession">
      <summary>
              Looks up a localized string similar to Can not open a transaction: there is no current Session..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotPersistThereArePinnedEntities">
      <summary>
              Looks up a localized string similar to Can not persist: there are pinned entities..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCannotResolveEntityWithKeyX">
      <summary>
              Looks up a localized string similar to Cannot resolve entity with key '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotReuseOpenedTransactionRequestedIsolationLevelIsDifferent">
      <summary>
              Looks up a localized string similar to Can not reuse opened transaction: requested isolation level is different..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCanNotUpgradeSchemaSafely_DetailsX">
      <summary>
               Looks up a localized string similar to Cannot upgrade schema safely. Details:
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCannotUseDefaultGeneratorForComplexKeys">
      <summary>
              Looks up a localized string similar to Cannot use default generator for complex (multicolumn) Keys..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCantAccessMemberOfTypeEntitySet">
      <summary>
              Looks up a localized string similar to Can't access member of type 'EntitySet&lt;&gt;'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCantMergeState">
      <summary>
              Looks up a localized string similar to Can't merge state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCantRegisterState">
      <summary>
              Looks up a localized string similar to Can't register state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExColumnLength">
      <summary>
              Looks up a localized string similar to Value length {0} is greater than column length {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExColumnNotNullable">
      <summary>
              Looks up a localized string similar to Unable to assign null to non-nullable column..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExColumnXIsNotFound">
      <summary>
              Looks up a localized string similar to Column '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExColumnXIsNotFoundInTableY">
      <summary>
              Looks up a localized string similar to Column with name '{0}' is not found in table '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExComparerForTypeIsNotAvailable">
      <summary>
              Looks up a localized string similar to Comparer for type '{0}' is not available..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCompilerContainerAttributeIsNotAppliedToTypeX">
      <summary>
              Looks up a localized string similar to [CompilerContainer] attribute isn't applied to type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConfigurationForDomainIsNotFoundInApplicationConfigurationFile">
      <summary>
              Looks up a localized string similar to Configuration for Domain with name '{0}' is not found in application configuration file (section '{1}')..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConfigurationWithXNameAlreadyRegistered">
      <summary>
              Looks up a localized string similar to Configuration with '{0}' name already registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConnectionInfoIsMissing">
      <summary>
              Looks up a localized string similar to ConnectionInfo is missing. If you are using configuration file you should specify either 'connectionUrl' element or 'connectionString' and 'provider' elements.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrConnectionStringElement">
      <summary>
              Looks up a localized string similar to ConnectionInfo is wrong. You should set either  'connectionUrl' element or 'connectionString' element..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConnectionInfoIsWrongYouShouldSetEitherConnectionUrlElementOrProviderAndConnectionStringElements">
      <summary>
              Looks up a localized string similar to ConnectionInfo is wrong. You should set either 'connectionUrl' element or 'provider' and 'connectionString' elements..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConnectionIsRequired">
      <summary>
              Looks up a localized string similar to Connection is required..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExConstraintViolation">
      <summary>
              Looks up a localized string similar to Constraint violation: constraint {0} on field '{1}.{2}' of object '{3}' failed on value {4}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExContainsMethodIsOnlySupportedForRootExpressionsOrSubqueries">
      <summary>
              Looks up a localized string similar to 'Contains' method is only supported for root expressions or subqueries..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotConstructNewKeyInstanceTypeXIsNotAnEntity">
      <summary>
              Looks up a localized string similar to Could not construct new Key instance. Type '{0}' is not an entity..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotFindAnonymousMappingForFieldX">
      <summary>
              Looks up a localized string similar to Could not find anonymous mapping for field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotFindEntityMappingForFieldX">
      <summary>
              Looks up a localized string similar to Could not find entity mapping for field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotFindFieldSegmentForFieldX">
      <summary>
              Looks up a localized string similar to Could not find field segment for field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotFindGroupingMappingForFieldX">
      <summary>
              Looks up a localized string similar to Could not find grouping mapping for field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotFindSubqueryMappingForFieldX">
      <summary>
              Looks up a localized string similar to Could not find subquery mapping for field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotGetMemberXFromExpression">
      <summary>
              Looks up a localized string similar to Could not get member {0} from expression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCouldNotLoadTypesFromAssembly">
      <summary>
              Looks up a localized string similar to Could not load types from assembly '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCurrentSessionGetterIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to Current session getter is already assigned..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCurrentTransactionIsDifferentFromTransactionBoundToThisInstance">
      <summary>
              Looks up a localized string similar to The current transaction is different from the transaction bound to this instance..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExCyclicDependencyInQueryPreprocessorGraphIsDetected">
      <summary>
              Looks up a localized string similar to Cyclic dependency in query preprocessor graph is detected..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDefaultGeneratorCanServeHierarchyWithExactlyOneKeyField">
      <summary>
              Looks up a localized string similar to Default generator can serve hierarchy with exactly one key field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDisconnectedStateIsAlreadyAttachedToSession">
      <summary>
              Looks up a localized string similar to DisconnectedState is already attached to session..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDisconnectedStateIsDetached">
      <summary>
              Looks up a localized string similar to DisconnectedState is detached..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDowncastFromXToXNotSupportedUseOfTypeOrAsOperatorInstead">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}' expression. Downcast from '{1}' to '{2}' not supported. Use 'OfType' or 'as' operator instead..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDuplicateAssemblyNameX">
      <summary>
              Looks up a localized string similar to Duplicate assembly name: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExDuplicateForOperationXIsFound">
      <summary>
              Looks up a localized string similar to The duplicate for the operation {0} is found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementAtDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to 'ElementAt' does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementAtIndexMustBeGreaterOrEqualToZero">
      <summary>
              Looks up a localized string similar to ElementAt index must be greater or equal to zero..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementAtNotSupportedInCompiledQueries">
      <summary>
              Looks up a localized string similar to 'ElementAt({0})' not supported in compiled queries (Query.Execute). Use 'ElementAt(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'ElementAt(()=&gt;{0})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementAtOrDefaultDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to 'ElementAtOrDefault' does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementAtOrDefaultNotSupportedInCompiledQueries">
      <summary>
              Looks up a localized string similar to 'ElementAtOrDefault({0})' not supported in compiled queries (Query.Execute). Use 'ElementAtOrDefault(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'ElementAtOrDefault(()=&gt;{0})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementWithNameContainedInThisInstanceAlready">
      <summary>
              Looks up a localized string similar to Element with name '{0}' is contained in this instance already..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExElementWithTypeIsContainedInThisInstanceAlready">
      <summary>
              Looks up a localized string similar to Element with type '{0}' is already contained in this instance..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntitiesXAndXBelongToDifferentHierarchies">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}'. Entities '{1}' and '{2}' belong to different hierarchies..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityDoesNotHaveFullTextIndex">
      <summary>
              Looks up a localized string similar to Entity of type '{0}' does not have full-text index..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityIsAlreadyDetachedFromSession">
      <summary>
              Looks up a localized string similar to Entity is already detached from Session. Likely, this is result of creation of new Entity with the same Key..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityIsInInconsistentState">
      <summary>
              Looks up a localized string similar to Entity is in inconsistent state..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityIsRemoved">
      <summary>
              Looks up a localized string similar to Entity is removed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityOfTypeXIsIncompatibleWithThisEntitySet">
      <summary>
              Looks up a localized string similar to Entity of type '{0}' is incompatible with this EntitySet..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityRemoved">
      <summary>
              Looks up a localized string similar to Unable to modify removed entity..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntitySetCanTBeAssigned">
      <summary>
              Looks up a localized string similar to EntitySet can't be assigned..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntitySetInvalidBecauseTransactionIsNotActive">
      <summary>
              Looks up a localized string similar to Entity set is invalid due to current transaction is not active..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExEntityXIsBoundToAnotherSession">
      <summary>
              Looks up a localized string similar to Entity '{0}' is bound to another Session..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExErrorsDuringStorageBuild">
      <summary>
              Looks up a localized string similar to Some errors have been occurred during storage build. See error log for details..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExExcludeFieldsDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to ExcludeFields does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExExpressionDefinedOutsideOfCachingQueryClosure">
      <summary>
              Looks up a localized string similar to Expression '{0}' defined outside of CachingQuery closure..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExExpressionXIsNotASequence">
      <summary>
              Looks up a localized string similar to Expression '{0}' is not a sequence..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExExtractedSchemaIsNotCompatibleWithTheTargetSchema_DetailsX">
      <summary>
               Looks up a localized string similar to Extracted schema is not compatible with the target schema. Details:
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExExtractedSchemaIsNotEqualToTheTargetSchema_DetailsX">
      <summary>
               Looks up a localized string similar to Extracted schema is not equal to the target schema. Details:
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldBelongsToADifferentType">
      <summary>
              Looks up a localized string similar to Field belongs to a different type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldIsNotAnEntityField">
      <summary>
              Looks up a localized string similar to Field '{0}' is not an Entity field in Type '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldIsNotStructure">
      <summary>
              Looks up a localized string similar to Field '{0}' is not structure..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldMappingDoesNotContainField">
      <summary>
              Looks up a localized string similar to Field mapping does not contain '{0} field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldMustBeOfEntitySetType">
      <summary>
              Looks up a localized string similar to Field must be of EntitySet&lt;&gt; type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldMustBePersistent">
      <summary>
              Looks up a localized string similar to Field '{0}' must be persistent (marked by [Field] attribute)..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldNotFoundInModel">
      <summary>
              Looks up a localized string similar to Field '{0}' is not found in model..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldOfTypeXCannotBeNullableForValueTypesConsiderUsingNullableT">
      <summary>
              Looks up a localized string similar to Field of type '{0}' cannot be nullable. For value types consider using Nullable&lt;T&gt;..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldWithNameAlreadyExistsInEntityFieldsCollection">
      <summary>
              Looks up a localized string similar to Field with name '{0}' already exists in EntityInfo.Fields collection..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldWithNameXIsAlreadyRegistered">
      <summary>
              Looks up a localized string similar to Field with name '{0}' is already registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXCannotBeLazyLoadAsItIsIncludedInPrimaryKey">
      <summary>
              Looks up a localized string similar to Field '{0}' cannot be LazyLoad as it is included into primary key..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXCannotBeNullableAsItIsIncludedInPrimaryKey">
      <summary>
              Looks up a localized string similar to Field '{0}' cannot be Nullable as it is included into primary key..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXHasYTypeButIsMarkedAsNotNullable">
      <summary>
              Looks up a localized string similar to Field '{0}' has '{1}' type but is marked as not nullable..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsAlreadyDefinedInTypeXOrItsAncestor">
      <summary>
              Looks up a localized string similar to Field '{0}' is already defined in type '{1}' or in its ancestor..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotAnEntityReferenceNorEntitySet">
      <summary>
              Looks up a localized string similar to Field '{0}' is not an entity reference, nor entity set..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotAnEntitySet">
      <summary>
              Looks up a localized string similar to Field '{0}' is not an entity set..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotAnEntitySetField">
      <summary>
              Looks up a localized string similar to Field '{0}' is not an EntitySet field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotDeclaredInTypeYOrInOneOfItsAncestors">
      <summary>
              Looks up a localized string similar to The field {0} is not declared in the type {1} or in one of its ancestors..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotEntity">
      <summary>
              Looks up a localized string similar to Field '{0}' is not entity..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXIsNotPrimitive">
      <summary>
              Looks up a localized string similar to Field '{0}' is not primitive..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXNotFoundInTypeX">
      <summary>
              Looks up a localized string similar to Field '{0}' not found in type '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXYIsAlreadyPairedWithABRemoveCD">
      <summary>
              Looks up a localized string similar to Field '{0}.{1}' is already paired with '{2}.{3}'. Please remove [Association] attribute at '{4}.{5}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFieldXYIsNotFound">
      <summary>
              Looks up a localized string similar to Field '{0}.{1}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExForeignKeyValueHaveNotBeenLoaded">
      <summary>
              Looks up a localized string similar to The foreign key's value have not been loaded..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExFreeTextNotSupportedInCompiledQueries">
      <summary>
              Looks up a localized string similar to 'FreeText&lt;T&gt;({0})' not supported in compiled queries (Query.Execute). Use 'FreeText&lt;T&gt;(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'FreeText&lt;T&gt;(()=&gt;{0})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExHierarchyIsNotFoundForTypeX">
      <summary>
              Looks up a localized string similar to Hierarchy is not found for type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExHierarchyRootIsNotRegistered">
      <summary>
              Looks up a localized string similar to Hierarchy root is not registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExHierarchyXDoesntContainAnyKeyFields">
      <summary>
              Looks up a localized string similar to Hierarchy '{0}' doesn't contain any key fields..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExHintXIsConflictingWithHintY">
      <summary>
              Looks up a localized string similar to Hint '{0}' is conflicting with hint '{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIncludeFieldsDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to IncludeFields does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIncorrectNamespaceSynonyms">
      <summary>
              Looks up a localized string similar to Incorrect namespace synonyms..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexAlreadyContainsField">
      <summary>
              Looks up a localized string similar to Index already contains field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexedPropertiesAreNotSupported">
      <summary>
              Looks up a localized string similar to Indexed properties are not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexesOfColumnsToBeLoadedAreNotSpecified">
      <summary>
              Looks up a localized string similar to Indexes of columns to be loaded are not specified..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexFieldXIsIncorrect">
      <summary>
              Looks up a localized string similar to Index field '{0}' is incorrect..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexMustContainAtLeastOneField">
      <summary>
              Looks up a localized string similar to Index must contain at least one field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexNameXIsInvalid">
      <summary>
              Looks up a localized string similar to Index name '{0}' is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexWithNameAlreadyExistsInEntityInfoIndexesCollection">
      <summary>
              Looks up a localized string similar to Index with name '{0}' already exists in EntityInfo.Indexes collection..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExIndexWithNameXIsAlreadyRegistered">
      <summary>
              Looks up a localized string similar to Index with name '{0}' is already registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInheritanceSchemaIsInvalid">
      <summary>
              Looks up a localized string similar to Inheritance schema '{0}' is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInterfaceXDoesNotBelongToXHierarchy">
      <summary>
              Looks up a localized string similar to Interface '{0}' does not belong to '{1}' hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidFieldValueConstraintXIsViolated">
      <summary>
              Looks up a localized string similar to Invalid field value, constraint {0} is violated..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidFillFactorXValueMustBeBetween0And1">
      <summary>
              Looks up a localized string similar to Invalid fill factor '{0}'. Value must be between 0 and 1..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidKeyParams">
      <summary>
              Looks up a localized string similar to Unable to create Key. Key params do not correspond to its structure..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidKeyString">
      <summary>
              Looks up a localized string similar to String representaion of the Key has invalid format..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidLengthAttributeOnXField">
      <summary>
              Looks up a localized string similar to Invalid Length attribute on '{0}' field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidMappingNameX">
      <summary>
              Looks up a localized string similar to Invalid mapping name '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidNumberOfParametersInNewExpression">
      <summary>
              Looks up a localized string similar to Invalid number of parameters in NewExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidPrecisionAttributeOnFieldX">
      <summary>
              Looks up a localized string similar to Invalid Precision attribute on field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidPrefetchSelectorX">
      <summary>
              Looks up a localized string similar to Invalid prefetch selector '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidScaleAttributeOnFieldX">
      <summary>
              Looks up a localized string similar to Invalid Scale attribute on field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidScopeDisposalOrder">
      <summary>
              Looks up a localized string similar to Invalid scope disposal order..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidSession">
      <summary>
              Looks up a localized string similar to The Session of specified ISessionBound object is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExInvalidUpgraderVersion">
      <summary>
              Looks up a localized string similar to Invalid upgrader version..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExItemByKeyXWasNotFound">
      <summary>
              Looks up a localized string similar to Item by key ='{0}' was not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExItemNotFoundInEntitySet">
      <summary>
              Looks up a localized string similar to Item is not found in EntitySet..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyCanNotBeNull">
      <summary>
              Looks up a localized string similar to Key can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyComparerNotSupportedInGroupJoin">
      <summary>
              Looks up a localized string similar to Unable to translate expression '{0}'. Key comparer is not supported in GroupJoin..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyFieldCantBeOfXType">
      <summary>
              Looks up a localized string similar to Key field can't be of '{0}' type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyFieldsXAndXHaveTheSamePositionX">
      <summary>
              Looks up a localized string similar to Key fields '{0}' and '{1}' have the same position: '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyFieldXInTypeYShouldNotHaveSetAccessor">
      <summary>
              Looks up a localized string similar to Key property '{0}' declared in '{1}' should not have public or protected set accessor. Use base protected constructor to set Key value..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyFieldXWasNotFoundInTypeY">
      <summary>
              Looks up a localized string similar to Key field '{0}' was not found in type '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyFieldXXIsNotFound">
      <summary>
              Looks up a localized string similar to Key field '{0}.{1}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyGeneratorAttributeOnTypeXRequiresNameToBeSet">
      <summary>
              Looks up a localized string similar to [KeyGenerator] attribute on type '{0}' requires Name to be set..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyIndexesAreSpecifiedForNonGenericKey">
      <summary>
              Looks up a localized string similar to Key indexes are specified for non-generic Key..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyMustHaveExactType">
      <summary>
              Looks up a localized string similar to Key must have exact type here..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyOfSpecifiedTypeCannotBeGeneratedByThisKeyGenerator">
      <summary>
              Looks up a localized string similar to Key of specified type cannot be generated by this KeyGenerator..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyOfXDoesNotMatchKeyOfY">
      <summary>
              Looks up a localized string similar to Key of '{0}' does not match key of '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyProviderXAndHierarchyYKeyFieldAmountMismatch">
      <summary>
              Looks up a localized string similar to Key provider '{0}' and hierarchy {1} key field amount mismatch..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyProviderXShouldDefineAtLeastOneKeyField">
      <summary>
              Looks up a localized string similar to Key provider '{0}' should define at least one key field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeysOfXAndXNotCompatible">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}'. Keys of '{1}' and '{2}' not compatible..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyStructureForXContainsNULLValue">
      <summary>
              Looks up a localized string similar to Key structure for '{0}' contains NULL value..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyValuesArrayIsEmpty">
      <summary>
              Looks up a localized string similar to Key values array is empty..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyXShouldHaveExactType">
      <summary>
              Looks up a localized string similar to Key {0} should have exact type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExKeyXWasNotFoundInStorage">
      <summary>
              Looks up a localized string similar to Key '{0}' was not found in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLambdaParameterIsOutOfScope">
      <summary>
              Looks up a localized string similar to Lambda parameter is out of scope..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLambdaXMustHaveOnlyOneParameter">
      <summary>
              Looks up a localized string similar to Lambda '{0}' must have only one parameter..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLeftJoinDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to LeftJoin does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLegacySchemaIsNotCompatible_DetailsX">
      <summary>
               Looks up a localized string similar to Legacy schema is not compatible. Details: 
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLengthConstraintViolationOnFieldX">
      <summary>
              Looks up a localized string similar to 'Length' constraint violation on field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLinqTranslatorDoesNotSupportMethodX">
      <summary>
              Looks up a localized string similar to Unable to translate expression '{0}'. LINQ translator does not support method '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLocalCollectionShouldNotBeQueryRoot">
      <summary>
              Looks up a localized string similar to Local collection should not be query root..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExLockDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to Lock does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMaterializationErrorTypeIdColumnDoesNotExistsInTheUnderlyingRecordSet">
      <summary>
              Looks up a localized string similar to Materialization error: Entity's TypeId column does not exist in the underlying RecordSet..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMemberXOfTypeYIsNotInitializedCheckIfConstructorArgumentIsCorrectOrFieldInitializedThroughInitializer">
      <summary>
              Looks up a localized string similar to Member '{0}' of type '{1}' is not initialized. Check if constructor argument is correct or field initialized through initializer..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMethodCallExpressionXIsNotSupported">
      <summary>
              Looks up a localized string similar to MethodCall expression '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMethodXIsntSupported">
      <summary>
              Looks up a localized string similar to '{0}' method isn't supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMethodXNotFound">
      <summary>
              Looks up a localized string similar to Method '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMistmatchCountOfLeftAndRightExpressions">
      <summary>
              Looks up a localized string similar to Mistmatch count of left and right expressions..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExMoreThanOneEnabledXIsProvidedForAssemblyY">
      <summary>
              Looks up a localized string similar to More than one enabled {0} is provided for assembly '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNameXIsInvalid">
      <summary>
              Looks up a localized string similar to Name '{0}' is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNestedFieldXIsNotSupported">
      <summary>
              Looks up a localized string similar to Nested field '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNoCurrentSession">
      <summary>
              Looks up a localized string similar to There is no current Session..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNonTemporaryKeysMustBeGeneratedByDescendants">
      <summary>
              Looks up a localized string similar to Non-temporary keys must be generated by descendants..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNoOperationRegistrationScope">
      <summary>
              Looks up a localized string similar to No operation registration scope. Use OperationRegistry.BeginRegistration method to open it..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNotNullableConstraintViolationOnFieldX">
      <summary>
              Looks up a localized string similar to 'NotNullable' constraint violation on field '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNoUpgradeHandlerIsFoundForAssemblyXVersionY">
      <summary>
              Looks up a localized string similar to No upgrade handler is found for assembly '{0}', version '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExNullableAndNullableOnUpgradeCannotBeUsedWithXField">
      <summary>
              Looks up a localized string similar to Nullable and NullableOnUpgrade flags can't be used with '{0}' field. They can be used only with reference-typed fields (except Structure descendants)..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOfTypeSupportsOnlyEntityConversion">
      <summary>
              Looks up a localized string similar to OfType supports casting only inside Entity hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyEntitiesCouldBeHierarchyRoots">
      <summary>
              Looks up a localized string similar to Only entities could be hierarchy roots..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyEqualityRangesAreSupported">
      <summary>
              Looks up a localized string similar to Only equality ranges are supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyOneOperationCanBeRegisteredInEachScope">
      <summary>
              Looks up a localized string similar to Only one operation can be registered in each scope..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyOnePrimaryOperationCanBeLogged">
      <summary>
              Looks up a localized string similar to Only one primary operation can be logged by each OperationContext instance..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyPrefetchMethodSupportedButFoundX">
      <summary>
              Looks up a localized string similar to Only 'Prefetch(source, expression, params[] expressions)' method is supported within prefetch expression. But found '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnlyPropertAccessPrefetchOrAnonymousTypeSupportedButFoundX">
      <summary>
              Looks up a localized string similar to Only persistented property access, calls of Prefetch method or anonymous type constructors are supported, but found '{0}' expression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOnOwnerRemoveActionIsNotEqualToOnTargetRemoveAction">
      <summary>
              Looks up a localized string similar to '{0}.{1}' OnOwnerRemove action is not equal to '{2}.{3}' OnTargetRemove action..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOperationIsNotMarkedAsStarted">
      <summary>
              Looks up a localized string similar to Operation isn't marked as started. See Sessopn.Operations.OperationStarted() method..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOperationIsNotRegisteredYet">
      <summary>
              Looks up a localized string similar to Operation isn't registered yet. See Session.Oeprations.RegisterOperations()..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOperationStartedIsAlreadyCalledForThisOperation">
      <summary>
              Looks up a localized string similar to OperatonStarted is alerady called for this operation..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOriginIsNotNull">
      <summary>
              Looks up a localized string similar to Origin is not null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOriginIsNull">
      <summary>
              Looks up a localized string similar to Origin is null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExOutOfTransactionScope">
      <summary>
              Looks up a localized string similar to Object is outside of initial transaction scope..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPairedFieldXHasWrongTypeItShouldBeReferenceToEntityOrAEntitySet">
      <summary>
              Looks up a localized string similar to Paired field '{0}' has wrong type. A descendant of Entity or EntitySet is expected..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPairedFieldXYWasNotFoundInZType">
      <summary>
              Looks up a localized string similar to Paired field '{0}.{1}' was not found in '{2}' type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPairedIdentityColumnsForTypesXAndXNotFound">
      <summary>
              Looks up a localized string similar to Paired identity columns for types '{0}' and '{1}' not found.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPairToAttributeCanNotBeAppliedToXField">
      <summary>
              Looks up a localized string similar to [Association] attribute with PairTo can not be use with field '{0}' of type '{1}'. It is already applied to field '{2}' of type '{3}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExParameterExpressionMustHaveSameTypeAsProjectionExpressionItemProjector">
      <summary>
              Looks up a localized string similar to ParameterExpression must have same type as ProjectionExpression.ItemProjector.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPersistentAttributeIsNotSetOnTypeXOrAssemblyYIsNotProcessedByPostSharp">
      <summary>
              Looks up a localized string similar to Assembly '{1}' is not processed by PostSharp. See section 2 of Manual for details..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPersistentTypeXIsNotEntityOrPersistentInterface">
      <summary>
              Looks up a localized string similar to Persistent type '{0}' is not entity or persistent interface..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExplicitMappingNameSettingIsRedundantTheSameNameXWillBeGeneratedAutomatically">
      <summary>
              Looks up a localized string similar to Explicit mapping name setting is redundant. The same name '{0}' will be generated automatically..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPrefetchDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to Prefetch does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExpressionXIsUnknown">
      <summary>
              Looks up a localized string similar to Expression '{0}' is unknown..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPrimaryKeyFieldCantBeChanged">
      <summary>
              Looks up a localized string similar to Field '{0}' is a part of primary key. It can't be changed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPrimaryKeyFieldXCanTBeMarkedAsVersion">
      <summary>
              Looks up a localized string similar to Primary key field '{0}' can't be marked as Version..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPropertyXDoesnTHavePublicSetter">
      <summary>
              Looks up a localized string similar to Property '{0}' doesn't have public setter..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPropertyXMustBeDeclaredInTypeY">
      <summary>
              Looks up a localized string similar to Property '{0}' must be declared in type '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExPropertyXYDoesnTHavePublicGetter">
      <summary>
              Looks up a localized string similar to Property '{0}.{1}' doesn't have public getter..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExProviderXIsNotSupportedUseOneOfTheFollowingY">
      <summary>
              Looks up a localized string similar to Provider "{0}" is not supported. Use one of the following: "{1}"..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExQueryContainsClosuresOfDifferentTypes">
      <summary>
              Looks up a localized string similar to The query contains closures of different types..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExQueryTaskIsNotExecutedYet">
      <summary>
              Looks up a localized string similar to Query task is not executed yet..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExReferencedFieldXAndPairedFieldAreEqual">
      <summary>
              Looks up a localized string similar to Referenced field '{0}' and paired field are equal..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExReferencingEntityTupleIsNotLoaded">
      <summary>
              Looks up a localized string similar to The referencing entity's tuple is not loaded..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExReferencingEntityWithKeyXIsNotFound">
      <summary>
              Looks up a localized string similar to The referencing entity with key {0} is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExReferentialIntegrityViolation">
      <summary>
              Looks up a localized string similar to Referential integrity violation..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExResultTypeIncorrect">
      <summary>
              Looks up a localized string similar to Value of '{0}' type cannot be assigned to property of '{1}' type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExRunningOperationRegistrationMustBeFinished">
      <summary>
              Looks up a localized string similar to Running operation registration must be finished before invocation of this method..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSectionIsNotFoundInApplicationConfigurationFile">
      <summary>
              Looks up a localized string similar to Section '{0}' is not found in application configuration file..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSelectManyCollectionSelector0MustHaveOnlyOneLambdaParameter">
      <summary>
              Looks up a localized string similar to SelectMany collection selector '{0}' must have only one lambda parameter..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSequenceContainsNoElements">
      <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExServiceCanNotBeAttachedToSessionWhileItIsPersistingTheChanges">
      <summary>
              Looks up a localized string similar to Service can not be attached to Session while it is persisting the changes..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExServiceWithNameAlreadyExistsInStorageInfoServicesCollection">
      <summary>
              Looks up a localized string similar to Service with name '{0}' already exists in StorageInfo.Services collection..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExServiceXIsNotSupported">
      <summary>
              Looks up a localized string similar to Service '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSessionBoundObjectOutOfSessionScope">
      <summary>
              Looks up a localized string similar to Session bound object is out of session scope..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSessionIsAlreadyDisposed">
      <summary>
              Looks up a localized string similar to Session is already disposed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSessionIsNotOpen">
      <summary>
              Looks up a localized string similar to Session is not open. Use Session.Open(...) to open it..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSessionOfAnotherSessionBoundMustBeTheSame">
      <summary>
              Looks up a localized string similar to Session of another SessionBound must be the same..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSessionWithNameXAlreadyExists">
      <summary>
              Looks up a localized string similar to Session with name '{0}' already exists..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSkipDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to 'Skip' does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSkipNotSupportedInCompiledQueries">
      <summary>
              Looks up a localized string similar to 'Skip({0})' not supported in compiled queries (Query.Execute). Use 'Skip(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'Skip(()=&gt;{0})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSpecifiedExpressionIsNotMemberExpression">
      <summary>
              Looks up a localized string similar to The specified expression is not MemberExpression.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSpecifiedKeyFieldTypeIsNotSupportedByThisTemporaryKeyGenerator">
      <summary>
              Looks up a localized string similar to Specified key field type is not supported by this temporary key generator..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSpecifiedPropertyXIsNotPersistent">
      <summary>
              Looks up a localized string similar to The specified property {0} is not persistent..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSpecifiedTypeHierarchyIsDifferentFromKeyHierarchy">
      <summary>
              Looks up a localized string similar to The specified type's hierarchy is different from the key's hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExSpecifiedValuesArentEnoughToCreateKeyForTypeX">
      <summary>
              Looks up a localized string similar to Specified values aren't enough to create key for type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStateIsNotLoaded">
      <summary>
              Looks up a localized string similar to State is not loaded..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStateIsRemoved">
      <summary>
              Looks up a localized string similar to State is removed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStateTransactionIsDifferent">
      <summary>
              Looks up a localized string similar to StateTransaction property value differs from the current transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStateWithKeyXIsAlreadyExists">
      <summary>
              Looks up a localized string similar to State with key '{0}' is already exists..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStorageProviderNotFound">
      <summary>
              Looks up a localized string similar to Handler provider is not found for "{0}" connection type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStructureOfFieldXDoesNotMatchStructureOfFieldY">
      <summary>
              Looks up a localized string similar to Structure of field '{0}' does not match structure of field '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStructuresDoNotSupportFieldsOfTypeX">
      <summary>
              Looks up a localized string similar to Structures do not support fields of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExStructureXCantContainFieldOfTheSameType">
      <summary>
              Looks up a localized string similar to Structure '{0}' can't contain field of the same type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTableXIsNotFound">
      <summary>
              Looks up a localized string similar to Table with name '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTakeDoesNotSupportQueryProviderOfTypeX">
      <summary>
              Looks up a localized string similar to 'Take' does not support query provider of type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTakeNotSupportedInCompiledQueries">
      <summary>
              Looks up a localized string similar to 'Take({0})' not supported in compiled queries (Query.Execute). Use 'Take(Expression&lt;Func&lt;int&gt;&gt;)' instead.For example use 'Take(()=&gt;{0})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExThereAreNoSuitableTypes">
      <summary>
              Looks up a localized string similar to There are no suitable types in '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExThereIsNoCurrentHttpRequestOrSessionManagerIsnTBoundToItYet">
      <summary>
              Looks up a localized string similar to There is no current HttpRequest, or SessionManager is not bound to it yet..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTheServiceIsAlreadyAttachedToSession">
      <summary>
              Looks up a localized string similar to The service is already attached to Session..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTransactionIsNotActive">
      <summary>
              Looks up a localized string similar to Transaction is not active..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTransactionIsRequired">
      <summary>
              Looks up a localized string similar to Transaction is required..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTransactionIsRunning">
      <summary>
              Looks up a localized string similar to A transaction is running, but there should be no active transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTransactionRequired">
      <summary>
              Looks up a localized string similar to Unable to process operation without a transaction. Use Transaction.Open(...) to open it..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeCantBeNull">
      <summary>
              Looks up a localized string similar to Type cannot be null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeDefXIsAlreadyBelongsToHierarchyWithTheRootY">
      <summary>
              Looks up a localized string similar to TypeDef '{0}' already belongs to hierarchy with '{1}' root..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeDiscriminatorValueIsRequiredUnlessXIsMarkedAsDefaultTypeInHierarchy">
      <summary>
              Looks up a localized string similar to Type discriminator value is required unless {0} is marked as default type in hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeIdForTypeXIsNotFound">
      <summary>
              Looks up a localized string similar to TypeId for type '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeInfoHierarchyMistmatch">
      <summary>
              Looks up a localized string similar to TypeInfo hierarchy does not correspond to provided hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeIsMethodSupportsOnlyEntitiesAndStructures">
      <summary>
              Looks up a localized string similar to 'TypeIs' method supports only Entities and Structures..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeMappingDoesNotContainXType">
      <summary>
              Looks up a localized string similar to Type mapping does not contain '{0}' type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeMustBeEntityDescendant">
      <summary>
              Looks up a localized string similar to Invalid type specified..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeNotFoundInModel">
      <summary>
              Looks up a localized string similar to Type '{0}' is not found in model..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeOfXMustBeADescendantOfYType">
      <summary>
              Looks up a localized string similar to Type of '{0}' must be a descendant of {1} type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeWithNameXIsAlreadyDefined">
      <summary>
              Looks up a localized string similar to Type with name '{0}' is already defined..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeWithNameXIsNotFoundInMetadata">
      <summary>
              Looks up a localized string similar to Type with name '{0}' is not found in metadata..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeWithNameXIsNotRegistered">
      <summary>
              Looks up a localized string similar to Type with name '{0}' isn't registered in the Domain..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeWithTypeIdXIsNotFound">
      <summary>
              Looks up a localized string similar to Type with type TypeId='{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXCantContainsVersionFieldsAsItsNotAHierarchyRoot">
      <summary>
              Looks up a localized string similar to Type '{0}' can't contain Version fields, because it is not a hierarchy root type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXDoesNotContainYField">
      <summary>
              Looks up a localized string similar to Type '{0}' does not contain '{1}' field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXDoesNotHasAnyPublicReadablePropertiesOrFieldsSoItCanTBePersistedToStorage">
      <summary>
              Looks up a localized string similar to Type '{0}' does not has any public readable properties or fields, so it can't be persisted to storage..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXDoesNotHaveAParameterlessConstructor">
      <summary>
              Looks up a localized string similar to Type '{0}' does not have a parameterless constructor..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXDoesNotImplementYInterface">
      <summary>
              Looks up a localized string similar to Type '{0}' does not implement '{1}' interface..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsAlreadyDefined">
      <summary>
              Looks up a localized string similar to Type '{0}' is already defined..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotCollatable">
      <summary>
              Looks up a localized string similar to Type '{0}' is not collatable..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotFound">
      <summary>
              Looks up a localized string similar to Type '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotRegisteredInTheModel">
      <summary>
              Looks up a localized string similar to Type '{0}' is not registered in the model..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotStructure">
      <summary>
              Looks up a localized string similar to Type '{0}' is not structure..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXIsNotSupportedInNewExpression">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported in 'new' expression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXMustBelongToHierarchy">
      <summary>
              Looks up a localized string similar to Type '{0}' must belong to hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExTypeXWasNotRegisteredForActivation">
      <summary>
              Looks up a localized string similar to Type '{0}' was not registered for activation..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToActivateEntitySetWithoutAssociation">
      <summary>
              Looks up a localized string similar to Unable to activate EntitySet for '{0}' field because it does not has association..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToApplyVersionOnFieldXOfTypeY">
      <summary>
              Looks up a localized string similar to Unable to apply VersionAttribute with VersionMode.Auto or Version.Mode.Manual mode set on field {0} of type {1}. Only VersionMode.Skip is allowed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildFulltextIndexesForHierarchyWithInheritanceSchemaClassTable">
      <summary>
              Looks up a localized string similar to Unable to build full-text indexes for hierarchy '{0}' with InheritanceSchema.ClassTable..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildGenericInstanceTypesForXTypeBecauseItContainsMoreThen1GenericParameter">
      <summary>
              Looks up a localized string similar to Unable to build generic instance types for '{0}' type because it contains more then 1 generic parameter..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildGenericInstanceTypesForXTypeBecauseParameterIsNotConstrained">
      <summary>
              Looks up a localized string similar to Unable to build generic instance types for '{0}' type because parameter is not constrained..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildIndexXBecauseItWasBuiltOverInheritedFields">
      <summary>
              Looks up a localized string similar to Unable to build index {0} because it contains inherited fields..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildSubqueryResultForExpressionXResultTypeIsNotIEnumerable">
      <summary>
              Looks up a localized string similar to Unable to build subquery result for expression '{0}'. resultType is not IEnumerable&lt;&gt;..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToBuildSubqueryResultForExpressionXStateContainsNoParameters">
      <summary>
              Looks up a localized string similar to Unable to build subquery result for expression '{0}'. State contains no parameters..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToCastItemOfTypeXToY">
      <summary>
              Looks up a localized string similar to Unable to cast item of type '{0}' to '{1}' in queries..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToCloneNonUserSessionConfiguration">
      <summary>
              Looks up a localized string similar to Unable to clone non-user session configuration..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToCreateKeyForXHierarchy">
      <summary>
              Looks up a localized string similar to Unable to create key for '{0}' hierarchy. Key value or key generator should be specified..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToHandleEntitySetExpressionWithoutSpecifiedOwner">
      <summary>
              Looks up a localized string similar to Unable to handle EntitySetExpression without specified Owner..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToMaterializeBackLocalCollectionItem">
      <summary>
              Looks up a localized string similar to Unable to materialize back local collection item '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToModifyDeletedObject">
      <summary>
              Looks up a localized string similar to Unable to modify removed object..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnabletoParsePrefetchExpressionX">
      <summary>
              Looks up a localized string similar to Unable to parse prefetch expression '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToPersistTypeXBecauseOfLoopReference">
      <summary>
              Looks up a localized string similar to Unable to persist type '{0}' to storage because of loop reference..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToRemapFieldExpression">
      <summary>
              Looks up a localized string similar to Unable to remap FieldExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToRemapKeyExpression">
      <summary>
              Looks up a localized string similar to Unable to remap KeyExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToRemoveOwnerFromEntitySetExpression">
      <summary>
              Looks up a localized string similar to Unable to remove Owner from EntitySetExpression..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToResolveOwnerOfFieldExpressionX">
      <summary>
              Looks up a localized string similar to Unable to resolve owner of FieldExpression '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToResolveOwnerOfStructureExpressionX">
      <summary>
              Looks up a localized string similar to Unable to resolve owner of StructureExpression '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToResolveTypeForKeyX">
      <summary>
              Looks up a localized string similar to Unable to resolve type for Key '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToSetKeyFieldXExplicitly">
      <summary>
              Looks up a localized string similar to Unable to set Key field '{0}' explicitly..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToStoreUntypedKeyToStorage">
      <summary>
              Looks up a localized string similar to Unable to store untyped 'Key' to storage. Use '{0}' instead of 'Key'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToTranslateLambdaExpressionXBecauseItRequiresToMaterializeEntityOfTypeX">
      <summary>
              Looks up a localized string similar to Unable to translate lambda expression '{0}' because it requires to materialize entity of type '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToTranslateXExpressionSeeInnerExceptionForDetails">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}' expression. See inner exception for details..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToUseBaseImplementationOfVisitGenericExpressionWithoutSpecifyingGenericProcessorDelegate">
      <summary>
              Looks up a localized string similar to Unable to use base implementation of VisitGenericExpression without specifying genericProcessor delegate..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToUseElementAtIntInQueryExecuteUseElementAtFuncIntInstead">
      <summary>
              Looks up a localized string similar to Usage of ElementAt(int) or ElementAtOrDefault(int) in Query.Execute is wrong. Use ElementAt(Func&lt;int&gt;) or ElementAtOrDefault(Func&lt;int&gt;) instead..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnableToUseIQueryableXInQueryExecuteStatement">
      <summary>
              Looks up a localized string similar to Unable to use IQueryable '{0}' in Query.Execute statement..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnauthorizedAccessDeclarationOfCallerTypeIsNotInRegisteredAssembly">
      <summary>
              Looks up a localized string similar to Unauthorized: the caller is declared outside of any of registered assemblies..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnderlyingStorageProviderDoesNotSupportSQL">
      <summary>
              Looks up a localized string similar to Underlying storage provider does not support SQL..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnknownEntitySerializationKindX">
      <summary>
              Looks up a localized string similar to Unknown entity serialization kind '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnknownExpressionType">
      <summary>
              Looks up a localized string similar to Unknown expression type: '{0} ({1})'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnknownInSyntax">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}' expression. Unknown "In" syntax..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnsupportedExpressionType">
      <summary>
              Looks up a localized string similar to Unsupported expression type: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnsupportedFieldTypeX">
      <summary>
              Looks up a localized string similar to Unsupported field type: '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUnsupportedType">
      <summary>
              Looks up a localized string similar to Unsupported type: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUpgradeHintSourceFieldNotFound">
      <summary>
              Looks up a localized string similar to Upgrade hint error. Source field '{0}' not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUpgradeHintSourceTypeNotFound">
      <summary>
              Looks up a localized string similar to Upgrade hint error. Source type '{0}' not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUpgradeHintTargetFieldNotFound">
      <summary>
              Looks up a localized string similar to Upgrade hint error. Target field '{0}' not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUpgradeHintTargetTypeNotFound">
      <summary>
              Looks up a localized string similar to Upgrade hint error. Target type '{0}' not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUpgradeOfAssemblyXFromVersionYToZIsNotSupported">
      <summary>
              Looks up a localized string similar to Upgrade of assembly '{0}' from version '{1}' to '{2}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExUseMethodXOnFirstInsteadOfSingle">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}'. Use method ('{1}') on First/FirstOrDefault instead of Single/SingleOrDefault..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExValueIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to Value is already assigned..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExValueIsNotAcceptableForOnTargetRemoveProperty">
      <summary>
              Looks up a localized string similar to '{0}.{1}': '{2}' value is not acceptable for 'OnTargetRemove' property..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExValueShouldBeXDescendant">
      <summary>
              Looks up a localized string similar to Value should be '{0}' descendant..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVersionFieldXCanTBeLazyLoadField">
      <summary>
              Looks up a localized string similar to Version field '{0}' can't be LazyLoad field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVersionFieldXCanTBeOfYType">
      <summary>
              Looks up a localized string similar to Version field '{0}' can't be of {1} type..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVersionFieldXCanTBeSystemField">
      <summary>
              Looks up a localized string similar to Version field '{0}' can't be System field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVersionOfEntityWithKeyXDiffersFromTheExpectedOne">
      <summary>
              Looks up a localized string similar to Version of entity with key '{0}' differs from the expected one..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVersionRootObjectCantImplementIHasVersionRoots">
      <summary>
              Looks up a localized string similar to Version root object can't implement IHasVersionRoots..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExVisitKeyFieldIsNotSupportedByX">
      <summary>
              Looks up a localized string similar to VisitKeyField is not supported by '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExWrongKeyStructure">
      <summary>
              Looks up a localized string similar to Wrong key structure..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExWrongPersistentTypeCandidate">
      <summary>
              Looks up a localized string similar to Wrong persistent type candidate: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXDescendantIsAlreadyARootOfAnotherHierarchy">
      <summary>
              Looks up a localized string similar to '{0}' descendant is already a root of another hierarchy..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXDoesNotSupportX">
      <summary>
              Looks up a localized string similar to '{0}' does not support '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXFieldIsNotDeclaredInEntityDescendantSoCannotBeUsedAsTypeDiscriminator">
      <summary>
              Looks up a localized string similar to '{0}' field is not declared in Entity descendant, so cannot be used as type discriminator..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXIsNotValidNameForX">
      <summary>
              Looks up a localized string similar to '{0}' is not valid name for {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXIsObsoleteUseYAndZInstead">
      <summary>
              Looks up a localized string similar to {0} is obsolete. Use {1} and {2} instead..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXMustBeInheritedFromX">
      <summary>
              Looks up a localized string similar to '{0}' must be inherited from '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXNameCantBeEmpty">
      <summary>
              Looks up a localized string similar to '{0}' name can't be empty..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXYFieldPairedToZAFieldShouldBeBButCurrentIsC">
      <summary>
              Looks up a localized string similar to '{0}.{1}' field, which is declared as paired to '{2}.{3}' field, should be of type '{4}' but actually it is '{5}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExXYFieldPairedToZAFieldShouldBeEntitySetOfBButCurrentIsC">
      <summary>
              Looks up a localized string similar to '{0}.{1}' field, which is declared as paired to '{2}.{3}' field, should be 'EntitySet&lt;{4}&gt;' but it is 'EntitySet&lt;{5}&gt;'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ExYouMustEitherApplyOrCancelCachedChangesToChangeThisProperty">
      <summary>
              Looks up a localized string similar to You must either apply or cancel cached changes before changing this property..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Full">
      <summary>
              Looks up a localized string similar to full.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Generators">
      <summary>
              Looks up a localized string similar to Generators.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.HierarchyColumns">
      <summary>
              Looks up a localized string similar to Hierarchy columns.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Indexes">
      <summary>
              Looks up a localized string similar to Indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.JoinKeysLengthMismatch">
      <summary>
              Looks up a localized string similar to Unable to translate '{0}'. Join keys length mismatch..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.KeyFormat">
      <summary>
              Looks up a localized string similar to {0}, {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.KeyFormatUnknownKeyType">
      <summary>
              Looks up a localized string similar to {0} (unknown), {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.KeyGenerators">
      <summary>
              Looks up a localized string similar to Key generators.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.KeyMapping">
      <summary>
              Looks up a localized string similar to Key mapping.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Known">
      <summary>
              Looks up a localized string similar to known.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogBuildingDeclaredFieldXY">
      <summary>
              Looks up a localized string similar to Building declared field '{0}.{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogBuildingIndexX">
      <summary>
              Looks up a localized string similar to Building index '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogBuildingInheritedFieldXY">
      <summary>
              Looks up a localized string similar to Building inherited field '{0}.{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogBuildingInterfaceFieldXY">
      <summary>
              Looks up a localized string similar to Building interface field '{0}.{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogBuildingX">
      <summary>
              Looks up a localized string similar to Building {0}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogChangesAreSuccessfullyApplied">
      <summary>
              Looks up a localized string similar to Changes are successfully applied..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogClearingComparisonResultX">
      <summary>
               Looks up a localized string similar to Clearing comparison result:
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogComparisonResultX">
      <summary>
               Looks up a localized string similar to Comparison result:
            {0}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogCreatingX">
      <summary>
              Looks up a localized string similar to Creating {0}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDefiningFieldX">
      <summary>
              Looks up a localized string similar to Defining field '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDefiningHierarchyForTypeX">
      <summary>
              Looks up a localized string similar to Defining hierarchy for type '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDefiningIndexes">
      <summary>
              Looks up a localized string similar to Defining indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDefiningX">
      <summary>
              Looks up a localized string similar to Defining '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDisconnectedStateCancelChanges">
      <summary>
              Looks up a localized string similar to DisconnectedState.CancelChanges.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDomainIsDisposing">
      <summary>
              Looks up a localized string similar to Domain is disposing..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDomainIsDisposingByAFinalizer">
      <summary>
              Looks up a localized string similar to Domain is disposing by a finalizer..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogDomainModelIsNotFoundInStorage">
      <summary>
              Looks up a localized string similar to Domain model is not found in the storage..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogExecutingActionX">
      <summary>
              Looks up a localized string similar to Executing action: '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogExplicitLazyLoadAttributeOnFieldXIsRedundant">
      <summary>
              Looks up a localized string similar to Explicit LazyLoad=true on field '{0}' is redundant..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogExtractedSchema">
      <summary>
              Looks up a localized string similar to Extracted schema:.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogFailedToAddSchemaHintXErrorY">
      <summary>
               Looks up a localized string similar to Failed to add schema hint '{0}' to schema hint collection. The hint will be ignored.
            Likely, the schema object (table, column, etc.) it references does not exists, because it was manually removed from the database.
            Error: {1}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogFailedToExtractDomainModelFromStorage">
      <summary>
              Looks up a localized string similar to Failed to extract domain model from the storage..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogFieldX">
      <summary>
              Looks up a localized string similar to Field: '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogHierarchyX">
      <summary>
              Looks up a localized string similar to Hierarchy: '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogIndexX">
      <summary>
              Looks up a localized string similar to Index: '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogInspectingHierarchyX">
      <summary>
              Looks up a localized string similar to Inspecting hierarchy '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogInspectingModelDefinition">
      <summary>
              Looks up a localized string similar to Inspecting model definition.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogInspectingTypeX">
      <summary>
              Looks up a localized string similar to Inspecting type '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogMetadataAssemblyCreatedX">
      <summary>
              Looks up a localized string similar to Metadata.Assembly created: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogMetadataAssemblyUpdatedXFromVersionYToZ">
      <summary>
              Looks up a localized string similar to Metadata.Assembly updated: '{0}', from version '{1}' to '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogMetadataTypeRenamedXToY">
      <summary>
              Looks up a localized string similar to Metadata.Type renamed: '{0}' to '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogOpeningSessionX">
      <summary>
              Looks up a localized string similar to Opening session '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogProcessingFixupActions">
      <summary>
              Looks up a localized string similar to Processing fixup actions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionManagerEndRequestMethodWasNotInvoked">
      <summary>
              Looks up a localized string similar to SessionManager.EndRequest method was not invoked during processing of the previous request to this module..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXCachingY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Caching: {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXCommittedTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Committed transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXCommittingTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Committing transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXDisconnectedStateApplyChanges">
      <summary>
              Looks up a localized string similar to Session '{0}'. DisconnectedState.ApplyChanges.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXDisconnectedStateAttach">
      <summary>
              Looks up a localized string similar to Session '{0}'. DisconnectedState.Attach.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXDisconnectedStateConnect">
      <summary>
              Looks up a localized string similar to Session '{0}'. DisconnectedState.Connect().
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXDisconnectedStateDisconnect">
      <summary>
              Looks up a localized string similar to Session '{0}'. DisconnectedState is disconnected.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXDisposing">
      <summary>
              Looks up a localized string similar to Session '{0}'. Disposing..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXEntityWithKeyYIdentifiedAsZ">
      <summary>
              Looks up a localized string similar to Session '{0}'. Identifying entity: Key = '{1}', identified as '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXGettingValueKeyYFieldZ">
      <summary>
              Looks up a localized string similar to Session '{0}'. Getting value: Key = '{1}', Field = '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXInvalidate">
      <summary>
              Looks up a localized string similar to Session '{0}'. Invalidate..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXMaterializingYKeyZ">
      <summary>
              Looks up a localized string similar to Session '{0}'. Materializing {1}: Key = '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXOpeningTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Opening transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXPersistCompleted">
      <summary>
              Looks up a localized string similar to Session '{0}'. Persist completed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXPersistingReasonY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Persisting (reason: {1})..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXRemappingEntityKeys">
      <summary>
              Looks up a localized string similar to Session '{0}'. Remapping entity keys..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXRemovingKeyY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Removing: Key = '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXResolvingKeyYExactTypeIsUnknownFetchIsRequired">
      <summary>
              Looks up a localized string similar to Session '{0}'. Resolving key '{1}'. Exact type is unknown. Fetch is required..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXResolvingKeyYExactTypeIsZ">
      <summary>
              Looks up a localized string similar to Session '{0}'. Resolving key '{1}'. Exact type is {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXResolvingKeyYKeyIsAlreadyResolved">
      <summary>
              Looks up a localized string similar to Session '{0}'. Resolving key '{1}'. Key is already resolved..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXRolledBackTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rolled back transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXRollingBackTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rolling back transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXSettingValueKeyYFieldZ">
      <summary>
              Looks up a localized string similar to Session '{0}'. Setting value: Key = '{1}', Field = '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXUpdatingCacheY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Updating cache: {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSessionXVersionValidationFailedKeyYVersionZExpected3">
      <summary>
              Looks up a localized string similar to Session '{0}'. Version validation failed: Key = '{1}', Version = '{2}' (expected version = '{3}')..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSkippingEntityXAsItDoesNotBelongToAnyHierarchyThusItCannotBePersistent">
      <summary>
              Looks up a localized string similar to Skipping entity '{0}' as it does not belong to any hierarchy thus it cannot be persistent..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSkippingSchemaSynchronization">
      <summary>
              Looks up a localized string similar to Skipping schema synchronization..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSyncContextMustHaveNoPendingActions">
      <summary>
              Looks up a localized string similar to SyncContext must have no pending actions at this point..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogSynchronizingSchemaInXMode">
      <summary>
              Looks up a localized string similar to Synchronizing schema in {0} mode.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.LogTargetSchema">
      <summary>
              Looks up a localized string similar to Target schema:.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.MetadataAssemblyFormat">
      <summary>
              Looks up a localized string similar to {0} (Version={1}).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.MetadataTypeFormat">
      <summary>
              Looks up a localized string similar to {0} (Id={1}).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Model">
      <summary>
              Looks up a localized string similar to Model.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ModelDefinition">
      <summary>
              Looks up a localized string similar to Model Definition.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.NA">
      <summary>
              Looks up a localized string similar to n/a.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Null">
      <summary>
              Looks up a localized string similar to null.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Operations">
      <summary>
              Looks up a localized string similar to Operations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Partial">
      <summary>
              Looks up a localized string similar to partial.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ReferentialIntegrityViolationOnAttemptToRemoveXKeyY">
      <summary>
               Looks up a localized string similar to Referential integrity violation on attempt to remove '{0}', Key='{1}'.
            Association: {2}
            Referencing Entity Key: {3}
            Referenced Entity Key: {4}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.RefFormat">
      <summary>
              Looks up a localized string similar to Ref&lt;{0}&gt;({1}).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.SchemaComparisonResultFormat">
      <summary>
               Looks up a localized string similar to Schema comparison result: {0}
            Has unsafe actions: {1}
            Has column type changes: {2} 
            Compatible in ValidateLegacy mode: {3}
            
            Unsafe actions:
            {4}
            Schema hints:
            {5}
            Schema difference:
            {6}.
             </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.SubqueryXHeaderMustHaveOnlyOneColumn">
      <summary>
              Looks up a localized string similar to Subquery '{0}' header must have only one column..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.SystemTypes">
      <summary>
              Looks up a localized string similar to system types.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Types">
      <summary>
              Looks up a localized string similar to Types.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.TypeXDoesNotImplementYZField">
      <summary>
              Looks up a localized string similar to Type '{0}' does not implement '{1}.{2}' property..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.TypeXDoesNotParticipateInTheSpecifiedAssociation">
      <summary>
              Looks up a localized string similar to Type '{0}' does not participate in the specified association..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.TypeXIsNotAnYDescendant">
      <summary>
              Looks up a localized string similar to Type '{0}' is not an '{1}' descendant..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.Unknown">
      <summary>
              Looks up a localized string similar to unknown.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueCanNotBeLessThenX">
      <summary>
              Looks up a localized string similar to Value can not be less then {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueCanNotBeNull">
      <summary>
              Looks up a localized string similar to Value can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueCanNotBeRemovedEntity">
      <summary>
              Looks up a localized string similar to Value can not be an entity that is already removed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueLengthCanNotExceedX">
      <summary>
              Looks up a localized string similar to Value can not exceed {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueShouldMatchRegexPatternX">
      <summary>
              Looks up a localized string similar to Value should match regex pattern '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ValueTypeMismatchForFieldX">
      <summary>
              Looks up a localized string similar to Value type mismatch for field '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.VersionFieldXCanTBeTypeIdField">
      <summary>
              Looks up a localized string similar to Version field '{0}' can't be TypeId field..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.XIsNotApplicableToYDescendants">
      <summary>
              Looks up a localized string similar to '{0}' is not applicable to '{1}' descendants..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.XW0001">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Resources.Strings.ZeroAssemblyVersion">
      <summary>
              Looks up a localized string similar to &lt;none&gt;.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Persistent">
      <summary>
            Abstract base class for any persistent type (<see cref="T:Xtensive.Orm.Entity" /> or <see cref="T:Xtensive.Orm.Structure" />).
            </summary>
      <seealso cref="T:Xtensive.Orm.Entity" />
      <seealso cref="T:Xtensive.Orm.Structure" />
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetProperty``1(System.String)">
      <summary>
            Gets the property value.
            </summary>
      <typeparam name="T">Value type.</typeparam>
      <param name="fieldName">The field name.</param>
      <returns>Property value.</returns>
      <remarks>
            Method calls property getter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Orm.Persistent.GetFieldValue``1(System.String)" /> directly if there is no property declared for this field.
            </remarks>
      <seealso cref="M:Xtensive.Orm.Persistent.SetProperty``1(System.String,``0)" />
      <exception cref="T:System.ArgumentException">There is no persistent property with provided name.</exception>
    </member>
    <member name="M:Xtensive.Orm.Persistent.SetProperty``1(System.String,``0)">
      <summary>
            Sets the property value.
            </summary>
      <typeparam name="T">Value type.</typeparam>
      <param name="fieldName">The field name.</param>
      <param name="value">The value to set.</param>
      <remarks>
            Method calls property setter thought the reflection to perform its business logic
            or calls <see cref="M:Xtensive.Orm.Persistent.SetFieldValue``1(System.String,``0)" /> directly if there is no property declared for this field.
            </remarks>
      <seealso cref="M:Xtensive.Orm.Persistent.GetProperty``1(System.String)" />
      <exception cref="T:System.ArgumentException">There is no persistent property with provided name.</exception>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetFieldValue``1(System.String)">
      <summary>
            Gets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object" /> instead of <see cref="T:Xtensive.Orm.IEntity" /> might lead to unpredictable effects.
            </summary>
      <typeparam name="T">Field value type.</typeparam>
      <param name="fieldName">The field name.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetFieldValue(System.String)">
      <summary>
            Gets the field value.
            </summary>
      <param name="fieldName">The field name.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetFieldValue``1(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object" /> instead of <see cref="T:Xtensive.Orm.IEntity" /> might lead to unpredictable effects.
            </summary>
      <typeparam name="T">Field value type.</typeparam>
      <param name="field">The field.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetFieldValue(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the field value.
            </summary>
      <param name="field">The field.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetReferenceKey(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
      <remarks>
            Result is the same as <c>GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
      <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Orm.Entity" /> descendant.</param>
      <returns>Referenced entity key.</returns>
      <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
    </member>
    <member name="M:Xtensive.Orm.Persistent.SetFieldValue``1(System.String,``0)">
      <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object" /> instead of <see cref="T:Xtensive.Orm.IEntity" /> might lead to unpredictable effects.
            </summary>
      <typeparam name="T">Field value type.</typeparam>
      <param name="fieldName">The field name.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.SetFieldValue(System.String,System.Object)">
      <summary>
            Sets the field value.
            </summary>
      <param name="fieldName">The field name.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.SetFieldValue``1(Xtensive.Orm.Model.FieldInfo,``0)">
      <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object" /> instead of <see cref="T:Xtensive.Orm.IEntity" /> might lead to unpredictable effects.
            </summary>
      <typeparam name="T">Field value type.</typeparam>
      <param name="field">The field.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.SetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Sets the field value.
            Field value type must be specified precisely. 
            E.g. usage of <see cref="T:System.Object" /> instead of <see cref="T:Xtensive.Orm.IEntity" /> might lead to unpredictable effects.
            </summary>
      <param name="field">The field.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnInitialize">
      <summary>
            Called when instance is initialized (right after constructor).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnInitializationError(System.Exception)">
      <summary>
            Called on instance initialization error (constructor failure).
            </summary>
      <param name="error">The actual error.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnGettingFieldValue(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Called before field value is about to be read.
            </summary>
      <remarks>
            Override it to perform some actions before reading field value, e.g. to check access permissions.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnGetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Called when field value has been read.
            </summary>
      <remarks>
            Override it to perform some actions when field value has been read, e.g. for logging purposes.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnSettingFieldValueAttempt(Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Called before field value is about to be set.
            This event is raised on any set attempt (even if new value is the same as the current one).
            </summary>
      <remarks>
            Override it to perform some actions before setting field value, e.g. to check access permissions.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnSettingFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Called before field value is about to be changed.
            This event is raised only on actual change attempt (i.e. when new value differs from the current one).
            </summary>
      <remarks>
            Override it to perform some actions before changing field value, e.g. to check access permissions.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnSetFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
      <summary>
            Called when field value has been changed.
            </summary>
      <remarks>
            Override it to perform some actions when field value has been changed, e.g. for logging purposes.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.OnValidate">
      <summary>
            Called when entity should be validated.
            </summary>
      <remarks>
            Override this method to perform custom object validation.
            </remarks>
      <example>
        <code>
            public override void OnValidate()
            {
              base.OnValidate();
              if (Age &lt;= 0) 
                throw new InvalidOperationException("Age should be positive.");
            }
            </code>
      </example>
    </member>
    <member name="M:Xtensive.Orm.Persistent.NotifyFieldChanged(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
      <param name="field">The field, which value is changed.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.NotifyPropertyChanged(System.String)">
      <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
      <param name="propertyName">Name of the changed property.</param>
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetSubscription(System.Object)">
      <summary>
            Gets the subscription for the specified event key.
            </summary>
      <param name="eventKey">The event key.</param>
      <returns>Event subscription (delegate) for the specified event key.</returns>
    </member>
    <member name="M:Xtensive.Orm.Persistent.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Persistent.GetFieldState(Xtensive.Orm.Model.FieldInfo)">
      <exception cref="T:System.ArgumentException">
        <paramref name="field" /> belongs to a different type.</exception>
    </member>
    <member name="M:Xtensive.Orm.Persistent.Initialize(System.Type)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="ctorType">Type of the instance that is being constructed.</param>
      <remarks>
            This method is called when custom constructor is finished.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.InitializationError(System.Type,System.Exception)">
      <summary>
            Called on initialization error.
            </summary>
      <param name="ctorType">Type of the instance that is being constructed.</param>
      <param name="error">The error that happened on initialization.</param>
      <remarks>
            This method is called when custom constructor is finished.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Persistent.InitializeOnMaterialize">
      <summary>
            Initializes this instance on materialization.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Persistent.InitializationErrorOnMaterialize(System.Exception)">
      <summary>
            Called on initialization error on materialization.
            </summary>
      <param name="error">The error that happened on initialization.</param>
      <remarks>
            This method is called when custom constructor is finished.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Persistent.TypeInfo">
      <summary>
            Gets <see cref="T:Xtensive.Orm.Model.TypeInfo" /> object describing structure of persistent object.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Persistent.Tuple">
      <summary>
            Gets the underlying tuple.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Persistent.Item(System.String)">
      <summary>
            Gets or sets the value of the field with specified name.
            </summary>
      <value>Field value.</value>
    </member>
    <member name="P:Xtensive.Orm.Persistent.CanBeValidated">
      <summary>
            Gets a value indicating whether validation can be performed for this entity.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Persistent.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.KeyGeneratorKind">
      <summary>
            Specifies key generator type to use for a particular hierarchy.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.KeyGeneratorKind.None">
      <summary>
            No key generator must be provided.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.KeyGeneratorKind.Default">
      <summary>
            Default key generator must be provided.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.KeyGeneratorKind.Custom">
      <summary>
            Custom key generator type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.StorageAttribute">
      <summary>
            Base class for all storage-related attributes.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TypeDiscriminatorAttribute">
      <summary>
            Marks persistent property as type discriminator.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.MaterializedViewAttribute">
      <summary>
        <b>Not yet supported.</b>
            Indicates that materialized view should be created for
            the interface type it is applied on.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.HierarchyRootAttribute">
      <summary>
            Defines root type of hierarchy of persistent types.
            </summary>
      <remarks>
        <para>
            All entities in your model can be divided into one or more persistent hierarchies. 
            Persistent hierarchy is a set of entities, that are inherited from one entity class(hierarchy root) 
            and have the same key structure. Hierarchy root entity should be marked by this attribute.
            </para>
        <para>
            Persistent hierarchies can use different inheritance schemes, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class. Inheritance schema
            can be specified in <see cref="P:Xtensive.Orm.HierarchyRootAttribute.InheritanceSchema" /> property.
            </para>
      </remarks>
      <example>In following example two persistent type hierarchies are declared.
            Inheritance schema is specified for documents hierarchy.
            <code>
            [HerarchyRoot]
            public class Product : Entity  { ... }
            
            [HerarchyRoot(InheritanceSchema = InheritaceSchema.ClassTable)
            public class Document : Entity  { ... }
            
            public class Invoice : Document { ... }
            </code></example>
    </member>
    <member name="M:Xtensive.Orm.HierarchyRootAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.HierarchyRootAttribute.#ctor(Xtensive.Orm.Model.InheritanceSchema)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="schema">The inheritance schema for the hierarchy.</param>
    </member>
    <member name="P:Xtensive.Orm.HierarchyRootAttribute.InheritanceSchema">
      <summary>
            Gets the inheritance schema for this hierarchy.
            </summary>
      <remarks>
            Persistent hierarchies can use diffirent inheritance schemas, e.g. all instances of hierarchy can be 
            stored in a single table or different tables should be crated for each entity class.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.HierarchyRootAttribute.IncludeTypeId">
      <summary>
            Gets or sets a value indicating whether key should include TypeId field.
            </summary>
      <remarks>
            TypeId can be included into entity Key for some specific optimization purposes.
            Default value is <see langword="false" />.
            </remarks>
    </member>
    <member name="T:Xtensive.Orm.Model.InheritanceSchema">
      <summary>
            Enumerates all supported 'class to tables mapping' schemes.
            </summary>
      <remarks>See M.Fowler - "Patterns of Enterprise Application Architecture".</remarks>
    </member>
    <member name="F:Xtensive.Orm.Model.InheritanceSchema.Default">
      <summary>
            Is equal to <see cref="F:Xtensive.Orm.Model.InheritanceSchema.ClassTable" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.InheritanceSchema.ClassTable">
      <summary>
            One table per class in the inheritance structure. Inherited properties are stored in the parent class.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.InheritanceSchema.SingleTable">
      <summary>
            Maps all fields of all classes of an inheritance structure into a single table.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.InheritanceSchema.ConcreteTable">
      <summary>
            One table for each concrete class in the inheritance hierarchy. 
            Inherited properties are duplicated in the descendant tables.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TypeDiscriminatorValueAttribute">
      <summary>
            Specifies value of type discriminator for the entity type it is applied to.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TypeDiscriminatorValueAttribute.#ctor(System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Xtensive.Orm.TypeDiscriminatorValueAttribute.Value">
      <summary>
            Gets or sets the value of type discriminator.
            </summary>
      <value>Custom type discriminator value.</value>
    </member>
    <member name="P:Xtensive.Orm.TypeDiscriminatorValueAttribute.Default">
      <summary>
            Gets or sets a value indicating whether underlying type is default type in given hierarchy.
            </summary>
      <value>
        <see langword="true" /> if underlying type is default in given hierarchy; otherwise, <see langword="false" />.
            </value>
      <remarks>Only one type at a time can be default in single hierarchy.</remarks>
    </member>
    <member name="T:Xtensive.Orm.VersionAttribute">
      <summary>
            Marks persistent property as a part of version.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <remarks>
        <see cref="P:Xtensive.Orm.VersionAttribute.Mode" /> is set to <see cref="F:Xtensive.Orm.VersionMode.Auto" />.</remarks>
    </member>
    <member name="M:Xtensive.Orm.VersionAttribute.#ctor(Xtensive.Orm.VersionMode)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="mode">The version check mode.</param>
    </member>
    <member name="P:Xtensive.Orm.VersionAttribute.Mode">
      <summary>
            Gets the version check mode for the persistent property.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.VersionMode">
      <summary>
            Specifies version check mode for particular persistent property. Applied via <see cref="T:Xtensive.Orm.VersionAttribute" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionMode.Default">
      <summary>
            Default value.
            The same as <see cref="F:Xtensive.Orm.VersionMode.Manual" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionMode.Manual">
      <summary>
            The field is included into entity version; its value must be updated manually.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionMode.Skip">
      <summary>
            The field must not be included into entity version.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionMode.Auto">
      <summary>
            The field is included into entity version; its value is updated automatically.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.AssociationInfo">
      <summary>
            Describes single association.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfo.ExtractForeignKey(Xtensive.Orm.Model.TypeInfo,Xtensive.Tuples.Tuple)">
      <summary>
            Extracts the foreign key from the specified <see cref="T:Xtensive.Tuples.Tuple" />.
            </summary>
      <param name="tuple">The tuple.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfo.#ctor(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.Multiplicity,System.Nullable{Xtensive.Orm.OnRemoveAction},System.Nullable{Xtensive.Orm.OnRemoveAction})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="ownerField">The referencing field.</param>
      <param name="targetType">The referenced type.</param>
      <param name="multiplicity">The association multiplicity.</param>
      <param name="onOwnerRemove">The <see cref="T:Xtensive.Orm.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerType" /> object removal.</param>
      <param name="onTargetRemove">The <see cref="T:Xtensive.Orm.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType" /> object removal.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.OwnerType">
      <summary>
            Gets the owner type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.OwnerField">
      <summary>
            Gets the owner field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.AuxiliaryType">
      <summary>
            Gets the auxiliary persistent type that represents this association.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.Ancestors">
      <summary>
            Gets or sets ancestor association.
            </summary>
      <value>The ancestor.</value>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.UnderlyingIndex">
      <summary>
            Gets the underlying index for this instance.
            </summary>
      <value>The underlying index.</value>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.IsMaster">
      <summary>
            Gets a value indicating whether this instance is master association.
            </summary>
      <value>
        <see langword="true" /> if this instance is master association; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.IsPaired">
      <summary>
            Gets a value indicating whether this instance is paired.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.IsLoop">
      <summary>
            Gets a value indicating whether this instance represents a loop.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.Master">
      <summary>
            Gets master association.
            </summary>
      <remarks>
            If association is master, returns it. Otherwise returns paired association.
            </remarks>
      <exception cref="T:System.InvalidOperationException">Unable to find master association.</exception>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.Multiplicity">
      <summary>
            Gets the association multiplicity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.Reversed">
      <summary>
            Gets or sets the reversed paired <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.OnTargetRemove">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType" /> object removal.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.AssociationInfo.OnOwnerRemove">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> that will be applied on <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerType" /> object removal.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeInfo">
      <summary>
            Represents an object describing any persistent type.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeInfo.NoTypeId">
      <summary>
            "No <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" />" value (<see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" /> is unknown or undefined).
            Value is <see langword="0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeInfo.MinTypeId">
      <summary>
            Minimal possible <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" /> value.
            Value is <see langword="100" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.CreateEntityTuple(Xtensive.Tuples.Tuple)">
      <summary>
            Creates the tuple prototype with specified <paramref name="primaryKey" />.
            </summary>
      <param name="primaryKey">The primary key to use.</param>
      <returns>
            The <see cref="P:Xtensive.Orm.Model.TypeInfo.TuplePrototype" /> with "injected" <paramref name="primaryKey" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.InjectPrimaryKey(Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
      <summary>
            Injects the primary key into specified <paramref name="entityTuple" /></summary>
      <param name="primaryKey">The primary key to inject.</param>
      <returns>
            The <paramref name="entityTuple" /> with "injected" <paramref name="primaryKey" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetDescendants">
      <summary>
            Gets the direct descendants of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetDescendants(System.Boolean)">
      <summary>
            Gets descendants of this instance.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested descendants will be returned.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetInterfaces">
      <summary>
            Gets the direct persistent interfaces this instance implements.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetInterfaces(System.Boolean)">
      <summary>
            Gets the persistent interfaces this instance implements.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implemented interfaces will be returned.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetImplementors">
      <summary>
            Gets the direct implementors of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetImplementors(System.Boolean)">
      <summary>
            Gets the direct implementors of this instance.
            </summary>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implementors will be returned.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetAncestor">
      <summary>
            Gets the ancestor.
            </summary>
      <returns>The ancestor</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetAncestors">
      <summary>
            Gets the ancestors recursively. Root-to-inheritor order.
            </summary>
      <returns>The ancestor</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetRoot">
      <summary>
            Gets the root of the hierarchy.
            </summary>
      <returns>The hierarchy root.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetTargetAssociations">
      <summary>
            Gets the associations this instance is participating in as target (it is referenced by other entities).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetOwnerAssociations">
      <summary>
            Gets the associations this instance is participating in as owner (it has references to other entities).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetRemovalAssociationSequence">
      <summary>
            Gets the association sequence for entity removal.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetVersionFields">
      <summary>
            Gets the version field sequence.
            </summary>
      <returns>The version field sequence.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.GetVersionColumns">
      <summary>
            Gets the version columns.
            </summary>
      <returns>The version columns.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfo.#ctor(Xtensive.Orm.Model.DomainModel,Xtensive.Orm.Model.TypeAttributes)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="model">The model.</param>
      <param name="typeAttributes">The type attributes.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsEntity">
      <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsAbstract">
      <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsInterface">
      <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsMaterialized">
      <summary>
            Gets a value indicating whether this instance is materialized interface.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsStructure">
      <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsSystem">
      <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsLeaf">
      <summary>
            Gets a value indicating whether this instance is a leaf type,
            i.e. its <see cref="M:Xtensive.Orm.Model.TypeInfo.GetDescendants" /> method returns <see langword="0" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsAuxiliary">
      <summary>
            Gets or sets a value indicating whether this instance is auxiliary type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsGenericTypeDefinition">
      <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.IsAutoGenericInstance">
      <summary>
            Gets a value indicating whether this instance is automatically registered generic type instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.TypeId">
      <summary>
            Gets or sets the type identifier uniquely identifying the type in the domain model.
            </summary>
      <exception cref="T:System.NotSupportedException">Property is already initialized.</exception>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.UnderlyingType">
      <summary>
            Gets or sets the underlying system type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Columns">
      <summary>
            Gets the columns contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Indexes">
      <summary>
            Gets the indexes for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.FullTextIndex">
      <summary>
            Gets full-text index if any, otherwise gets <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Fields">
      <summary>
            Gets the fields contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.FieldMap">
      <summary>
            Gets the field map for implemented interfaces.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Model">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.DomainModel" /> this instance belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.Hierarchy">
      <summary>
            Gets or sets the hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.TypeDiscriminatorValue">
      <summary>
            Gets or sets the type discriminator value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.TuplePrototype">
      <summary>
            Gets the persistent type prototype.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.VersionExtractor">
      <summary>
            Gets the version tuple extractor.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.HasVersionFields">
      <summary>
            Gets a value indicating whether this instance has version fields.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.HasVersionRoots">
      <summary>
            Gets or sets a value indicating whether this instance has version roots.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfo.StructureFieldMapping">
      <summary>
            Gets the structure field mapping.
            </summary>
      <value>The structure field mapping.</value>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.FieldDef">
      <summary>
            Defines a signle persistent field.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.FieldDef.ValidateName(System.String)">
      <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
      <param name="newName">The new name of this instance.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Length">
      <summary>
            Gets or sets the maximal length of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Scale">
      <summary>
            Gets or sets the scale of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Precision">
      <summary>
            Gets or sets the precision of the field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.DefaultValue">
      <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsLazyLoad">
      <summary>
            Gets or sets a value indicating whether this instance should be loaded on demand.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsNullable">
      <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsStructure">
      <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsEntitySet">
      <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsPrimitive">
      <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsEntity">
      <summary>
            Gets a value indicating whether this property is a reference to Entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsSystem">
      <summary>
            Gets a value indicating whether this property is system field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsTypeId">
      <summary>
            Gets a value indicating whether this property contains information about Type identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsTypeDiscriminator">
      <summary>
            Gets or sets a value indicating whether this instance is used as custom type discriminator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.IsIndexed">
      <summary>
            Gets a value indicating whether this property is indexed.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.UnderlyingProperty">
      <summary>
            Gets the underlying system property.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.ValueType">
      <summary>
            Gets or sets the type of the value of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.ItemType">
      <summary>
            Gets or sets the item type for field that describes the entity set.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.OnTargetRemove">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> action that will be executed on referenced Entity removal.
            </summary>
      <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Orm.EntitySet`1" />.</exception>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.OnOwnerRemove">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> action that will be executed with referenced Entity on field owner removal.
            </summary>
      <exception cref="T:System.InvalidOperationException">Field is not reference to entity, nor <see cref="T:Xtensive.Orm.EntitySet`1" />.</exception>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FieldDef.PairTo">
      <summary>
            Gets or sets the name of the paired field.
            </summary>
      <exception cref="T:System.InvalidOperationException">Field is not reference to entity.</exception>
    </member>
    <member name="T:Xtensive.Orm.Building.BuildingContext">
      <summary>
            Domain building context.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.BuildingContext.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Building.BuildingContext" />, or throws <see cref="T:System.InvalidOperationException" />, if active context is not found.
            </summary>
      <returns>Current context.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Building.BuildingContext.Current" />
        <see cref="T:Xtensive.Orm.Building.BuildingContext" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.BuildingContext.#ctor(Xtensive.Orm.Configuration.DomainConfiguration)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Building.BuildingContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.Stage">
      <summary>
            Gets the building stage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.Configuration">
      <summary>
            Gets the configuration of the building <see cref="T:Xtensive.Orm.Domain" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.BuilderConfiguration">
      <summary>
            Gets the building configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.Domain">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain" /> object.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.HandlerFactory">
      <summary>
            Gets the handler factory.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.NameBuilder">
      <summary>
            Gets the name builder.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.SystemSessionHandler">
      <summary>
            Gets the system session handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.ModelDef">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain" /> model definition.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingContext.Model">
      <summary>
            Gets domain  model.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Multiplicity">
      <summary>
            Multiplicity of relationship.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.ZeroToOne">
      <summary>
            Zero to one. 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany">
      <summary>
            Zero to many.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.OneToOne">
      <summary>
            One to one.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.OneToMany">
      <summary>
            One to many.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.ManyToOne">
      <summary>
            Many to one.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Multiplicity.ManyToMany">
      <summary>
            Many to many.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.DomainModel">
      <summary>
            Represents a model of <see cref="N:Xtensive.Storage" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.DomainModel.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.DomainModel.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.DomainModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.DomainModel" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.DomainModel.Types">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instances contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.DomainModel.RealIndexes">
      <summary>
            Gets real indexes contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.DomainModel.FullTextIndexes">
      <summary>
            Gets full-text indexes contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.DomainModel.Hierarchies">
      <summary>
            Gets the hierarchies.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.DomainModel.Associations">
      <summary>
            Gets the collection providing information about associations.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Contains(System.Type)">
      <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if this instance contains the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.TryGetValue(System.Type,Xtensive.Orm.Model.TypeInfo@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> if it was found; otherwise <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if value is found by specified <paramref name="key" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Remove(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Removes element from the the collection.
            </summary>
      <param name="value">Item to remove.</param>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Clear">
      <summary>
            Removes all objects from the
            collection instance.
            </summary>
      <exception cref="T:System.NotSupportedException">Always</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Contains(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Determines whether collection contains a specific item.
            </summary>
      <param name="item">Value to search for.</param>
      <returns>
        <see langword="True" /> if the object is found; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Find(System.String)">
      <summary>
            Finds the type by its full name.
            </summary>
      <param name="fullName">The full name of the type to find.</param>
      <returns>Found type, if any; 
            <see langword="null" />, if there is no type with specified full name.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindAncestor(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Finds the ancestor of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search ancestor for.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that is ancestor of specified <paramref name="item" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindDescendants(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Finds the set of direct descendants of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search descendants for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are descendants of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindDescendants(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the set of descendants of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search descendants for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested descendants will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are descendants of specified <paramref name="item" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindInterfaces(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="item" /> implements.
            </summary>
      <param name="item">The type to search interfaces for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are implemented by specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindInterfaces(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="item" /> implements.
            </summary>
      <param name="item">The type to search interfaces for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and non-direct implemented interfaces will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are implemented by specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindImplementors(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Finds the set of direct implementors of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search implementors for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are implementors of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindImplementors(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the set of implementors of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search implementors for.</param>
      <param name="recursive">if set to <see langword="true" /> then both direct and nested implementors will be returned.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that are implementors of specified <paramref name="item" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindRoot(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Finds the root of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search root for.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance that is root of specified <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindAncestor(System.Type)">
      <summary>
            Finds the ancestor of the specified <paramref name="type" />.
            </summary>
      <param name="type">The type to search ancestor for.</param>
      <returns>
        <see name="TypeDef" /> instance that is ancestor of specified <paramref name="type" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.FindInterfaces(System.Type)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1" /> of interfaces that specified <paramref name="type" /> implements.
            </summary>
      <param name="type">The type to search interfaces for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> of <see name="TypeDef" /> instance that are implemented by the specified <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.Find(Xtensive.Orm.Model.TypeAttributes)">
      <summary>
            Finds all <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instances according to specified criteria.
            </summary>
      <param name="criteria">The attributes.</param>
      <returns>
        <see cref="T:Xtensive.Collections.ICountable`1" /> that contains all found instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.OnInserted(Xtensive.Orm.Model.TypeInfo,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RebuildTypeIdIndex">
      <summary>
            Generates index allowing to quickly find 
            the type by its <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RegisterInheritance(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Registers the connection between ancestor &amp; descendant.
            </summary>
      <param name="ancestor">The ancestor.</param>
      <param name="descendant">The descendant.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.RegisterImplementation(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Registers the connection between interface and implementor.
            </summary>
      <param name="interface">The interface.</param>
      <param name="implementor">The implementor.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Item(System.Type)">
      <summary>
            An indexer that provides access to collection items.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Item(System.Int32)">
      <summary>
            An indexer that provides access to collection items by their <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" />.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Structures">
      <summary>
            Gets the structures that are contained in this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Entities">
      <summary>
            Gets the entities that are contained in this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoCollection.Interfaces">
      <summary>
            Gets the interfaces that are contained in this collection.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.OnRemoveAction">
      <summary>
            Defines actions that can be taken to preserve referential integrity.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OnRemoveAction.Default">
      <summary>
            The same as <see cref="F:Xtensive.Orm.OnRemoveAction.Deny" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OnRemoveAction.Deny">
      <summary>
            Indicates that exception will be thrown in case that removing object 
            is referenced by other object.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OnRemoveAction.Cascade">
      <summary>
            Indicates that delete cascading operation will be taken on objects 
            that are referenced by removing object.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OnRemoveAction.Clear">
      <summary>
            Indicates that <see langword="null" /> value will be assigned 
            to corresponding reference fields of referencing object
            or the whole item that is used in n-ry relations will be removed.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OnRemoveAction.None">
      <summary>
            Indicates that no action will be executed to corresponding reference field 
            of referencing object.
            </summary>
      <remarks>This option is prohibited for fields of <c>EntitySet&lt;T&gt;</c> type.</remarks>
    </member>
    <member name="T:Xtensive.Storage.Providers.NameBuilder">
      <summary>
            Name builder for <see cref="T:Xtensive.Orm.Model.DomainModel" /> nodes 
            Provides names according to a set of naming rules contained in
            <see cref="P:Xtensive.Storage.Providers.NameBuilder.NamingConvention" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTypeName(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> object.
            </summary>
      <param name="type">The <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> object.</param>
      <returns>Type name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTableName(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Build table name by index.
            </summary>
      <param name="indexInfo">Index to build table name for.</param>
      <returns>Table name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildTableColumnName(Xtensive.Orm.Model.ColumnInfo)">
      <summary>
            Build table column name by <see cref="T:Xtensive.Storage.Model.ColumnInfo" />.
            </summary>
      <param name="columnInfo">
        <see cref="T:Xtensive.Storage.Model.ColumnInfo" /> to build column table name for.</param>
      <returns>Column name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildForeignKeyName(Xtensive.Orm.Model.AssociationInfo,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Builds foreign key name by association.
            </summary>
      <returns>Foreign key name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildForeignKeyName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Builds foreign key name for in-hierarchy primary key references.
            </summary>
      <returns>Foreign key name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildFieldName(Xtensive.Orm.Building.Definitions.FieldDef)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.FieldDef" /> object.
            </summary>
      <param name="field">The <see cref="T:Xtensive.Orm.Building.Definitions.FieldDef" /> object.</param>
      <returns>Field name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildFieldName(System.Reflection.PropertyInfo)">
      <summary>
            Builds the name of the field.
            </summary>
      <param name="propertyInfo">The property info.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildExplicitFieldName(Xtensive.Orm.Model.TypeInfo,System.String)">
      <summary>
            Builds the name of the explicitly implemented field.
            </summary>
      <param name="type">The type of interface explicit member implements.</param>
      <param name="name">The member name.</param>
      <returns>Explicitly implemented field name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildNestedFieldName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Builds the full name of the <paramref name="childField" />.
            </summary>
      <param name="complexField">The complex field.</param>
      <param name="childField">The child field.</param>
      <returns>Nested field name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildMappingName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Builds the <see cref="P:Xtensive.Orm.Model.MappingNode.MappingName" />.
            </summary>
      <param name="complexField">The complex field.</param>
      <param name="childField">The child field.</param>
      <returns>Field mapping name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildColumnName(Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Model.ColumnInfo)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> object.
            </summary>
      <param name="field">The field info.</param>
      <param name="baseColumn">The <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> object.</param>
      <returns>Column name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildColumnName(Xtensive.Orm.Model.ColumnInfo)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> object concatenating 
            <see cref="P:Xtensive.Orm.Model.Node.Name" /> of its declaring type with the original column name.
            </summary>
      <param name="column">The <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> object.</param>
      <returns>Column name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildIndexName(Xtensive.Orm.Building.Definitions.TypeDef,Xtensive.Orm.Building.Definitions.IndexDef)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef" /> object.
            </summary>
      <param name="type">The type def.</param>
      <param name="index">The <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef" /> object.</param>
      <returns>Index name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildIndexName(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Gets the name for <see cref="T:Xtensive.Orm.Building.Definitions.IndexDef" /> object.
            </summary>
      <param name="type">The type def.</param>
      <param name="index">The <see cref="T:Xtensive.Orm.Model.IndexInfo" /> object.</param>
      <returns>Index name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildFullTextIndexName(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Builds the name of the full-text index.
            </summary>
      <param name="typeInfo">The type info.</param>
      <returns>Index name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildAssociationName(Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Builds the name for the <see cref="T:Xtensive.Orm.Model.AssociationInfo" />.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> instance to build name for.</param>
      <returns>Association name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildAuxiliaryTypeMappingName(Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Builds the mapping name for the auxiliary type
            associated with specified <see cref="T:Xtensive.Orm.Model.AssociationInfo" />.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> instance to build name for.</param>
      <returns>Auxiliary type mapping name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.BuildSequenceName(Xtensive.Orm.Model.KeyInfo)">
      <summary>
            Builds the key sequence name by <see cref="T:Xtensive.Orm.Model.KeyInfo" /> instance.
            </summary>
      <param name="keyInfo">The <see cref="T:Xtensive.Orm.Model.KeyInfo" /> instance to build sequence name for.</param>
      <returns>Sequence name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.ApplyNamingRules(System.String)">
      <summary>
            Applies current naming convention to the specified <paramref name="name" />.
            </summary>
      <param name="name">Name to apply the convention to.</param>
      <returns>Processed name satisfying naming convention.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.GetHash(System.String)">
      <summary>
            Computes the hash for the specified <paramref name="name" />.
            The length of the resulting hash is 8 characters.
            </summary>
      <returns>Computed hash.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.NameBuilder.Initialize(Xtensive.Orm.Configuration.NamingConvention)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Initialize" copy="true" />
      </summary>
      <param name="namingConvention">The naming convention.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.NameBuilder.MaxIdentifierLength">
      <summary>
            Gets the maximum length of storage entity identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.NameBuilder.TypeIdColumnName">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Entity.TypeId" /> column name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.NameBuilder.NamingConvention">
      <summary>
            Gets the naming convention object.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Node">
      <summary>
            An abstract base class for model node.
             </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Node.ValidateName(System.String)">
      <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
      <param name="newName">The new name of this instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.Node.UpdateState(System.Boolean)">
      <summary>
            Updates the internal state of this instance.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be updated as well.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.Node.UpdateState">
      <summary>
            Updates the internal state of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Node.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.Node.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.Node" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.Node" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Node.Name">
      <summary>
            Gets the name of this instance.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Model.Node.Changing">
      <inheritdoc />
    </member>
    <member name="E:Xtensive.Orm.Model.Node.Changed">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.AssociationInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.Find(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
      <param name="type">
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> to find associations for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.Find(Xtensive.Orm.Model.TypeInfo,System.Boolean)">
      <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
      <param name="type">
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> to find outgoing associations for.</param>
      <param name="target">if set to <see langword="true" /> then only target associations will be returned; otherwise only owner associations.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.AssociationInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.NodeCollection`1">
      <summary>
            A base class for collection of nodes in model.
            </summary>
      <typeparam name="TNode">The type of the node.</typeparam>
    </member>
    <member name="F:Xtensive.Orm.Model.NodeCollection`1.Empty">
      <summary>
            Gets empty collection.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.Add(`0)">
      <summary>
            Adds new element to the collection.
            </summary>
      <param name="item">Item to add.</param>
      <exception cref="T:System.InvalidOperationException">Item already exists.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.Contains(System.String)">
      <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if this instance contains the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.TryGetValue(System.String,`0@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <param name="value">
        <typeparamref name="TNode" /> if it was found; otherwise <see langword="null" />.</param>
      <returns>
        <see langword="true" /> if value is found by specified <paramref name="key" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.NodeCollection`1.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="owner">The owner.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.NodeCollection`1.Owner">
      <summary>
            Gets the owner.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.NodeCollection`1.Name">
      <summary>
            Gets the name of this collection.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.NodeCollection`1.FullName">
      <summary>
            Gets the full name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.NodeCollection`1.Item(System.String)">
      <summary>
            An indexer that provides access to collection items.
            Returns <see langword="default(TNode)" /> if there is no such item.
            </summary>
      <exception cref="T:System.ArgumentException">Item was not found.</exception>
    </member>
    <member name="T:Xtensive.Orm.Model.FieldInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FieldInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoCollection.Find(Xtensive.Orm.Model.FieldAttributes)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoCollection.Find(Xtensive.Orm.Model.FieldAttributes,Xtensive.Core.MatchType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoCollection.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.DomainBuilderException">
      <summary>
            Describes various errors detected during <see cref="T:Xtensive.Orm.Domain" />.<see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /> execution.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.DomainBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.Model.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExCanNotExtractForeignKey">
      <summary>
              Looks up a localized string similar to Can't extract foreign key..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExComparerForTypeIsNotAvailable">
      <summary>
              Looks up a localized string similar to Comparer for type '{0}' is not available..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExCouldNotResolveXYWithinDomain">
      <summary>
              Looks up a localized string similar to Could not resolve {0} '{1}' within the domain..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExDefaultTypeIsAlreadyRegistered">
      <summary>
              Looks up a localized string similar to Default type is already registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExInstanceMustBeLockedBeforeThisOperation">
      <summary>
              Looks up a localized string similar to Instance must be locked before this operation..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExItemWithKeyXWasNotFound">
      <summary>
              Looks up a localized string similar to Item with key '{0}' was not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExItemWithNameXAlreadyExistsInY">
      <summary>
              Looks up a localized string similar to Item with name '{0}' already exists in '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExKeyContainsMultipleFieldsWithIsTypeIdTrueFlag">
      <summary>
              Looks up a localized string similar to Key contains multiple fields with IsTypeId==true flag..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExNodeTypeIsUnknown">
      <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExTypeDiscriminatorFieldIsAlreadySet">
      <summary>
              Looks up a localized string similar to TypeDiscriminator field is already set..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExTypeIdIsNotAssignedForTypeX">
      <summary>
              Looks up a localized string similar to TypeId is not assigned for type '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.ExUnableToFindMasterAssociation">
      <summary>
              Looks up a localized string similar to Unable to find master association of association '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.LogExErrorSettingDefaultValueXForColumnYInTypeZ">
      <summary>
              Looks up a localized string similar to Error setting default value {0} for column '{1}' in type '{2}'. Most likely, its type is incorrect..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.NodeCollectionFullNameFormat">
      <summary>
              Looks up a localized string similar to {0}.{1}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.NodeFormat">
      <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.TypeIdForTypeXIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to TypeId for type {0} is already assigned..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.TypeIdXIsNotRegistered">
      <summary>
              Looks up a localized string similar to Type with TypeId={0} is not registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.TypeXIsNotRegistered">
      <summary>
              Looks up a localized string similar to Type '{0}' is not registered..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Resources.Strings.UnnamedNodeDisplayName">
      <summary>
              Looks up a localized string similar to &lt;Unnamed&gt;.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.FullTextFieldDef">
      <summary>
            Defines a single field inside full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.FullTextFieldDef.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.Configuration">
      <summary>
            Gets or sets the configuration for word-breaker and stemmer.
            </summary>
      <value>The configuration name.</value>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.TypeFieldName">
      <summary>
            Gets or sets the name of the type field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FullTextFieldDef.IsAnalyzed">
      <summary>
            Gets or sets a value indicating whether this field is analyzed by stemmer.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef">
      <summary>
            Defines full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDef.#ctor(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.TypeDef">
      <summary>
            Defines a single persistent type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineIndex(System.String)">
      <summary>
            Defines the index and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Indexes" />.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Argument "name" is invalid.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineField(System.Reflection.PropertyInfo)">
      <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields" />.
            </summary>
      <param name="property">The underlying property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.DefineField(System.String,System.Type)">
      <summary>
            Defines the field and adds it to the <see cref="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields" />.
            </summary>
      <param name="name">The name.</param>
      <param name="valueType">The type of the field value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.ValidateName(System.String)">
      <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
      <param name="newName">The new name of this instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDef.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> class.
            </summary>
      <param name="type">The underlying type.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsEntity">
      <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsAbstract">
      <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsSystem">
      <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsInterface">
      <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsStructure">
      <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsGenericTypeDefinition">
      <summary>
            Gets a value indicating whether this instance is generic type definition.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsAutoGenericInstance">
      <summary>
            Gets a value indicating whether this instance is automatically registered generic type instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.UnderlyingType">
      <summary>
            Gets or sets the underlying system type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Indexes">
      <summary>
            Gets the indexes for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Fields">
      <summary>
            Gets the fields contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.Implementors">
      <summary>
            Gets the direct implementors of this instance (if this is an interface).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.TypeDiscriminatorValue">
      <summary>
            Gets or sets the type discriminator value.
            </summary>
      <value>The type discriminator value.</value>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDef.IsDefaultTypeInHierarchy">
      <summary>
            Gets or sets a value indicating whether this instance is default type in hierarchy.
            </summary>
      <value>
        <see langword="true" /> if this instance is default type in hierarchy; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef" /> items.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.TryGetValue(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <returns>The value associated with the specified <paramref name="key" /> or <see langword="null" /> 
            if item was not found.</returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.TryGetValue(System.Type)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <returns>The value associated with the specified <paramref name="key" /> or <see langword="null" /> 
            if item was not found.</returns>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.FullTextIndexDefCollection.Item(System.Type)">
      <summary>
            An indexer that provides access to collection items.
            </summary>
      <exception cref="T:System.ArgumentException"> when item was not found.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Node`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.Equals(Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.op_Equality(Xtensive.Orm.Building.DependencyGraph.Edge{`0},Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.op_Inequality(Xtensive.Orm.Building.DependencyGraph.Edge{`0},Xtensive.Orm.Building.DependencyGraph.Edge{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.DependencyGraph.Edge`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.FixupActions.CopyKeyFieldsAction.ToString">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.HierarchyDef">
      <summary>
            Defines a signle persistent type hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.Root">
      <summary>
            Gets the root of the hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.Schema">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.InheritanceSchema" /> for this hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyFields">
      <summary>
            Gets the fields that are included in the key for this hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.IncludeTypeId">
      <summary>
            Gets or sets a value indicating whether key includes TypeId field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyGeneratorType">
      <summary>
            Gets or sets the key generator type to use in this hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDef.KeyGeneratorName">
      <summary>
            Gets or sets the key generator name to use in this hierarchy.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.FullTextAttribute">
      <summary>
            Indicates that persistent property must be included into full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.FullTextAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.FullTextAttribute.Analyzed">
      <summary>
            Gets or sets a value indicating whether content of the field marked by this
            attribute must be analyzed or not. 
            "Analyzed" implies the content must be splat into a sequence of words; 
            otherwise it will be represented as a single word in index.
            Default value is <see langword="true" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FullTextAttribute.Configuration">
      <summary>
            Gets the configuration name for word-breaker and stemmer. 
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor">
      <summary>
            Descriptor of a field's fetching request.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field">
      <summary>
            The field which value will be fetched.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.FetchFieldsOfReferencedEntity">
      <summary>
            If it is set to <see langword="true" /> then fields' values of 
            an <see cref="T:Xtensive.Orm.Entity" /> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field" /> will be fetched.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.EntitySetItemCountLimit">
      <summary>
            The maximal count of items which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.FetchLazyFields">
      <summary>
            Indicates whether children lazy-load fields will be fetched, or not.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Equals(Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">The field whose value will be fetched.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">The field whose value will be fetched.</param>
      <param name="entitySetItemCountLimit">The maximal count of items 
            which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Boolean,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">The field whose value will be fetched.</param>
      <param name="fetchFieldsOfReferencedEntity">If it is set to <see langword="true" /> 
            then fields' values of an <see cref="T:Xtensive.Orm.Entity" /> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field" /> 
            will be fetched.</param>
      <param name="fetchLazyFields">if set to <see langword="true" /> 
            children lazy-load fields will be fetched.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.#ctor(Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Action{Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">The field whose value will be fetched.</param>
      <param name="entitySetItemCountLimit">The maximal count of items
            which will be loaded during prefetch of an <see cref="T:Xtensive.Orm.EntitySet`1" />.</param>
      <param name="fetchFieldsOfReferencedEntity">If it is set to <see langword="true" />
            then fields' values of an <see cref="T:Xtensive.Orm.Entity" /> referenced by <see cref="F:Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor.Field" />
            will be fetched.</param>
      <param name="fetchLazyFields">if set to <see langword="true" /> 
            children lazy-load fields will be fetched.</param>
      <param name="keyExtractionSubscriber">The delegate which will be invoked
            if a key of a referenced entity has been extracted and
            its exact type can't be get or inferred.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.SessionHandler">
      <summary>
            Base <see cref="P:Xtensive.Storage.Providers.SessionHandler.Session" /> handler class.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.SessionHandler.ConnectionSyncRoot">
      <summary>
            The <see cref="T:System.Object" /> to synchronize access to a connection.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.AcquireConnectionLock">
      <summary>
            Acquires the connection lock.
            </summary>
      <returns>An implementation of <see cref="T:System.IDisposable" /> which should be disposed 
            to release the connection lock.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetRealHandler">
      <summary>
            Gets the real session handler (the final handler in chain of all <see cref="T:Xtensive.Orm.Internals.ChainingSessionHandler" />s).
            </summary>
      <returns>The real session handler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.CreateEnumerationContext">
      <summary>
            Creates enumeration context.
            </summary>
      <returns>Created context.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetEnumerationContextOptions">
      <summary>
            Gets the enumeration context options.
            </summary>
      <returns>Options for new enumeration context.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>Session.Configuration.ReaderPreloading</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
      <summary>
            Executes the specified query tasks.
            </summary>
      <param name="queryTasks">The query tasks to execute.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> partial execution is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.SetCommandTimeout(System.Nullable{System.Int32})">
      <summary>
            Sets command timeout for all <see cref="T:System.Data.IDbCommand" /> created within current instance.
            </summary>
      <param name="commandTimeout">The command timeout.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.CreateBaseServices">
      <summary>
            Creates parent service container 
            for <see cref="P:Xtensive.Orm.Session.Services" /> container.
            </summary>
      <returns>Container providing base services.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.AddBaseServiceRegistrations(System.Collections.Generic.List{Xtensive.IoC.ServiceRegistration})">
      <summary>
            Adds base service registration entries into the list of
            registrations used by <see cref="M:Xtensive.Storage.Providers.SessionHandler.CreateBaseServices" />
            method.
            </summary>
      <param name="registrations">The list of service registrations.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.Prefetch(Xtensive.Orm.Key,Xtensive.Orm.Model.TypeInfo,System.Collections.Generic.IList{Xtensive.Orm.Internals.Prefetch.PrefetchFieldDescriptor})">
      <summary>
            Register the task prefetching fields' values of the <see cref="T:Xtensive.Orm.Entity" /> with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="type">The type of the <see cref="T:Xtensive.Orm.Entity" />.</param>
      <param name="descriptors">The descriptors of fields which values will be loaded.</param>
      <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer" /> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.ExecutePrefetchTasks(System.Boolean)">
      <summary>
            Executes registered prefetch tasks.
            </summary>
      <param name="skipPersist">if set to <see langword="true" /> persist is not performed.</param>
      <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer" /> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.ExecutePrefetchTasks">
      <summary>
            Executes registered prefetch tasks.
            </summary>
      <returns>A <see cref="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer" /> which can be used to save 
            a strong reference to a fetched <see cref="T:Xtensive.Orm.Entity" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.FetchEntityState(Xtensive.Orm.Key)">
      <summary>
            Fetches an <see cref="T:Xtensive.Orm.EntityState" />.
            </summary>
      <param name="key">The key.</param>
      <returns>The key of fetched <see cref="T:Xtensive.Orm.EntityState" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.FetchField(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Fetches the field of an <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
      <param name="key">The key.</param>
      <param name="field">The field to fetch.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.FetchEntitySet(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
      <summary>
            Fetches the entity set.
            </summary>
      <param name="ownerKey">The owner key.</param>
      <param name="field">The field.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
      <summary>
            Persists changed entities.
            </summary>
      <param name="registry">The registry.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> dirty flush is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.PersistAction},System.Boolean)">
      <summary>
            Persists changed entities.
            </summary>
      <param name="persistActions">The entity states and the corresponding actions.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> partial execution is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetReferencesTo(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Gets the references to specified entity.
            </summary>
      <param name="target">The target.</param>
      <param name="association">The association.</param>
      <returns>References.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetReferencesFrom(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Gets the references from specified entity.
            </summary>
      <param name="owner">The owner.</param>
      <param name="association">The association.</param>
      <returns>References.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
      <summary>
            Opens the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.CompletingTransaction(Xtensive.Orm.Transaction)">
      <summary>
            Clears transaction-related caches.
            This method is called for non-actual transactions as well.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
      <summary>
            Commits the transaction.
            This method is invoked for actual transactions only.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
      <summary>
            Rollbacks the transaction.
            This method is invoked for actual transactions only.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
      <summary>
            Creates the savepoint.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
      <summary>
            Releases the savepoint.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
      <summary>
            Rollbacks to savepoint.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.GetSavepointName(Xtensive.Orm.Transaction)">
      <summary>
            Gets the name of the savepoint associated with the transaction.
            </summary>
      <param name="transaction">The transaction.</param>
      <returns>The name of the savepoint</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SessionHandler.EnsureTransactionIsOpened">
      <summary>
            Ensures the transaction is opened.
            </summary>
      <exception cref="T:System.InvalidOperationException">Transaction is not opened.</exception>
    </member>
    <member name="P:Xtensive.Storage.Providers.SessionHandler.Session">
      <summary>
            Gets the current <see cref="P:Xtensive.Storage.Providers.SessionHandler.Session" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.SessionHandler.TransactionIsStarted">
      <summary>
            Gets a value indicating whether transaction is actually started.
            This property indicates presence of outermost transaction only.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Key">
      <summary>
            Identifies a particular <see cref="T:Xtensive.Orm.Entity" />.
            Stores the set of <see cref="T:Xtensive.Orm.Entity" />'s <see cref="T:Xtensive.Orm.KeyAttribute">[Key]</see> field values, 
            as well as <see cref="T:Xtensive.Orm.Model.HierarchyInfo" /> the entity belongs to.
            </summary>
      <remarks>
            Every entity is uniquely identified by its <see cref="P:Xtensive.Orm.Entity.Key" />.
            </remarks>
      <seealso cref="P:Xtensive.Orm.Entity.Key" />
    </member>
    <member name="F:Xtensive.Orm.Key.value">
      <summary>
            Protected member caching the tuple with key values.
            Can be <see langword="null" />, if the value isn't materialized yet.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Key.IsTemporary">
      <summary>
            Determines whether this key is a temporary key 
            in the <see cref="M:Xtensive.Orm.Domain.Demand">current</see><see cref="T:Xtensive.Orm.Domain" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Key.IsTemporary(Xtensive.Orm.Domain)">
      <summary>
            Determines whether this key is a temporary key in the specified <paramref name="domain" />.
            </summary>
      <param name="domain">The domain.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.GetValue">
      <summary>
            Gets the value in form of <see cref="T:Xtensive.Tuples.Tuple" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Key.CalculateHashCode">
      <summary>
            Calculates hash code.
            </summary>
      <returns>Calculated hash code.</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Equals(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Key.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Key.op_Equality(Xtensive.Orm.Key,Xtensive.Orm.Key)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Key.op_Inequality(Xtensive.Orm.Key,Xtensive.Orm.Key)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Key.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Key.ValueEquals(Xtensive.Orm.Key)">
      <summary>
            Compares key value for equality.
            </summary>
      <param name="other">The other key to compare.</param>
      <returns>Equality comparison result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:Xtensive.Orm.Key" /> to its string representation.
            </summary>
      <param name="format">Indicates whether to use <see cref="M:Xtensive.Orm.Key.Format" />,
            or <see cref="M:Xtensive.Orm.Key.ToString" /> method.</param>
      <returns>String representation of the <see cref="T:Xtensive.Orm.Key" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Format">
      <summary>
            Gets the string representation of this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Key.Parse(System.String)">
      <summary>
            Parses the specified <paramref name="source" /> string 
            produced by <see cref="M:Xtensive.Orm.Key.Format" /> back to the <see cref="T:Xtensive.Orm.Key" />
            instance.
            </summary>
      <param name="source">The string to parse.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Key" /> instance corresponding to the specified
            <paramref name="source" /> string.</returns>
      <remarks>This method requires open <see cref="T:Xtensive.Orm.Session" />.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Parse(Xtensive.Orm.Domain,System.String)">
      <summary>
            Parses the specified <paramref name="source" /> string
            produced by <see cref="M:Xtensive.Orm.Key.Format" /> back to the <see cref="T:Xtensive.Orm.Key" />
            instance.
            </summary>
      <param name="source">The string to parse.</param>
      <param name="domain">The domain.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Key" /> instance corresponding to the specified
            <paramref name="source" /> string.
            </returns>
      <exception cref="T:System.InvalidOperationException">Invalid key format.</exception>
    </member>
    <member name="M:Xtensive.Orm.Key.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            with newly generated value.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <returns>A newly created <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
      <remarks>This method requires open <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(System.Type)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            with newly generated value.
            </summary>
      <returns>A newly created <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
      <remarks>This method requires open <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Orm.Session)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            with newly generated value.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <param name="session">The session.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.Key" /> instance .
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Session,System.Type)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            with newly generated value.
            </summary>
      <param name="session">The session.</param>
      <param name="type">The type.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.Key" /> instance .
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Tuples.Tuple)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            and with specified <paramref name="value" />.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <param name="value">Key value.</param>
      <returns>
            A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance.
            </returns>
      <remarks>This method requires activated <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(System.Type,Xtensive.Tuples.Tuple)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            and with specified <paramref name="value" />.
            </summary>
      <param name="value">Key value.</param>
      <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
      <remarks>This method requires active <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Orm.Domain,Xtensive.Tuples.Tuple)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            and with specified <paramref name="value" />.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <param name="value">Key value.</param>
      <returns>
            A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,Xtensive.Tuples.Tuple)">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            and with specified <paramref name="value" />.
            </summary>
      <param name="value">Key value.</param>
      <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1(System.Object[])">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            and with specified <paramref name="values" />.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <param name="values">Key values.</param>
      <returns>
            A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance.
            </returns>
      <remarks>This method requires active <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(System.Type,System.Object[])">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            and with specified <paramref name="values" />.
            </summary>
      <param name="values">Key values.</param>
      <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
      <remarks>This method requires active <see cref="T:Xtensive.Orm.Session" /> instance.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Key.Create``1(Xtensive.Orm.Domain,System.Object[])">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance
            for the specified <see cref="T:Xtensive.Orm.Entity" /> type <typeparamref name="T" />
            and with specified <paramref name="values" />.
            </summary>
      <typeparam name="T">Type of <see cref="T:Xtensive.Orm.Entity" /> descendant to get <see cref="T:Xtensive.Orm.Key" /> for.</typeparam>
      <param name="values">Key values.</param>
      <returns>
            A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Key.Create(Xtensive.Orm.Domain,System.Type,System.Object[])">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Key" /> instance 
            for the specified <see cref="T:Xtensive.Orm.Entity" /><paramref name="type" />
            and with specified <paramref name="values" />.
            </summary>
      <param name="values">Key values.</param>
      <returns>A newly created or existing <see cref="T:Xtensive.Orm.Key" /> instance .</returns>
    </member>
    <member name="M:Xtensive.Orm.Key.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.TypeReferenceAccuracy,Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="accuracy">The typre reference accuracy.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:Xtensive.Orm.Key.Value">
      <summary>
            Gets the key value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Key.TypeReference">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Key.TypeReference" /> object
            describing the type this key belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Key.TypeInfo">
      <summary>
            Gets the type of <see cref="T:Xtensive.Orm.Entity" /> this instance identifies.
            </summary>
      <exception cref="T:System.InvalidOperationException">Unable to resolve type for Key.</exception>
    </member>
    <member name="P:Xtensive.Orm.Key.HasExactType">
      <summary>
            Determines whether <see cref="P:Xtensive.Orm.Key.TypeInfo" /> property has exact type value or not.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer">
      <summary>
            Saves a strong reference to an object.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.JoinIfPossible(Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer)">
      <summary>
            Joins this instance with <paramref name="other" />, 
            if <paramref name="other" /> is not <see langword="null" /> and is the root of other containers' chain.
            </summary>
      <param name="other">The other container.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.Join(Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer)">
      <summary>
            Joins this instance with <paramref name="other" />.
            </summary>
      <param name="other">The other container.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.Prefetch.StrongReferenceContainer.#ctor(System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="reference">The reference to be saved.</param>
    </member>
    <member name="P:Xtensive.Orm.Internals.Prefetch.SetNode.Top">
      <summary>
            Gets count of elements to be prefetched 0 means it should prefetch only Count. 
            <see langword="null" /> means it should prefetch all elements.
            </summary>
      <value>The top.</value>
    </member>
    <member name="T:Xtensive.Orm.Domain">
      <summary>
            Storage access point.
            </summary>
      <sample>
        <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Domain sample">
        </code>
      </sample>
    </member>
    <member name="M:Xtensive.Orm.Domain.Demand">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain" /> of the current <see cref="T:Xtensive.Orm.Session" />, or throws <see cref="T:System.InvalidOperationException" />, 
            if active <see cref="T:Xtensive.Orm.Session" /> is not found.
            </summary>
      <returns>Current domain.</returns>
      <exception cref="T:System.InvalidOperationException">Current session is <see langword="null" />.</exception>
      <seealso cref="M:Xtensive.Orm.Session.Demand">Session.Current property</seealso>
    </member>
    <member name="M:Xtensive.Orm.Domain.OpenSession">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with default <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = Domain.OpenSession()) {
            // work with persistent objects here.
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="M:Xtensive.Orm.Domain.OpenSession(Xtensive.Orm.Configuration.SessionType)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> of specified <see cref="T:Xtensive.Orm.Configuration.SessionType" />.
            </summary>
      <param name="type">The type of session.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = domain.OpenSession(sessionType)) {
            // work with persistent objects here.
            }
            </code>
      </sample>
    </member>
    <member name="M:Xtensive.Orm.Domain.OpenSession(Xtensive.Orm.Configuration.SessionConfiguration)">
      <summary>
            Opens new <see cref="T:Xtensive.Orm.Session" /> with specified <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" />.
            </summary>
      <param name="configuration">The session configuration.</param>
      <returns>
            New <see cref="T:Xtensive.Orm.Session" /> object.
            </returns>
      <sample>
        <code>
            using (var session = domain.OpenSession(configuration)) {
            // work with persistent objects here
            }
            </code>
      </sample>
      <seealso cref="T:Xtensive.Orm.Session" />
    </member>
    <member name="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)">
      <summary>
            Builds the new <see cref="T:Xtensive.Orm.Domain" /> according to the specified <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" />.
            </summary>
      <param name="configuration">The configuration of domain to build.</param>
      <returns>Newly built <see cref="T:Xtensive.Orm.Domain" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Domain.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Domain.Current">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain" /> of the current <see cref="T:Xtensive.Orm.Session" />. 
            </summary>
      <seealso cref="P:Xtensive.Orm.Session.Current" />
      <seealso cref="M:Xtensive.Orm.Domain.Demand" />
    </member>
    <member name="P:Xtensive.Orm.Domain.Configuration">
      <summary>
            Gets the domain configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.TypeLevelCaches">
      <summary>
            Gets the dictionary providing cached type information.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.RecordSetReader">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Domain.RecordSetReader" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.PrefetchActionMap">
      <summary>
            Gets the prefetch action map.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.Model">
      <summary>
            Gets the domain model.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.StorageProviderInfo">
      <summary>
            Gets the information about provider's capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.Services">
      <summary>
            Gets the domain-level service container.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.Schema">
      <summary>
            Gets the storage schema.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.ExtractedSchema">
      <summary>
            Gets the extracted storage schema.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.TemporaryData">
      <summary>
            Gets the domain-level temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Domain.IsDebugEventLoggingEnabled">
      <summary>
            Indicates whether debug event logging is enabled.
            </summary>
      <remarks>
            Caches <see cref="M:Xtensive.Diagnostics.ILogBase.IsLogged(Xtensive.Diagnostics.LogEventTypes)" /> method result for <see cref="F:Xtensive.Diagnostics.LogEventTypes.Debug" /> event.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Domain.Extensions">
      <inheritdoc />
    </member>
    <member name="E:Xtensive.Orm.Domain.SessionOpen">
      <summary>
            Occurs when new <see cref="T:Xtensive.Orm.Session" /> is open and activated.
            </summary>
      <seealso cref="M:Xtensive.Orm.Session.Open(Xtensive.Orm.Domain)" />
    </member>
    <member name="E:Xtensive.Orm.Domain.Disposing">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Domain" /> is about to be disposed.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.DomainBound">
      <summary>
            Base class for all objects that are bound to the <see cref="P:Xtensive.Orm.DomainBound.Domain" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.DomainBound.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.DomainBound.#ctor(Xtensive.Orm.Domain)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="domain">
        <see cref="T:Xtensive.Orm.Domain" />, to which current instance 
            is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Xtensive.Orm.DomainBound.Domain">
      <summary>
            Gets <see cref="P:Xtensive.Orm.DomainBound.Domain" /> to which current instance is bound.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TypeReference">
      <summary>
            Reference to <see cref="T:Xtensive.Orm.Model.TypeInfo" /> with the specified degree of accuracy.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TypeReference.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.TypeReferenceAccuracy)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The referenced type.</param>
      <param name="accuracy">The type reference accuracy.</param>
    </member>
    <member name="P:Xtensive.Orm.TypeReference.Type">
      <summary>
            Gets or sets the referenced type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TypeReference.Accuracy">
      <summary>
            Gets or sets the type reference accuracy.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IEntity">
      <summary>
            Persistent entity contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IEntity.Remove">
      <summary>
            Removes the instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IEntity.RemoveLater">
      <summary>
            Registers the instance in the removal queue.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IEntity.Lock(Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
            Locks this instance in the storage.
            </summary>
      <param name="lockMode">The lock mode.</param>
      <param name="lockBehavior">The lock behavior.</param>
    </member>
    <member name="M:Xtensive.Orm.IEntity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)">
      <summary>
            Identifies the entity by identifier of specified type.
            This identifier is used by <see cref="N:Xtensive.Orm.Operations" /> framework
            to bind it with the identical entity while replaying the operation.
            </summary>
      <param name="identifierType">Type of the identifier.</param>
    </member>
    <member name="M:Xtensive.Orm.IEntity.IdentifyAs(System.String)">
      <summary>
            Identifies the entity by specified identifier.
            This identifier is used by <see cref="N:Xtensive.Orm.Operations" /> framework
            to bind it with the identical entity while replaying the operation.
            </summary>
      <param name="identifier">The entity identifier.
            <see langword="null" /> indicates no identifier must be associated with the entity.</param>
    </member>
    <member name="P:Xtensive.Orm.IEntity.Key">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.IEntity.Key" /> of the <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IEntity.TypeId">
      <summary>
            Gets the type id.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IEntity.TypeInfo">
      <summary>
            Gets <see cref="T:Xtensive.Orm.Model.TypeInfo" /> object describing <see cref="T:Xtensive.Orm.Entity" /> structure.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IEntity.VersionInfo">
      <summary>
            Gets <see cref="P:Xtensive.Orm.IEntity.VersionInfo" /> object describing 
            current version of the <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IEntity.PersistenceState">
      <summary>
            Gets persistence state of the entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IEntity.Item(System.String)">
      <summary>
            Gets or sets the value of the field with specified name.
            </summary>
      <value>Field value.</value>
    </member>
    <member name="P:Xtensive.Orm.IEntity.IsRemoved">
      <summary>
            Gets a value indicating whether this entity is removed.
            </summary>
      <seealso cref="M:Xtensive.Orm.IEntity.Remove" />
    </member>
    <member name="T:Xtensive.Orm.QueryableExtensions">
      <summary>
            Extends LINQ methods for <see cref="N:Xtensive.Orm.Linq" /> queries. 
            </summary>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.Count(System.Linq.IQueryable)">
      <summary>
            Returns the number of elements in <paramref name="source" /> sequence.
            </summary>
      <param name="source">The source sequence.</param>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>
            Version of <see cref="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" />, where <paramref name="count" /> is specified as 
            <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <typeparam name="TSource">The type of the source element.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="count">The count of items to take.</param>
      <returns>The same result as its original version.</returns>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>
            Version of <see cref="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" />, where <paramref name="count" /> is specified as 
            <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <typeparam name="TSource">The type of the source element.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="count">The count of items to skip.</param>
      <returns>The same result as its original version.</returns>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.ElementAt``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>
            Version of <see cref="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)" />, where <paramref name="index" /> is specified as
            <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <typeparam name="TSource">The type of the source element.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="index">The index of element to take.</param>
      <returns>The same result as its original version.</returns>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>
            Version of <see cref="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)" />, where <paramref name="index" /> is specified as
            <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <typeparam name="TSource">The type of the source element.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="index">The index of element to take.</param>
      <returns>The same result as its original version.</returns>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.Lock``1(System.Linq.IQueryable{``0},Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
            Applies locks to the specified source queryable.
            </summary>
      <typeparam name="TSource">The type of the source element.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="lockMode">The lock mode.</param>
      <param name="lockBehavior">The lock behavior.</param>
      <returns>The same sequence, but with "apply lock" hint.</returns>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,``0[])">
      <summary>
            Checks if <paramref name="source" /> value is contained in the specified list of values.
            </summary>
      <typeparam name="T">Type of value to check.</typeparam>
      <param name="source">Source value.</param>
      <param name="values">List of values to check.</param>
      <returns>
        <see langword="True" /> if <paramref name="source" /> contains in the list of values, otherwise returns <see langword="false" />.</returns>
      <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains" /> method.</remarks>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Checks if <paramref name="source" /> value is contained in the specified list of values.
            </summary>
      <typeparam name="T">Type of value to check.</typeparam>
      <param name="source">Source value.</param>
      <param name="values">List of values to check.</param>
      <returns>
        <see langword="True" /> if <paramref name="source" /> contains in the list of values, otherwise returns <see langword="false" />.</returns>
      <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains" /> method.</remarks>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,Xtensive.Storage.Rse.IncludeAlgorithm,``0[])">
      <summary>
            Checks if <paramref name="source" /> value is contained in the specified list of values.
            </summary>
      <typeparam name="T">Type of value to check.</typeparam>
      <param name="source">Source value.</param>
      <param name="algorithm">Translation algorithm.</param>
      <param name="values">List of values to check.</param>
      <returns>
        <see langword="True" /> if <paramref name="source" /> contains in the list of values, otherwise returns <see langword="false" />.</returns>
      <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains" /> method.</remarks>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.In``1(``0,Xtensive.Storage.Rse.IncludeAlgorithm,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Checks if <paramref name="source" /> value is contained in the specified list of values.
            </summary>
      <typeparam name="T">Type of value to check.</typeparam>
      <param name="source">Source value.</param>
      <param name="algorithm">Translation algorithm.</param>
      <param name="values">List of values to check.</param>
      <returns>
        <see langword="True" /> if <paramref name="source" /> contains in the list of values, otherwise returns <see langword="false" />.</returns>
      <remarks>LINQ translator detects this method and converts it to appropriate <see langword="Contains" /> method.</remarks>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.LeftJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>
            Correlates the elements of two sequences based on matching keys. 
            </summary>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">One of provided arguments is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Queryable is not a <see cref="N:Xtensive.Orm.Linq" /> query.</exception>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Removes the specified entities using <see cref="M:Xtensive.Orm.Session.Remove``1(System.Collections.Generic.IEnumerable{``0})" /> method of <see cref="T:Xtensive.Orm.Session" />. 
            </summary>
      <typeparam name="T">Entity type.</typeparam>
      <param name="entities">The entities.</param>
      <exception cref="T:Xtensive.Orm.ReferentialIntegrityException">
            Entity is associated with another entity with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny" /> on-remove action.
            </exception>
    </member>
    <member name="M:Xtensive.Orm.QueryableExtensions.CallTranslator``1(System.Reflection.MethodInfo,System.Linq.IQueryable,System.Linq.Expressions.Expression,System.String)">
      <exception cref="T:System.NotSupportedException">Queryable is not a <see cref="N:Xtensive.Orm.Linq" /> query.</exception>
    </member>
    <member name="T:Xtensive.Orm.EntitySetBase">
      <summary>
            Abstract base for <see cref="T:Xtensive.Orm.EntitySet`1" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Prefetch">
      <summary>
            Prefetches the entity set completely - i.e. ensures it is fully loaded.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Prefetch(System.Nullable{System.Int32})">
      <summary>
            Prefetches the entity set - i.e. ensures it is either completely or partially loaded.
            </summary>
      <param name="maxItemCount">The maximal count of items to try to load.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Contains(Xtensive.Orm.Key)">
      <summary>
            Determines whether <see cref="T:Xtensive.Orm.EntitySetBase" /> contains the specified <see cref="T:Xtensive.Orm.Key" />.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if <see cref="T:Xtensive.Orm.EntitySetBase" /> contains the specified <see cref="T:Xtensive.Orm.Key" />; otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">Entity type is not supported.</exception>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.GetItemCountQueryDelegate(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets a delegate which returns an <see cref="T:System.Linq.IQueryable`1" />
            returning count of items associated with this instance.
            </summary>
      <param name="field">The field containing <see cref="T:Xtensive.Orm.EntitySet`1" />.</param>
      <returns>
            The created delegate which returns an <see cref="T:System.Linq.IQueryable`1" />
            returning count of items associated with this instance.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.EnsureOwnerIsNotRemoved">
      <summary>
            Ensures the owner is not removed.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.NotifyPropertyChanged(System.String)">
      <summary>
            Raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
      <param name="propertyName">Name of the changed property.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.NotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,Xtensive.Orm.Entity,System.Nullable{System.Int32})">
      <summary>
            Raises <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event.
            </summary>
      <param name="action">The actual action.</param>
      <param name="item">The item, that was participating in the specified action.</param>
      <param name="index">The index on the item, if available.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.GetSubscription(System.Object)">
      <summary>
            Gets the subscription for the specified event key.
            </summary>
      <param name="eventKey">The event key.</param>
      <returns>Event subscription (delegate) for the specified event key.</returns>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnInitialize">
      <summary>
            Called when entity set is initialized.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnAdding(Xtensive.Orm.Entity)">
      <summary>
            Called when item is adding to entity set.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnAdd(Xtensive.Orm.Entity)">
      <summary>
            Called when item is added to entity set.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnRemoving(Xtensive.Orm.Entity)">
      <summary>
            Called when item is removing from entity set.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnRemove(Xtensive.Orm.Entity)">
      <summary>
            Called when item is removed from entity set.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnClearing">
      <summary>
            Called when entity set is clearing.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnClear">
      <summary>
            Called when entity set is cleared.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.OnValidate">
      <summary>
            Called when entity set should be validated.
            </summary>
      <remarks>
            Override this method to perform custom entity set validation.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Clear">
      <summary>
            Clears this collection.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Initialize(System.Type)">
      <summary>
            Performs initialization (see <see cref="M:Xtensive.Orm.EntitySetBase.Initialize" />) of the <see cref="T:Xtensive.Orm.EntitySetBase" /> 
            if type of <see langword="this" /> is the same as <paramref name="ctorType" />.
            Invoked by <see cref="T:Xtensive.Aspects.InitializableAttribute" /> aspect in the epilogue of any 
            constructor of this type and its ancestors.
            </summary>
      <param name="ctorType">The type, which constructor has invoked this method.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.Initialize">
      <summary>
            Performs initialization of the <see cref="T:Xtensive.Orm.EntitySetBase" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="owner">Persistent this entity set belongs to.</param>
      <param name="field">Field corresponds to this entity set.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySetBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySetBase.Owner">
      <summary>
            Gets the owner of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntitySetBase.Field">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.EntitySetBase.Entities">
      <summary>
            Gets the entities contained in this <see cref="T:Xtensive.Orm.EntitySetBase" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntitySetBase.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Xtensive.Orm.EntitySetBase" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntitySetBase.CanBeValidated">
      <summary>
            Gets a value indicating whether validation can be performed for this entity.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.EntitySetBase.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="E:Xtensive.Orm.EntitySetBase.CollectionChanged">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.PrefetchExtensions">
      <summary>
            Contains extension methods allowing prefetch fields of an <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Registers fields specified by <paramref name="expression" /> for prefetch.
            </summary>
      <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
      <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
      <param name="source">The source query.</param>
      <param name="expression">The expression specifying a field to be prefetched.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of source items.</returns>
    </member>
    <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Registers fields specified by <paramref name="expression" /> for prefetch.
            </summary>
      <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
      <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="expression">The expression specifying a field to be prefetched.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of source items.</returns>
    </member>
    <member name="M:Xtensive.Orm.PrefetchExtensions.Prefetch``2(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Creates <see cref="T:Xtensive.Orm.Internals.Prefetch.PrefetchFacade`1" /> for the specified <paramref name="source" /> and
            registers the prefetch of the field specified by <paramref name="expression" />.
            </summary>
      <typeparam name="TElement">The type of the element of the source sequence.</typeparam>
      <typeparam name="TFieldValue">The type of the field's value to be prefetched.</typeparam>
      <param name="source">The source sequence.</param>
      <param name="session">The session.</param>
      <param name="expression">The expression specifying a field to be prefetched.</param>
      <returns>A newly created <see cref="T:Xtensive.Orm.Internals.Prefetch.PrefetchFacade`1" />.</returns>
    </member>
    <member name="T:Xtensive.Orm.Model.IndexInfo">
      <summary>
            Describes a single index in terms of storage.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfo.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="declaringType">The <see cref="T:Xtensive.Orm.Model.TypeInfo" /> that declares this instance.</param>
      <param name="indexAttributes">
        <see cref="T:Xtensive.Orm.Model.IndexAttributes" /> attributes for this instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes,Xtensive.Orm.Model.IndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="reflectedType">Reflected type.</param>
      <param name="ancestorIndex">The ancestors index.</param>
      <param name="indexAttributes">
        <see cref="T:Xtensive.Orm.Model.IndexAttributes" /> attributes for this instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.IndexAttributes,Xtensive.Orm.Model.IndexInfo,Xtensive.Orm.Model.IndexInfo[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="reflectedType">Reflected type.</param>
      <param name="indexAttributes">The index attributes.</param>
      <param name="baseIndex">Base index.</param>
      <param name="baseIndexes">The base indexes.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.ColumnIndexMap">
      <summary>
            Gets or sets the column index map.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.Columns">
      <summary>
            Gets a collection of all the columns that are included into the index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.KeyColumns">
      <summary>
            Gets a collection of columns that are included into the index as index key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.ValueColumns">
      <summary>
            Gets a collection of non key columns that are included into the index as index value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IncludedColumns">
      <summary>
            Gets a Collection of columns that are included into the index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor containing all the <see cref="P:Xtensive.Orm.Model.IndexInfo.Columns" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.KeyTupleDescriptor">
      <summary>
            Gets the tuple descriptor containing just <see cref="P:Xtensive.Orm.Model.IndexInfo.KeyColumns" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.UnderlyingIndexes">
      <summary>
            Gets the underlying indexes for this instance. 
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.DeclaringType">
      <summary>
            Gets the type that declares this member.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.ReflectedType">
      <summary>
            Gets the type that was used to obtain this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.DeclaringIndex">
      <summary>
            Gets the declaring index for this index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.FilterByTypes">
      <summary>
            Gets the types for <see cref="F:Xtensive.Orm.Model.IndexAttributes.Filtered" /> index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.SelectColumns">
      <summary>
            Gets the column indexes for <see cref="F:Xtensive.Orm.Model.IndexAttributes.View" /> index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsPrimary">
      <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsTyped">
      <summary>
            Gets or sets a value indicating whether this instance is typed index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsUnique">
      <summary>
            Gets or sets a value indicating whether this instance is unique index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsAbstract">
      <summary>
            Gets or sets a value indicating whether this instance is abstract.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.Attributes">
      <summary>
            Gets or sets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsVirtual">
      <summary>
            Gets or sets a value indicating whether this instance is virtual index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfo.IsSecondary">
      <summary>
            Gets a value indicating whether this instance is secondary index.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnInfo">
      <summary>
            Describes a single column.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.GetComparer(System.Globalization.CultureInfo)">
      <summary>
            Gets the <see cref="T:System.Collections.IComparer" /> instance.
            </summary>
      <param name="cultureInfo">The <see cref="P:Xtensive.Orm.Model.ColumnInfo.CultureInfo" /> object.</param>
      <returns>The instance in <see cref="T:System.Collections.IComparer" /> to compare values of type <see cref="P:Xtensive.Orm.Model.ColumnInfo.ValueType" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.Equals(Xtensive.Orm.Model.ColumnInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.Clone">
      <summary>
            Clones this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.#ctor(Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">The <see cref="P:Xtensive.Orm.Model.ColumnInfo.Field" /> property value.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfo.#ctor(Xtensive.Orm.Model.FieldInfo,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="field">
        <see cref="P:Xtensive.Orm.Model.ColumnInfo.Field" /> property value.</param>
      <param name="valueType">
        <see cref="P:Xtensive.Orm.Model.ColumnInfo.ValueType" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsSystem">
      <summary>
            Gets or sets a value indicating whether this column is system.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsDeclared">
      <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsInherited">
      <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsPrimaryKey">
      <summary>
            Gets a value indicating whether this column is contained by primary key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsNullable">
      <summary>
            Gets or sets a value indicating whether column is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.IsLazyLoad">
      <summary>
            Gets or sets a value indicating whether  property will be loaded on demand.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Field">
      <summary>
            Gets or sets corresponding field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.ValueType">
      <summary>
            Specifies the type that should be used to store the
            value of the field (available for properties that can be mapped
            to multiple data types).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Length">
      <summary>
            Gets or sets the length of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Scale">
      <summary>
            Gets or sets the scale of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Precision">
      <summary>
            Gets or sets the precision of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.DefaultValue">
      <summary>
            Gets or sets the default value for this field.
            <see langword="null" /> indicates default value is provided automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.CultureInfo">
      <summary>
            Gets or sets column <see cref="P:Xtensive.Orm.Model.ColumnInfo.CultureInfo" /> info.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfo.Indexes">
      <summary>
            Gets or the indexes this field is included to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.FieldMap">
      <summary>
            Maps type fields to interface fields and vice versa.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeIndexInfoCollection">
      <summary>
            A collection of indexes that belongs to a particular <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.GetIndexesContainingAllData">
      <summary>
            Gets the minimal set of indexes containing all data for the type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeIndexInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Model.TypeIndexInfoCollection.PrimaryIndex">
      <summary>
            Gets the primary index in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeIndexInfoCollection.RealPrimaryIndexes">
      <summary>
            Gets the list of real primary index in this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnAttributes">
      <summary>
            Column attributes.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnGroup">
      <summary>
            Describes a group of columns that belongs to the specified <see cref="P:Xtensive.Orm.Model.ColumnGroup.TypeInfoRef" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnGroup.#ctor(Xtensive.Orm.Model.TypeInfoRef,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="keys">The keys.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnGroup.#ctor(Xtensive.Orm.Model.TypeInfoRef,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="keys">The keys.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnGroup.TypeInfoRef">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.TypeInfoRef" /> pointing to <see cref="T:Xtensive.Orm.Model.TypeInfo" />
            this column group belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnGroup.Keys">
      <summary>
            Gets the indexes of key columns.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnGroup.Columns">
      <summary>
            Gets the indexes of all columns.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.TypeInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Implicit(Xtensive.Orm.Model.TypeInfo)~Xtensive.Orm.Model.TypeInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Inequality(Xtensive.Orm.Model.TypeInfoRef,Xtensive.Orm.Model.TypeInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.op_Equality(Xtensive.Orm.Model.TypeInfoRef,Xtensive.Orm.Model.TypeInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.Equals(Xtensive.Orm.Model.TypeInfoRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.TypeInfoRef.#ctor(Xtensive.Orm.Model.TypeInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeInfo">
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.TypeInfoRef.TypeName">
      <summary>
            Name of the type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnIndexMap">
      <summary>
            A map of useful column indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnIndexMap.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="system">The system columns.</param>
      <param name="lazyLoad">The regular columns.</param>
      <param name="regular">The lazy load columns.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnIndexMap.System">
      <summary>
            Gets or sets positions of system columns within <see cref="T:Xtensive.Orm.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnIndexMap.LazyLoad">
      <summary>
            Gets or sets positions of lazy load columns within <see cref="T:Xtensive.Orm.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnIndexMap.Regular">
      <summary>
            Gets or sets positions of regular columns (not system and not lazy load) within <see cref="T:Xtensive.Orm.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ComparerProvider">
      <summary>
            Provides comparers for primitive types and strings.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ComparerProvider.GetComparer(System.Type,System.Globalization.CultureInfo)">
      <summary>
            Gets the comparer according to type and culture.
            </summary>
      <param name="type">The type.</param>
      <param name="cultureInfo">The culture info.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Orm.Model.ColumnInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Implicit(Xtensive.Orm.Model.ColumnInfo)~Xtensive.Orm.Model.ColumnInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Inequality(Xtensive.Orm.Model.ColumnInfoRef,Xtensive.Orm.Model.ColumnInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.op_Equality(Xtensive.Orm.Model.ColumnInfoRef,Xtensive.Orm.Model.ColumnInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Equals(Xtensive.Orm.Model.ColumnInfoRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.#ctor(Xtensive.Orm.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="columnInfo">The <see cref="T:Xtensive.Orm.Model.ColumnInfo" /> instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.ColumnInfoRef.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeName">Column type name.</param>
      <param name="columnName">Column name.</param>
      <param name="cultureInfo">The culture info.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfoRef.TypeName">
      <summary>
            Gets type name of reflecting <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfoRef.FieldName">
      <summary>
            Gets name of the <see cref="T:Xtensive.Orm.Model.FieldInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfoRef.ColumnName">
      <summary>
            Gets name of the <see cref="T:Xtensive.Orm.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.ColumnInfoRef.CultureInfo">
      <summary>
            Gets <see cref="P:Xtensive.Orm.Model.ColumnInfoRef.CultureInfo" /> info of the <see cref="T:Xtensive.Orm.Model.ColumnInfo" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.IndexInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.IndexInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoCollection.Find(Xtensive.Orm.Model.IndexAttributes)">
      <summary>
            Finds <see cref="T:Xtensive.Orm.Model.IndexInfo" /> objects by the specified criteria.
            </summary>
      <param name="criteria">The criteria.</param>
      <returns>A sequence of found objects.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoCollection.Find(Xtensive.Orm.Model.IndexAttributes,Xtensive.Core.MatchType)">
      <summary>
            Finds <see cref="T:Xtensive.Orm.Model.IndexInfo" /> objects by the specified criteria and match type.
            </summary>
      <param name="criteria">The criteria.</param>
      <param name="matchType">Type of the match.</param>
      <returns>A sequence of found objects.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.FullTextIndexInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.TryGetValue(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FullTextIndexInfo@)">
      <summary>
            Tries get <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo" /> by provided <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
      <param name="typeInfo">The type info.</param>
      <param name="fullTextIndexInfo">The full text index info.</param>
      <returns>
        <see langword="true" /> when the full-text index is found; otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.Add(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.FullTextIndexInfo)">
      <summary>
            Registers specified full-text index by type key.
            </summary>
      <param name="typeInfo">The type info.</param>
      <param name="fullTextIndexInfo">The full text index info.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextIndexInfoCollection.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Model.FullTextIndexInfoCollection.Item(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.FullTextIndexInfo" /> by the specified type.
            </summary>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Index is not found.</exception>
    </member>
    <member name="T:Xtensive.Orm.Model.HierarchyInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.HierarchyInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.HierarchyInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.HierarchyInfo">
      <summary>
            Describes a single persistent type hierarchy.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.HierarchyInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.HierarchyInfo.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.HierarchyInfo.#ctor(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.KeyInfo,Xtensive.Orm.Model.InheritanceSchema,Xtensive.Orm.Model.TypeDiscriminatorMap)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="root">The hierarchy root.</param>
      <param name="key">The key info.</param>
      <param name="inheritanceSchema">The inheritance schema.</param>
      <param name="typeDiscriminatorMap">The type discriminator map.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.HierarchyInfo.Root">
      <summary>
            Gets the root of the hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.HierarchyInfo.InheritanceSchema">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.InheritanceSchema" /> for this hierarchy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.HierarchyInfo.Types">
      <summary>
            Gets the types of the current <see cref="T:Xtensive.Orm.Model.HierarchyInfo" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.HierarchyInfo.Key">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Key" /> for this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.HierarchyInfo.TypeDiscriminatorMap">
      <summary>
            Gets the type discriminator.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.DomainModelExtensions">
      <summary>
            Extension methods related to <see cref="T:Xtensive.Orm.Model.DomainModel" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.DomainModelExtensions.ToStoredModel(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Converts speicified <see cref="T:Xtensive.Orm.Model.DomainModel" /> to corresponding <see cref="T:Xtensive.Orm.Model.Stored.StoredDomainModel" />.
            </summary>
      <param name="model">The model to convert.</param>
      <returns>A result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.DomainModelExtensions.Reorder(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.AssociationInfo})">
      <summary>
            Reorders the specified sequence of <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> using <see cref="T:Xtensive.Sorting.TopologicalSorter" />.
            </summary>
      <param name="origin">The origin.</param>
      <returns>A reordered sequence.</returns>
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredDomainModel">
      <summary>
            An xml serializable representation of <see cref="T:Xtensive.Orm.Model.DomainModel" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Types">
      <summary>
        <see cref="P:Xtensive.Orm.Model.DomainModel.Types" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Associations">
      <summary>
        <see cref="P:Xtensive.Orm.Model.DomainModel.Associations" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredDomainModel.Hierarchies">
      <summary>
        <see cref="P:Xtensive.Orm.Model.DomainModel.Hierarchies" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Stored.StoredDomainModel.UpdateReferences">
      <summary>
            Updates all references within this model.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.FieldAttributes">
      <summary>
            Field attributes.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.MappingNode">
      <summary>
            A <see cref="T:Xtensive.Orm.Model.Node" /> that can be mapped to existing schema node.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.MappingNode.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.MappingNode.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.MappingNode.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.MappingNode.MappingName">
      <summary>
            Gets or sets mapping name of this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.FieldInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.FieldInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.FieldInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Implicit(Xtensive.Orm.Model.FieldInfo)~Xtensive.Orm.Model.FieldInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Inequality(Xtensive.Orm.Model.FieldInfoRef,Xtensive.Orm.Model.FieldInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.op_Equality(Xtensive.Orm.Model.FieldInfoRef,Xtensive.Orm.Model.FieldInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.Equals(Xtensive.Orm.Model.FieldInfoRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FieldInfoRef.#ctor(Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="fieldInfo">
        <see cref="T:Xtensive.Orm.Model.FieldInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfoRef.TypeRef">
      <summary>
            Name of the type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FieldInfoRef.FieldName">
      <summary>
            Name of the field.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.FullTextColumnInfo">
      <summary>
            Describes single column in full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextColumnInfo.#ctor(Xtensive.Orm.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.FullTextColumnInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Model.FullTextColumnInfo" /> objects.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.Insert(System.Int32,Xtensive.Orm.Model.FullTextColumnInfo)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.RemoveAt(System.Int32)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextColumnInfoCollection.#ctor(Xtensive.Orm.Model.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.FullTextIndexInfo">
      <summary>
            Describes a single full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextIndexInfo.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.FullTextIndexInfo.#ctor(Xtensive.Orm.Model.IndexInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FullTextIndexInfo.PrimaryIndex">
      <summary>
            Gets the primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.FullTextIndexInfo.Columns">
      <summary>
            Gets the full-text index columns.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.KeyInfo">
      <summary>
            Describes key for a particular <see cref="F:Xtensive.Orm.Model.KeyInfo.hierarchy" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.KeyInfo.UpdateState(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.KeyInfo.Lock(System.Boolean)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Hierarchy must be set before locking this instance.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.KeyInfo.#ctor(Xtensive.Collections.ReadOnlyList{Xtensive.Orm.Model.FieldInfo},Xtensive.Collections.ReadOnlyList{Xtensive.Orm.Model.ColumnInfo},System.Type,System.String,Xtensive.Tuples.TupleDescriptor,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="fields">The key fields.</param>
      <param name="columns">The key columns.</param>
      <param name="generatorType">Type of the key generator.</param>
      <param name="generatorName">Name of the key generator (<see langword="null" /> means unnamed).</param>
      <param name="tupleDescriptor">Key tuple descriptor.</param>
      <param name="typeIdColumnIndex">Index of the type id column.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.Hierarchy">
      <summary>
            Gets the hierarchy this key belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.Fields">
      <summary>
            Gets the fields forming the key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.Columns">
      <summary>
            Gets the columns forming the key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.GeneratorType">
      <summary>
            Gets the key generator type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.GeneratorName">
      <summary>
            Gets the key generator name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.TupleDescriptor">
      <summary>
            Gets the tuple descriptor of the key.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.TypeIdColumnIndex">
      <summary>
            Gets the index of the column related to field with <see cref="P:Xtensive.Orm.Model.FieldInfo.IsTypeId" />==<see langword="true" />.
            If there is no such field, returns <see langword="-1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.ContainsForeignKeys">
      <summary>
            Gets or sets a value indicating whether key contains foreign keys.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.Sequence">
      <summary>
            Gets the information on associated sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.IsFirstAmongSimilarKeys">
      <summary>
            Gets the value indicating this key is the first one built among similar keys.
            All similar keys share the same <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier" /> value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier">
      <summary>
            Gets the equality identifier for this key.
            <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier" /> is used as an additional value to compare
            when actual keys are compared for equality. 
            So two keys are equal when their fields are equal and 
            they share the same <see cref="P:Xtensive.Orm.Model.KeyInfo.EqualityIdentifier" /> value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeDiscriminatorMap">
      <summary>
            Type discriminator map.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.TypeDiscriminatorMap.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.IndexAttributes">
      <summary>
            Index attributes.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.IndexInfoRef">
      <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Orm.Model.IndexInfo" /> instance.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.Resolve(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Resolves this instance to <see cref="T:Xtensive.Orm.Model.IndexInfo" /> object within specified <paramref name="model" />.
            </summary>
      <param name="model">Domain model.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Implicit(Xtensive.Orm.Model.IndexInfo)~Xtensive.Orm.Model.IndexInfoRef">
      <summary>
            Creates reference for <see cref="T:Xtensive.Orm.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.Equals(Xtensive.Orm.Model.IndexInfoRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Equality(Xtensive.Orm.Model.IndexInfoRef,Xtensive.Orm.Model.IndexInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.op_Inequality(Xtensive.Orm.Model.IndexInfoRef,Xtensive.Orm.Model.IndexInfoRef)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.IndexInfoRef.#ctor(Xtensive.Orm.Model.IndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="indexInfo">
        <see cref="T:Xtensive.Orm.Model.IndexInfo" /> object to make reference for.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfoRef.IndexName">
      <summary>
            Name of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.IndexInfoRef.TypeName">
      <summary>
            Name of the reflecting type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.TypeAttributes">
      <summary>
            Type attributes.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Entity">
      <summary>
            Type is entity.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Structure">
      <summary>
            Type is structure.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Interface">
      <summary>
            Type is persistent interface.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Abstract">
      <summary>
            Type is abstract.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Materialized">
      <summary>
            Type is materialized interface.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.System">
      <summary>
            Type is system.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.Auxiliary">
      <summary>
            Type is auxilary (entity set item).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.GenericTypeDefinition">
      <summary>
            Type is generic type definition.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.TypeAttributes.AutoGenericInstance">
      <summary>
            Type is automatically registered generic type instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.KeyField">
      <summary>
            Describes a field that is a part of a primary key.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.KeyField.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.KeyField.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Model.KeyField.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Orm.Model.KeyField.#ctor(System.String,Xtensive.Core.Direction)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Model.KeyField" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="direction">The direction.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.KeyField.Direction">
      <summary>
            Gets or sets the direction.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.SequenceInfo">
      <summary>
            Provides information about sequence associated with <see cref="T:Xtensive.Orm.Model.KeyInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.SequenceInfo.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The sequence name.</param>
    </member>
    <member name="P:Xtensive.Orm.Model.SequenceInfo.Seed">
      <summary>
            Gets or sets the seed value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.SequenceInfo.Increment">
      <summary>
            Gets or sets the increment value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.ModelVisitor`1">
      <summary>
            An abstract base class for all <see cref="T:Xtensive.Orm.Model.DomainModel" /> visitors.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.Visit(Xtensive.Orm.Model.Node)">
      <summary>
            Visits the specified node.
            </summary>
      <param name="node">The node.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitKeyField(Xtensive.Orm.Model.KeyField)">
      <summary>
            Visits key field.
            </summary>
      <param name="keyField">The key field.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitColumnInfo(Xtensive.Orm.Model.ColumnInfo)">
      <summary>
            Visits a column.
            </summary>
      <param name="column">The column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitFieldInfo(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Visits a field.
            </summary>
      <param name="field">The field.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitKeyInfo(Xtensive.Orm.Model.KeyInfo)">
      <summary>
            Visits a <see cref="T:Xtensive.Orm.Model.KeyInfo" /> node.
            </summary>
      <param name="keyInfo">The key provider.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitSequenceInfo(Xtensive.Orm.Model.SequenceInfo)">
      <summary>
            Visits a <see cref="T:Xtensive.Orm.Model.SequenceInfo" /> node.
            </summary>
      <param name="sequenceInfo">The sequence info.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitIndexInfo(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Visits an index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitHierarchyInfo(Xtensive.Orm.Model.HierarchyInfo)">
      <summary>
            Visits a hierarchy.
            </summary>
      <param name="hierarchy">The hierarchy.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitTypeInfo(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Visits a type.
            </summary>
      <param name="type">The type.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitAssociationInfo(Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Visits an association.
            </summary>
      <param name="association">The association.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitDomainModel(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Visits domain model.
            </summary>
      <param name="domainModel">The domain model.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.ModelVisitor`1.VisitFullTextIndexInfo(Xtensive.Orm.Model.FullTextIndexInfo)">
      <summary>
            Visits the full text index info.
            </summary>
      <param name="fullTextIndex">Full index of the text.</param>
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredTypeInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.TypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.UnderlyingType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.UnderlyingType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.TypeId">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.TypeId" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.HierarchyRoot">
      <summary>
            If not <see langword="null" />, indicates this instance is a hierarchy root,
            and value of this property specifies its <see cref="T:Xtensive.Orm.Model.InheritanceSchema" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Hierarchy">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.Hierarchy" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Fields">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.Fields" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllFields">
      <summary>
            Contains all fields inherited by this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />
            plus all fields in declared in this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Associations">
      <summary>
            Associations outgoing from this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Ancestor">
      <summary>
            Gets the ancestors of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AncestorName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Ancestor" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllAncestors">
      <summary>
            Gets both direct and indirect ancestors of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Descendants">
      <summary>
            Gets direct descendants of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllDescendants">
      <summary>
            Gets both direct and indirect descendants of this <see cref="T:Xtensive.Orm.Model.Stored.StoredTypeInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsEntity">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.IsEntity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsAbstract">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.IsAbstract" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsInterface">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.IsInterface" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsStructure">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.IsStructure" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsSystem">
      <summary>
        <see cref="P:Xtensive.Orm.Model.TypeInfo.IsSystem" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.GetField(System.String)">
      <summary>
            Gets the field info by field name (possibly, dotted).
            </summary>
      <param name="fieldName">The field name.</param>
      <returns>Specified field info, if found;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.GetField(System.String,System.Boolean)">
      <summary>
            Gets the field info by field name (possibly, dotted).
            </summary>
      <param name="fieldName">The field name.</param>
      <param name="useAllFields">Search in <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.AllFields" /> rather then <see cref="F:Xtensive.Orm.Model.Stored.StoredTypeInfo.Fields" />.</param>
      <returns>
            Specified field info, if found;
            otherwise, <see langword="null" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Model.Stored.StoredTypeInfo.ToString">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.GenericTypeDefinition">
      <summary>
            Gets the name of the generic definition type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.GenericArguments">
      <summary>
            Gets the name of the generic argument type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsHierarchyRoot">
      <summary>
            Gets a value indicating whether this instance is hierarchy root.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredTypeInfo.IsGeneric">
      <summary>
            Gets a value indicating whether underlying type is generic.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredAssociationInfo">
      <summary>
            An xml serializable representation of <see cref="T:Xtensive.Orm.Model.AssociationInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingField">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.OwnerField" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingFieldName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencingField" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.TargetType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedTypeName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReferencedType" /></summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Multiplicity">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.Multiplicity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.MultiplicityName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Multiplicity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Reversed">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.Reversed" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ReversedName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.Reversed" /></summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.IsMaster">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.IsMaster" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.AssociationInfo.AuxiliaryType" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorTypeName">
      <summary>
            Name of <see cref="F:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ConnectorType" /></summary>
    </member>
    <member name="M:Xtensive.Orm.Model.Stored.StoredAssociationInfo.ToString">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredNode">
      <summary>
            A xml serializable representation of <see cref="F:Xtensive.Orm.Model.Stored.StoredNode.MappingName" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredNode.Name">
      <summary>
        <see cref="P:Xtensive.Orm.Model.Node.Name" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredNode.MappingName">
      <summary>
        <see cref="P:Xtensive.Orm.Model.MappingNode.MappingName" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredFieldInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.FieldInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.DeclaringType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.DeclaringType" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.PropertyName">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.UnderlyingProperty" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.OriginalName">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.OriginalName" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.ValueType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.ValueType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Parent">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.Parent" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Fields">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.Fields" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.Length">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.Length" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.ItemType">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.ItemType" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsSystem">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsSystem" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsTypeId">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsTypeId" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEnum">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEnum" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsPrimaryKey">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsPrimaryKey" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsExplicit">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsExplicit" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsInterfaceImplementation">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsInterfaceImplementation" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsPrimitive">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsPrimitive" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEntity">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEntity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsStructure">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsStructure" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsEntitySet">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsEntitySet" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsNullable">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsNullable" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsLazyLoad">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsLazyLoad" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredFieldInfo.PrimitiveFields">
      <summary>
            Gets the primitive fields.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Model.Stored.StoredFieldInfo.IsNested">
      <summary>
        <see cref="P:Xtensive.Orm.Model.FieldInfo.IsNested" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Model.Stored.StoredHierarchyInfo">
      <summary>
            A xml serializable representation of <see cref="T:Xtensive.Orm.Model.HierarchyInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.Root">
      <summary>
        <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Root" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.InheritanceSchema">
      <summary>
        <see cref="P:Xtensive.Orm.Model.HierarchyInfo.InheritanceSchema" />
      </summary>
    </member>
    <member name="F:Xtensive.Orm.Model.Stored.StoredHierarchyInfo.Types">
      <summary>
        <see cref="P:Xtensive.Orm.Model.HierarchyInfo.Types" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityEventArgs">
      <summary>
            Describes <see cref="P:Xtensive.Orm.EntityEventArgs.Entity" />-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityEventArgs.#ctor(Xtensive.Orm.Entity)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityEventArgs.Entity">
      <summary>
            Gets the entity to which this event is related.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityFieldEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityFieldEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
      <param name="field">The field.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldEventArgs.Field">
      <summary>
            Gets the field to which this event is related.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntitySetEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1" />-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetEventArgs.#ctor(Xtensive.Orm.EntitySetBase)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entitySet">The entity set.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySetEventArgs.EntitySet">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.EntitySetBase" /> to which this event is related.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntitySetActionCompletedEventArgs">
      <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1" /> item action completion.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetActionCompletedEventArgs.#ctor(Xtensive.Orm.EntitySetBase,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entitySet">The entity set.</param>
      <param name="exception">The <see cref="P:Xtensive.Orm.EntitySetActionCompletedEventArgs.Exception" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySetActionCompletedEventArgs.Exception">
      <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.SessionBound">
      <summary>
            Base class for any object that is bound to <see cref="P:Xtensive.Orm.SessionBound.Session" /> instance.
            Methods of descendants of this interface must be processed by PostSharp 
            to ensure their own <see cref="P:Xtensive.Orm.SessionBound.Session" /> is activated inside their method bodies, 
            and transaction is already opened there.
            </summary>
      <remarks>
            Only public and protected methods and properties are processed by
            <see cref="T:Xtensive.Orm.TransactionalTypeAttribute" /> aspect.
            To override the default behavior, use <see cref="T:Xtensive.Orm.TransactionalAttribute" /> and
            <see cref="T:Xtensive.Aspects.InfrastructureAttribute" />.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.SessionBound.EnsureTheSameSession(Xtensive.Orm.SessionBound)">
      <summary>
            Ensures <see cref="P:Xtensive.Orm.SessionBound.Session" /> of <paramref name="other" /> is the same 
            as <see cref="P:Xtensive.Orm.SessionBound.Session" /> of this instance.
            </summary>
      <param name="other">The <see cref="T:Xtensive.Orm.SessionBound" /> object to check the session of.</param>
      <exception cref="T:System.ArgumentException">Session of <paramref name="other" /><see cref="T:Xtensive.Orm.SessionBound" /> differs from this <see cref="P:Xtensive.Orm.SessionBound.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.SessionBound.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.SessionBound.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">
        <see cref="T:Xtensive.Orm.Session" />, to which current instance 
            is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="session" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Xtensive.Orm.SessionBound.Session">
      <summary>
            Gets <see cref="P:Xtensive.Orm.SessionBound.Session" /> which current instance is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ISessionService">
      <summary>
            A tagging interface marking any <see cref="T:Xtensive.Orm.Session" />-level service.
            Session-level services are accessible via <see cref="P:Xtensive.Orm.Session.Services" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.QueryFormatter.ToSqlString``1(System.Linq.IQueryable{``0})">
      <summary>
            Formats the specified <paramref name="query" /> in SQL.
            </summary>
      <param name="query">The query to format.</param>
      <returns>A string containing formatted query.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.QueryFormatter.ToString``1(System.Linq.IQueryable{``0})">
      <summary>
            Formats the specified <paramref name="query" /> in C# notation.
            </summary>
      <param name="query">The query to format.</param>
      <returns>A string containing formatted query.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordQuery">
      <summary>
            Provides a wrapper for <see cref="P:Xtensive.Storage.Rse.RecordQuery.Provider" />, as well as wide
            range of extension methods (see <see cref="T:Xtensive.Storage.Rse.RecordQueryExtensions" />)
            to operate with them.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordQuery.Load(Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
            Creates <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" /> with specified <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />
            and name for saved context data .
            </summary>
      <param name="header">The result header.</param>
      <param name="scope">The result scope.</param>
      <param name="name">The result name.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordQuery.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordQuery.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">
        <see cref="P:Xtensive.Storage.Rse.RecordQuery.Provider" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordQuery.Header">
      <summary>
            Gets the header of the <see cref="T:Xtensive.Storage.Rse.RecordQuery" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordQuery.Provider">
      <summary>
            Gets the provider this <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ExecutableProvider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordQuery" /><see cref="P:Xtensive.Storage.Rse.RecordQuery.Provider" />,
            that does not need to be compiled.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Returns either cached result (if available), or a result of <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" />.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnAfterEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumeration is finished.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1">
      <inheritdoc />
      <remarks>
            The implementation of this method checks if specified service <typeparamref name="T" />
            was registered by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.AddService``1" />, and returns <c>this as T</c>, if this is <see langword="true" />;
            otherwise, <see langword="null" />.
            </remarks>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.AddService``1">
      <summary>
            Registers the service as "supported".
            This method should be called only from thread-safe methods,
            such as <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.BuildHeader" />.
            </summary>
      <typeparam name="T">The type of service to register.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.BuildHeader">
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> property value.</param>
      <param name="sources">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin">
      <summary>
            Gets the provider this provider is compiled from.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.IsCacheable">
      <summary>
            Gets or sets a value indicating whether this instance can be
            cached and further returned as result of compilation of
            <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> once more by the same 
            <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationService" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Location">
      <summary>
            Gets or sets execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlProvider">
      <summary>
            Unified SQL provider implementation (<see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.AppendDescriptionTo(System.Text.StringBuilder,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.AppendCommandTo(Xtensive.Sql.Compiler.SqlCompilationResult,System.Text.StringBuilder,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The origin.</param>
      <param name="handlers">The handlers.</param>
      <param name="sources">The sources.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.#ctor(Xtensive.Storage.Providers.Sql.SqlProvider,Xtensive.Sql.Dml.SqlTable)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The provider.</param>
      <param name="permanentReference">The permanent reference.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.Request">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" /> associated with this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.PermanentReference">
      <summary>
            Gets the permanent reference (<see cref="T:Xtensive.Sql.Dml.SqlQueryRef" />) for <see cref="T:Xtensive.Sql.Dml.SqlSelect" /> associated with this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.DomainHandler">
      <summary>
            Gets the domain handler this provider is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" />-level handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetCompilerProviderContainerTypes">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetDataReaderAccessor(Xtensive.Tuples.TupleDescriptor)">
      <summary>
            Creates (or retrieves from cache) <see cref="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor" /> 
            for the specified <see cref="T:Xtensive.Tuples.TupleDescriptor" />.
            </summary>
      <param name="descriptor">The descriptor.</param>
      <returns>A <see cref="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor" /> 
            for the specified <see cref="T:Xtensive.Tuples.TupleDescriptor" /></returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetPersistRequest(Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask)">
      <summary>
            Gets the persist request for the specified <paramref name="task" />.
            </summary>
      <param name="task">The task to get request from.</param>
      <returns>A <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> that represents <paramref name="task" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.ResolveOrderingDescriptor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Creates <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> for specified 
            <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
      <param name="provider">The provider for which <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> 
            should be created.</param>
      <returns>A newly created <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.BuildMapping">
      <inheritdoc />
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreatePreCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.AddBaseServiceRegistrations(System.Collections.Generic.List{Xtensive.IoC.ServiceRegistration})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Schema">
      <summary>
            Gets the storage schema.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Mapping">
      <summary>
            Gets the model mapping.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.PersistRequestBuilder">
      <summary>
            Gets the SQL request builder.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.TemporaryTableManager">
      <summary>
            Gets the temporary table manager.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.CommandProcessorFactory">
      <summary>
            Gets the command processor factory.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Driver">
      <summary>
            Gets the SQL driver.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Linq.QueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryProvider" /> implementation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.QueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.RecordQueryExtensions">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.RecordQueryExtensions.ToRecordSet(Xtensive.Storage.Rse.RecordQuery,Xtensive.Orm.Session)">
      <summary>
            Compiles provided <paramref name="query" /> and returns new <see cref="T:Xtensive.Storage.Rse.RecordSet" /> bound to provided <paramref name="session" />.
            </summary>
      <param name="query">The query.</param>
      <param name="session">The session.</param>
      <returns>New <see cref="T:Xtensive.Storage.Rse.RecordSet" /> bound to provided <paramref name="session" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.RecordQueryExtensions.Compile(Xtensive.Storage.Rse.RecordQuery,Xtensive.Orm.Session)">
      <summary>
            Compiles the specified query.
            </summary>
      <param name="query">The query.</param>
      <param name="session">The session.</param>
      <returns>Compiled <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.RecordQueryExtensions.Count(Xtensive.Storage.Rse.RecordQuery,Xtensive.Orm.Session)">
      <summary>
            Creates new <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> that calculates count of elements of provided <paramref name="recordQuery" />, compiles and executes them.
            </summary>
      <param name="recordQuery">The record query.</param>
      <param name="session">The session.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.HandlerAccessor">
      <summary>
            Storage handler accessor.
            Provided by protected members, such as <see cref="P:Xtensive.Storage.Providers.HandlerBase.Handlers" /> 
            to provide access to other available handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.HandlerAccessor.#ctor(Xtensive.Orm.Domain)">
      <summary>
            Gets the handler of the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerAccessor.Domain">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Domain" /> 
            this handler accessor is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerAccessor.HandlerFactory">
      <summary>
            Gets the handler provider 
            creating handlers in the <see cref="P:Xtensive.Storage.Providers.HandlerAccessor.Domain" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerAccessor.NameBuilder">
      <summary>
            Gets the name builder.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerAccessor.DomainHandler">
      <summary>
            Gets the <see cref="P:Xtensive.Storage.Providers.HandlerAccessor.Domain" /> handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerAccessor.SchemaUpgradeHandler">
      <summary>
            Gets the <see cref="P:Xtensive.Storage.Providers.HandlerAccessor.SchemaUpgradeHandler" /> instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.HandlerBase">
      <summary>
            Abstract base class for any storage handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.HandlerBase.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> providing other available handlers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" />-level handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.GetQueryPreprocessors">
      <summary>
            Gets the ordered sequence of query preprocessors to apply to any LINQ query.
            </summary>
      <returns>The ordered sequence of query preprocessors to apply to any LINQ query.</returns>
      <exception cref="T:System.InvalidOperationException">Cyclic dependency in query preprocessor graph
            is detected.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.GetMemberCompilerProvider``1">
      <summary>
            Gets the member compiler provider by its type parameter.
            </summary>
      <typeparam name="T">The type of member compiler provider type parameter.</typeparam>
      <returns>
            Found member compiler provider;
            <see langword="null" />, if it was not found.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.CreatePreCompiler">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" />.
            </summary>
      <returns>A new pre-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler" />.
            </summary>
      <param name="compiler">Currently used compiler instance.</param>
      <returns>A new post-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.GetCompilerProviderContainerTypes">
      <summary>
            Gets the sequence of compiler provider container types.
            </summary>
      <returns>The sequence of compiler provider container types.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.BuildMapping">
      <summary>
            Builds the mapping schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.CreateProviderInfo">
      <summary>
            Creates <see cref="P:Xtensive.Storage.Providers.DomainHandler.ProviderInfo" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.CreateBaseServices">
      <summary>
            Creates parent service container 
            for <see cref="P:Xtensive.Orm.Domain.Services" /> container.
            </summary>
      <returns>Container providing base services.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.AddBaseServiceRegistrations(System.Collections.Generic.List{Xtensive.IoC.ServiceRegistration})">
      <summary>
            Adds base service registration entries into the list of
            registrations used by <see cref="M:Xtensive.Storage.Providers.DomainHandler.CreateBaseServices" />
            method.
            </summary>
      <param name="registrations">The list of service registrations.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.BuildMemberCompilerProviders">
      <exception cref="T:System.InvalidOperationException">One of compiler containers is 
            improperly described.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.DomainHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.DomainHandler.Domain">
      <summary>
            Gets the domain this handler is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.DomainHandler.ProviderInfo">
      <summary>
            Gets the information about provider's capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.DomainHandler.CompilationService">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationService" />
            associated with the domain.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.DomainHandler.ServerSideCompiler">
      <summary>
            Builds the <see cref="T:Xtensive.Storage.Rse.Compilation.ICompiler" />.
            Invoked from <see cref="M:Xtensive.Storage.Providers.DomainHandler.Initialize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.DomainHandler.StorageLocation">
      <summary>
            Gets the storage location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryRequest">
      <summary>
            Query request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryRequest.#ctor(Xtensive.Sql.Dml.SqlSelect,Xtensive.Tuples.TupleDescriptor,Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
      <param name="tupleDescriptor">The tuple descriptor.</param>
      <param name="options">The options.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryRequest.#ctor(Xtensive.Sql.Dml.SqlSelect,Xtensive.Tuples.TupleDescriptor,Xtensive.Storage.Providers.Sql.RequestOptions,System.Collections.Generic.IEnumerable{Xtensive.Storage.Providers.Sql.QueryParameterBinding})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
      <param name="tupleDescriptor">The tuple descriptor.</param>
      <param name="options">The options.</param>
      <param name="parameterBindings">The parameter bindings.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.SelectStatement">
      <summary>
            Gets the select statement.
            </summary>
      <value>The select statement.</value>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.ParameterBindings">
      <summary>
            Gets the parameter bindings.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.TupleDescriptor">
      <summary>
            Gets the record set header.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Request">
      <summary>
            Base class for any SQL request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.GetCompiledStatement(Xtensive.Storage.Providers.Sql.DomainHandler)">
      <summary>
            Gets the compiled statement.
            </summary>
      <param name="domainHandler">The domain handler.</param>
      <returns>Compiled statement.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.CheckOptions(Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
            Checks that specified options are enabled for this request.
            </summary>
      <param name="requiredOptions">The required options.</param>
      <returns>
        <see langword="true" /> is specified options is suppored;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.#ctor(Xtensive.Sql.ISqlCompileUnit,Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
      <param name="options">The options.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.#ctor(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Request.Statement">
      <summary>
            Gets the statement of this request.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Request.Options">
      <summary>
            Gets the options of this request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Services.TransactionMonitor.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Transaction">
      <summary>
            An implementation of transaction suitable for storage.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Transaction" />, 
            or throws <see cref="T:System.InvalidOperationException" />, 
            if active <see cref="T:Xtensive.Orm.Transaction" /> is not found.
            </summary>
      <returns>Current transaction.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Transaction.Current" />
        <see cref="T:Xtensive.Orm.Transaction" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Require(Xtensive.Orm.Session)">
      <summary>
            Checks whether a transaction exists or not in the provided session.
            </summary>
      <param name="session">The session.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Transaction.Current" />
        <see cref="T:Xtensive.Orm.Transaction" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.AreChangesVisibleTo(Xtensive.Orm.Transaction)">
      <summary>
            Indicates whether changes made in this transaction are visible "as is"
            in <paramref name="otherTransaction" />. This implies <paramref name="otherTransaction" />
            and this transaction at least share the same <see cref="P:Xtensive.Orm.Transaction.Outermost" /> transaction.
            Please refer to the code of this method to clearly understand what it really does ;)
            </summary>
      <param name="otherTransaction">The other transaction.</param>
      <returns>
        <see langword="True" /> if changes made in this transaction are visible
            "as is" in <paramref name="otherTransaction" />;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.TransactionOpenMode)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="mode">The mode.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="mode">The mode.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="session">The session.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,Xtensive.Orm.TransactionOpenMode)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="session">The session.</param>
      <param name="mode">The mode.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.Open(Xtensive.Orm.Session,Xtensive.Orm.TransactionOpenMode,System.Transactions.IsolationLevel)">
      <summary>
            Opens a new or already running transaction.
            </summary>
      <param name="session">The session.</param>
      <param name="mode">The mode.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.TransactionalBehavior)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="behavior">The automatic transaction behavior.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.TransactionalBehavior,System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="behavior">The automatic transaction behavior.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="P:Xtensive.Orm.Transaction.Session" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.Session)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="session">The session.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.Session,Xtensive.Orm.TransactionalBehavior)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="session">The session.</param>
      <param name="behavior">The automatic transaction behavior.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Transaction.OpenAuto(Xtensive.Orm.Session,Xtensive.Orm.TransactionalBehavior,System.Transactions.IsolationLevel)">
      <summary>
            Opens the automatic transaction, or does nothing - dependently on specified
            behavior and <see cref="T:Xtensive.Orm.Configuration.SessionOptions" />.
            </summary>
      <param name="session">The session.</param>
      <param name="behavior">The automatic transaction behavior.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>
            A new <see cref="T:Xtensive.Orm.TransactionScope" /> object. Its disposal will lead to either commit
            or rollback of the transaction it controls dependently on <see cref="P:Xtensive.Disposing.CompletableScope.IsCompleted" /> flag.
            </returns>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Transaction" /> object
            using <see cref="P:Xtensive.Orm.Transaction.Session" />.<see cref="P:Xtensive.Orm.Session.Current" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.IsAutomatic">
      <summary>
            Gets a value indicating whether this instance is automatic transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.IsDisconnected">
      <summary>
            Gets a value indicating whether this instance is 
            transaction running locally in <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Guid">
      <summary>
            Gets the unique identifier of this transaction.
            Nested transactions have the same <see cref="P:Xtensive.Orm.Transaction.Guid" /> 
            as their outermost.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Session">
      <summary>
            Gets the session this transaction is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.IsolationLevel">
      <summary>
            Gets the isolation level.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.State">
      <summary>
            Gets the state of the transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Outer">
      <summary>
            Gets the outer transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Outermost">
      <summary>
            Gets the outermost transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.TimeStamp">
      <summary>
            Gets the start time of this transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.IsNested">
      <summary>
            Gets a value indicating whether this transaction is a nested transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.TemporaryData">
      <summary>
            Gets the transaction-level temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.ValidationContext">
      <summary>
            Gets the validation context of this <see cref="T:Xtensive.Orm.Transaction" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Transaction.Extensions">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.TransactionEventArgs">
      <summary>
            Provides data for <see cref="T:Xtensive.Orm.Session" /> transaction-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionEventArgs.#ctor(Xtensive.Orm.Transaction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="transaction">The transaction.</param>
    </member>
    <member name="P:Xtensive.Orm.TransactionEventArgs.Transaction">
      <summary>
            Gets the transaction.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.SessionEventAccessor">
      <summary>
            Provides access to <see cref="P:Xtensive.Orm.SessionEventAccessor.Session" />-level events.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.SessionEventAccessor.Session">
      <summary>
            Gets the session this instance is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.SessionEventAccessor.SystemEvents">
      <summary>
            Gets indicates whether this accessor describes system events (<see cref="P:Xtensive.Orm.Session.SystemEvents" />).
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.Disposing">
      <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session" /> is about to be disposed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.Persisting">
      <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session" /> is about to <see cref="M:Xtensive.Orm.Session.SaveChanges" /> changes.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.Persisted">
      <summary>
            Occurs when <see cref="P:Xtensive.Orm.SessionEventAccessor.Session" /> persisted.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.KeyGenerated">
      <summary>
            Occurs when local <see cref="T:Xtensive.Orm.Key" /> created.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityMaterialized">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> is materialized.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityCreated">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> is created.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityChanging">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> is about to change.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityVersionInfoChanging">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" />.<see cref="P:Xtensive.Orm.Entity.VersionInfo" /> is about to change.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityVersionInfoChanged">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" />.<see cref="P:Xtensive.Orm.Entity.VersionInfo" /> is changed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGetting">
      <summary>
            Occurs when field value is about to be read.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGet">
      <summary>
            Occurs when field value was read successfully.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueGetCompleted">
      <summary>
            Occurs when field value reading is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSettingAttempt">
      <summary>
            Occurs when is field value is about to be set.
            This event is raised on any set attempt (even if new value is the same as the current one).
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSetting">
      <summary>
            Occurs when is field value is about to be changed.
            This event is raised only on actual change attempt (i.e. when new value differs from the current one).
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSet">
      <summary>
            Occurs when field value was changed successfully.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityFieldValueSetCompleted">
      <summary>
            Occurs when field value changing is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemoving">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> is about to remove.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemove">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> removed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntityRemoveCompleted">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Entity" /> removing is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetChanging">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> is about to change.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemoving">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item is about to remove.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemove">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item removed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemRemoveCompleted">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item removing is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAdding">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item is about to remove.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAdd">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item removed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetItemAddCompleted">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> item removing is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClearing">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> is about to be cleared.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClear">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> is cleared.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.EntitySetClearCompleted">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.EntitySetBase" /> clearing is completed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionOpening">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is about to be opened.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionOpened">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is opened.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionPrecommitting">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is about to be committed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionCommitting">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is about to be committed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionCommitted">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is committed.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionRollbacking">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is about to be rolled back.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.SessionEventAccessor.TransactionRollbacked">
      <summary>
            Occurs when <see cref="T:Xtensive.Orm.Transaction" /> is rolled back.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.IValidationAware">
      <summary>
            Implemented by objects supporting validation framework.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.IValidationAware.OnValidate">
      <summary>
            Validates the object state right now - i.e. without any delays.
            </summary>
      <remarks>
            Throws an exception on validation failure.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Validation.IValidationAware.Context">
      <summary>
            Gets the validation context.
            </summary>
      <value>The validation context.</value>
    </member>
    <member name="T:Xtensive.Orm.Validation.ConstrainMode">
      <summary>
            Possible validation modes.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Validation.ConstrainMode.Default">
      <summary>
            The same as <see cref="F:Xtensive.Orm.Validation.ConstrainMode.OnValidate" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Validation.ConstrainMode.OnValidate">
      <summary>
            Property value will be checked on object validation.
            </summary>
      <remarks>
            Note that when inconsistent region is not open validation can be performed immediatly after setting property value.
            </remarks>
    </member>
    <member name="F:Xtensive.Orm.Validation.ConstrainMode.OnSetValue">
      <summary>
            Validation is performed before property value is set.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.ValidationContext">
      <summary>
            Provides consistency validation for see <see cref="T:Xtensive.Orm.Validation.IValidationAware" /> implementors.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.DisableValidation">
      <summary>
            Opens the "inconsistent region" - the code region, in which Validate method
            should just queue the validation rather then perform it immediately.
            </summary>
      <returns>
        <see cref="T:System.IDisposable" /> object, which disposal will identify the end of the region.
            <see langowrd="Null" />, if <see cref="P:Xtensive.Orm.Validation.ValidationContext.IsConsistent" /> is <see langword="false" />.
            </returns>
      <remarks>
        <para>
            The beginning of the region is the place where this method is called.
            </para>
        <para>
            The end of the region is the place where returned <see cref="T:System.IDisposable" /> object is disposed.
            The validation of all queued to-validate objects will be performed during disposal.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">Context <see cref="P:Xtensive.Orm.Validation.ValidationContext.IsConsistent">is invalid</see>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.Validate">
      <summary>
            Validates all registered instances even if inconsistent region is open.
            </summary>
      <exception cref="T:Xtensive.Core.AggregateException">Validation failed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.EnqueueValidate(Xtensive.Orm.Validation.IValidationAware,System.Action{Xtensive.Orm.Validation.IValidationAware})">
      <summary>
            Enqueues the object for delayed partial validation.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Orm.Validation.IValidationAware" /> object to enqueue.</param>
      <param name="validationDelegate">The validation delegate partially validating the <paramref name="target" />.
            If <see langword="null" />, whole object should be validated.
            </param>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.EnqueueValidate(Xtensive.Orm.Validation.IValidationAware)">
      <summary>
            Enqueues the object for delayed validation.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Orm.Validation.IValidationAware" /> object to enqueue.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.LeaveInconsistentRegion(System.Boolean)">
      <summary>
            Leaves the inconsistent region.
            </summary>
      <exception cref="T:Xtensive.Core.AggregateException">Validation failed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.Reset">
      <summary>
            Resets the state of this context to initial.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationContext.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.ValidationContext.IsConsistent">
      <summary>
            Gets the value indicating whether this context is in inconsistent state.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExApplyingXToPropertyYFailedZ">
      <summary>
              Looks up a localized string similar to Applying [{0}] to property '{1}' failed. {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExBothLocalizableMessageResourceAndNotLocalizableMessageCanNotBeSpecifiedAtOnceLocationX">
      <summary>
              Looks up a localized string similar to Both localizable message resource and not localizable message can not be specified at once (location: {0})..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExFieldConstraintCanNotBeAppliedToReadOnlyPropertyX">
      <summary>
              Looks up a localized string similar to Field constraint can not be applied to read only property {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExNoComparer">
      <summary>
              Looks up a localized string similar to [{0}] attribute on '{1}' requires a comparer for type '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExXAndYPropertiesMustBeUsedTogetherLocationZ">
      <summary>
              Looks up a localized string similar to '{0}' and '{1}' properties must be used together (location: {2})..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.AspectExXDoesNotSupportYValueTypeLocationZ">
      <summary>
              Looks up a localized string similar to '{0}' does not support '{1}' value type (location: {2})..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeEmpty">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be empty..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeLessThanMin">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be less than {Min}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeLessThanMinOrGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be less than {Min} or greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeNull">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueCanNotBeNullOrEmpty">
      <summary>
              Looks up a localized string similar to {PropertyName} can not be null or empty..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueFormatIsIncorrect">
      <summary>
              Looks up a localized string similar to {PropertyName} format is incorrect..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueLengthCanNotBeGreaterThanMax">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be greater than {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueLengthCanNotBeLessThanMin">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be less than {Min}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueLengthCanNotBeLessThanMinAndGreaterThenMax">
      <summary>
              Looks up a localized string similar to {PropertyName} length can not be less than {Min} and greater then {Max}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueMustBeInTheFuture">
      <summary>
              Looks up a localized string similar to {PropertyName} must be in the future..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ConstraintMessageValueMustBeInThePast">
      <summary>
              Looks up a localized string similar to {PropertyName} must be in the past..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.DateMustBeInThePast">
      <summary>
              Looks up a localized string similar to Date must be in the past..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExAlreadyCompleted">
      <summary>
              Looks up a localized string similar to UndoDescriptor is already completed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExAtomicContextIsSuspended">
      <summary>
              Looks up a localized string similar to AtomicContext is suspended..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExCantInvokeBlockingDescriptor">
      <summary>
              Looks up a localized string similar to Blocking descriptor can't be invoked..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExComparerForTypeXIsNotFound">
      <summary>
              Looks up a localized string similar to Comparer for type '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExCompleteMustBeCalledJustOnce">
      <summary>
              Looks up a localized string similar to Complete method must be called just once..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExConcurrencyConflict">
      <summary>
              Looks up a localized string similar to Concurrency conflict..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExContextMustBeActivated">
      <summary>
              Looks up a localized string similar to Context is not activated..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExDeadlock">
      <summary>
              Looks up a localized string similar to Deadlock was found..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExExpressionPatternIsNotSpecified">
      <summary>
              Looks up a localized string similar to Regular expression pattern is not specified..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExIncorrectStageValue">
      <summary>
              Looks up a localized string similar to Incorrect Stage value: '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExMaxOrMinPropertyMustBeSpecified">
      <summary>
              Looks up a localized string similar to 'Max' or 'Min' property must be specified..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExObjectAndContextAreIncompatible">
      <summary>
              Looks up a localized string similar to The specified object and the context are incompatible..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExOldActiveOperationIsStillRunning">
      <summary>
              Looks up a localized string similar to You can't Activate new operation, since old ActiveOperation is still running..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExSpecifiedRedoDescriptorCantBeLogged">
      <summary>
              Looks up a localized string similar to Specified RedoDescriptor can't be logged..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExValidationContextIsInvalid">
      <summary>
              Looks up a localized string similar to Validation context is in invalid state. This means that some validation error has happened, but later it was suppressed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExValidationFailed">
      <summary>
              Looks up a localized string similar to Validation failed..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExVersionConflict">
      <summary>
              Looks up a localized string similar to Version conflict..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.ExVersionConflictEx">
      <summary>
              Looks up a localized string similar to Version conflict on object {0}: expected: {1} = {2}, but it is {3}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.LogRelationSyncUndoError">
      <summary>
              Looks up a localized string similar to Error during undoing the relation synchronization..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.LogUndoError">
      <summary>
              Looks up a localized string similar to Error during Undo execution: descriptor {0}..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.Null">
      <summary>
              Looks up a localized string similar to null.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.PropertyValueCanNotBeEmpty">
      <summary>
              Looks up a localized string similar to {0}: value can not be empty..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.PropertyValueCanNotBeNull">
      <summary>
              Looks up a localized string similar to {0}: value can not be null..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.PropertyValueDoesNotMatchRegexPattern">
      <summary>
              Looks up a localized string similar to Property value '{value}' does not match regex pattern '{Pattern}'..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.PropertyValueLengthMustBeInXYRange">
      <summary>
              Looks up a localized string similar to {0}: length of the value must be in [{1} ... {2}] range..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.PropertyValueMustBeInXYRange">
      <summary>
              Looks up a localized string similar to {0}: value must be in [{1} ... {2}] range..
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.Resources.Strings.X">
      <summary>
              Looks up a localized string similar to {0}.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.ConstraintViolationException">
      <summary>
            Thrown as the result of violation of constraint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.ConstraintViolationException.#ctor(System.String,System.Type,System.Reflection.PropertyInfo,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.Validation.ConstraintViolationException.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.ConstraintViolationException.TargetProperty">
      <summary>
            Gets the target property.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.ConstraintViolationException.PropertyValue">
      <summary>
            Gets the string representation of property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="T:Xtensive.Orm.Validation.ConstraintRegistry">
      <summary>
            The registry of all applied constraints.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.ConstraintRegistry.GetConstraints(System.Type)">
      <summary>
            Gets all constraints targeted to the specified type and it's ancestors.
            </summary>
      <param name="targetType">The target type.</param>
      <returns>Enumerable of constraints.</returns>
    </member>
    <member name="T:Xtensive.Orm.Validation.EmailConstraint">
      <summary>
            Ensures that email address is in correct format.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.EmailConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.EmailConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.EmailConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.EmailConstraint.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.FutureConstraint">
      <summary>
            Ensures that date value is in the future.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.FutureConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.FutureConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.FutureConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.LengthConstraint">
      <summary>
            Ensures field length (or item count) fits in specified range.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.ValidateSelf(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.LengthConstraint.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.LengthConstraint.Min">
      <summary>
            Gets or sets the minimal allowed length.
            Default is 0.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.LengthConstraint.Max">
      <summary>
            Gets or sets the maximal allowed length.
            Default is <see cref="F:System.Int64.MaxValue" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.NotEmptyConstraint">
      <summary>
            Ensures that property value is not <see cref="F:System.String.Empty" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.NotEmptyConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotEmptyConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotEmptyConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.NotNullConstraint">
      <summary>
            Ensures property value is not <see langword="null" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.NotNullOrEmptyConstraint">
      <summary>
            Ensures that property value is not 
            <see langword="null" /> or <see cref="F:System.String.Empty" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullOrEmptyConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullOrEmptyConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.NotNullOrEmptyConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.PastConstraint">
      <summary>
            Ensures that date value is in the past.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.PastConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.PastConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.PastConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.RangeConstraint">
      <summary>
            Ensures field value fits in the specified range.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.ValidateSelf(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RangeConstraint.Initialize">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Validation.RangeConstraint.Min">
      <summary>
            Gets or sets the minimal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.RangeConstraint.Max">
      <summary>
            Gets or sets the maximal allowed value.
            <see langword="null" /> means "ignore this boundary".
            Default value is <see langword="null" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.RegexConstraint">
      <summary>
            Ensures property value matches specified regular expression.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.CheckValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.IsSupported(System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.ValidateSelf(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.GetDefaultMessage">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.AddCustomMessageParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.RegexConstraint.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.RegexConstraint.Pattern">
      <summary>
            Gets or sets the regular expression pattern.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Validation.RegexConstraint.Options">
      <summary>
            Gets or sets the options, default value is <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.InconsistentRegionAttribute">
      <summary>
            Wraps a method of property body into so-called "inconsistent region"
            using <see cref="M:Xtensive.Orm.Validation.ValidationContext.DisableValidation" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.InconsistentRegionAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.InconsistentRegionAttribute.OnEntry(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.InconsistentRegionAttribute.OnSuccess(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Validation.InconsistentRegionAttribute.OnExit(PostSharp.Aspects.MethodExecutionArgs)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Validation.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Validation.ValidationAwareExtensions">
      <summary>
        <see cref="T:Xtensive.Orm.Validation.IValidationAware" /> related extensions methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.Validate(Xtensive.Orm.Validation.IValidationAware,System.Action{Xtensive.Orm.Validation.IValidationAware},System.Boolean)">
      <summary>
            Partially validates the <paramref name="target" /> with specified delegate, 
            or enqueues it for delayed validation.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="validator">The delegate to invoke for validation. 
            If <paramref name="validator" /> is <see langword="null" />, 
            the whole object should be validated.</param>
      <param name="immediately">
        <see langword="true" /> if instance should be immediately validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.Validate(Xtensive.Orm.Validation.IValidationAware,System.Action{Xtensive.Orm.Validation.IValidationAware})">
      <summary>
            Partially validates the <paramref name="target" /> with specified delegate.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="validator">The delegate to invoke for validation. 
            If <paramref name="validator" /> is <see langword="null" />, 
            the whole object should be validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.Validate(Xtensive.Orm.Validation.IValidationAware,System.Boolean)">
      <summary>
            Validates the specified <paramref name="target" />, or enqueues it for delayed validation.
            </summary>
      <param name="target">The object to validate.</param>
      <param name="immediately">
        <see langword="true" /> if instance should be immediately validated.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.Validate(Xtensive.Orm.Validation.IValidationAware)">
      <summary>
            Validates the specified <paramref name="target" />.
            </summary>
      <param name="target">The object to validate.</param>
      <returns>
        <see langword="true" /> if validation was performed immediately; 
            <see langword="false" /> if it was enqueued.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.CheckConstraints(Xtensive.Orm.Validation.IValidationAware)">
      <summary>
            Checks all the constraints applied to specified 
            <see cref="T:Xtensive.Orm.Validation.IValidationAware" /> object.
            </summary>
      <param name="target">The object to validate.</param>
    </member>
    <member name="M:Xtensive.Orm.Validation.ValidationAwareExtensions.GetPropertyValidationError(Xtensive.Orm.Validation.IValidationAware,System.String)">
      <summary>
            Gets the validation error for the property with specified <paramref name="propertyName" />.
            </summary>
      <param name="target">The object to validate the property of.</param>
      <param name="propertyName">Name of the property to get the error for.</param>
      <returns>
            An exception, if property validation has failed;
            otherwise, <see langword="null" />.
            </returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSetHeader">
      <summary>
            Header of <see cref="T:Xtensive.Storage.Rse.RecordQuery" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Alias(System.String)">
      <summary>
            Aliases the header.
            </summary>
      <param name="alias">The alias to apply.</param>
      <returns>Aliased header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Add(Xtensive.Storage.Rse.Column)">
      <summary>
            Adds the specified column to header.
            </summary>
      <param name="column">The column.</param>
      <returns>The constructed header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Add(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Adds the specified columns to header.
            </summary>
      <param name="columns">The columns.</param>
      <returns>The constructed header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Join(Xtensive.Storage.Rse.RecordSetHeader)">
      <summary>
            Joins the header with the specified one.
            </summary>
      <param name="joined">The header to join.</param>
      <returns>The joined header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Select(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Selects the specified columns from the header.
            </summary>
      <param name="selectedColumns">The indexes of columns to select.</param>
      <returns>A new header containing only specified columns.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Sort(Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
            Sorts the header in the specified order.
            </summary>
      <param name="sortOrder">Order to sort this header in.</param>
      <returns>A new sorted header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.GetHeader(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object for the specified <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The index info to get the header for.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="groups">Column groups.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},Xtensive.Tuples.TupleDescriptor,Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
      <param name="order">Result sort order.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup},Xtensive.Tuples.TupleDescriptor,Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="groups">Column groups.</param>
      <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
      <param name="order">Result sort order.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>columns.Count</c> is out of range.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Length">
      <summary>
            Gets the length of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.ColumnGroups">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> keys.
            </summary>
      <value>The keys.</value>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Columns">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.TupleDescriptor">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> tuple descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Order">
      <summary>
            Gets the indexes of columns <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> is ordered by.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.OrderTupleDescriptor">
      <summary>
            Gets the tuple descriptor describing 
            a set of <see cref="P:Xtensive.Storage.Rse.RecordSetHeader.Order" /> columns.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Expressions.Visitors.EnumRewriter.Visit(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Linq.TranslatedQuery">
      <summary>
            Abstract base class describing LINQ query translation result.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Linq.TranslatedQuery.DataSource">
      <summary>
            The <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" /> acting as source for further materialization.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.TranslatedQuery.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="dataSource">The <see cref="F:Xtensive.Orm.Linq.TranslatedQuery.DataSource" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.Linq.TranslatedQuery.UntypedMaterializer">
      <summary>
            Gets the untyped materializer.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Linq.TranslatedQuery`1">
      <summary>
            LINQ query translation result.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="F:Xtensive.Orm.Linq.TranslatedQuery`1.Materializer">
      <summary>
            Materializer.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.Execute(Xtensive.Orm.Session,Xtensive.Parameters.ParameterContext)">
      <summary>
            Executes the query in specified parameter context.
            </summary>
      <param name="session">The session.</param>
      <param name="parameterContext">The parameter context.</param>
      <returns>Query execution result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Session,System.Collections.Generic.Dictionary{Xtensive.Parameters.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},Xtensive.Parameters.ParameterContext,`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="dataSource">The data source.</param>
      <param name="materializer">The materializer.</param>
    </member>
    <member name="M:Xtensive.Orm.Linq.TranslatedQuery`1.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Session,System.Collections.Generic.Dictionary{Xtensive.Parameters.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},Xtensive.Parameters.ParameterContext,`0},System.Collections.Generic.Dictionary{Xtensive.Parameters.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple},System.Collections.Generic.IEnumerable{Xtensive.Parameters.Parameter{Xtensive.Tuples.Tuple}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="dataSource">The data source.</param>
      <param name="materializer">The materializer.</param>
      <param name="tupleParameterBindings">The tuple parameter bindings.</param>
      <param name="tupleParameters">The tuple parameters.</param>
    </member>
    <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.TupleParameterBindings">
      <summary>
            Gets the tuple parameter bindings.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.TupleParameters">
      <summary>
            Gets the tuple parameters.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.TranslatedQuery`1.UntypedMaterializer">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.IOperation">
      <summary>
            Contract for an operation that could be executed later
            after being logged in <see cref="T:Xtensive.Orm.OperationLog" />.
            You shouldn't implement this interface directly. 
            Inherit from <see cref="T:Xtensive.Orm.Operation" /> instead.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IOperation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)">
      <summary>
            Prepares the operation using specified execution context.
            </summary>
      <param name="context">The operation execution context.</param>
    </member>
    <member name="M:Xtensive.Orm.IOperation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)">
      <summary>
            Executes the operation using specified execution context.
            </summary>
      <param name="context">The operation execution context.</param>
    </member>
    <member name="M:Xtensive.Orm.IOperation.Clone(System.Boolean)">
      <summary>
            Clones the operation, <see cref="P:Xtensive.Orm.IOperation.PrecedingOperations" />,
            <see cref="P:Xtensive.Orm.IOperation.FollowingOperations" /> and <see cref="P:Xtensive.Orm.IOperation.UndoOperations" />.
            </summary>
      <param name="withIdentifiedEntities">if set to <see langword="true" /><see cref="P:Xtensive.Orm.IOperation.IdentifiedEntities" />
            must be cloned as well.</param>
      <returns>Clone of the current operation.</returns>
    </member>
    <member name="P:Xtensive.Orm.IOperation.Title">
      <summary>
            Gets the title of the operation.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.Description">
      <summary>
            Gets the description of the operation.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.Type">
      <summary>
            Gets the type of the operation.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.PrecedingOperations">
      <summary>
            Gets the list of preconditions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.FollowingOperations">
      <summary>
            Gets the list of nested operations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.UndoOperations">
      <summary>
            Gets the list of undo operations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IOperation.IdentifiedEntities">
      <summary>
            Gets or sets the identified entities.
            Value of this property can be assigned just once.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationType">
      <summary>
            Defines possible operation types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.OperationType.Custom">
      <summary>
            Custom (user-defined) operation.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.OperationType.System">
      <summary>
            System (pre-defined) operation.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationExecutionContext">
      <summary>
            Operation context for <see cref="M:Xtensive.Orm.IOperation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)" /> and
            <see cref="M:Xtensive.Orm.IOperation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)" /> methods executed for a set of operations.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.OperationExecutionContext.Session">
      <summary>
            The session this instance is bound to.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.OperationExecutionContext.KeyMapping">
      <summary>
            The mapping for new keys.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.TryRemapKey(Xtensive.Orm.Key)">
      <summary>
            Remaps the key.
            </summary>
      <param name="key">The key to remap.</param>
      <returns>Remapped key</returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.RegisterKey(Xtensive.Orm.Key,System.Boolean)">
      <summary>
            Registers the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="isNew">if set to <see langword="true" />, the key is new.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationExecutionContext.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationExecutionContext.KeysToPrefetch">
      <summary>
            Gets the sequence of keys to prefetch.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operation">
      <summary>
            Base abstract class for all <see cref="T:Xtensive.Orm.IOperation" /> implementors.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operation.Clone(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <summary>
            Prepares the operation itself.
            </summary>
      <param name="context">The operation execution context.</param>
    </member>
    <member name="M:Xtensive.Orm.Operation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <summary>
            Executes the operation itself.
            </summary>
      <param name="context">The operation execution context.</param>
    </member>
    <member name="M:Xtensive.Orm.Operation.CloneSelf(Xtensive.Orm.Operation)">
      <summary>
            Clones the operation itself.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operation.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operation.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Operation.Title">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.Description">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.Type">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.PrecedingOperations">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.FollowingOperations">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.UndoOperations">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operation.IdentifiedEntities">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.IPrecondition">
      <summary>
            Precondition operation contract. Preconditions change nothing,
            but ensure the upcoming operations can be performed safely.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.KeyOperation">
      <summary>
            Describes an operation involving the <see cref="P:Xtensive.Orm.Operations.KeyOperation.Key" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyOperation.#ctor(Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the entity.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.KeyOperation.Key">
      <summary>
            Gets the key of the entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.KeyOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.TypeReferenceAccuracy">
      <summary>
            Describes type reference accuracy.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TypeReferenceAccuracy.Hierarchy">
      <summary>
            Referenced type is limited to the entire hierarchy.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TypeReferenceAccuracy.BaseType">
      <summary>
            Referenced type is limited to the hierarchy subtree (specified type and its ancestors).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TypeReferenceAccuracy.ExactType">
      <summary>
            Referenced type is exactly known.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityOperation">
      <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityOperation.#ctor(Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the entity.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityInitializeOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> initialization operation.
            Actually, does nothing - it is used to suppress nested
            system operations.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.#ctor(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityInitializeOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityInitializeOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationRegistry">
      <summary>
            Operation registry for <see cref="P:Xtensive.Orm.Operations.OperationRegistry.Session" /> type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation)">
      <summary>
            Registers the operation.
            </summary>
      <param name="operation">The operation to register.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation,System.Boolean)">
      <summary>
            Registers the operation.
            </summary>
      <param name="operation">The operation to register.</param>
      <param name="isStarted">If set to <see langword="true" />, <see cref="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting" /> method
            will be called on completion of operation registration.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting">
      <summary>
            Indicates that operation, that is currently registering, is started.
            Leads to <see cref="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting" /> or <see cref="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting" /> notification.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.NotifyOperationStarting(System.Boolean)">
      <summary>
            Indicates that operation, that is currently registering, is started.
            Leads to <see cref="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting" /> or <see cref="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting" /> notification.
            </summary>
      <param name="throwIfNotRegistered">Indicates whether <see cref="T:System.InvalidOperationException" /> 
            must be thrown if operation isn't registered yet.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterUndoOperation(Xtensive.Orm.Operation)">
      <summary>
            Registers the operation.
            </summary>
      <param name="operation">The operation to register.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.RegisterEntityIdentifier(Xtensive.Orm.Key,System.String)">
      <summary>
            Registers the entity identifier.
            </summary>
      <param name="key">The key of the entity to log the identifier for.</param>
      <param name="identifier">The entity identifier.
            <see langword="null" /> indicates identifier must be assigned automatically 
            as sequential number inside the current operation context.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.DisableUndoOperationRegistration">
      <summary>
            Temporarily disables undo operation logging.
            </summary>
      <returns>An <see cref="T:System.IDisposable" /> object enabling the logging back on its disposal.</returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.DisableSystemOperationRegistration">
      <summary>
            Temporarily disables system operation logging.
            </summary>
      <returns>An <see cref="T:System.IDisposable" /> object enabling the logging back on its disposal.</returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.EnableSystemOperationRegistration">
      <summary>
            Temporarily enables system operation logging.
            </summary>
      <returns>An <see cref="T:System.IDisposable" /> object disabling the logging back on its disposal.</returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistry.BeginRegistration(Xtensive.Orm.Operations.OperationType)">
      <summary>
            Registers the operation.
            </summary>
      <param name="operationType">Type of the operation.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationRegistry.Session">
      <summary>
            Gets the session this instance is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsRegistrationEnabled">
      <summary>
            Indicates whether operation logging is enabled.
            <see cref="M:Xtensive.Orm.Session.OpenSystemLogicOnlyRegion" /> implicitly turns this option off;
            <see cref="M:Xtensive.Orm.Operations.OperationRegistry.DisableUndoOperationRegistration" /> does this explicitly.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsSystemOperationRegistrationEnabled">
      <summary>
            Gets a value indicating whether system operation registration is enabled.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationRegistry.CanRegisterOperation">
      <summary>
            Gets a value indicating whether this instance can register operation
            using <see cref="M:Xtensive.Orm.Operations.OperationRegistry.RegisterOperation(Xtensive.Orm.Operation)" /> method.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationRegistry.IsRegisteringOperation">
      <summary>
            Gets a value indicating whether this instance is registering operation now,
            i.e. <see cref="M:Xtensive.Orm.Operations.OperationRegistry.BeginRegistration(Xtensive.Orm.Operations.OperationType)" /> method was invoked, but the
            scope isn't closed yet.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationStarting">
      <summary>
            Occurs when outermost <see cref="T:Xtensive.Orm.IOperation" /> is starting.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Operations.OperationRegistry.OutermostOperationCompleted">
      <summary>
            Occurs when outermost <see cref="T:Xtensive.Orm.IOperation" /> is being registered.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationStarting">
      <summary>
            Occurs when nested <see cref="T:Xtensive.Orm.IOperation" /> is starting.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Operations.OperationRegistry.NestedOperationCompleted">
      <summary>
            Occurs when nested <see cref="T:Xtensive.Orm.IOperation" /> is being registered.
            </summary>
    </member>
    <member name="E:Xtensive.Orm.Operations.OperationRegistry.UndoOperation">
      <summary>
            Occurs when undo <see cref="T:Xtensive.Orm.IOperation" /> is being registered.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.KeySetOperation">
      <summary>
            Describes operation over key set.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeySetOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keys">The sequence of keys.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeySetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeySetOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.KeySetOperation.Description">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.KeySetOperation.Keys">
      <summary>
            Gets the key set.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationEventArgs">
      <summary>
            Arguments for <see cref="T:Xtensive.Orm.IOperation" />-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationEventArgs.#ctor(Xtensive.Orm.IOperation)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="operation">The <see cref="P:Xtensive.Orm.Operations.OperationEventArgs.Operation" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationEventArgs.Operation">
      <summary>
            Gets the operation.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationCompletedEventArgs">
      <summary>
            Arguments for <see cref="T:Xtensive.Orm.IOperation" /> completion events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationCompletedEventArgs.#ctor(Xtensive.Orm.IOperation,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="operation">The <see cref="T:Xtensive.Orm.Operation" /> property value.</param>
      <param name="isCompleted">
        <see cref="P:Xtensive.Orm.Operations.OperationCompletedEventArgs.IsCompleted" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationCompletedEventArgs.IsCompleted">
      <summary>
            Gets the completion flag of the operation.
            <see langword="True" />, if operation was completed successfully;
            otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationRegistrationScope.RegisterEntityIdentifier(Xtensive.Orm.Key,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.OperationLogType">
      <summary>
            Defines possible operation log types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OperationLogType.SystemOperationLog">
      <summary>
            Log stores system operations.
            The default option.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OperationLogType.OutermostOperationLog">
      <summary>
            Log stores outermost operations.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.OperationLogType.UndoOperationLog">
      <summary>
            Log stores undo operations.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityExtensions">
      <summary>
        <see cref="T:Xtensive.Orm.Entity" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityExtensions.IsRemoved(Xtensive.Orm.IEntity)">
      <summary>
            Determines whether the specified entity is removed by safely
            checking it for <see langword="null" /> and calling <see cref="P:Xtensive.Orm.IEntity.IsRemoved" />.
            </summary>
      <param name="entity">The entity to check.</param>
      <returns>
        <see langword="true" /> if the specified entity is removed; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.EntityVersionInfoChangedEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" />.<see cref="P:Xtensive.Orm.Entity.VersionInfo" /> change-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityVersionInfoChangedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="changedEntity">The entity that was changed.</param>
      <param name="changedField">The field that was changed.</param>
      <param name="changed">
        <see cref="P:Xtensive.Orm.EntityVersionInfoChangedEventArgs.Changed" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityVersionInfoChangedEventArgs.Changed">
      <summary>
            Gets or sets a value indicating whether 
            <see cref="P:Xtensive.Orm.Entity.VersionInfo" /> was changed or not.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntitySetItemEventArgs">
      <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1" /> item.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetItemEventArgs.#ctor(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entitySet">The entity set.</param>
      <param name="item">The item.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySetItemEventArgs.Item">
      <summary>
            Gets the item to which this event is related.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.StorageException">
      <summary>
            Base class for any storage-level exception.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.StorageException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.StorageException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.StorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.ConstraintViolationException">
      <summary>
            An exception that is thrown when RDBMS detects a violation of a constraint.
            <seealso cref="T:Xtensive.Orm.ReferentialConstraintViolationException" /><seealso cref="T:Xtensive.Orm.UniqueConstraintViolationException" /><seealso cref="T:Xtensive.Orm.CheckConstraintViolationException" /></summary>
    </member>
    <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.ConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.CheckConstraintViolationException">
      <summary>
            An exception that is thrown when a CHECK constraint violation is detected.
            This also includes violations of a NOT NULL constraints.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.CheckConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.ConnectionErrorException">
      <summary>
            An exception that is thrown when a connection error occured.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.ConnectionErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.VersionConflictException">
      <summary>
            Thrown by <see cref="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)" />,
            <see cref="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity,System.Boolean)" /> and similar methods
            to indicate version check didn't pass.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.VersionConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.ReprocessableException">
      <summary>
            Base class for any storage-level error,
            that can be recovered by rolling back active transaction
            and reprocessing all actions in a new one.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.ReprocessableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.DeadlockException">
      <summary>
            An exception that is thrown when deadlock is detected by RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.DeadlockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.OperationTimeoutException">
      <summary>
            An exception that is thrown when currently executing operation 
            is timed out.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.OperationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.ReferentialConstraintViolationException">
      <summary>
            An exception that is thrown when referential constaint (aka foreign key) is violated.
            This differs from <see cref="T:Xtensive.Orm.ReferentialIntegrityException" />.
            <see cref="T:Xtensive.Orm.ReferentialConstraintViolationException" /> is thrown when RDBMS detects a violation.
            <see cref="N:Xtensive.Orm.ReferentialIntegrity" /> is thrown when internal referential integrity
            mechanism detects a violation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.ReferentialConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.SyntaxErrorException">
      <summary>
            An exception that is thrown when generated RDBMS query has syntax error(s).
            When you've got this exception, you either did not configured access permissions
            in your RDBMS, or you've found an error in DataObjects.Net.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.UniqueConstraintViolationException">
      <summary>
            An exception that is thrown when unique constaint is violated,
            this also denotes violation of a unique or primary index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.UniqueConstraintViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.TransactionSerializationFailureException">
      <summary>
            An exception that is thrown when RDBMS can not serialize concurrent access
            It's nearly the same as <see cref="T:Xtensive.Orm.DeadlockException" />, but this one is normally
            thrown for RDBMS that implement multi-version concurrency control (MVCC) isolation.
            This exception is unrelated to .NET serialization!
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionSerializationFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.IHasNullEntity">
      <summary>
            Contract for entities having <see cref="P:Xtensive.Orm.IHasNullEntity.NullEntity" /> property.
            Any references to such entities are replaced to  <see cref="P:Xtensive.Orm.IHasNullEntity.NullEntity" /> property value
            during reference cleanup process.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IHasNullEntity.NullEntity">
      <summary>
            Gets the special "null entity".
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IVersionSetProvider">
      <summary>
        <see cref="T:Xtensive.Orm.VersionSet" /> provider contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IVersionSetProvider.CreateVersionSet(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
      <summary>
            Creates <see cref="T:Xtensive.Orm.VersionSet" /> set containing versions
            for specified <paramref name="keys" />.
            </summary>
      <param name="keys">The keys to create version set for.</param>
      <returns>
        <see cref="T:Xtensive.Orm.VersionSet" /> containing versions
            for specified <paramref name="keys" />.</returns>
    </member>
    <member name="T:Xtensive.Orm.VersionSet">
      <summary>
            Describes a set of key-version pairs used to validate versions.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Get(Xtensive.Orm.Entity)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo" /> for the specified 
            <paramref name="entity" />.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo" />, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void" />.
            </summary>
      <param name="entity">The entity to get associated <see cref="T:Xtensive.Orm.VersionInfo" /> for.</param>
      <returns>Associated <see cref="T:Xtensive.Orm.VersionInfo" />, if found;
            otherwise, <see cref="P:Xtensive.Orm.VersionInfo.Void" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Get(Xtensive.Orm.Key)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo" /> by the specified key.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo" />, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void" />.
            </summary>
      <param name="key">The key to get associated <see cref="T:Xtensive.Orm.VersionInfo" /> for.</param>
      <returns>Associated <see cref="T:Xtensive.Orm.VersionInfo" />, if found;
            otherwise, <see cref="P:Xtensive.Orm.VersionInfo.Void" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Contains(Xtensive.Orm.Entity)">
      <summary>
            Determines whether this set contains the key of the specified entity.
            </summary>
      <param name="entity">The entity to check the key for containment.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Contains(Xtensive.Orm.Key)">
      <summary>
            Determines whether this set contains the specified key.
            </summary>
      <param name="key">The key to check for containment.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity)">
      <summary>
            Validates version of the specified <paramref name="entity" />.
            </summary>
      <param name="entity">The entity to validate version for.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Entity,System.Boolean)">
      <summary>
            Validates version of the specified <paramref name="entity" />.
            </summary>
      <param name="entity">The entity to validate version for.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
      <summary>
            Validates the <paramref name="version" />
            for the specified <paramref name="key" />.
            </summary>
      <param name="key">The key to validate version for.</param>
      <param name="version">The version to validate.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Validate(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
      <summary>
            Validates the <paramref name="version" />
            for the specified <paramref name="key" />.
            </summary>
      <param name="key">The key to validate version for.</param>
      <param name="version">The version to validate.</param>
      <param name="throwOnFailure">Indicates whether <see cref="T:System.InvalidOperationException" />
            must be thrown on validation failure.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:Xtensive.Orm.VersionConflictException">Version conflict is detected.</exception>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Add(Xtensive.Orm.Entity,System.Boolean)">
      <summary>
            Adds key and <see cref="T:Xtensive.Orm.VersionInfo" /> pair
            of the specified <paramref name="entity" /> to this set.
            </summary>
      <param name="entity">The entity to add version of.</param>
      <param name="overwrite">Indicates whether to overwrite an existing
            key-version pair or not, if it exists.</param>
      <returns>
        <see langword="True" />, if operation was successful;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Add(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
      <summary>
            Adds the specified key and <see cref="T:Xtensive.Orm.VersionInfo" /> pair to this set.
            </summary>
      <param name="key">The key.</param>
      <param name="version">The version related to this key.</param>
      <param name="overwrite">Indicates whether to overwrite an existing
            key-version pair or not, if it exists.</param>
      <returns>
        <see langword="True" />, if operation was successful;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Remove(Xtensive.Orm.Entity)">
      <summary>
            Removed the key and <see cref="T:Xtensive.Orm.VersionInfo" /> pair 
            of the specified <paramref name="entity" /> from this set.
            </summary>
      <param name="entity">The entity to remove the key-version pair of.</param>
      <returns>
        <see langword="True" />, if operation was successful;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Remove(Xtensive.Orm.Key)">
      <summary>
            Removed the specified key and <see cref="T:Xtensive.Orm.VersionInfo" /> pair from this set.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="True" />, if operation was successful;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.Clear">
      <summary>
            Clears this set.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.MergeWith(Xtensive.Orm.VersionSet,Xtensive.Orm.Session)">
      <summary>
            Merges the current <see cref="T:Xtensive.Orm.VersionSet" /> with provided one.
            </summary>
      <param name="other">The other <see cref="T:Xtensive.Orm.VersionSet" />.</param>
      <param name="session">
      </param>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.VersionSet.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.#ctor(Xtensive.Orm.Entity[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">Initial content.</param>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Entity})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">Initial content.</param>
    </member>
    <member name="M:Xtensive.Orm.VersionSet.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">Initial content.</param>
    </member>
    <member name="P:Xtensive.Orm.VersionSet.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.VersionSet.Item(Xtensive.Orm.Key)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.VersionInfo" /> by the specified key.
            If there is no such <see cref="T:Xtensive.Orm.VersionInfo" />, it returns <see cref="P:Xtensive.Orm.VersionInfo.Void" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntityFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntitySetFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EntitySetFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Always thrown by this method.</exception>
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.StructureFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.StructureFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.EnumFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.KeyFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.AreSameValues(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.GetValue(Xtensive.Orm.Persistent)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.FieldAccessors.DefaultFieldAccessor`1.SetValue(Xtensive.Orm.Persistent,`0)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Invalid arguments.</exception>
    </member>
    <member name="T:Xtensive.Orm.KeyGenerator">
      <summary>
             Abstract base class for any key generator.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.KeyGenerator.SupportedKeyFieldTypes">
      <summary>
            Gets a read-only hash set containing all the key field types supported by default.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.TryGenerateKey(System.Boolean)">
      <summary>
            Create the <see cref="T:Xtensive.Tuples.Tuple" /> with the unique values in key sequence.
            </summary>
      <param name="temporaryKey">If set to <see langword="true" />, a temporary key must be created.</param>
      <returns>Generated key;
            <see langword="null" />, if required key can not be generated.</returns>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.GenerateKey(System.Boolean)">
      <summary>
            Create the <see cref="T:Xtensive.Tuples.Tuple" /> with the unique values in key sequence.
            </summary>
      <param name="temporaryKey">If set to <see langword="true" />, a temporary key must be created.</param>
      <returns>Generated key.</returns>
      <exception cref="T:System.NotSupportedException">Key of specified type cannot be generated by this
            key generator.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.IsTemporaryKey(Xtensive.Tuples.Tuple)">
      <summary>
            Determines whether the specified key is temporary.
            </summary>
      <param name="key">The key to check.</param>
      <returns>
        <see langword="true" /> if the specified key is temporary; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.Initialize(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Orm.Model.KeyInfo)">
      <summary>
            Initializer.
            </summary>
      <param name="handlers">Handler accessor.</param>
      <param name="keyInfo">The <see cref="P:Xtensive.Orm.KeyGenerator.KeyInfo" /> instance that describes generator.</param>
      <exception cref="T:System.NotSupportedException">Instance is already initialized.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.Prepare">
      <summary>
            Called on background thread to fully prepare the key generator.
            Since this method is called optionally, it can't do any essential
            job. 
            But it can e.g. invoke some properties that needs delayed 
            evaluation, and so on.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator.IsInitialized">
      <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> providing other available handlers.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator.KeyInfo">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Orm.KeyGenerator.KeyInfo" /> instance that describes <see cref="T:Xtensive.Orm.KeyGenerator" /> object.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator.SequenceIncrement">
      <summary>
            Gets the sequence increment value for the underlying sequence,
            if this key generator requires it. 
            Otherwise, returns <see langword="null" />.
            </summary>
      <returns>Sequence increment value.</returns>
    </member>
    <member name="T:Xtensive.Orm.WellKnown">
      <summary>
            Various well-known constants related to this namespace.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.WellKnown.ProviderAssembly">
      <summary>
            Well-known storage provider assembly names.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.WellKnown.Provider">
      <summary>
            Well-known storage protocol names.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.WellKnown.Sessions">
      <summary>
            Well-known session configuration names.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.KeyFieldName">
      <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.Key" /> field.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.TypeIdFieldName">
      <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.TypeId" /> field.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.PersistenceStatePropertyName">
      <summary>
            Name of the <see cref="P:Xtensive.Orm.Entity.PersistenceState" /> property.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.MasterFieldName">
      <summary>
            Name of the field that describes master in <see cref="F:Xtensive.Orm.Model.Multiplicity.ManyToMany" />
            or <see cref="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany" /> association.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SlaveFieldName">
      <summary>
            Name of the field that describes slave in <see cref="F:Xtensive.Orm.Model.Multiplicity.ManyToMany" />
            or <see cref="F:Xtensive.Orm.Model.Multiplicity.ZeroToMany" /> association.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.DomainModelExtensionName">
      <summary>
            Name of the <see cref="T:Xtensive.Orm.Metadata.Extension" /> that describes domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.MergedAssemblyName">
      <summary>
            Name of the <see cref="T:Xtensive.Orm.Metadata.Extension" /> that describes domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.GeneratorColumnName">
      <summary>
            Name of column in key generator table.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.GeneratorFakeColumnName">
      <summary>
            Name of fake column in key generator table.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.MaxKeyFieldNumber">
      <summary>
            Max number of key fields.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.MaxGenericKeyLength">
      <summary>
            Maximal supported length (count of values) of purely generic keys.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.MaxNumberOfConditions">
      <summary>
            Maximal number of filtering values in an <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" /> 
            which are to be placed inside a resulted SQL command (as boolean predicate).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.EntitySetCacheSize">
      <summary>
            Maximum number of cached keys in <see cref="T:Xtensive.Orm.Internals.EntitySetState" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.EntitySetPreloadCount">
      <summary>
            Number of items that are preloaded on first <see cref="T:Xtensive.Orm.EntitySet`1" /> access.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SupportedIntegerTypes">
      <summary>
            Gets a read-only hash set containing all supported integer types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SupportedNumericTypes">
      <summary>
            Gets a read-only hash set containing all supported numeric types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SupportedPrimitiveTypes">
      <summary>
            Gets a read-only hash set containing all supported primitive types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SupportedNullableTypes">
      <summary>
            Gets a read-only hash set containing all supported nullable types.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.WellKnown.SupportedPrimitiveAndNullableTypes">
      <summary>
            Gets a read-only hash set containing all supported primitive and nullable types.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.KeyGenerator`1">
      <summary>
            Default <see cref="T:Xtensive.Orm.KeyGenerator" /> implementation.
            </summary>
      <typeparam name="TKeyType">The type of the key field.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.IsTemporaryKey(Xtensive.Tuples.Tuple)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Unsupported key field type.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.TryGenerateKey(System.Boolean)">
      <inheritdoc />
      <exception cref="T:System.NotImplementedException">Non-temporary keys must be 
            generated by descendants.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.DefaultNext(System.Boolean)">
      <summary>
            Default <see cref="M:Xtensive.Orm.KeyGenerator`1.TryGenerateKey(System.Boolean)" /> method implementation.
            </summary>
      <param name="temporaryKey">If set to <see langword="true" />, a temporary key must be created.</param>
      <returns>Generated key;
            <see langword="null" />, if required key can not be generated.</returns>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.GetNextValue(`0)">
      <exception cref="T:System.NotSupportedException">Unsupported key field type.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.GetNextTemporaryValue(`0)">
      <exception cref="T:System.NotSupportedException">Unsupported key field type.</exception>
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.Initialize(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Orm.Model.KeyInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.KeyGenerator`1.Prepare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.TemporaryStringKeyPrefix">
      <exception cref="T:System.NotSupportedException">Already initialized.</exception>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.SequenceIncrement">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.SyncRoot">
      <summary>
            Gets the sync root used to serialize key generation.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.TuplePrototype">
      <summary>
            Gets the tuple prototype for this key generator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.Arithmetic">
      <summary>
            Gets the arithmetic for <typeparamref name="TKeyType" />, if available.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGenerator`1.Comparer">
      <summary>
            Gets the advanced comparer for <typeparamref name="TKeyType" />, if available.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IOperationSequence">
      <summary>
            Operation sequence contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IOperationSequence.Replay">
      <summary>
            Applies this operation sequence to the <see cref="P:Xtensive.Orm.Session.Current" /> session.
            </summary>
      <returns>Key mapping.</returns>
    </member>
    <member name="M:Xtensive.Orm.IOperationSequence.Replay(Xtensive.Orm.Session)">
      <summary>
            Applies this operation sequence to the specified session.
            </summary>
      <param name="session">The session to apply the sequence to.</param>
      <returns>Key mapping.</returns>
    </member>
    <member name="T:Xtensive.Orm.KeyMapping">
      <summary>
            Maps local ("disconnected") <see cref="T:Xtensive.Orm.Key" /> instances 
            to actual (storage) <see cref="T:Xtensive.Orm.Key" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyMapping.TryRemapKey(Xtensive.Orm.Key)">
      <summary>
            Tries to remaps the specified key;
            returns the original key, if there is no 
            remapped key in <see cref="P:Xtensive.Orm.KeyMapping.Map" /> for it.
            </summary>
      <param name="key">The key to remap.</param>
      <returns>The mapped storage <see cref="T:Xtensive.Orm.Key" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.KeyMapping.RemapEntityKeys(Xtensive.Orm.Session)">
      <summary>
            Remaps the keys of cached entities
            in the specified <paramref name="session" />
            accordingly with this key mapping.
            </summary>
      <param name="session">The session to remap entity keys in.</param>
    </member>
    <member name="M:Xtensive.Orm.KeyMapping.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.KeyMapping.#ctor(Xtensive.Collections.ReadOnlyDictionary{Xtensive.Orm.Key,Xtensive.Orm.Key})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyMapping.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.KeyMapping.Map">
      <summary>
            Gets the key map.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ProviderVisitor">
      <summary>
            Abstract <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> visitor class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.Visit(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Visits the specified <paramref name="cp" />.
            </summary>
      <param name="cp">The <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> to visit.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Predicate join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">Apply provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" />.
            </summary>
      <param name="provider">Row number provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">RangeSet provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Provider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordQuery" /><see cref="P:Xtensive.Storage.Rse.RecordQuery.Provider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.Initialize(System.Type)">
      <summary>
            Performs initialization (see <see cref="M:Xtensive.Storage.Rse.Providers.Provider.Initialize" />) of the provider 
            if type of <see langword="this" /> is the same as <paramref name="ctorType" />.
            Invoked by <see cref="T:Xtensive.Aspects.InitializableAttribute" /> aspect in the epilogue of any 
            constructor of this type and its ancestors.
            </summary>
      <param name="ctorType">The type, which constructor has invoked this method.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendBodyTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's representation to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendDescriptionTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's description to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendTitleTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's title representation to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.TitleToString">
      <summary>
            Gets the string representation of provider title
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider title as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.Provider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type of the provider.</param>
      <param name="sources">
        <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Type">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.Providers.ProviderType" /> of the current instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Sources">
      <summary>
            Gets or sets the source providers 
            "consumed" by this provider to produce results of current provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Header">
      <summary>
            Gets or sets the header of the record sequence this provide produces.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.CompilableProvider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordQuery" /><see cref="P:Xtensive.Storage.Rse.RecordQuery.Provider" />,
            that can be compiled.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.Provider[])">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.CompilableProvider.EmptyOrder">
      <summary>
            Gets the empty order.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.CompilableProvider.Result">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> wrapping this provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ProviderType">
      <summary>
            Enumerates all supported provider types.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider">
      <summary>
            Gives access to the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Index" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Get(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" /> for the specified <paramref name="index" />.
            </summary>
      <param name="index">The index to get the provider for.</param>
      <returns>Existing or newly created provider for the specified <paramref name="index" />.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Index">
      <summary>
            Reference to the <see cref="T:Xtensive.Orm.Model.IndexInfo" /> instance within the domain.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider">
      <summary>
            Builds an index over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> ordering 
            them by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider">
      <summary>
            Provides access to some previously stored named <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> 
            or stores the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> with the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="scope">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope" /> property value.</param>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.Providers.Provider,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> property value.</param>
      <param name="scope">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope" /> property value.</param>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope">
      <summary>
            Gets the scope of saved data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name">
      <summary>
            Gets the name of saved data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source">
      <summary>
            Source provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider">
      <summary>
            Compilable provider that applies aggregate functions to grouped columns from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.GetAggregateColumnType(System.Type,Xtensive.Storage.Rse.AggregateType)">
      <summary>
            Gets the type of the aggregate column according to a <see cref="T:Xtensive.Storage.Rse.AggregateType" /> and original column type.
            </summary>
      <param name="sourceColumnType">Type of the source column.</param>
      <param name="aggregateType">Type of the aggregate.</param>
      <returns>The type of aggregate column.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32[],Xtensive.Storage.Rse.AggregateColumnDescriptor[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.AggregateColumns" />.</param>
      <param name="groupIndexes">The column indexes to group by.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.AggregateColumns">
      <summary>
            Gets the aggregate columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.GroupColumnIndexes">
      <summary>
            Gets column indexes to group by.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.Transform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider">
      <summary>
            Aliases the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> with specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="alias">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias">
      <summary>
            Alias of the result.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider">
      <summary>
            Compilable provider that calculates columns from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.CalculatedColumnDescriptor[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Storage.Rse.CalculatedColumnDescriptor[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="isInlined">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.IsInlined" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.IsInlined">
      <summary>
            Gets a value indicating whether calculated columns should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns">
      <summary>
            Gets the calculated columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.ResizeTransform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider">
      <summary>
            Distinct provider
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider">
      <summary>
            Compilable provider that declares filtering operation 
            over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,System.Boolean}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The source provider.</param>
      <param name="predicate">The predicate.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.Predicate">
      <summary>
            Filtering predicate expression.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.CompiledPredicate">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.Predicate" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider">
      <summary>
            Produces equality join between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.JoinType,Xtensive.Storage.Rse.JoinAlgorithm,Xtensive.Core.Pair{System.Int32}[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider to join.</param>
      <param name="right">The right provider to join.</param>
      <param name="joinType">The join operation type.</param>
      <param name="joinAlgorithm">The join algorithm.</param>
      <param name="equalIndexes">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes" /> property value.</param>
      <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.JoinType,Xtensive.Storage.Rse.JoinAlgorithm,System.Int32[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider to join.</param>
      <param name="right">The right provider to join.</param>
      <param name="joinType">The join operation type.</param>
      <param name="joinAlgorithm">The join algorithm.</param>
      <param name="equalIndexes">Transformed to the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes" /> property value.</param>
      <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.JoinAlgorithm">
      <summary>
            Join algorithm.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes">
      <summary>
            Pairs of equal column indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualColumns">
      <summary>
            Pairs of equal columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider">
      <summary>
            Compilable provider that sorts the 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SortProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SortProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider">
      <summary>
            Gets the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}}}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range">
      <summary>
            Gets the range parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.CompiledRange">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider">
      <summary>
            Gets the specified <see cref="T:Xtensive.Indexing.RangeSet`1" /> from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}}}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range">
      <summary>
            Gets the range set parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.CompiledRange">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider">
      <summary>
            Enumerates specified array of <see cref="T:Xtensive.Tuples.Tuple" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source">
      <summary>
            Raw data source - an array of tuples.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.CompiledSource">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider">
      <summary>
            Compilable provider that returns one record if it matches specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="key">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="key">Wrapped to <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key">
      <summary>
            Seek parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.CompiledKey">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider">
      <summary>
            Compilable provider that declares select operator over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.ColumnIndexes">
      <summary>
            Indexes of columns that should be selected from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider">
      <summary>
            Compilable provider that skips result records from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />. Skip amount is specified using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count">
      <summary>
            Skip amount function.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider">
      <summary>
            Compilable provider that takes first N result records from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />. Amount of records is specified using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count">
      <summary>
            Take amount function.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider">
      <summary>
            Transfers further computations to the specified location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.TransferType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="options">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.TransferType,Xtensive.Core.UrlInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="options">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options" /> property value.</param>
      <param name="location">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Location" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.TransferType" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Location">
      <summary>
            Gets the execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider">
      <summary>
            Compilable provider that adds row number to <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnName">The name of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.SystemColumn" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.SystemColumn">
      <summary>
            Gets the row number column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.ResizeTransform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider">
      <summary>
            Compilable provider that iterates over <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> 
            provider result for each item from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.#ctor(Xtensive.Storage.Rse.ApplyParameter,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.#ctor(Xtensive.Storage.Rse.ApplyParameter,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Storage.Rse.ApplySequenceType,Xtensive.Storage.Rse.JoinType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ApplyParameter">
      <summary>
            Gets the apply parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.IsInlined">
      <summary>
            Gets a value indicating whether columns of this provider should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ApplyType">
      <summary>
            Gets apply type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.SequenceType">
      <summary>
            Gets a value indicating whether applying of single or first row expected.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider">
      <summary>
            Compilable provider that returns <see cref="T:System.Boolean" /> column. 
            Column value is <see langword="true" /> if <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> contains any result; otherwise <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.ExistenceColumnName">
      <summary>
            Gets the name of the existence column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider">
      <summary>
            Produces join between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.Predicate" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple,System.Boolean}},Xtensive.Storage.Rse.JoinType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.Predicate">
      <summary>
            Gets the predicate.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider">
      <summary>
            Produces intersect operation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider to intersect.</param>
      <param name="right">The right provider to intersect.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider">
      <summary>
            Produces except operation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider to execute except operation.</param>
      <param name="right">The right provider to to execute except operation.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider">
      <summary>
            Produces concatenation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider.EnsureConcatIsPossible">
      <exception cref="T:System.InvalidOperationException">Something went wrong.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider to intersect.</param>
      <param name="right">The right provider to intersect.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider">
      <summary>
            Produces union between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider.EnsureUnionIsPossible">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="left">The left provider for union.</param>
      <param name="right">The right provider for union.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider">
      <summary>
            Acquires the lock for a data in a source provider.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.LockMode">
      <summary>
            The delegate returning the mode of the lock to be acquired.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.LockBehavior">
      <summary>
            The delegate returning the behavior of the lock.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="lockMode">The mode of the lock to be acquired.</param>
      <param name="lockBehavior">The behavior of the lock.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{Xtensive.Storage.Rse.LockMode},System.Func{Xtensive.Storage.Rse.LockBehavior})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="lockMode">The delegate returning the mode of the lock to be acquired.</param>
      <param name="lockBehavior">The delegate returning the behavior of the lock.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider">
      <summary>
            Compilable provider that returns <see cref="T:System.Boolean" /> column. 
            Column value is <see langword="true" /> if source value equal to one of provided values; 
            otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.IncludeAlgorithm,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}}},System.String,System.Int32[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="source">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.</param>
      <param name="algorithm">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.Algorithm" />.</param>
      <param name="isInlined">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.IsInlined" />.</param>
      <param name="filterDataSource">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilterDataSource" />.</param>
      <param name="resultColumnName">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.ResultColumnName" />.</param>
      <param name="filteredColumns">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilteredColumns" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.IsInlined">
      <summary>
            Gets a value indicating whether result column should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.ResultColumnName">
      <summary>
            Gets the name of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.Algorithm">
      <summary>
            Gets the algorithm that performes filtering.
            For non-SQL storages value of this field has no effect.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilteredColumns">
      <summary>
            Gets the filtered columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilterDataSource">
      <summary>
            Gets filter data.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider">
      <summary>
            Executes full-text search (free text query) against specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider.PrimaryIndex" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> visitor class. Result is <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitCompilable(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Visits the compilable provider.
            </summary>
      <param name="cp">The compilable provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.OnRecursionExit(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
            Called after recursion exit.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.OnRecursionEntrance(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
            Called before recursion entrance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.#ctor(System.Func{Xtensive.Storage.Rse.Providers.Provider,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
      <inheritdoc />
      <param name="expressionTranslator">Expression translator.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.AggregateColumn">
      <summary>
            Aggregate column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.Clone(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.Clone(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.#ctor(Xtensive.Storage.Rse.AggregateColumnDescriptor,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="descriptor">
        <see cref="T:Xtensive.Storage.Rse.AggregateColumnDescriptor" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumn.SourceIndex" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.AggregateType">
      <summary>
            Gets the aggregate function.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.SourceIndex">
      <summary>
            Gets the source column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.Descriptor">
      <summary>
            Gets column descriptor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.AggregateColumnDescriptor">
      <summary>
            Descriptor of the calculated column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumnDescriptor.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumnDescriptor.#ctor(System.String,System.Int32,Xtensive.Storage.Rse.AggregateType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.SourceIndex" /> property value.</param>
      <param name="aggregateType">The <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.AggregateType" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.Name">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.SourceIndex">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.AggregateType">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider">
      <summary>
            Base class for unary operation provider over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type of the provider.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source">
      <summary>
            Source provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.TransferType">
      <summary>
            Enumerates transfer preference options.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Default">
      <summary>
            Default option is a <see cref="F:Xtensive.Storage.Rse.TransferType.Server" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Server">
      <summary>
            Prefer server execution.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Client">
      <summary>
            Prefer client execution.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase">
      <summary>
            Base class for any compilable sorting providers
            (<see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" /> and <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractor(Xtensive.Tuples.Tuple)">
      <summary>
            Extracts the key part from <paramref name="tuple" /> using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractorTransform" />.
            </summary>
      <param name="tuple">The tuple to extract the key from.</param>
      <returns>A tuple containing extracted order key.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Collections.DirectionCollection{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="providerType">Provider type.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order">
      <summary>
            Sort order of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractorTransform">
      <summary>
            Gets the key extractor transform.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyComparer">
      <summary>
            Gets the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> key comparer.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider">
      <summary>
            Base class for binary operation provider over 
            the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> providers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.BuildHeader">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type of provider.</param>
      <param name="left">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.</param>
      <param name="right">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left">
      <summary>
            Left source.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right">
      <summary>
            Right source.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.Default">
      <summary>
            Default join operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.Inner">
      <summary>
            Inner join.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.LeftOuter">
      <summary>
            Left outer join.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.JoinAlgorithm">
      <summary>
             Join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Default">
      <summary>
             Default join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Loop">
      <summary>
             Loop join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.NestedLoop">
      <summary>
             Nested Loop join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Merge">
      <summary>
             Merge join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Hash">
      <summary>
             Hash join algorithm.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.CalculatedColumnDescriptor">
      <summary>
            Descriptor of the calculated column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumnDescriptor.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumnDescriptor.#ctor(System.String,System.Type,System.Linq.Expressions.Expression{System.Func{Xtensive.Tuples.Tuple,System.Object}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Name" /> property value.</param>
      <param name="type">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Type" /> property value.</param>
      <param name="expression">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Expression" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Name">
      <summary>
            Gets the column name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Type">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Expression">
      <summary>
            Gets the column expression.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.CalculatedColumn">
      <summary>
            Calculated column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.Clone(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.Clone(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.#ctor(Xtensive.Storage.Rse.CalculatedColumnDescriptor,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="descriptor">
        <see cref="T:Xtensive.Storage.Rse.CalculatedColumnDescriptor" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumn.Expression">
      <summary>
            Gets the column expression.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Column">
      <summary>
            Base class for any column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Equals(Xtensive.Storage.Rse.Column)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.op_Equality(Xtensive.Storage.Rse.Column,Xtensive.Storage.Rse.Column)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.op_Inequality(Xtensive.Storage.Rse.Column,Xtensive.Storage.Rse.Column)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Name" />.
            </summary>
      <param name="newName">The new name value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Name" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.#ctor(System.String,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Name">
      <summary>
            Gets the column name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Index">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Type">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.SystemColumn">
      <summary>
            System column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.Clone(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.Clone(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.#ctor(System.String,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.TemporaryDataScope">
      <summary>
            Temporary data lifetime scope.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Enumeration">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />-level scope.
            Temporary data "lives" for the duration of enumeration it is created in.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Transaction">
      <summary>
        <see cref="F:Xtensive.Storage.Rse.TemporaryDataScope.Transaction" />-level scope.
            Temporary data "lives" for the duration of transaction it is created in.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Global">
      <summary>
            Global (<see cref="F:Xtensive.Storage.Rse.TemporaryDataScope.Global" />-level) scope.
            Temporary data "lives" infinitely.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.ApplyParameter">
      <summary>
            A parameter for accessing current tuple of left (outer) <see cref="T:Xtensive.Storage.Rse.Providers.Provider" />
            within right (inner) <see cref="T:Xtensive.Storage.Rse.Providers.Provider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Value for <see cref="P:Xtensive.Storage.Rse.ApplyParameter.Name" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.ApplyParameter.Name">
      <summary>
            Gets the name of this parameter.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Storage.Rse.ApplyParameter.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Xtensive.Storage.Rse.ApplySequenceType">
      <summary>
            Apply operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.Default">
      <summary>
        <see cref="F:Xtensive.Storage.Rse.ApplySequenceType.All" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.All">
      <summary>
            All rows.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.First">
      <summary>
            Expects at least one row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.Single">
      <summary>
            Expects single row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.FirstOrDefault">
      <summary>
            Applies only first row if it exists; otherwise applies default row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.SingleOrDefault">
      <summary>
            Applies single row if it exists; otherwise applies default row.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.LockMode">
      <summary>
            Lock mode.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Default">
      <summary>
            Default lock mode. Equals to <see cref="F:Xtensive.Storage.Rse.LockMode.Shared" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Shared">
      <summary>
            Shared lock.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Update">
      <summary>
            Lock for the following update.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Exclusive">
      <summary>
            Exclusive lock.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.LockBehavior">
      <summary>
            Lock behavior.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Default">
      <summary>
            Default lock behavior. Equals to <see cref="F:Xtensive.Storage.Rse.LockBehavior.Wait" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Wait">
      <summary>
            Wait until a lock is released.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.ThrowIfLocked">
      <summary>
            Throw exception if a lock is occupied.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Skip">
      <summary>
            Skip locked records.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.IncludeAlgorithm">
      <summary>
            Include algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.Auto">
      <summary>
            Inclusion algorithm must be automatically chosen based on filter data.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.ComplexCondition">
      <summary>
            Inclusion is described as a complex condition (expression).
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.TemporaryTable">
      <summary>
            Inclusion is described via temporary table.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.AggregateType">
      <summary>
            Defines the set of aggregate functions.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Avg">
      <summary>
            Average of the values in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Count">
      <summary>
            A count of the values in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Max">
      <summary>
            Highest value in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Min">
      <summary>
            Lowest value in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Sum">
      <summary>
            Total of values in a column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper">
      <summary>
            Various extension methods for manipulating expressions with <see cref="T:Xtensive.Tuples.Tuple" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.IsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Checks if expression is access to tuple.
            </summary>
      <param name="expression">Expression to check.</param>
      <param name="tupleParameter">Tuple parameter that access must be on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.IsTupleAccess(System.Linq.Expressions.Expression)">
      <summary>
            Checks if expression is access to tuple.
            </summary>
      <param name="expression">Expression to check.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression)">
      <summary>
            If <paramref name="expression" /> is an access to tuple element
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            </summary>
      <param name="expression">An expression to check.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            If <paramref name="expression" /> is an access to tuple element.
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            This method only accepts access to specified parameter and access to outer parameters (<see cref="T:Xtensive.Storage.Rse.ApplyParameter" />).
            </summary>
      <param name="expression">An expression to check.</param>
      <param name="currentParameter">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> considered as current parameter.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
            If <paramref name="expression" /> is an access to tuple element.
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            This method only accepts access to specified parameters and access to outer parameters (<see cref="T:Xtensive.Storage.Rse.ApplyParameter" />).
            </summary>
      <param name="expression">An expression to check.</param>
      <param name="currentParameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />s  considered as current parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.GetTupleAccessArgument(System.Linq.Expressions.Expression)">
      <summary>
            Gets the tuple access argument (column index).
            </summary>
      <param name="expression">An expression describing an access to tuple element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.GetApplyParameter(System.Linq.Expressions.Expression)">
      <summary>
            Tries to extract apply parameter from <paramref name="expression" />.
            If <paramref name="expression" /> is an access to column of outer tuple returns <see cref="T:Xtensive.Storage.Rse.ApplyParameter" /> instance.
            Otherwise returns <see langword="null" />.
            </summary>
      <param name="expression">The expression describing an access to outer tuple.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Orm.NotifyChangedOptions">
      <summary>
            Enumerates possible options for <see cref="M:Xtensive.Orm.Session.NotifyChanged(Xtensive.Orm.NotifyChangedOptions)" /> method.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.NotifyChangedOptions.Prefetch">
      <summary>
            Indicates whether all entities must be prefetched.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.NotifyChangedOptions.SkipRemovedEntities">
      <summary>
            Indicates whether removed entities must not be notified.
            Implies <see cref="F:Xtensive.Orm.NotifyChangedOptions.Prefetch" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityIdentifierType">
      <summary>
            Possible identifier types for <see cref="M:Xtensive.Orm.IEntity.IdentifyAs(Xtensive.Orm.Operations.EntityIdentifierType)" /> method.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.EntityIdentifierType.Auto">
      <summary>
            Automatically generated indetifier.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Operations.EntityIdentifierType.None">
      <summary>
            No identifier (i.e. identifier must not be logged).
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IUniqueOperation">
      <summary>
            Contract for an operation that must be logged only once
            in a given <see cref="T:Xtensive.Orm.OperationLog" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IUniqueOperation.IgnoreIfDuplicate">
      <summary>
            Gets a value indicating whether to ignore the duplicate of this operation, 
            or to throw an <see cref="T:System.InvalidOperationException" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityFieldOperation">
      <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity" /> field.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the entity.</param>
      <param name="field">The field involved into the operation.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldOperation.Field">
      <summary>
            Gets the field involved into the operation.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitySetOperation">
      <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.Entity" /> field of <see cref="T:Xtensive.Orm.EntitySet`1" /> type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetOperation.GetEntitySet(Xtensive.Orm.Operations.OperationExecutionContext)">
      <summary>
            Gets the entity set involved into this operation.
            </summary>
      <param name="context">The operation context.</param>
      <returns>Entity set involved into this operation.</returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
      <exception cref="T:System.ArgumentOutOfRangeException">Type of provided <paramref name="field" />
            must be a descendant of <see cref="T:Xtensive.Orm.EntitySetBase" /> type.</exception>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitySetItemOperation">
      <summary>
            Describes an operation with <see cref="T:Xtensive.Orm.EntitySet`1" /> item.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the entity.</param>
      <param name="field">The field involved into the operation.</param>
      <param name="itemKey">The item key.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitySetItemOperation.ItemKey">
      <summary>
            Gets the key of the involved item.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitySetItemOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitySetItemRemoveOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1" /> item add operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitySetItemRemoveOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitySetItemAddOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.EntitySet`1" /> item add operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetItemAddOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitySetItemAddOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitySetClearOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> creation operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitySetClearOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitySetClearOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityCreateOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> creation operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.#ctor(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityCreateOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.TypeName">
      <summary>
            Gets the type name of the entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.Title">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityCreateOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.EntitiesRemoveOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> removal operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keys">The keys of entities to remove.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntitiesRemoveOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntitiesRemoveOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.KeyGenerateOperation">
      <summary>
            Describes key generation operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.#ctor(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.KeyGenerateOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.KeyGenerateOperation.Title">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.OperationCapturer">
      <summary>
            A service listening to operation-related events in <see cref="T:Xtensive.Orm.Session" />
            and writing their sequence to <see cref="P:Xtensive.Orm.Operations.OperationCapturer.Operations" /> instance 
            (<see cref="T:Xtensive.Orm.IOperationLogger" />).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationCapturer.Attach(Xtensive.Orm.IOperationLogger)">
      <summary>
            Attaches the operation capturer to the current session.
            </summary>
      <param name="operations">The operation logger to append captured operations to.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.Operations.OperationCapturer" /> attached
            to the current session.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationCapturer.Attach(Xtensive.Orm.Session,Xtensive.Orm.IOperationLogger)">
      <summary>
            Attaches the operation capturer to the specified session.
            </summary>
      <param name="session">The session to attach the capturer to.</param>
      <param name="operations">The operation logger to append captured operations to.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.Operations.OperationCapturer" /> attached
            to the specified <paramref name="session" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Operations.OperationCapturer.Dispose">
      <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.Operations.OperationCapturer.Operations">
      <summary>
            Gets the operation set updated by this service.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IOperationLogger">
      <summary>
        <see cref="T:Xtensive.Orm.IOperation" /> logger contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IOperationLogger.Log(Xtensive.Orm.IOperation)">
      <summary>
            Logs the specified operation.
            </summary>
      <param name="operation">The operation.</param>
    </member>
    <member name="M:Xtensive.Orm.IOperationLogger.Log(System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
      <summary>
            Logs the specified sequence of operations.
            </summary>
      <param name="source">The source sequence.</param>
    </member>
    <member name="P:Xtensive.Orm.IOperationLogger.LogType">
      <summary>
            Gets operation log type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.ValidateVersionOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> version validation operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
      <exception cref="T:Xtensive.Orm.VersionConflictException">Version check failed.</exception>
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key of the <see cref="T:Xtensive.Orm.Entity" />.</param>
      <param name="version">The original version.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.ValidateVersionOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Version">
      <summary>
            Gets the original version of <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.IgnoreIfDuplicate">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Title">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.ValidateVersionOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.VersionInfo">
      <summary>
            Contains information about entity version.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.Combine(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
      <summary>
            Combines this version with the specified key value tuple and specified version tuple.
            </summary>
      <param name="key">The key to combine.</param>
      <param name="versionInfo">The version info to combine.</param>
      <returns>Combined version info.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.ConflictsWith(Xtensive.Orm.VersionInfo)">
      <summary>
            Checks whether this <see cref="T:Xtensive.Orm.VersionInfo" />
            conflicts with <paramref name="other" /><see cref="T:Xtensive.Orm.VersionInfo" />.
            There is no conflict, if all mutually available fields in
            <see cref="P:Xtensive.Orm.VersionInfo.Value" />s are equal, and count of fields is the same.
            </summary>
      <param name="other">The other <see cref="T:Xtensive.Orm.VersionInfo" />.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.Equals(Xtensive.Orm.VersionInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.op_Equality(Xtensive.Orm.VersionInfo,Xtensive.Orm.VersionInfo)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.op_Inequality(Xtensive.Orm.VersionInfo,Xtensive.Orm.VersionInfo)">
      <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Internals.DocTemplates.ClassDocTemplate,Xtensive.Internals.DocTemplates.ClassDocTemplate)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.VersionInfo.#ctor(Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="version">The version tuple.</param>
    </member>
    <member name="P:Xtensive.Orm.VersionInfo.Void">
      <summary>
            Gets the void <see cref="T:Xtensive.Orm.VersionInfo" /> object.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.VersionInfo.IsVoid">
      <summary>
            Gets a value indicating whether this instance is not contains version.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSet">
      <summary>
            Provides access to a sequence of <see cref="T:Xtensive.Tuples.Tuple" />s
            exposed by its <see cref="T:Xtensive.Storage.Rse.Providers.Provider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.GetGreedyEnumerator">
      <summary>
              Way 1: preloading all the data into memory and returning it inside this scope.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.GetBatchedEnumerator">
      <summary>
              Way 2: batched enumeration with periodical context activation
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.CompilationService">
      <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationService" /> suitable for storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.CompilationService.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.ICompiler,Xtensive.Storage.Rse.Compilation.IPostCompiler},System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.CompilationService">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> compilation service.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.CompilationService.CacheEntry">
      <summary>
            Describes RSE compilation cache entry.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationService.CacheEntry.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationService.DefaultCacheSize">
      <summary>
            Gets the size of compilation cache.
            Currently it is 256 (compilation results).
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationService.Default">
      <see cref="P:Xtensive.Internals.DocTemplates.HasStaticDefaultDocTemplate.Default" copy="true" />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationService.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider by passing it to <see cref="T:Xtensive.Storage.Rse.Compilation.ICompiler" />.
            <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)" /> method.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>The result of the compilation.</returns>
      <exception cref="T:System.InvalidOperationException">Can't compile the specified 
            <paramref name="provider" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationService.CreateCache(System.Int32)">
      <summary>
            Creates RSE compilation cache.
            </summary>
      <param name="cacheSize">Size of the cache.</param>
      <returns>RSE compilation cache.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationService.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.ICompiler,Xtensive.Storage.Rse.Compilation.IPostCompiler})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="compilerProvider">The compiler provider.</param>
      <param name="preCompilerProvider">The pre-compiler provider.</param>
      <param name="postCompilerProvider">The post-compiler provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationService.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.ICompiler,Xtensive.Storage.Rse.Compilation.IPostCompiler},System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="compilerProvider">The compiler provider.</param>
      <param name="preCompilerProvider">The pre-compiler provider.</param>
      <param name="postCompilerProvider">The post-compiler provider.</param>
      <param name="cacheSize">Size of the cache.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationContext">
      <summary>
            The single enumeration attempt context for the <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.BeginEnumeration">
      <summary>
            Should be called before enumeration of your <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
      <returns>An <see cref="T:System.IDisposable" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.CreateNew">
      <summary>
            Factory method. Creates new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.SetValue``1(System.Object,``0)">
      <summary>
            Caches the value in the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="value">The value to cache.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.GetValue``1(System.Object)">
      <summary>
            Gets the cached value from the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <returns>Cached value with the specified key;
            <see langword="null" />, if no cached value is found, or it is already expired.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.SetValue``1(System.Object,System.String,``0)">
      <summary>
            Caches the value in the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="name">The cache name.</param>
      <param name="value">The value to cache.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.GetValue``1(System.Object,System.String)">
      <summary>
            Gets the cached value from the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="name">The cache name.</param>
      <returns>
            Cached value with the specified key;
            <see langword="null" />, if no cached value is found, or it is already expired.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.CheckOptions(Xtensive.Storage.Rse.Providers.EnumerationContextOptions)">
      <summary>
            Checks whenever the specified option set is enable for this context.
            </summary>
      <param name="requiredOptions">The options to check.</param>
      <returns>
        <see langword="true" /> if the speicifed options set is enable in this context;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.EnsureIsActive">
      <summary>
            Ensures the context is active.
            </summary>
      <exception cref="T:System.InvalidOperationException">Context is not active.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.Options">
      <summary>
            Gets the options of this context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.GlobalTemporaryData">
      <summary>
            Gets the global temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.TransactionTemporaryData">
      <summary>
            Gets the transaction temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.IsActive">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordQueryExtensions">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordQueryExtensions.Lock(Xtensive.Storage.Rse.RecordQuery,Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="source">The source.</param>
      <param name="lockMode">The lock mode.</param>
      <param name="lockBehavior">The lock behavior.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> which is the result of 
            the created <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordQueryExtensions.Lock(Xtensive.Storage.Rse.RecordQuery,System.Func{Xtensive.Storage.Rse.LockMode},System.Func{Xtensive.Storage.Rse.LockBehavior})">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="source">The source.</param>
      <param name="lockMode">The delegate returning the lock mode.</param>
      <param name="lockBehavior">The delegate returning the lock behavior.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> which is the result of 
            the created <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.</returns>
    </member>
    <member name="T:Xtensive.Orm.Services.DirectPersistentAccessor">
      <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.Persistent" /> descendants.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(System.Type)">
      <summary>
            Creates new entity instance of the specified type.
            </summary>
      <param name="entityType">The type of entity to create. Must be descendant of the <see cref="T:Xtensive.Orm.Entity" /> type.</param>
      <returns>Newly created entity.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(System.Type,Xtensive.Tuples.Tuple)">
      <summary>
            Creates new entity instance of the specified type with the specified value.
            </summary>
      <param name="entityType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Entity" /> type.</param>
      <param name="tuple">The tuple with entity data.</param>
      <returns>Created entity.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateEntity(Xtensive.Orm.Key)">
      <summary>
            Creates new entity instance with the specified key. Key should have exact type.
            </summary>
      <param name="key">The key.</param>
      <returns>Created entity.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateStructure(System.Type)">
      <summary>
            Creates new <see cref="T:Xtensive.Orm.Structure" /> of the specified type.
            </summary>
      <param name="structureType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Structure" /> type.</param>
      <returns>Created structure.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.CreateStructure(System.Type,Xtensive.Tuples.Tuple)">
      <summary>
            Creates new <see cref="T:Xtensive.Orm.Structure" /> of the specified type filled with provided data.
            </summary>
      <param name="structureType">The type of structure to create. Must be descendant of the <see cref="T:Xtensive.Orm.Structure" /> type.</param>
      <param name="structureData">The structure data tuple.</param>
      <returns>Created structure.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetFieldValue(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the value of the specified persistent field of the target.
            </summary>
      <param name="target">The target entity or structure.</param>
      <param name="field">The field.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetFieldValue``1(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the value of the specified persistent field of the target.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="target">The target entity or structure.</param>
      <param name="field">The field.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.AreSameValues(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
      <summary>
            Indicates whether specified field values are equal.
            </summary>
      <param name="target">The target entity or structure.</param>
      <param name="field">The field.</param>
      <param name="value1">The first value.</param>
      <param name="value2">The second value.</param>
      <returns>Comparison result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.GetReferenceKey(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the key of the entity, that is referenced by specified field 
            of the target persistent object.
            </summary>
      <remarks>
            Result is the same as <c>target.GetValue&lt;Entity&gt;(field).Key</c>, 
            but referenced entity will not be materialized.
            </remarks>
      <param name="target">The target persistent object.</param>
      <param name="field">The reference field. Field value type must be 
            <see cref="T:Xtensive.Orm.Entity" /> descendant.</param>
      <returns>Referenced entity key.</returns>
      <exception cref="T:System.InvalidOperationException">Field is not a reference field.</exception>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.SetFieldValue(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Sets the value of the specified persistent field of the target.
            </summary>
      <param name="target">The target persistent object.</param>
      <param name="field">The field to set value for.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.SetFieldValue``1(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo,``0)">
      <summary>
            Sets the value of the specified persistent field of the target.
            </summary>
      <typeparam name="T">Value type</typeparam>
      <param name="target">The target persistent object.</param>
      <param name="field">The field to set value for.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.Remove(Xtensive.Orm.Entity)">
      <summary>
            Removes the specified entity.
            </summary>
      <param name="target">The entity to remove.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.ValidateArguments(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Validates the arguments passed to some of methods.
            </summary>
      <param name="target">The persistent type.</param>
      <param name="field">The field of persistent type.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectPersistentAccessor.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Structure">
      <summary>
            Abstract base class for any persistent structure.
            Persistent structures are types having <see cref="T:System.ValueType" /> behavior -
            they have no keys, and thus can be stored only as parts of entities.
            </summary>
      <remarks>
        <para>
            Like <see cref="P:Xtensive.Orm.Structure.Entity" />, structures support inheritance and consist of one or more persistent 
            fields (properties) of scalar, <see cref="T:Xtensive.Orm.Structure" />, or <see cref="P:Xtensive.Orm.Structure.Entity" /> type.
            </para>
        <para>
            However unlike entity, structure is not identified by <see cref="T:Xtensive.Orm.Key" />
            and has value type behavior: it can be stored only inside some entity.
            </para>
      </remarks>
      <example>In the following example Address fields (City, Street and Building) will be included in Person table.
            <code>
            public class Person : Entity
            {
              [Field, Key]
              public int Id { get; set; }
            
              public string Name { get; set; }
            
              public Address Address { get; set; }
            }
            
            public class Address : Structure
            {
              [Field]
              public City City { get; set; }
              
              [Field]
              public string Street { get; set; }
            
              [Field]
              public string Building { get; set; }
            }
            </code></example>
    </member>
    <member name="M:Xtensive.Orm.Structure.GetSubscription(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Structure.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Structure.Equals(Xtensive.Orm.Structure)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Structure.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="data">Underlying <see cref="P:Xtensive.Orm.Structure.Tuple" /> value.</param>
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Session,Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="data">Underlying <see cref="P:Xtensive.Orm.Structure.Tuple" /> value.</param>
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor(Xtensive.Orm.Persistent,Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
            Used internally to initialize the structure on materialization.
            </summary>
      <param name="owner">The owner of this instance.</param>
      <param name="field">The owner field that describes this instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Structure.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.Structure.TypeInfo">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Structure.Owner">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Structure.Field">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Structure.Entity">
      <summary>
            Gets the entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Structure.IsBoundToEntity">
      <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Orm.Structure" /> instance is bound to entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Structure.Tuple">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Structure.CanBeValidated">
      <inheritdoc />
    </member>
    <member name="E:Xtensive.Orm.Structure.PropertyChanged">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Services.DirectEntityAccessor">
      <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.Persistent" /> descendants.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntityAccessor.UpdateVersionInfo(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Invoked to update <paramref name="targetEntity" />'s <see cref="P:Xtensive.Orm.Entity.VersionInfo" />.
            </summary>
      <param name="targetEntity">The changed entity.</param>
      <param name="changedField">The changed field.</param>
      <returns>
        <see langword="True" />, if <see cref="T:Xtensive.Orm.VersionInfo" /> was changed;
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.NotSupportedException">Version root can't implement
            <see cref="T:Xtensive.Orm.IHasVersionRoots" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntityAccessor.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Services.DirectSqlAccessor">
      <summary>
            Provides access to such low-level objects as 
            <see cref="T:System.Data.Common.DbCommand" /> and <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.CreateCommand">
      <see cref="M:Xtensive.Storage.Providers.IDirectSqlService.CreateCommand" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.EnsureIsAvailable">
      <exception cref="T:System.NotSupportedException">Underlying storage provider 
            does not support SQL.</exception>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSqlAccessor.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session this instance is bound to.</param>
    </member>
    <member name="P:Xtensive.Orm.Services.DirectSqlAccessor.IsAvailable">
      <summary>
            Gets a value indicating whether direct SQL capabilities are available.
            Returns <see langword="true" />, if underlying storage provider 
            supports SQL.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.DirectSqlAccessor.Connection">
      <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Connection" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.Services.DirectSqlAccessor.Transaction">
      <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Transaction" copy="true" />
    </member>
    <member name="T:Xtensive.Storage.Providers.IDirectSqlService">
      <summary>
            A handler used by <see cref="T:Xtensive.Orm.Services.DirectSqlAccessor" />.
            If implemented by provider
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.IDirectSqlService.CreateCommand">
      <summary>
            Creates the <see cref="T:System.Data.Common.DbCommand" /> object associated with the
            current <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Connection" /> and <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Transaction" />.
            </summary>
      <returns>Newly created <see cref="T:System.Data.Common.DbCommand" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">Connection is not open.</exception>
    </member>
    <member name="P:Xtensive.Storage.Providers.IDirectSqlService.Connection">
      <summary>
            Gets the underlying connection that is currently in use.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.IDirectSqlService.Transaction">
      <summary>
            Gets the underlying transaction that is currently running.
            <see langword="null" />, if transaction isn't running now.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Services.DirectStateAccessor">
      <summary>
            Provides direct read-only access to various caches.
            Note that this is a fully static service.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.Session)">
      <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.Session" /> state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.Persistent)">
      <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.Persistent" /> instance state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectStateAccessor.Get(Xtensive.Orm.EntitySetBase)">
      <summary>
            Gets public accessor to <see cref="T:Xtensive.Orm.EntitySetBase" /> instance state.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Services.SessionStateAccessor">
      <summary>
            Public API to cached state of the <see cref="P:Xtensive.Orm.Services.SessionStateAccessor.Session" />
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor" />).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.SessionStateAccessor.Invalidate">
      <summary>
            Invalidates (forgets) all the pending changes 
            and the state of all cached entities.
            Very similar to what happens on rollback, but
            without rollback itself.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.SessionStateAccessor.RemapEntityKeys(Xtensive.Orm.KeyMapping)">
      <summary>
            Remaps the keys of cached entities
            accordingly with the specified <paramref name="keyMapping" />.
            </summary>
      <param name="keyMapping">The key mapping.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.SessionStateAccessor.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Session">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Services.SessionStateAccessor.Session" /> instance this accessor is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Count">
      <summary>
            Gets the number of cached entities.
            Note that it can differ from the number of entities
            returned by <see cref="M:Xtensive.Orm.Services.SessionStateAccessor.GetEnumerator" /> methods
            (cache can be week, etc.).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.SessionStateAccessor.Item(Xtensive.Orm.Key)">
      <summary>
            Gets cached <see cref="T:Xtensive.Orm.Entity" /> with the specified key.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Services.PersistentStateAccessor">
      <summary>
            Public API to cached state of <see cref="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent" /> instance
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor" />).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.PersistentStateAccessor.GetFieldState(System.String)">
      <summary>
            Gets the state of the field.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <returns>The state of the field.</returns>
    </member>
    <member name="M:Xtensive.Orm.Services.PersistentStateAccessor.GetFieldState(Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the state of the field.
            </summary>
      <param name="field">The field to get the state for.</param>
      <returns>The state of the field.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="field" /> belongs to a different type.</exception>
    </member>
    <member name="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent">
      <summary>
            Gets the <see cref="P:Xtensive.Orm.Services.PersistentStateAccessor.Persistent" /> instance this accessor is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Services.EntitySetStateAccessor">
      <summary>
            Public API to cached state of <see cref="T:Xtensive.Orm.EntitySet`1" /> 
            (see <see cref="T:Xtensive.Orm.Services.DirectStateAccessor" />).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.EntitySetStateAccessor.Contains(Xtensive.Orm.Key)">
      <summary>
            Indicates whether a specified <paramref name="key" /> is cached or not.
            </summary>
      <param name="key">The key to check.</param>
      <returns>
        <see langword="true" /> if the specified key is cached; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.EntitySetStateAccessor.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.EntitySet">
      <summary>
            Gets the entity set this accessor is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.Count">
      <summary>
            Gets the number of cached items.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.IsCountAvailable">
      <summary>
            Gets a value indicating whether an attempt to read
            <see cref="P:Xtensive.Orm.EntitySetBase.Count" /> won't hit the database.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Services.EntitySetStateAccessor.IsFullyLoaded">
      <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Orm.Services.EntitySetStateAccessor.EntitySet" /> is fully loaded,
            so any read request to it won't hit the database.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.ReaderPreloadingPolicy">
      <summary>
            A policy for dealing with database readers.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Default">
      <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Auto" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Auto">
      <summary>
            Preload reader if and only if the underlying storage does not support MARS.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Always">
      <summary>
            Always preload reader.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.ReaderPreloadingPolicy.Never">
      <summary>
            Never preload reader.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.EntitySetState">
      <summary>
            Describes cached state of <see cref="T:Xtensive.Orm.EntitySetBase" /></summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Update(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key},System.Nullable{System.Int64})">
      <summary>
            Sets cached keys to <paramref name="keys" />.
            </summary>
      <param name="keys">The keys.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Contains(Xtensive.Orm.Key)">
      <summary>
            Determines whether cached state contains specified item.
            </summary>
      <param name="key">The key.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Register(Xtensive.Orm.Key)">
      <summary>
            Registers the specified fetched key in cached state.
            </summary>
      <param name="key">The key to register.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Add(Xtensive.Orm.Key)">
      <summary>
            Adds the specified key.
            </summary>
      <param name="key">The key to add.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Remove(Xtensive.Orm.Key)">
      <summary>
            Removes the specified key.
            </summary>
      <param name="key">The key to remove.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Invalidate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.Refresh">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetState.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetState.TotalItemCount">
      <summary>
            Gets the total number of items.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetState.CachedItemCount">
      <summary>
            Gets the number of cached items.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetState.IsFullyLoaded">
      <summary>
            Gets a value indicating whether state is fully loaded.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetState.IsLoaded">
      <summary>
            Gets or sets a value indicating whether this instance is loaded.
            </summary>
      <value>
        <see langword="true" /> if this instance is preloaded; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Orm.Linq.Expressions.ParameterizedExpression.CanRemap">
      <summary>
            Check if <see cref="T:Xtensive.Orm.Linq.Expressions.ParameterizedExpression" /> can be remapped 
            according to current <see cref="T:Xtensive.Orm.Linq.RemapContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.RemapScope.#ctor(Xtensive.Orm.Linq.RemapContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:Xtensive.Orm.Linq.RemapScope.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.RemapScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.RemapScope.Context">
      <summary>
            Gets the context of this scope.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.Expressions.FullTextExpression.Mapping">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="T:Xtensive.Orm.FullTextMatch`1">
      <summary>
            Single full-text search match result.
            </summary>
      <typeparam name="T">Type of the matched entity.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.FullTextMatch`1.#ctor(System.Double,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="rank">The <see cref="P:Xtensive.Orm.FullTextMatch`1.Rank" /> property value.</param>
      <param name="target">The <see cref="P:Xtensive.Orm.FullTextMatch`1.Entity" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.FullTextMatch`1.Rank">
      <summary>
            Gets the rank of the full-text document.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.FullTextMatch`1.Entity">
      <summary>
            Gets the target entity.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Rewriters.PersistentIndexerRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Rewriters.PersistentIndexerRewriter.GetMemberExpression(System.Linq.Expressions.MethodCallExpression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="T:Xtensive.Orm.Linq.ExpressionEvaluator">
      <summary>
            Expression visitor that checks ability to evaluate expression to <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.CanBeEvaluated(System.Linq.Expressions.Expression)">
      <summary>
            Determines whether specified <paramref name="e" /> can be evaluated.
            </summary>
      <param name="e">The expression.</param>
      <returns>
        <see langword="true" /> if <paramref name="e" /> can be evaluated; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression)">
      <summary>
            Evaluates the specified <paramref name="e" /> into <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
      <param name="e">The expression.</param>
    </member>
    <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.Visit(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.VisitUnknown(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.ExpressionEvaluator.#ctor(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitOfType(System.Linq.Expressions.Expression,System.Type,System.Type)">
      <exception cref="T:System.NotSupportedException">OfType supports only 'Entity' conversion.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitCast(System.Linq.Expressions.Expression,System.Type,System.Type)">
      <exception cref="T:System.InvalidCastException">Unable to cast item.</exception>
      <exception cref="T:System.NotSupportedException">Cast supports only 'Entity' conversion.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitAggregate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression,System.Boolean,System.Linq.Expressions.MethodCallExpression)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitSequence(System.Linq.Expressions.Expression)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitNew(System.Linq.Expressions.NewExpression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitBinaryRecursive(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.GetMember(System.Linq.Expressions.Expression,System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.VisitTypeAs(System.Linq.Expressions.Expression,System.Type)">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Translator.#ctor(Xtensive.Orm.Linq.TranslatorContext)">
      <exception cref="T:System.InvalidOperationException">There is no current <see cref="T:Xtensive.Orm.Session" />.</exception>
    </member>
    <member name="T:Xtensive.Orm.Configuration.DomainTypeRegistry">
      <summary>
            An implementation of <see cref="T:Xtensive.Collections.TypeRegistry" />
            used by the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsInterestingType(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is any of types <see cref="T:Xtensive.Orm.Configuration.DomainTypeRegistry" /> 
            is interested in.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsPersistentType(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is persistent type.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsDomainService(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is <see cref="T:Xtensive.Orm.Domain" />-level service.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsSessionService(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is <see cref="T:Xtensive.Orm.Session" />-level service.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsModule(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is <see cref="T:Xtensive.Orm.Domain" /> module.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsUpgradeHandler(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is <see cref="T:Xtensive.Orm.Domain" /> upgrade handler.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsKeyGenerator(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is key generator.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsQueryPreprocessor(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is query preprocessor.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.IsCompilerContainer(System.Type)">
      <summary>
            Determines whether a <paramref name="type" />
            is compiler container.
            </summary>
      <param name="type">The type to check.</param>
      <returns>Check result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.Clone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.#ctor(Xtensive.Collections.ITypeRegistrationProcessor)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="processor">The registry action processor.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainTypeRegistry.#ctor(Xtensive.Collections.TypeRegistry)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.PersistentTypes">
      <summary>
            Gets all the registered persistent types.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.DomainServices">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Domain" />-level service types.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.SessionServices">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Session" />-level service types.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.Modules">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.IModule" /> implementations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.UpgradeHandlers">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.Upgrade.IUpgradeHandler" /> implementations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.KeyGenerators">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.KeyGenerator" /> implementations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.QueryPreprocessors">
      <summary>
            Gets all the registered <see cref="T:Xtensive.Orm.IQueryPreprocessor" /> implementations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainTypeRegistry.CompilerContainers">
      <summary>
            Gets all the registered compiler containers.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IDomainService">
      <summary>
            A tagging interface marking any <see cref="T:Xtensive.Orm.Domain" />-level service.
            Domain-level services are accessible via <see cref="P:Xtensive.Orm.Domain.Services" /> property.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IModule">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" />-level extension module contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IModule.OnBuilt(Xtensive.Orm.Domain)">
      <summary>
            Called when 'complex' build process is completed.
            </summary>
      <param name="domain">The built domain.</param>
    </member>
    <member name="M:Xtensive.Orm.IModule.OnDefinitionsBuilt(Xtensive.Orm.Building.BuildingContext,Xtensive.Orm.Building.Definitions.DomainModelDef)">
      <summary>
            Called when the build of <see cref="T:Xtensive.Orm.Building.Definitions.DomainModelDef" /> is completed.
            </summary>
      <param name="context">The domain building context.</param>
      <param name="model">The domain model definition.</param>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.IUpgradeHandler">
      <summary>
            A handler responsible for upgrading a specific assembly or its part.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnBeforeStage">
      <summary>
            Override this method to modify the <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Configuration" />
            before starting the next upgrade stage.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnSchemaReady">
      <summary>
            Override this method to handle "at schema ready" event. 
            The both extracted schema and target schema are ready at this moment.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnStage">
      <summary>
            Override this method to handle "at upgrade stage" event.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.CanUpgradeFrom(System.String)">
      <summary>
            Determines whether this handler can upgrade the assembly
            from the specified version of it.
            </summary>
      <param name="oldVersion">The old assembly version.</param>
      <returns>
        <see langword="true" /> if this instance can upgrade 
            from the specified version of an old assembly; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Orm.Upgrade.UpgradeStage)">
      <summary>
            Determines whether specified persistent type should be included into the model
            in the specified <paramref name="upgradeStage" />, or not.
            </summary>
      <param name="type">The type to filter.</param>
      <param name="upgradeStage">The upgrade stage to check the availability at.</param>
      <returns>
        <see langword="true" /> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.IUpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Orm.Upgrade.UpgradeStage)">
      <summary>
            Determines whether specified persistent field (property) should be included into the model
            in the specified <paramref name="upgradeStage" />, or not.
            </summary>
      <param name="field">The field to filter.</param>
      <param name="upgradeStage">The upgrade stage to check the availability at.</param>
      <returns>
        <see langword="true" /> if type should be included into the model in the specified upgrade stage;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.IsEnabled">
      <summary>
            Gets a value indicating whether this handler is enabled.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.Assembly">
      <summary>
            Gets the assembly this handler is made for.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.AssemblyName">
      <summary>
            Gets the name of the assembly described by this handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.AssemblyVersion">
      <summary>
            Gets the version of the assembly described by this handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.IUpgradeHandler.UpgradeContext">
      <summary>
            Gets the upgrade context this handler is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IQueryPreprocessor">
      <summary>
            LINQ query preprocessor contract.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IQueryPreprocessor.Apply(System.Linq.Expressions.Expression)">
      <summary>
            Applies the preprocessor to the specified query.
            </summary>
      <param name="query">The query to apply the preprocessor to.</param>
      <returns>Application (preprocessing) result.</returns>
    </member>
    <member name="M:Xtensive.Orm.IQueryPreprocessor.IsDependentOn(Xtensive.Orm.IQueryPreprocessor)">
      <summary>
            Determines whether this query preprocessor is dependent on the <paramref name="other" /> one.
            </summary>
      <param name="other">The other query preprocessor.</param>
      <returns>
        <see langword="true" /> if this query preprocessor 
            is dependent on <paramref name="other" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.ObjectMapping.GraphComparisonResult">
      <summary>
            Result of comparison the original graph of target objects with the modified one.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.GraphComparisonResult.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
            Called when the instance is deserialized.
            </summary>
      <param name="context">The serialization context.</param>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.GraphComparisonResult.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.ObjectMapping.GraphComparisonResult.Operations">
      <summary>
            Gets the operation sequence describing the changes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ObjectMapping.GraphComparisonResult.VersionInfoProvider">
      <summary>
            Gets the delegate that should be used to resolve object versions.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ObjectMapping.IHasBinaryVersion">
      <summary>
            Contract for a POCO object whose binary version should be validated.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ObjectMapping.IHasBinaryVersion.Version">
      <summary>
            Gets or sets the binary version of an object.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.PersistentFieldState">
      <summary>
            Possible persistent field states.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistentFieldState.Loaded">
      <summary>
            Field value is loaded, so an attempt to read it won't lead to database roundptrip.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistentFieldState.Modified">
      <summary>
            Field value is loaded and modified, but not yet persisted.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.WellKnownMembers.GetMethod(System.Type,System.String,System.Int32,System.Int32)">
      <exception cref="T:System.InvalidOperationException">Method not found.</exception>
    </member>
    <member name="P:Xtensive.Orm.Internals.QueryCachingScope.ParameterizedQuery">
      <exception cref="T:System.NotSupportedException">Second attempt to set this property.</exception>
    </member>
    <member name="T:Xtensive.Orm.Delayed`1">
      <summary>
            Future returning a scalar result.
            </summary>
      <typeparam name="T">The type of the result.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Delayed`1.#ctor(Xtensive.Orm.Session,Xtensive.Orm.Linq.TranslatedQuery{`0},Xtensive.Parameters.ParameterContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="translatedQuery">The translated query.</param>
      <param name="parameterContext">The parameter context.</param>
    </member>
    <member name="P:Xtensive.Orm.Delayed`1.Value">
      <summary>
            Gets the result.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.QueryTask">
      <summary>
            Delayed query task. 
            Used internally to support delayed (future) queries.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.QueryTask.DataSource">
      <summary>
            The data surce (data provider).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.QueryTask.ParameterContext">
      <summary>
            The parameter value context.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.QueryTask.GetEnumerator">
      <exception cref="T:System.InvalidOperationException">Query task is not executed yet.</exception>
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.QueryTask.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Parameters.ParameterContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="dataSource">The data source.</param>
      <param name="parameterContext">The parameter value context.</param>
    </member>
    <member name="P:Xtensive.Orm.Internals.QueryTask.Result">
      <summary>
            Gets or sets the result of execution of this query task.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.DelayedQueryResult`1">
      <summary>
            Abstract base for a future query and future scalar implementation.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Internals.DelayedQueryResult`1.Materialize(Xtensive.Orm.Session)">
      <summary>
            Materializes a result.
            </summary>
      <param name="session">
      </param>
      <returns>The materialized result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Internals.DelayedQueryResult`1.#ctor(Xtensive.Orm.Session,Xtensive.Orm.Linq.TranslatedQuery{`0},Xtensive.Parameters.ParameterContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">
      </param>
      <param name="translatedQuery">The translated query.</param>
      <param name="parameterContext">The parameter context.</param>
    </member>
    <member name="P:Xtensive.Orm.Internals.DelayedQueryResult`1.Task">
      <summary>
            Gets the task for this future.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityEventBroker">
      <summary>
            Manages events related to <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.GettingFieldEventKey">
      <summary>
            The key for 'Getting field' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.GetFieldEventKey">
      <summary>
            The key of 'Get field' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.SettingFieldAttemptEventKey">
      <summary>
            The key of 'Setting field attempt' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.SettingFieldEventKey">
      <summary>
            The key of 'Setting field' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.SetFieldEventKey">
      <summary>
            The key of 'Set field' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.PropertyChangedEventKey">
      <summary>
            The key of 'Property changed' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.CollectionChangedEventKey">
      <summary>
            The key of 'Collection changed' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.InitializingPersistentEventKey">
      <summary>
            The key of 'Initializing persistent' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.InitializePersistentEventKey">
      <summary>
            The key of 'Initialize persistent' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.InitializationErrorPersistentEventKey">
      <summary>
            The key of 'Error on initializing persistent' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.RemovingEntityEventKey">
      <summary>
            The key of 'Removing entity' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.RemoveEntityEventKey">
      <summary>
            The key of 'Remove entity' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.InitializeEntitySetEventKey">
      <summary>
            The key of 'Initialize entity set' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.AddingEntitySetItemEventKey">
      <summary>
            The key of 'Adding entity set item' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.AddEntitySetItemEventKey">
      <summary>
            The key of 'Add entity set item' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.RemovingEntitySetItemEventKey">
      <summary>
            The key of 'Removing entity set item' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.RemoveEntitySetItemEventKey">
      <summary>
            The key of 'Remove entity set item' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.ClearingEntitySetEventKey">
      <summary>
            The key of 'Clearing entity set' event.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.EntityEventBroker.ClearEntitySetEventKey">
      <summary>
            The key of 'Clear entity set' event.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.AddSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object,System.Delegate)">
      <summary>
            Adds the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity" />'s field containing a nested object 
            which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <param name="subscriber">The delegate.</param>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.AddSubscriber(Xtensive.Orm.Key,System.Object,System.Delegate)">
      <summary>
            Adds the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <param name="subscriber">The delegate.</param>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.RemoveSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object,System.Delegate)">
      <summary>
            Removes the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity" />'s field containing a nested object 
            which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <param name="subscriber">The delegate.</param>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.RemoveSubscriber(Xtensive.Orm.Key,System.Object,System.Delegate)">
      <summary>
            Removes the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <param name="subscriber">The delegate.</param>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscriber(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
            Gets the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="fieldInfo">The <see cref="T:Xtensive.Orm.Entity" />'s field containing a nested object 
            which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <returns>A delegate registered for the event or <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscriber(Xtensive.Orm.Key,System.Object)">
      <summary>
            Gets the subscriber.
            </summary>
      <param name="key">The key of <see cref="T:Xtensive.Orm.Entity" /> which will be watched for events.</param>
      <param name="eventKey">The event key.</param>
      <returns>A delegate registered for the event or <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.GetSubscribers(System.Object)">
      <summary>
            Gets all the subscribers for the specified <paramref name="eventKey" />.
            </summary>
      <param name="eventKey">The event key.</param>
      <returns>
            The sequence of subscribers for the specified <paramref name="eventKey" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.EntityEventBroker.RemapKeys(Xtensive.Orm.KeyMapping)">
      <summary>
            Remaps the event keys in accordance with specified <paramref name="keyMapping" />.
            </summary>
      <param name="keyMapping">The key mapping.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityEventBroker.HasSubscribers">
      <summary>
            Gets a value indicating whether at least a one subscriber has registered.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.DisconnectedState">
      <summary>
            Disconnected state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Attach">
      <summary>
            Attaches the disconnected state to the current session.
            </summary>
      <returns>A disposable object that will detach the disconnected state
            on its disposal.</returns>
      <exception cref="T:System.InvalidOperationException">Transaction is running.</exception>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Attach(Xtensive.Orm.Session)">
      <summary>
            Attaches the disconnected state to the specified session.
            </summary>
      <param name="session">The session to attach disconnected state to.</param>
      <returns>A disposable object that will detach the disconnected state
            on its disposal.</returns>
      <exception cref="T:System.InvalidOperationException">Transaction is running.</exception>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Connect">
      <summary>
            "Connects" the disconnected state. 
            When disconnected state is connected, it is allowed to
            forward the queries to the underlying <see cref="P:Xtensive.Orm.DisconnectedState.Session" />.
            </summary>
      <returns>A disposable object that will disconnected the disconnected state
            on its disposal.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.ApplyChanges">
      <summary>
            Applies all the changes to the attached <see cref="P:Xtensive.Orm.DisconnectedState.Session" />.
            </summary>
      <returns>Resulting key mapping.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.ApplyChanges(Xtensive.Orm.Session)">
      <summary>
            Applies all the changes to the specified <see cref="P:Xtensive.Orm.DisconnectedState.Session" />.
            </summary>
      <param name="targetSession">The session to apply the changes to.</param>
      <returns>Resulting key mapping.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.CancelChanges">
      <summary>
            Cancels all the changes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>A clone of this instance.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Merge(Xtensive.Orm.DisconnectedState)">
      <summary>
            Merges this instance with the specified source <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
      <param name="source">The source <see cref="T:Xtensive.Orm.DisconnectedState" />.</param>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.Merge(Xtensive.Orm.DisconnectedState,Xtensive.Orm.MergeMode)">
      <summary>
            Merges this instance with the specified source <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
      <param name="source">The source <see cref="T:Xtensive.Orm.DisconnectedState" />.</param>
      <param name="mergeMode">The merge mode to use.</param>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.GetPersistenceState(Xtensive.Orm.Key)">
      <summary>
            Gets the state of the entity cached in <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
      <param name="key">The key of the entity.</param>
      <returns>Persistence state;
            <see langword="null" />, if entity isn't cached.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.AllKeys">
      <summary>
            Gets the sequence of all keys of entities cached by this <see cref="T:Xtensive.Orm.DisconnectedState" />.
            Removed entity keys aren't included to this sequence.
            </summary>
      <returns>The sequence of all keys of entities cached by this <see cref="T:Xtensive.Orm.DisconnectedState" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.AllKeys(System.Boolean)">
      <summary>
            Gets the sequence of all keys of entities cached by this <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
      <param name="includingRemovedEntityKeys">If set to <see langword="true" /> removed entity keys will also be included.</param>
      <returns>
            The sequence of all keys of entities cached by this <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.AllPersistenceStates">
      <summary>
            Gets the sequence of all keys and entity persistence states cached by this <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
      <returns>The sequence of all keys and entity persistence states.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.All``1">
      <summary>
            Gets the sequence of all the entities of the specified type cached by <see cref="T:Xtensive.Orm.DisconnectedState" />,
            except removed ones.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>The sequence of all the entities of the specified type.</returns>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.CreateVersionSet(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.RegisterEntityState(Xtensive.Orm.Key,Xtensive.Tuples.Tuple,Xtensive.Orm.VersionInfo,Xtensive.Orm.MergeMode)">
      <exception cref="T:Xtensive.Orm.VersionConflictException">Version check failed.</exception>
    </member>
    <member name="M:Xtensive.Orm.DisconnectedState.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.Session">
      <summary>
            Gets the session this instance attached to.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.Versions">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.VersionSet" /> storing
            original version of entities cached in this
            <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.VersionsProvider">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Orm.DisconnectedState.Versions" /> provider used by this instance to
            refresh <see cref="P:Xtensive.Orm.DisconnectedState.Versions" /> content during <see cref="M:Xtensive.Orm.DisconnectedState.ApplyChanges" />
            method execution.
            <see langword="null" /> indicates that provider shouldn't be used.
            </summary>
      <remarks>
            When the value of this property is set, value of
            <see cref="P:Xtensive.Orm.DisconnectedState.VersionsProviderType" /> is automatically set to
            <see cref="F:Xtensive.Orm.VersionsProviderType.Other" />.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.VersionsProviderType">
      <summary>
            Gets or sets the versions provider selection mode.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.VersionsUsageOptions">
      <summary>
            Gets or sets the versions usage options.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.Operations">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.OperationLog" /> storing
            information of <legacyBold>already committed</legacyBold> operations.
            So operations captured in the active transaction aren't exposed here.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.MergeMode">
      <summary>
            Gets or sets the merge mode to use when loading state of new entities 
            into this <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.OperationLogType">
      <summary>
            Gets or sets the type of the <see cref="T:Xtensive.Orm.OperationLog" /> to use.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.OperationLogReplayFilter">
      <summary>
            Gets or sets the operation log filter used by <see cref="M:Xtensive.Orm.DisconnectedState.ApplyChanges" />.
            Only operations returned by filter are applied; others are left in
            <see cref="P:Xtensive.Orm.DisconnectedState.Operations" />.
            <see langword="null" /> value (default) indicates all the operations are applied.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.VersionUpdateFilter">
      <summary>
            Gets or sets the version filter.
            This predicate is used after <see cref="M:Xtensive.Orm.DisconnectedState.ApplyChanges" />
            to determine which <see cref="P:Xtensive.Orm.DisconnectedState.Versions" /> must be refreshed.
            <see langword="null" /> value (default) indicates all the versions are refreshed.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.IsAttached">
      <summary>
            Gets a value indicating whether this instance is attached to <see cref="P:Xtensive.Orm.DisconnectedState.Session" />.
            See <see cref="M:Xtensive.Orm.DisconnectedState.Attach" /> method for details.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.IsConnected">
      <summary>
            Gets a value indicating whether this instance is "connected".
            See <see cref="M:Xtensive.Orm.DisconnectedState.Connect" /> method for details.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.DisconnectedState.IsLocalTransactionOpen">
      <summary>
            Gets a value indicating whether local transaction is open.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.Pinner.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">
        <see cref="T:Xtensive.Orm.Session" />, to which current instance 
            is bound.</param>
    </member>
    <member name="T:Xtensive.Orm.Internals.EntityChangeRegistry">
      <summary>
            Registers <see cref="T:Xtensive.Orm.EntityState" /> changes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.Register(Xtensive.Orm.EntityState)">
      <summary>
            Registers the specified item.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.GetItems(Xtensive.Orm.PersistenceState)">
      <summary>
            Gets the items with specified <paramref name="state" />.
            </summary>
      <param name="state">The state of items to get.</param>
      <returns>The sequence of items with specified state.</returns>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.Clear">
      <summary>
            Clears the registry.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.GetContainer(Xtensive.Orm.PersistenceState)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="state" /> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntityChangeRegistry.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">
        <see cref="T:Xtensive.Orm.Session" />, to which current instance 
            is bound.</param>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntityChangeRegistry.Count">
      <summary>
            Gets the number of registered entities.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionOpenMode">
      <summary>
            Describes transaction opening mode.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TransactionOpenMode.Auto">
      <summary>
            Existing transaction will be used if it is already open, 
            otherwise new transaction will be open.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TransactionOpenMode.New">
      <summary>
            New transaction will be open, i.e. nested one if some transaction is already open.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.TransactionOpenMode.Default">
      <summary>
            Default value is <see cref="F:Xtensive.Orm.TransactionOpenMode.Auto" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.SessionType">
      <summary>
            Enumerates possible types of the <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionType.User">
      <summary>
            A regular user session.
            Value is <see langword="0x0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionType.System">
      <summary>
            A system session.
            Value is <see langword="0x1" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionType.KeyGenerator">
      <summary>
            A generator session.
            Value is <see langword="0x2" /></summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionType.Service">
      <summary>
            A service session.
            Value is <see langword="0x3" /></summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionType.Default">
      <summary>
            Default session type - <see cref="F:Xtensive.Orm.Configuration.SessionType.User" />.
            Value is <see langword="0x0" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.PersistReason">
      <summary>
            A reason of calling <see cref="M:Xtensive.Orm.Session.Persist(Xtensive.Orm.Internals.PersistReason)" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.Manual">
      <summary>
            Manual persist is requested.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.Query">
      <summary>
            Query is to be executed.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.NestedTransaction">
      <summary>
            Nested transaction is about to start.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.Commit">
      <summary>
            Commit is to be performed.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.ChangeRegistrySizeLimit">
      <summary>
        <see cref="P:Xtensive.Orm.Session.EntityChangeRegistry" /> has reached its size limit.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.ValidateVersions">
      <summary>
        <see cref="T:Xtensive.Orm.VersionValidator" /> is about to be disposed.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.RemapEntityKeys">
      <summary>
        <see cref="T:Xtensive.Orm.Session" /> is about to remap its keys.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.PersistEntityRemoval">
      <summary>
            It's necessary to flush entity removal.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.DisconnectedStateAttach">
      <summary>
        <see cref="T:Xtensive.Orm.DisconnectedState" /> is about to be attached to <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.DisconnectedStateMerge">
      <summary>
        <see cref="T:Xtensive.Orm.DisconnectedState" /> is about to be merged with another one.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.DisconnectedStateReferenceCacheLookup">
      <summary>
        <see cref="T:Xtensive.Orm.DisconnectedState" /> is about to run local refeernce-related query.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.DisconnectedStateEnumeration">
      <summary>
        <see cref="T:Xtensive.Orm.DisconnectedState" /> is about to be enumerated.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistReason.Other">
      <summary>
            Another persist reason.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.IsolationLevelConverter">
      <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel" /> to <see cref="T:System.Data.IsolationLevel" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.IsolationLevelConverter.Convert(System.Transactions.IsolationLevel)">
      <summary>
             Converts <see cref="T:System.Transactions.IsolationLevel" /> to <see cref="T:System.Data.IsolationLevel" />.
            </summary>
      <param name="level">The specified <see cref="T:System.Transactions.IsolationLevel" />.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Orm.PersistenceState">
      <summary>
            Defines possible persistence states of the entities.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistenceState.Synchronized">
      <summary>
            The entity is synchronized with the database (there are no unsaved changes).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistenceState.New">
      <summary>
            The entity is created, but not persisted yet.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistenceState.Modified">
      <summary>
            The entity presents in database, but has some unpersisted changes.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.PersistenceState.Removed">
      <summary>
            The entity is marked as removed, but is not removed from database yet.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.HandlerFactory">
      <summary>
            An abstract base class for any storage factories.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.HandlerFactory.CreateHandler``1">
      <summary>
            Creates the handler of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">Type of the handler to create.</typeparam>
      <returns>A newly created handler of requested type;</returns>
      <exception cref="T:System.NotSupportedException">Handler for type <typeparamref name="T" /> was not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.HandlerFactory.CreateHandler(System.Type)">
      <summary>
            Creates the handler of specified type <paramref name="handlerType" />.
            </summary>
      <param name="handlerType">Type of the handler to create.</param>
      <returns>A newly created handler of requested type;</returns>
      <exception cref="T:System.NotSupportedException">Handler for type <paramref name="handlerType" /> was not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.HandlerFactory.TryCreateHandler``1">
      <summary>
            Creates the handler of the specified type.
            </summary>
      <typeparam name="T">Type of the handler to create.</typeparam>
      <returns>
            Created handler or <see langword="null" /> if handler of specified type was now found.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.HandlerFactory.TryCreateHandler(System.Type)">
      <summary>
            Creates the handler of type <paramref name="handlerType" />.
            </summary>
      <param name="handlerType">Type of the handler to create.</param>
      <returns>
            Created handler or <see langword="null" /> if handler of specified type was now found.
            </returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.InitializableHandlerBase">
      <summary>
            Abstract base class for storage handlers having <see cref="M:Xtensive.Storage.Providers.InitializableHandlerBase.Initialize" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.InitializableHandlerBase.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.DomainConfiguration">
      <summary>
            The configuration of the <see cref="T:Xtensive.Orm.Domain" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSectionName">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName" /> value:
            "<see langword="Xtensive.Orm" />".
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyCacheSize">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize" /> value: 
            <see langword="16*1024" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize" /> value: 
            <see langword="128" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultQueryCacheSize">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize" /> value: 
            <see langword="256" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRseQueryCacheSize">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RseQueryCacheSize" /> value: 
            <see langword="256" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize" /> value: 
            <see langword="1024" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultAutoValidation">
      <summary>
            Default <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.AutoValidation" /> value: 
            <see langword="true" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <summary>
            Copies the properties from the <paramref name="source" />
            configuration to this one.
            Used by <see cref="M:Xtensive.Configuration.ConfigurationBase.Clone" /> method implementation.
            </summary>
      <param name="source">The configuration to copy properties from.</param>
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>The clone of this configuration.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Load(System.String)">
      <summary>
            Loads the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" /> for <see cref="T:Xtensive.Orm.Domain" />
            with the specified <paramref name="name" />
            from application configuration file (section with <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName" />).
            </summary>
      <param name="name">Name of the <see cref="T:Xtensive.Orm.Domain" />.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" /> for the specified domain.
            </returns>
      <exception cref="T:System.InvalidOperationException">Section <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName" />
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Orm.Domain" /> with specified <paramref name="name" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.Load(System.String,System.String)">
      <summary>
            Loads the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" /> for <see cref="T:Xtensive.Orm.Domain" />
            with the specified <paramref name="name" />
            from application configuration file (section with <paramref name="sectionName" />).
            </summary>
      <param name="sectionName">Name of the section.</param>
      <param name="name">Name of the <see cref="T:Xtensive.Orm.Domain" />.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" /> for the specified domain.
            </returns>
      <exception cref="T:System.InvalidOperationException">Section <paramref name="sectionName" />
            is not found in application configuration file, or there is no configuration for
            the <see cref="T:Xtensive.Orm.Domain" /> with specified <paramref name="name" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="connectionUrl">The string containing connection URL for <see cref="T:Xtensive.Orm.Domain" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(Xtensive.Core.UrlInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="connectionUrl">The connection URL.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The provider.</param>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor(Xtensive.Core.ConnectionInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="connectionInfo">The connection info.</param>
    </member>
    <member name="M:Xtensive.Orm.Configuration.DomainConfiguration.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.SectionName">
      <summary>
            Gets or sets the name of the section where storage configuration is configuration.
            </summary>
      <exception cref="T:System.NotSupportedException">The property is already defined once.</exception>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Name">
      <summary>
            Gets or sets the domain configuration name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo">
      <summary>
            Gets or sets the connection info.
            </summary>
      <example>
        <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\DomainAndSession\DomainAndSessionSample.cs" region="Connection URL examples" />
        <code lang="cs">
            var configuration = new DomainConfiguration();
            configuration.ConnectionInfo = new ConnectionInfo(connectionUrl);
            </code>
      </example>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema">
      <summary>
            Gets or sets the default schema.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.UpgradeMode">
      <summary>
            Gets or sets a value indicating domain upgrade behavior. 
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Types">
      <summary>
            Gets the collection of persistent <see cref="T:System.Type" />s that are about to be 
            registered in the <see cref="T:Xtensive.Orm.Domain" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.NamingConvention">
      <summary>
            Gets or sets the naming convention.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize">
      <summary>
            Gets or sets the size of the key cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize">
      <summary>
            Gets or sets the size of the key generator cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultKeyGeneratorCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize">
      <summary>
            Gets or sets the size of the query cache (see <see cref="M:Xtensive.Orm.Query.Execute``1(System.Func{System.Linq.IQueryable{``0}})" />).
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultQueryCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.RseQueryCacheSize">
      <summary>
            Gets or sets the size of the RSE query cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRseQueryCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize">
      <summary>
            Gets or sets the size of the record set mapping cache.
            Default value is <see cref="F:Xtensive.Orm.Configuration.DomainConfiguration.DefaultRecordSetMappingCacheSize" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.AutoValidation">
      <summary>
            Gets or sets the value indicating whether changed entities should be validated or registered for validation automatically.
            Default value is <see cref="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.AutoValidation" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ValidationMode">
      <summary>
            Gets or sets the validation mode, that is used for validating entities within transactions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ForeignKeyMode">
      <summary>
            Gets or sets a value indicating foreign key mode. 
            Default value is <see cref="F:Xtensive.Orm.ForeignKeyMode.Default" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.Sessions">
      <summary>
            Gets available session configurations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType">
      <summary>
            Gets or sets the type of the service container.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Record">
      <summary>
            A single item in <see cref="M:Xtensive.Orm.Internals.RecordSetReader.Read(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Orm.Session)" /> result 
            containing both raw <see cref="P:Xtensive.Orm.Record.Source" /> and parsed primary keys.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Record.GetKey">
      <summary>
            Gets the first primary key in the <see cref="T:Xtensive.Orm.Record" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Record.GetKey(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Key" /> by specified index.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Record.GetTuple">
      <summary>
            Gets the first tuple in the <see cref="T:Xtensive.Orm.Record" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Record.GetTuple(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Tuples.Tuple" /> by specified index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Record.Count">
      <summary>
            Gets the key count.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Record.Source">
      <summary>
            Gets raw tuple this record is build from.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.SessionCacheType">
      <summary>
            Enumerates possible types of session caches.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionCacheType.Default">
      <summary>
            Default cache type.
            Value is <see cref="F:Xtensive.Orm.Configuration.SessionCacheType.LruWeak" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionCacheType.LruWeak">
      <summary>
        <see cref="T:Xtensive.Caching.LruCache`2" /> with chained <see cref="T:Xtensive.Caching.WeakCache`2" />.
            Value is <see langword="0x0" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.SessionCacheType.Infinite">
      <summary>
        <see cref="T:Xtensive.Caching.InfiniteCache`2" />.
            Value is <see langword="0x1" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.SessionConfigurationCollection">
      <summary>
        <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" /> collection.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Insert(System.Int32,Xtensive.Orm.Configuration.SessionConfiguration)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Add(Xtensive.Orm.Configuration.SessionConfiguration)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Equals(Xtensive.Orm.Configuration.SessionConfigurationCollection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.SessionConfigurationCollection.Clone">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Default">
      <summary>
             Gets the default session configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.System">
      <summary>
             Gets the system session configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Service">
      <summary>
             Gets the service session configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.KeyGenerator">
      <summary>
             Gets the key generator session configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.SessionConfigurationCollection.Item(System.String)">
      <summary>
             Gets the element with the specified name.
            </summary>
      <param name="name">The string name of the element to get.</param>
    </member>
    <member name="T:Xtensive.Orm.KeyEventArgs">
      <summary>
            Arguments for <see cref="P:Xtensive.Orm.KeyEventArgs.Key" />-related events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyEventArgs.#ctor(Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key.</param>
    </member>
    <member name="P:Xtensive.Orm.KeyEventArgs.Key">
      <summary>
            Gets the key.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityFieldValueEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field related events containing field value.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityFieldValueEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
      <param name="field">The field.</param>
      <param name="value">The <see cref="P:Xtensive.Orm.EntityFieldValueEventArgs.Value" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldValueEventArgs.Value">
      <summary>
            Gets the field value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field reading completion events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
      <param name="field">The field.</param>
      <param name="value">The <see cref="P:Xtensive.Orm.EntityFieldValueEventArgs.Value" /> value.</param>
      <param name="exception">The <see cref="P:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.Exception" /> value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldValueGetCompletedEventArgs.Exception">
      <summary>
            Gets the exception, if any, that was thrown on getting the field value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityFieldValueSetEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field-related events containing old and new field values.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityFieldValueSetEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
      <param name="field">The field.</param>
      <param name="oldValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue" /> property value.</param>
      <param name="newValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue">
      <summary>
            Gets the old value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue">
      <summary>
            Gets the new value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field set completion events.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,System.Object,System.Object,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity.</param>
      <param name="field">The field.</param>
      <param name="oldValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.OldValue" /> value.</param>
      <param name="newValue">The <see cref="P:Xtensive.Orm.EntityFieldValueSetEventArgs.NewValue" /> value.</param>
      <param name="exception">The <see cref="P:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.Exception" /> value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityFieldValueSetCompletedEventArgs.Exception">
      <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntityRemoveCompletedEventArgs">
      <summary>
            Arguments for completing entity remove event.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntityRemoveCompletedEventArgs.#ctor(Xtensive.Orm.Entity,System.Exception)">
      <summary>
        <inheritdoc />
      </summary>
      <param name="entity">The entity.</param>
      <param name="exception">The <see cref="P:Xtensive.Orm.EntityRemoveCompletedEventArgs.Exception" /> initial value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntityRemoveCompletedEventArgs.Exception">
      <summary>
            Gets the exception.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="T:Xtensive.Orm.EntitySetItemActionCompletedEventArgs">
      <summary>
            Describes an event related to <see cref="T:Xtensive.Orm.EntitySet`1" /> item action completion.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.#ctor(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entitySet">The entity set.</param>
      <param name="item">The item.</param>
      <param name="exception">The <see cref="P:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.Exception" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySetItemActionCompletedEventArgs.Exception">
      <summary>
            Gets the exception, if any, that was thrown on setting the field value.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionalStateContainer`1">
      <summary>
            An abstract base class for objects having associated transactional state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalStateContainer`1.EnsureIsActual">
      <summary>
            Ensures the state is actual. 
            If it really is now, this method does nothing.
            Otherwise it calls <see cref="M:Xtensive.Orm.TransactionalStateContainer`1.Invalidate" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalStateContainer`1.Invalidate">
      <summary>
            Resets the cached transactional state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalStateContainer`1.Refresh">
      <summary>
            Loads\refreshes the state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalStateContainer`1.BindToCurrentTransaction">
      <summary>
            Binds the the state to the current transaction.
            This method must be invoked on state update.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            State is not loaded yet or it is not valid in current transaction.</exception>
    </member>
    <member name="M:Xtensive.Orm.TransactionalStateContainer`1.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.TransactionalStateContainer`1.Transaction">
      <summary>
            Gets the transaction where container's state was acquired.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionalStateContainer`1.IsActual">
      <summary>
            Gets a value indicating whether base state is loaded or not.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.TransactionalStateContainer`1.State">
      <summary>
            Gets the transactional state.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionalValue`1">
      <summary>
            Transactional value cache.
            </summary>
      <typeparam name="T">The type of the <see cref="P:Xtensive.Orm.TransactionalValue`1.Value" />.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.TransactionalValue`1.Invalidate">
      <see cref="M:Xtensive.Caching.IInvalidatable.Invalidate" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.TransactionalValue`1.Refresh">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.TransactionalValue`1.#ctor(Xtensive.Orm.Session,System.Func{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session to bind this object to.</param>
      <param name="calculator">The delegate calculating a new value.</param>
    </member>
    <member name="P:Xtensive.Orm.TransactionalValue`1.Value">
      <summary>
            Gets the cached value.
            If it isn't valid anymore (see <see cref="P:Xtensive.Orm.TransactionalStateContainer`1.IsActual" />), 
            it gets re-calculated.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.QueryTranslationException">
      <summary>
            LINQ query translation exception. 
            Describes various errors that occurs during query compilation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.QueryTranslationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.ObjectMapping.Mapper">
      <summary>
            The O2O-mapper for persistent types.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.OnObjectModified(Xtensive.ObjectMapping.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.InitializeComparison(System.Object,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.GetComparisonResult(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.GetCustomKeyFields(System.Object,Xtensive.ObjectMapping.Model.TargetTypeDescription)">
      <exception cref="T:System.ArgumentException">
        <paramref name="targetType" /> state is invalid.</exception>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.CreateEntitySetItemOperation(Xtensive.ObjectMapping.Operation)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>operationInfo.Type</c> is wrong.</exception>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.#ctor(Xtensive.Orm.Session,Xtensive.ObjectMapping.Model.MappingDescription)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="mappingDescription">The mapping description.</param>
    </member>
    <member name="M:Xtensive.Orm.ObjectMapping.Mapper.#ctor(Xtensive.Orm.Session,Xtensive.ObjectMapping.Model.MappingDescription,Xtensive.ObjectMapping.MapperSettings)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="mappingDescription">The mapping description.</param>
      <param name="settings">The mapper settings.</param>
    </member>
    <member name="T:Xtensive.Orm.OperationLog">
      <summary>
            Built-in implementation of both <see cref="T:Xtensive.Orm.IOperationLogger" />
            and <see cref="T:Xtensive.Orm.IOperationSequence" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.OperationLog.Log(Xtensive.Orm.IOperation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.Log(System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.Replay">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.Replay(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.Replay(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.OperationLog.#ctor(Xtensive.Orm.OperationLogType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="logType">Type of the log.</param>
    </member>
    <member name="M:Xtensive.Orm.OperationLog.#ctor(Xtensive.Orm.OperationLogType,System.Collections.Generic.IEnumerable{Xtensive.Orm.IOperation})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="logType">Type of the log.</param>
      <param name="operations">The operations to add (using <see cref="M:Xtensive.Orm.OperationLog.Log(Xtensive.Orm.IOperation)" /> method).</param>
    </member>
    <member name="P:Xtensive.Orm.OperationLog.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.OperationLog.LogType">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Operations.EntityFieldSetOperation">
      <summary>
            Describes <see cref="T:Xtensive.Orm.Entity" /> field set operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the changed entity.</param>
      <param name="field">The field involved into the operation.</param>
      <param name="value">The new field value.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="key">The key of the changed entity.</param>
      <param name="field">The field involved into the operation.</param>
      <param name="valueKey">The new field value key.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.EntityFieldSetOperation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Value">
      <summary>
            Gets the new field value, if field is NOT a reference field 
            (i.e. not a field of <see cref="T:Xtensive.Orm.IEntity" /> type).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.ValueKey">
      <summary>
            Gets the new field value key, if field is a reference field 
            (i.e. field of <see cref="T:Xtensive.Orm.IEntity" /> type).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Title">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.EntityFieldSetOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData">
      <summary>
            Transaction transaction-level temporary data context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData" /> instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ValidationMode">
      <summary>
            Validation mode.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.ValidationMode.Default">
      <summary>
            Default value.
            The same as <see cref="F:Xtensive.Orm.ValidationMode.Continuous" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.ValidationMode.Continuous">
      <summary>
            Validation works continuously and autotically validates entities after each operation.
            </summary>
      <remarks>
        <para>
            To work with entities in inconsistent state open inconsistent region with <see cref="M:Xtensive.Orm.Session.DisableValidation" />.
            Validation will be performed on disposing inconsistent region.
            </para>
        <code>
            using (var scope = Session.DisableValidation()) {
              // Perform operations here
              scope.Complete();
            }
            </code>
      </remarks>
    </member>
    <member name="F:Xtensive.Orm.ValidationMode.OnDemand">
      <summary>
            Validation is performed automatically only on transaction commit and on explicit <see cref="M:Xtensive.Orm.Session.Validate" /> method call.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ConnectionRequiredException">
      <summary>
            An exception indicating that <see cref="T:Xtensive.Orm.DisconnectedState" />
            isn't <see cref="M:Xtensive.Orm.DisconnectedState.Connect">connected</see>, although
            connection is required to perform the operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ConnectionRequiredException.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.ConnectionRequiredException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="text">Text of message.</param>
    </member>
    <member name="M:Xtensive.Orm.ConnectionRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</param>
    </member>
    <member name="T:Xtensive.Orm.MergeMode">
      <summary>
            Enumerate possible ways of merging new entity states 
            into the <see cref="T:Xtensive.Orm.DisconnectedState" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.MergeMode.Default">
      <summary>
            Default value. 
            The same as <see cref="F:Xtensive.Orm.MergeMode.Strict" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.MergeMode.Strict">
      <summary>
            An exception must be thrown on any version conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.MergeMode.PreferNew">
      <summary>
            New (source) field values are preferred;
            new value will overwrite existing one, 
            if both values are available for a particular field.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.MergeMode.PreferOriginal">
      <summary>
            Original (existing) field values are preferred;
            new value will not overwrite existing one, 
            if both values are available for a particular field.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Ref`1">
      <summary>
            Typed reference to <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
      <typeparam name="T">The type of referenced object (<see cref="P:Xtensive.Orm.Ref`1.Value" /> property).</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.Equals(Xtensive.Orm.Ref{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.Equals(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Key)~Xtensive.Orm.Ref{`0}">
      <summary>
            Implicit conversion of <see cref="P:Xtensive.Orm.Ref`1.Key" /> to <see cref="T:Xtensive.Orm.Ref`1" />.
            </summary>
      <param name="key">Key of the entity to provide typed reference for.</param>
      <returns>The result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.op_Implicit(`0)~Xtensive.Orm.Ref{`0}">
      <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.IEntity" /> to <see cref="T:Xtensive.Orm.Ref`1" />.
            </summary>
      <param name="entity">The entity to provide typed reference for.</param>
      <returns>The result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Ref{`0})~Xtensive.Orm.Key">
      <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.Ref`1" /> to <see cref="P:Xtensive.Orm.Ref`1.Key" />.
            </summary>
      <param name="reference">The typed reference to convert.</param>
      <returns>The result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.op_Implicit(Xtensive.Orm.Ref{`0})~`0">
      <summary>
            Implicit conversion of <see cref="T:Xtensive.Orm.Ref`1" /> to <typeparamref name="T" />.
            </summary>
      <param name="reference">The typed reference to convert.</param>
      <returns>The result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.#ctor(Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key of entity this reference points to.</param>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="formattedKey">The formatted key of entity this reference points to.</param>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entity">The entity this reference points to.</param>
    </member>
    <member name="M:Xtensive.Orm.Ref`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="M:Xtensive.Orm.Ref`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.Ref`1.Key">
      <summary>
            Gets the key of the referenced entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Ref`1.FormattedKey">
      <summary>
            Gets the formatted key of the referenced entity.
            Formatted key is the string produced with <see cref="M:Xtensive.Orm.Key.Format" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Ref`1.Value">
      <summary>
            Gets the referenced entity (resolves the reference).
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Operations.MethodCallOperation">
      <summary>
            Describes arbitrary method call operation.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Operations.MethodCallOperation.PrepareSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.MethodCallOperation.ExecuteSelf(Xtensive.Orm.Operations.OperationExecutionContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.MethodCallOperation.CloneSelf(Xtensive.Orm.Operation)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Operations.MethodCallOperation.#ctor(System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Object[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="executeAction">The <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)" /> method action.</param>
      <param name="arguments">The action arguments.</param>
    </member>
    <member name="M:Xtensive.Orm.Operations.MethodCallOperation.#ctor(System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Action{Xtensive.Orm.Operations.OperationExecutionContext,System.Object[]},System.Object[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="prepareAction">The <see cref="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)" /> method action.</param>
      <param name="executeAction">The <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)" /> method action.</param>
      <param name="arguments">The action arguments.</param>
    </member>
    <member name="P:Xtensive.Orm.Operations.MethodCallOperation.PrepareAction">
      <summary>
            Gets the <see cref="M:Xtensive.Orm.Operation.Prepare(Xtensive.Orm.Operations.OperationExecutionContext)" /> method action.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.MethodCallOperation.ExecuteAction">
      <summary>
            Gets the <see cref="M:Xtensive.Orm.Operation.Execute(Xtensive.Orm.Operations.OperationExecutionContext)" /> method action.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Arguments">
      <summary>
            Gets the arguments.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Title">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Operations.MethodCallOperation.Description">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions">
      <summary>
            Extension method for <see cref="T:Xtensive.Orm.DomainUpgradeMode" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.RequiresUpgradingStage(Xtensive.Orm.DomainUpgradeMode)">
      <summary>
            Determines whether <paramref name="upgradeMode" /> requires <see cref="F:Xtensive.Orm.Upgrade.UpgradeStage.Upgrading" /> stage.
            </summary>
      <param name="upgradeMode">The upgrade mode.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.RequiresInitializingStage(Xtensive.Orm.DomainUpgradeMode)">
      <summary>
            Determines whether <paramref name="upgradeMode" /> requires <see cref="F:Xtensive.Orm.Upgrade.UpgradeStage.Initializing" /> stage.
            </summary>
      <param name="upgradeMode">The upgrade mode.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.IsLegacy(Xtensive.Orm.DomainUpgradeMode)">
      <summary>
            Determines whether the specified upgrade mode is legacy.
            </summary>
      <param name="upgradeMode">The upgrade mode.</param>
      <returns>
        <see langword="true" /> if the specified upgrade mode is legacy;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainUpgradeModeExtensions.IsUpgrading(Xtensive.Orm.DomainUpgradeMode)">
      <summary>
            Determines whether the specified upgrade mode is legacy.
            </summary>
      <param name="upgradeMode">The upgrade mode.</param>
      <returns>
        <see langword="true" /> if the specified upgrade mode is legacy;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.DomainUpgradeMode">
      <summary>
            Enumerates possible <see cref="T:Xtensive.Orm.Domain" /> upgrade modes.
            <seealso cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /><seealso cref="T:Xtensive.Orm.Domain" /></summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Skip">
      <summary>
            Minimal validation is performed.
            Assembly versions are checked.
            Type identifiers are extracted.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Validate">
      <summary>
            Validation only mode.
            <see cref="T:Xtensive.Orm.DomainBuilderException" /> will be 
            thrown if storage schema differs from the expected one.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Recreate">
      <summary>
            Recreates all the necessary structures. 
            Storage will contain no instances after this type of update.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Perform">
      <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, 
            unmapped columns and tables will be removed.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.PerformSafely">
      <summary>
            Storage upgrade will be performed. 
            Missing columns and tables will be added, 
            unmapped columns and tables will be removed 
            only if there are corresponding hints.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.LegacySkip">
      <summary>
            Legacy database support mode.
            No validation is performed.
            Use at your own risk.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.LegacyValidate">
      <summary>
            Legacy database support mode. 
            Similar to <see cref="F:Xtensive.Orm.DomainUpgradeMode.Validate" />, but schema comparison
            is limited to comparison of tables and columns, everything
            else is ignored.
            <see cref="T:Xtensive.Orm.DomainBuilderException" /> will be 
            thrown if storage schema significantly differs 
            from the expected one.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Default">
      <summary>
            Default upgrade mode.
            The same as <see cref="F:Xtensive.Orm.DomainUpgradeMode.PerformSafely" /></summary>
    </member>
    <member name="F:Xtensive.Orm.DomainUpgradeMode.Legacy">
      <summary>
            The same as <see cref="F:Xtensive.Orm.DomainUpgradeMode.LegacyValidate" /> for backward compatibility.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradeHint">
      <summary>
            Abstract base class for any upgrade hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Upgrade.MergeTypeHint">
      <summary>
            Rename type hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Equals(Xtensive.Orm.Upgrade.MergeTypeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.#ctor(System.Type,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="oldType">The old type.</param>
      <param name="newType">The new type.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MergeTypeHint.Create``2">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TOld">The old type.</typeparam>
      <typeparam name="TNew">The new type.</typeparam>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MergeTypeHint.NewType">
      <summary>
            Gets the new type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MergeTypeHint.OldType">
      <summary>
            Gets the old type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RecycledTypeHint">
      <summary>
            Rename type hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Equals(Xtensive.Orm.Upgrade.RecycledTypeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.#ctor(System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The recycled type.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledTypeHint.Create``1">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="T">The recycled type.</typeparam>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RecycledTypeHint.Type">
      <summary>
            Gets the type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.VersionCapturer">
      <summary>
            A service listening to entity change-related events in <see cref="T:Xtensive.Orm.Session" />
            and writing the information on their original version to <see cref="P:Xtensive.Orm.VersionCapturer.Versions" /> set
            (<see cref="T:Xtensive.Orm.VersionSet" />).
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionCapturer.Attach(Xtensive.Orm.VersionSet)">
      <summary>
            Attaches the version capturer to the current session.
            </summary>
      <param name="versions">The <see cref="T:Xtensive.Orm.VersionSet" /> to append captured versions to.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionCapturer" /> attached
            to the current session.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionCapturer.Attach(Xtensive.Orm.Session,Xtensive.Orm.VersionSet)">
      <summary>
            Attaches the version capturer to the current session.
            </summary>
      <param name="session">The session to attach the capturer to.</param>
      <param name="versions">The <see cref="T:Xtensive.Orm.VersionSet" /> to append captured versions to.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionCapturer" /> attached
            to the specified <paramref name="session" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionCapturer.Dispose">
      <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.VersionCapturer.Versions">
      <summary>
            Gets the version set updated by this service.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.VersionsProviderType">
      <summary>
            Enumerates possible <see cref="P:Xtensive.Orm.DisconnectedState.VersionsProvider" /> selection modes.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsProviderType.Default">
      <summary>
            Default mode.
            The same as <see cref="F:Xtensive.Orm.VersionsProviderType.Session" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsProviderType.Session">
      <summary>
        <see cref="T:Xtensive.Orm.Session" />, to which changes are applied, is version provider.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsProviderType.DisconnectedState">
      <summary>
        <see cref="F:Xtensive.Orm.VersionsProviderType.DisconnectedState" /> instance itself is version provider.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsProviderType.Other">
      <summary>
        <see cref="P:Xtensive.Orm.DisconnectedState.VersionsProvider" /> is specified manually.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.VersionsUsageOptions">
      <summary>
            Enumerates <see cref="P:Xtensive.Orm.DisconnectedState.Versions" /> usage options.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsUsageOptions.Default">
      <summary>
            Default value.
            The same as <see cref="F:Xtensive.Orm.VersionsUsageOptions.All" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsUsageOptions.Validate">
      <summary>
            Validate versions.
            Value is <see langword="0x1" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsUsageOptions.Update">
      <summary>
            Update versions.
            Value is <see langword="0x2" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.VersionsUsageOptions.All">
      <summary>
            All options (<see cref="F:Xtensive.Orm.VersionsUsageOptions.Validate" /> and <see cref="F:Xtensive.Orm.VersionsUsageOptions.Update" />).
            Value is <see langword="0x3" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.VersionValidator">
      <summary>
            An attachable service validating versions inside the specified <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo)">
      <summary>
            Validates the <paramref name="version" />
            for the specified <paramref name="key" />.
            </summary>
      <param name="key">The key to validate version for.</param>
      <param name="version">The version to validate.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.ValidateVersion(Xtensive.Orm.Key,Xtensive.Orm.VersionInfo,System.Boolean)">
      <summary>
            Validates the <paramref name="version" />
            for the specified <paramref name="key" />.
            </summary>
      <param name="key">The key to validate version for.</param>
      <param name="version">The version to validate.</param>
      <param name="throwOnFailure">Indicates whether <see cref="T:System.InvalidOperationException" />
            must be thrown on validation failure.</param>
      <returns>
        <see langword="True" />, if validation passes successfully;
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:Xtensive.Orm.VersionConflictException">Version conflict is detected.</exception>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.VersionSet)">
      <summary>
            Attaches the validator to the current session.
            </summary>
      <param name="expectedVersions">The set containing expected versions.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionValidator" /> attached
            to the current session.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.Session,Xtensive.Orm.VersionSet)">
      <summary>
            Attaches the validator to the specified session.
            </summary>
      <param name="session">The session to attach validator to.</param>
      <param name="expectedVersions">The set containing expected versions.</param>
      <returns>
            A newly created <see cref="T:Xtensive.Orm.VersionValidator" /> attached
            to the specified <paramref name="session" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.Attach(System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
      <summary>
            Attaches the validator to the current session.
            </summary>
      <param name="expectedVersionProvider">The expected version provider.</param>
      <returns>A newly created <see cref="T:Xtensive.Orm.VersionValidator" /> attached
            to the current session.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.Attach(Xtensive.Orm.Session,System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
      <summary>
            Attaches the validator to the specified session.
            </summary>
      <param name="session">The session to attach validator to.</param>
      <param name="expectedVersionProvider">The expected version provider.</param>
      <returns>A newly created <see cref="T:Xtensive.Orm.VersionValidator" /> attached
            to the specified <paramref name="session" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.#ctor(Xtensive.Orm.Session,System.Func{Xtensive.Orm.Key,Xtensive.Orm.VersionInfo})">
      <exception cref="T:System.InvalidOperationException">Session is persisting the changes.</exception>
    </member>
    <member name="M:Xtensive.Orm.VersionValidator.Dispose">
      <see cref="M:Xtensive.Internals.DocTemplates.DisposableDocTemplate.Dispose" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.IndexInfoExtensions">
      <summary>
        <see cref="T:Xtensive.Orm.Model.IndexInfo" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IndexInfoExtensions.ToRecordQuery(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> allowing to query the specified <paramref name="index" />.
            </summary>
      <param name="index">The index to create the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> for.</param>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> object.</returns>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.BuilderElement">
      <summary>
            Builder configuration element within a configuration file.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.BuilderElement.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.BuilderElement.Type">
      <summary>
            Gets or sets the type of the builder.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.ConfigurationSection">
      <summary>
            A root element of storage configuration section within a configuration file.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.ConfigurationSection.Domains">
      <summary>
            Gets the collection of domain configurations.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" /> configuration element within a configuration file.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ToNative">
      <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" /> object.
            </summary>
      <returns>The result of conversion.</returns>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Name">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Name" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ConnectionUrl">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ConnectionString">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Provider">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ConnectionInfo" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Types">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Types" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.NamingConvention">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.NamingConvention" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.KeyCacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyCacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.KeyGeneratorCacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.KeyGeneratorCacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.QueryCacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.QueryCacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.RseQueryCacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RseQueryCacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.RecordSetMappingCacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.RecordSetMappingCacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.AutoValidation">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.AutoValidation" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.UpgradeMode">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.UpgradeMode" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ForeignKeyMode">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ForeignKeyMode" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ValidationMode">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ValidationMode" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.Sessions">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Sessions" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.ServiceContainerType">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.DomainConfigurationElement.DefaultSchema">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.DefaultSchema" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.NamingConventionElement">
      <summary>
        <see cref="T:Xtensive.Orm.Configuration.NamingConvention" /> configuration element within a configuration file.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.Elements.NamingConventionElement.ToNative">
      <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.NamingConvention" /> object.
            </summary>
      <returns>The result of conversion.</returns>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.LetterCasePolicy">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.NamingConvention.LetterCasePolicy" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamespacePolicy">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamespacePolicy" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamingRules">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamingRules" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamingConventionElement.NamespaceSynonyms">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.NamingConvention.NamespaceSynonyms" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement">
      <summary>
        <see cref="T:Xtensive.Orm.Session" /> configuration element within a configuration file.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ToNative">
      <summary>
            Converts the element to a native configuration object it corresponds to - 
            i.e. to a <see cref="T:Xtensive.Orm.Configuration.SessionConfiguration" /> object.
            </summary>
      <returns>The result of conversion.</returns>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Name">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Name" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.UserName">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.UserName" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Password">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Password" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.CacheSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.CacheType">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.CacheType" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.Options">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.Options" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.DefaultIsolationLevel">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultIsolationLevel" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.DefaultCommandTimeout">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.DefaultCommandTimeout" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.BatchSize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.BatchSize" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ReaderPreloading">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.ReaderPreloading" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.ServiceContainerType">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.ServiceContainerType" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.SessionConfigurationElement.EntityChangeRegistrySize">
      <summary>
        <see cref="P:Xtensive.Orm.Configuration.SessionConfiguration.EntityChangeRegistrySize" copy="true" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.NamingConvention">
      <summary>
            A set of rules for model definition objects naming.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Configuration.NamingConvention.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.NamingConvention.Clone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Configuration.NamingConvention.Equals(Xtensive.Orm.Configuration.NamingConvention)">
      <summary>
            Indicates whether the current object is equal to another object of the same type. 
            </summary>
      <param name="other">The object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.NamingConvention.Equals(System.Object)">
      <summary>
            Indicates whether the current object is equal to another object of the same type. 
            </summary>
      <param name="obj">The object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the other parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Orm.Configuration.NamingConvention.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Xtensive.Orm.Configuration.NamingConvention.LetterCasePolicy">
      <summary>
            Gets or sets the letter case policy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamespacePolicy">
      <summary>
            Gets or sets the namespace policy.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamingRules">
      <summary>
            Gets or sets the naming rules.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.NamingConvention.NamespaceSynonyms">
      <summary>
            Gets namespace synonyms dictionary where key is a namespace name and value is a synonym.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ForeignKeyMode">
      <summary>
            Enumerates possible foreign key build modes for <see cref="T:Xtensive.Orm.Domain" />.
            <seealso cref="T:Xtensive.Orm.Domain" /><seealso cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /></summary>
    </member>
    <member name="F:Xtensive.Orm.ForeignKeyMode.Default">
      <summary>
            Default foreign key mode. Equlas to <see cref="F:Xtensive.Orm.ForeignKeyMode.All" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.ForeignKeyMode.None">
      <summary>
            No foreign keys will be built for storage.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.ForeignKeyMode.Hierarchy">
      <summary>
            Foreign keys for hierarchy inheritance will be built.
            <see cref="F:Xtensive.Orm.ForeignKeyMode.Hierarchy" /></summary>
    </member>
    <member name="F:Xtensive.Orm.ForeignKeyMode.Reference">
      <summary>
            Foreign keys for <see cref="T:Xtensive.Orm.Entity" /> references will be built. 
            <seealso cref="T:Xtensive.Orm.EntitySet`1" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.ForeignKeyMode.All">
      <summary>
            All foreign keys (<see cref="F:Xtensive.Orm.ForeignKeyMode.Hierarchy" /> and <see cref="F:Xtensive.Orm.ForeignKeyMode.Reference" />) will be built for storage.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement">
      <summary>
            Namespace synonym configuration element within a configuration file.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Namespace">
      <summary>
            Gets or sets the namespace the <see cref="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Synonym" /> is defined for.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Synonym">
      <summary>
            Gets or sets the synonym for the <see cref="P:Xtensive.Orm.Configuration.Elements.NamespaceSynonymElement.Namespace" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.LetterCasePolicy">
      <summary>
            Enumerates all possible modification types to names.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Default">
      <summary>
            Default mode. The same as <see cref="F:Xtensive.Orm.Configuration.LetterCasePolicy.AsIs" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.AsIs">
      <summary>
            No modifications should be applied.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Uppercase">
      <summary>
            Name should be in upper case.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.LetterCasePolicy.Lowercase">
      <summary>
            Name should be in lower case.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.NamespacePolicy">
      <summary>
            Enumerates all possible namespace treatment options in naming policy.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Default">
      <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.NamespacePolicy.Omit" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Omit">
      <summary>
            Only name of the type will be used to derive the name of
            the table or view.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Synonymize">
      <summary>
            Name of the type and namespace synonym will be used to derive 
            the name of the table or view.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.AsIs">
      <summary>
            Name of the type and namespace name will be used to derive 
            the name of the table or view.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamespacePolicy.Hash">
      <summary>
            Name of the type and namespace hashes will be used to derive 
            the name of the table or view. Driver decides on the type of hashing
            algorythm to use.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Configuration.NamingRules">
      <summary>
            Miscellaneous naming policy rules.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamingRules.Default">
      <summary>
            Default value is <see cref="F:Xtensive.Orm.Configuration.NamingRules.None" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamingRules.None">
      <summary>
            No modification should be applied.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreHyphens">
      <summary>
            All hyphens should be replaced with underscore symbol.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Configuration.NamingRules.UnderscoreDots">
      <summary>
            All dots should be replaced with underscore symbol.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Disconnected.DisconnectedSessionHandler">
      <summary>
            Disconnected session handler.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.FetchEntityState(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.ExecutePrefetchTasks(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.GetReferencesTo(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.#ctor(Xtensive.Storage.Providers.SessionHandler,Xtensive.Orm.DisconnectedState)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Disconnected.DisconnectedSessionHandler.TransactionIsStarted">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Disconnected.StateRegistry">
      <summary>
            Disconnected state registry.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.StateRegistry.Remap(Xtensive.Orm.KeyMapping)">
      <exception cref="T:System.InvalidOperationException">Origin!=null</exception>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetReferencesFrom(Xtensive.Orm.Key,Xtensive.Tuples.Tuple)">
      <summary>
            Gets the references from state.
            </summary>
      <param name="key">The key.</param>
      <param name="tuple">The tuple.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Disconnected.ReferenceDescriptor" /> instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetEntitySetItems(Xtensive.Orm.Key,Xtensive.Tuples.Tuple)">
      <summary>
            Gets entity set items.
            </summary>
      <param name="key">The key.</param>
      <param name="tuple">The tuple.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Disconnected.EntitySetItemDesc" /> instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetEntitySets(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Gets the entity sets for many to one associations.
            </summary>
      <param name="typeInfo">The type info.</param>
      <returns>Set of pairs (First = <see cref="T:Xtensive.Orm.EntitySet`1" /> field, Second = Paired field).</returns>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetEntitySetFields(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Gets all entity set fields.
            </summary>
      <param name="typeInfo">The type info.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.FieldInfo" /> instances for all entity set fields.</returns>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetReferencingFields(Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Gets the referencing fields for zero to one and many to one references.
            </summary>
      <param name="typeInfo">The type info.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.FieldInfo" /> instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.AssociationCache.GetKeyFieldValue(Xtensive.Orm.Model.FieldInfo,Xtensive.Tuples.Tuple)">
      <summary>
            Gets the value of FK field.
            </summary>
      <param name="field">The field.</param>
      <param name="tuple">The tuple.</param>
      <returns>Key value.</returns>
    </member>
    <member name="T:Xtensive.Orm.Disconnected.DisconnectedEntityState">
      <summary>
            Disconnected entity state
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntityState.Remove">
      <exception cref="T:System.InvalidOperationException">State is not loaded.</exception>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntityState.Commit">
      <summary>
            Commits changes to origin state.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntityState.#ctor(Xtensive.Orm.Key)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntityState.#ctor(Xtensive.Orm.Disconnected.DisconnectedEntityState)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The origin state.</param>
    </member>
    <member name="P:Xtensive.Orm.Disconnected.DisconnectedEntityState.Key">
      <summary>
            Gets the key.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Disconnected.DisconnectedEntityState.IsRemoved">
      <summary>
            Gets a value indicating whether this instance is removed.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntitySetState.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Key},System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="items">The items.</param>
      <param name="isFullyLoaded">if set to <see langword="true" /> state is fully loaded.</param>
    </member>
    <member name="M:Xtensive.Orm.Disconnected.DisconnectedEntitySetState.#ctor(Xtensive.Orm.Disconnected.DisconnectedEntitySetState)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The origin state.</param>
    </member>
    <member name="T:Xtensive.Orm.Internals.PersistActionKind">
      <summary>
            Action to be executed during a persisting.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistActionKind.Insert">
      <summary>
            'Insert' action.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistActionKind.Update">
      <summary>
            'Update' action.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistActionKind.Remove">
      <summary>
            'Remove' action.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Services.DirectSessionAccessor">
      <summary>
            Provides access to core services bound to a <see cref="T:Xtensive.Orm.Session" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.OpenSystemLogicOnlyRegion">
      <summary>
            Opens the region in which only the system logic is executed.
            </summary>
      <returns>
            An object implementing <see cref="T:System.IDisposable" /> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.IsSystemLogicOnly" /> property.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.ChangeSessionHandler(Xtensive.Storage.Providers.SessionHandler)">
      <summary>
            Changes the value of <see cref="P:Xtensive.Orm.Session.Handler" />.
            </summary>
      <param name="newHandler">The new handler.</param>
      <returns>
            An object implementing <see cref="T:System.IDisposable" /> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.Handler" /> property.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.NullifySessionTransaction">
      <summary>
            Sets the value of <see cref="P:Xtensive.Orm.Session.Transaction" /> to <see langword="null" />.
            </summary>
      <returns>
            An object implementing <see cref="T:System.IDisposable" /> which
            disposal will restore previous state of
            <see cref="P:Xtensive.Orm.Session.Transaction" /> property;
            <see langword="null" />, if <see cref="P:Xtensive.Orm.Session.Transaction" /> 
            is already <see langword="null" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectSessionAccessor.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Internals.PersistAction">
      <summary>
            Information about an action to be executed during the persisting 
            of an <see cref="F:Xtensive.Orm.Internals.PersistAction.EntityState" />.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistAction.EntityState">
      <summary>
            The state to persist.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.PersistAction.ActionKind">
      <summary>
            The action to be executed.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.PersistAction.#ctor(Xtensive.Orm.EntityState,Xtensive.Orm.Internals.PersistActionKind)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="entityState">The value of the <see cref="F:Xtensive.Orm.Internals.PersistAction.EntityState" /> field.</param>
      <param name="persistActionKind">The value of the <see cref="F:Xtensive.Orm.Internals.PersistAction.ActionKind" /> field.</param>
    </member>
    <member name="T:Xtensive.Orm.ReferenceInfo">
      <summary>
            Describes referential relationship between two particular entities.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ReferenceInfo.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="referencingEntity">The referencing entity.</param>
      <param name="referencedEntity">The referenced entity.</param>
      <param name="association">The association.</param>
    </member>
    <member name="P:Xtensive.Orm.ReferenceInfo.ReferencingEntity">
      <summary>
            Gets the referencing entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ReferenceInfo.ReferencedEntity">
      <summary>
            Gets the referenced entity.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ReferenceInfo.Association">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.AssociationInfo" /> object describing the relationship.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.RecordSetExtensions">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.RecordSet" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.RecordSetExtensions.ToEntities``1(Xtensive.Storage.Rse.RecordSet,System.Int32)">
      <summary>
            Converts the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> items to <see cref="T:Xtensive.Orm.Entity" /> instances.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Orm.Entity" /> instances to get.</typeparam>
      <param name="source">The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> to process.</param>
      <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record" />.</param>
      <returns>The sequence of <see cref="T:Xtensive.Orm.Entity" /> instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.RecordSetExtensions.ToEntities``1(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Orm.Session,System.Int32)">
      <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1" /> of tuples to <see cref="T:Xtensive.Orm.Entity" /> instances.
            </summary>
      <param name="source">The tuples to process.</param>
      <param name="header">The record set header.</param>
      <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record" />.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.Entity" /> instances.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.RecordSetExtensions.ToEntities(Xtensive.Storage.Rse.RecordSet,System.Int32)">
      <summary>
            Converts the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> items to <see cref="T:Xtensive.Orm.Entity" /> instances.
            </summary>
      <param name="source">The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> to process.</param>
      <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record" />.</param>
      <returns>The sequence of <see cref="T:Xtensive.Orm.Entity" /> instances.</returns>
    </member>
    <member name="M:Xtensive.Orm.RecordSetExtensions.ToEntities(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Orm.Session,System.Int32)">
      <summary>
            Converts the <see cref="T:System.Collections.Generic.IEnumerable`1" /> of tuples to <see cref="T:Xtensive.Orm.Entity" /> instances.
            </summary>
      <param name="source">The tuples to process.</param>
      <param name="header">The record set header.</param>
      <param name="session">The session.</param>
      <param name="primaryKeyIndex">Index of primary key within the <see cref="T:Xtensive.Orm.Record" />.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.Entity" /> instances.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.Internals.ChainingSessionHandler">
      <summary>
            The base class for <see cref="T:Xtensive.Storage.Providers.SessionHandler" />s which support the chaining 
            with another handler.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Internals.ChainingSessionHandler.ChainedHandler">
      <summary>
            The chained handler.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.CompletingTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.Persist(Xtensive.Orm.Internals.EntityChangeRegistry,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.PersistAction},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.ExecutePrefetchTasks(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.FetchEntityState(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.FetchField(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.FetchEntitySet(Xtensive.Orm.Key,Xtensive.Orm.Model.FieldInfo,System.Nullable{System.Int32})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.CreateEnumerationContext">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.#ctor(Xtensive.Storage.Providers.SessionHandler)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="chainedHandler">The handler to be chained.</param>
    </member>
    <member name="M:Xtensive.Orm.Internals.ChainingSessionHandler.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Internals.ChainingSessionHandler.TransactionIsStarted">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationContextOptions">
      <summary>
            Various options for <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.EnumerationContextOptions.GreedyEnumerator">
      <summary>
            Indicates that <see cref="T:System.Collections.Generic.IEnumerator`1" /> of the root provider
            should be fully read before returning data to user.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.EnumerationContext">
      <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> 
            suitable for storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.EnumerationContext.BeginEnumeration">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.EnumerationContext.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.EnumerationContext.CreateActiveScope">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.EnumerationContext.#ctor(Xtensive.Storage.Providers.SessionHandler,Xtensive.Storage.Rse.Providers.EnumerationContextOptions)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sessionHandler">The session handler.</param>
      <param name="options">A value for <see cref="P:Xtensive.Storage.Providers.EnumerationContext.Options" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.EnumerationContext.SessionHandler">
      <summary>
            Gets the session handler.
            </summary>
      <value>The session handler.</value>
    </member>
    <member name="P:Xtensive.Storage.Providers.EnumerationContext.Options">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.EnumerationContext.GlobalTemporaryData">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.EnumerationContext.TransactionTemporaryData">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.ProviderInfo">
      <summary>
            Provider's features provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.ProviderInfo.Supports(Xtensive.Storage.Providers.ProviderFeatures)">
      <summary>
            Determines whether the specified features are supported.
            </summary>
      <param name="required">The required feature set.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.ProviderInfo.#ctor(System.Version,Xtensive.Storage.Providers.ProviderFeatures,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.ProviderInfo.StorageVersion">
      <summary>
            Version of the underlying storage.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.ProviderInfo.Features">
      <summary>
            Gets the features.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.ProviderInfo.MaxIdentifierLength">
      <summary>
            Maximal identifier length.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.ProviderFeatures">
      <summary>
            Enumerates all the features supported by storage providers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationScope">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> activation scope.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationScope.#ctor(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationScope.Context">
      <summary>
            Gets the context of this scope.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IHasVersionRoots">
      <summary>
            Should be implemented by entities that have version roots.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.IHasVersionRoots.GetVersionRoots">
      <summary>
            Gets the sequence of entity's version roots.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Internals.EntitySetItem`2">
      <summary>
            Abstract base class for internally used <see cref="T:Xtensive.Orm.EntitySet`1" /> items.
            Instances of runtime-generated descendants of this type are used
            to actually describe the relationship behind the <see cref="T:Xtensive.Orm.EntitySet`1" />,
            if it isn't paired, or is paired to another <see cref="T:Xtensive.Orm.EntitySet`1" />.
            </summary>
      <typeparam name="TMaster">The type of the master.</typeparam>
      <typeparam name="TSlave">The type of the slave.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Internals.EntitySetItem`2.#ctor(Xtensive.Orm.Session,Xtensive.Tuples.Tuple)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
      <param name="tuple">The tuple containing key value for this instance.</param>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetItem`2.Master">
      <summary>
            Gets the master entity reference.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Internals.EntitySetItem`2.Slave">
      <summary>
            Gets the slave entity reference.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.IFieldValueAdapter">
      <summary>
            An object exposing (i.e. providing access to) field value in custom fashion.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IFieldValueAdapter.Owner">
      <summary>
            Gets the owner of the value.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IFieldValueAdapter.Field">
      <summary>
            Gets the field this adapter handles.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TransactionalExtensions">
      <summary>
            Various extensions related to transactions.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},``0)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the action argument.</typeparam>
      <param name="action">The action.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Orm.Session,``0)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the action argument.</typeparam>
      <param name="action">The action.</param>
      <param name="session">The session.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},System.Transactions.IsolationLevel,``0)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the action argument.</typeparam>
      <param name="action">The action.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Action{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel,``0)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the action argument.</typeparam>
      <param name="action">The action.</param>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <param name="action">The action.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Orm.Session)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <param name="action">The action.</param>
      <param name="session">The session.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,System.Transactions.IsolationLevel)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <param name="action">The action.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally(System.Action,Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
      <summary>
            Invokes the action wrapping it into a transaction.
            </summary>
      <param name="action">The action.</param>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},``0)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the function argument.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Orm.Session,``0)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the function argument.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="session">The session.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},System.Transactions.IsolationLevel,``0)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the function argument.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``2(System.Func{``0,``1},Xtensive.Orm.Session,System.Transactions.IsolationLevel,``0)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="T">The type of the function argument.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
      <param name="argument">The argument.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0})">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Orm.Session)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="session">The session.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},System.Transactions.IsolationLevel)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.InvokeTransactionally``1(System.Func{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
      <summary>
            Invokes the function wrapping it into a transaction.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="function">The function.</param>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
      <typeparam name="T">The type of item in sequence.</typeparam>
      <param name="source">The sequence to convert.</param>
      <returns>"Transactional" version of sequence.</returns>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session)">
      <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
      <typeparam name="T">The type of item in sequence.</typeparam>
      <param name="source">The sequence to convert.</param>
      <param name="session">The session.</param>
      <returns>"Transactional" version of sequence.</returns>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},System.Transactions.IsolationLevel)">
      <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
      <typeparam name="T">The type of item in sequence.</typeparam>
      <param name="source">The sequence to convert.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>"Transactional" version of sequence.</returns>
    </member>
    <member name="M:Xtensive.Orm.TransactionalExtensions.ToTransactional``1(System.Collections.Generic.IEnumerable{``0},Xtensive.Orm.Session,System.Transactions.IsolationLevel)">
      <summary>
            Converts the sequence to transactional.
            In fact, it does nothing if current transaction is available;
            otherwise it opens a new transaction, caches the sequence enumeration result,
            closes the transaction and returns cached sequence enumerator.
            </summary>
      <typeparam name="T">The type of item in sequence.</typeparam>
      <param name="source">The sequence to convert.</param>
      <param name="session">The session.</param>
      <param name="isolationLevel">The isolation level.</param>
      <returns>"Transactional" version of sequence.</returns>
    </member>
    <member name="T:Xtensive.Orm.TypeExtensions">
      <summary>
            Useful <see cref="T:System.Type" />-related extensions.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TypeExtensions.GetTypeInfo(System.Type)">
      <summary>
            Gets the corresponding <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
      <param name="type">The type.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.</returns>
      <remarks>This method requires open <see cref="T:Xtensive.Orm.Session" />.</remarks>
    </member>
    <member name="M:Xtensive.Orm.TypeExtensions.GetTypeInfo(System.Type,Xtensive.Orm.Domain)">
      <summary>
            Gets the corresponding <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.
            </summary>
      <param name="type">The type.</param>
      <param name="domain">The domain to look for <see cref="T:Xtensive.Orm.Model.TypeInfo" /> within.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.</returns>
    </member>
    <member name="T:Xtensive.Orm.Services.DirectEntitySetAccessor">
      <summary>
            Provides access to low-level operations with <see cref="T:Xtensive.Orm.EntitySetBase" /> descendants.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.GetEntitySet(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Gets the entity set for the specified property.
            </summary>
      <param name="target">The target.</param>
      <param name="field">The field.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Add(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
      <summary>
            Adds the item to the specified target.
            </summary>
      <param name="target">The target.</param>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" />, if the item was added;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Add(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Entity)">
      <summary>
            Adds the item to the specified target.
            </summary>
      <param name="target">The target.</param>
      <param name="field">The field.</param>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" />, if the item was added;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Remove(Xtensive.Orm.EntitySetBase,Xtensive.Orm.Entity)">
      <summary>
            Removes the item from the specified target.
            </summary>
      <param name="target">The target.</param>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" />, if the item was added;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Remove(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo,Xtensive.Orm.Entity)">
      <summary>
            Removes the item from the specified target.
            </summary>
      <param name="target">The target.</param>
      <param name="field">The field.</param>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" />, if the item was added;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Clear(Xtensive.Orm.EntitySetBase)">
      <summary>
            Clears the specified target.
            </summary>
      <param name="target">The target.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.Clear(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
            Clears the entity set of the specified target field.
            </summary>
      <param name="target">The target.</param>
      <param name="field">The field.</param>
    </member>
    <member name="M:Xtensive.Orm.Services.DirectEntitySetAccessor.#ctor(Xtensive.Orm.Session)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Internals.VersionGenerator">
      <summary>
            Default generator providing next values for fields marked by <see cref="T:Xtensive.Orm.VersionAttribute" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Internals.VersionGenerator.GenerateNextVersion(System.Object)">
      <summary>
            Gets the next version value.
            </summary>
      <param name="currentVersion">The current version.</param>
      <returns>Next version value.</returns>
      <exception cref="T:System.NotSupportedException">Unsupported <paramref name="currentVersion" /> type.</exception>
    </member>
    <member name="M:Xtensive.Orm.Internals.LongKey.GetValue">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.LongKey.CalculateHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Internals.LongKey.ValueEquals(Xtensive.Orm.Key)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.ColumnGroupCollection">
      <summary>
            Read only collection of <see cref="T:Xtensive.Orm.Model.ColumnGroup" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnGroupCollection.GetGroupIndexBySegment(Xtensive.Core.Segment{System.Int32})">
      <summary>
            Gets the index of the group by provided <paramref name="segment" />.
            </summary>
      <param name="segment">Segment of record' columns.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Orm.Model.ColumnGroup})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="items">The collection items.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnGroupCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.ColumnGroup" /> by specified group index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnGroupCollection.Empty">
      <summary>
            Gets the empty <see cref="T:Xtensive.Storage.Rse.ColumnGroupCollection" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.MappedColumn">
      <summary>
            Mapped column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.Clone(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.Clone(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(System.String,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(Xtensive.Orm.Model.ColumnInfoRef,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="columnInfoRef">
        <see cref="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(Xtensive.Orm.Model.ColumnInfoRef,System.String,System.Int32,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="columnInfoRef">
        <see cref="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef" /> property value.</param>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef">
      <summary>
            Gets the reference that describes a column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.ColumnCollection">
      <summary>
            Collection of <see cref="T:Xtensive.Storage.Rse.Column" /> items.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.Join(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Joins this collection with specified the column collection.
            </summary>
      <param name="joined">The joined.</param>
      <returns>The joined collection.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.Alias(System.String)">
      <summary>
            Aliases the specified <see cref="T:Xtensive.Storage.Rse.Column" /> collection.
            </summary>
      <param name="alias">The alias to add.</param>
      <returns>Aliased collection of columns.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="collection">Collection of items to add.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnCollection.Item(System.String)">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.Column" /> by provided <paramref name="fullName" />.
            </summary>
      <remarks>
            Returns <see cref="T:Xtensive.Storage.Rse.Column" /> if it was found; otherwise <see langword="null" />.
            </remarks>
      <param name="fullName">Full name of the <see cref="T:Xtensive.Storage.Rse.Column" /> to find.</param>
    </member>
    <member name="T:Xtensive.Orm.SystemTypeAttribute">
      <summary>
            Marks persistent type as a system type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SystemTypeAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.SystemTypeAttribute.#ctor(System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeId">The type identifier.</param>
    </member>
    <member name="P:Xtensive.Orm.SystemTypeAttribute.TypeId">
      <summary>
            Type identifier to preserve for it.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Serialization.SerializationContext">
      <summary>
            Serialization context.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.SerializationContext" />, or throws <see cref="T:System.InvalidOperationException" />, if active context is not found.
            </summary>
      <returns>Current context.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Serialization.SerializationContext.Current" />
        <see cref="T:Xtensive.Orm.Serialization.SerializationContext" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.CreateActiveScope">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetEntityValueData(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Gets the entity value data, i.e. data which will be deserialized as a new <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
      <param name="entity">The <see cref="T:Xtensive.Orm.Entity" /> to serialize.</param>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetEntityReferenceData(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Gets the entity reference data, i.e. data which will be deserialized as a reference to existing <see cref="T:Xtensive.Orm.Entity" /></summary>
      <param name="entity">The <see cref="T:Xtensive.Orm.Entity" /> to serialize.</param>
      <param name="info">The object to be populated with serialization information.</param>
      <param name="context">The destination context of the serialization.</param>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.GetSerializationKind(Xtensive.Orm.Entity)">
      <summary>
            Gets the kind of serialization for the specified <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
      <param name="entity">The <see cref="T:Xtensive.Orm.Entity" /> to be serialized.</param>
      <returns>Serialization kind.</returns>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.#ctor(Xtensive.Orm.Serialization.SerializationKind)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="serializationKind">Default <see cref="T:Xtensive.Orm.Serialization.SerializationKind" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationContext.#ctor(System.Func{Xtensive.Orm.Entity,Xtensive.Orm.Serialization.SerializationKind})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="serializationKindGetter">The <see cref="T:Xtensive.Orm.Serialization.SerializationKind" /> getter.</param>
    </member>
    <member name="P:Xtensive.Orm.Serialization.SerializationContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.SerializationContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Serialization.SerializationContext.IsActive">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Serialization.DeserializationContext">
      <summary>
            Deserialization context.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationContext.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.DeserializationContext" />, 
            or throws <see cref="T:System.InvalidOperationException" />, if active context is not found.
            </summary>
      <returns>Current context.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Serialization.DeserializationContext.Current" />
        <see cref="T:Xtensive.Orm.Serialization.DeserializationContext" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationContext.CreateActiveScope">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationContext.InitializeEntity(Xtensive.Orm.Entity)">
      <summary>
            Initializes the <see cref="T:Xtensive.Orm.Entity" />.
            </summary>
      <param name="entity">The <see cref="T:Xtensive.Orm.Entity" /> to initialize.</param>
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationContext.InitializeEntity(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes the entity, i.e. deserializes or generates its <see cref="T:Xtensive.Orm.Key" /> and creates its <see cref="T:Xtensive.Orm.EntityState" />.
            </summary>
      <param name="entity">The entity to initialize.</param>
      <param name="serializationInfo">The information to populate the <see cref="P:Xtensive.Orm.Entity.Key" />.</param>
      <param name="context">The source from which the object is deserialized.</param>
      <remarks>
            Target <see cref="T:Xtensive.Orm.Entity" /> is not initialized on this step, therefore it is unable to get or set its field values.
            </remarks>
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationContext.DeserializeEntities(Xtensive.Orm.Entity,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes the <see cref="T:Xtensive.Orm.Entity" />'s field values.
            </summary>
      <param name="entity">The <see cref="T:Xtensive.Orm.Entity" /> to deserialize.</param>
      <param name="serializationInfo">The information to populate the <see cref="T:Xtensive.Orm.Entity" />'s field values.</param>
      <param name="context">The source from which the object is deserialized.</param>
      <remarks>
        <see cref="P:Xtensive.Orm.Entity.Key" /> is already deserialized and all another <see cref="T:Xtensive.Orm.Entity">Entities</see> is already initialized on this step.
            </remarks>
    </member>
    <member name="P:Xtensive.Orm.Serialization.DeserializationContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Serialization.DeserializationContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Serialization.DeserializationContext.IsActive">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.KeyGeneratorAttribute">
      <summary>
            Configures <see cref="T:Xtensive.Orm.KeyGenerator" /> for the hierarchy.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor(System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The generator type. Must be inherited from the <see cref="T:Xtensive.Orm.KeyGenerator" /> type</param>
      <remarks>
        <paramref name="type" /> can be null.</remarks>
    </member>
    <member name="M:Xtensive.Orm.KeyGeneratorAttribute.#ctor(Xtensive.Orm.KeyGeneratorKind)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keyGeneratorKind">Kind of the key generator.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>keyGeneratorKind</c> cannot be 
            <see cref="F:Xtensive.Orm.KeyGeneratorKind.Custom" /> here.</exception>
    </member>
    <member name="P:Xtensive.Orm.KeyGeneratorAttribute.Type">
      <summary>
            Gets the key generator type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGeneratorAttribute.Kind">
      <summary>
            Gets the kind of key generator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.KeyGeneratorAttribute.Name">
      <summary>
            Gets or sets the name of the key generator.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.EntitySet`1">
      <summary>
            Unordered persistent <see cref="T:Xtensive.Orm.Entity" />-bound set (i.e. there can be no duplicates).
            </summary>
      <typeparam name="TItem">The type of the entities in this set.</typeparam>
      <remarks>
        <para>
            Use <see cref="T:Xtensive.Orm.EntitySet`1" /> when you need to declare persistent property of entity set type.
            </para>
        <para>
          <c>EntitySets</c> can be used as a <see cref="P:Xtensive.Orm.AssociationAttribute.PairTo">paired property</see> with reference 
            (One-To-Many) or EntitySet (Many-To-Many) properties. In such case DataObjects.Net automatically
            modifies collection or it's paired property. If paired property is not specified, auxiliary table
            will be automatically created in database.
            </para>
        <para>EntitySet class implements <see cref="T:System.Linq.IQueryable`1" /> interface and fully supported by 
            DataObjects.Net LINQ translator.</para>
      </remarks>
      <example>In following example User entity has three EntitySet properties with different association kinds.
            <code>
            public class User : Entity
            {
              ...
              
              // persistent collection with auxiliary table
              [Field]
              public EntitySet&lt;Photo&gt; Photos { get; private set; }
              
              // One-to-many association
              [Field, Association(PairTo = "Author")]
              public EntitySet&lt;BlogItem&gt; BlogItems { get; private set; }
              
              // Many-to-many association
              [Field, Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code></example>
      <seealso cref="T:Xtensive.Orm.Entity">Entity class</seealso>
      <seealso cref="P:Xtensive.Orm.AssociationAttribute.PairTo">Using EntitySets with paired associations</seealso>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.Contains(`0)">
      <summary>
            Determines whether this collection contains the specified item.
            </summary>
      <param name="item">The item to check for containment.</param>
      <returns>
        <see langword="true" /> if this collection contains the specified item; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.Add(`0)">
      <summary>
            Adds the specified item to the collection.
            </summary>
      <param name="item">The item to add.</param>
      <returns>
        <see langword="True" />, if the item is added to the collection;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.Remove(`0)">
      <summary>
            Removes the specified item from the collection.
            </summary>
      <param name="item">The item to remove.</param>
      <returns>
        <see langword="True" />, if the item is removed from the collection;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.AddRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the <paramref name="items" /> to this <see cref="T:Xtensive.Orm.EntitySet`1" />.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
      <param name="items">The items to add.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.IntersectWith``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Modifies the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object
            to contain only elements that are present in that object and in the specified collection.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
      <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.UnionWith``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Modifies the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object
            to contain all elements that are present in both itself and in the specified collection.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
      <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.ExceptWith``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Removes all elements in the specified collection from the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
      <param name="other">The collection to compare to the current <see cref="T:Xtensive.Orm.EntitySet`1" /> object.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.GetItemCountQueryDelegate(Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.#ctor(Xtensive.Orm.Entity,Xtensive.Orm.Model.FieldInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="owner">Persistent this entity set belongs to.</param>
      <param name="field">Field corresponds to this entity set.</param>
    </member>
    <member name="M:Xtensive.Orm.EntitySet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />.</param>
    </member>
    <member name="P:Xtensive.Orm.EntitySet`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.EntitySet`1.Expression">
      <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.
            </summary>
      <value>
      </value>
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.EntitySet`1.ElementType">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.EntitySet`1.Provider">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.Expressions.MarkerExpression.#ctor(System.Linq.Expressions.Expression,Xtensive.Orm.Linq.Expressions.MarkerType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Linq.Expressions.SubQueryExpression.Mapping">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.ItemToTupleConverter`1.IsPersistableType(System.Type)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="T:Xtensive.Orm.ReferentialIntegrityException">
      <summary>
            Thrown on attempt to remove an object having
            reference with <see cref="F:Xtensive.Orm.OnRemoveAction.Deny" />
            option pointing to it.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ReferentialIntegrityException.#ctor(Xtensive.Orm.Model.AssociationInfo,Xtensive.Orm.Entity,Xtensive.Orm.Entity,Xtensive.Orm.Entity)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.ReferentialIntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Orm.ReferentialIntegrityException.Association">
      <summary>
            Gets the association.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ReferentialIntegrityException.Initiator">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Key" /> of the initiator of removing action.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ReferentialIntegrityException.ReferencingObject">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Key" /> of the referencing object.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.ReferentialIntegrityException.ReferencedObject">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Key" /> of the referenced object.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.ReferenceFinder">
      <summary>
            Provides a set of referential integrity related methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.FindReferencingObjects(Xtensive.Orm.Entity)">
      <summary>
            Finds the referencing objects.
            </summary>
      <param name="target">The target to find references to.</param>
      <returns>The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo" /> objects.</returns>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.FindReferencingObjects(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Finds the referencing objects.
            </summary>
      <param name="target">The target to find references to.</param>
      <param name="association">The association.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo" /> objects.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.IsReferenced(Xtensive.Orm.Entity)">
      <summary>
            Determines whether the specified <see cref="T:Xtensive.Orm.Entity" /> is referenced.
            </summary>
      <param name="target">The <see cref="T:Xtensive.Orm.Entity" /> to check.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:Xtensive.Orm.Entity" /> is referenced; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesTo(Xtensive.Orm.Entity)">
      <summary>
            Finds all the entities that reference specified <paramref name="target" /> entity.
            </summary>
      <param name="target">The entity to find references to.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo" /> objects.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesTo(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Finds all the entities that reference <paramref name="target" /> entity 
            via specified <paramref name="association" />.
            </summary>
      <param name="target">The entity to find references to.</param>
      <param name="association">The association to process.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo" /> objects.
            </returns>
      <exception cref="T:System.InvalidOperationException">Type doesn't participate in the specified association.</exception>
    </member>
    <member name="M:Xtensive.Orm.ReferenceFinder.GetReferencesFrom(Xtensive.Orm.Entity,Xtensive.Orm.Model.AssociationInfo)">
      <summary>
            Gets all the references from the specified <paramref name="source" /> entity
            via specified <paramref name="association" />.
            </summary>
      <param name="source">The source entity.</param>
      <param name="association">The association to process.</param>
      <returns>
            The sequence of <see cref="T:Xtensive.Orm.ReferenceInfo" /> objects.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.HierarchyDefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef" /> items.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.Contains(Xtensive.Orm.Building.Definitions.HierarchyDef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.TryGetValue(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <returns>The value associated with the specified <paramref name="key" /> or <see langword="null" /> 
            if item was not found.</returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.TryGetValue(System.Type)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <returns>The value associated with the specified <paramref name="key" /> or <see langword="null" /> 
            if item was not found.</returns>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.HierarchyDefCollection.Item(System.Type)">
      <summary>
            An indexer that provides access to collection items.
            </summary>
      <exception cref="T:System.ArgumentException"> when item was not found.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Validator.ValidateName(System.String,Xtensive.Orm.Building.ValidationRule)">
      <summary>
            Determines whether the specified name is valid.
            </summary>
      <param name="name">The name to validate.</param>
      <param name="rule">The validation rule.</param>
      <returns>
        <see langword="true" /> if the specified name is valid; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Validator.EnsureIsNullable(System.Type)">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Field cannot be nullable.</exception>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.TypeDefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> items.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindAncestor(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Finds the ancestor of the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search ancestor for.</param>
      <returns>
        <see name="TypeDef" /> instance that is ancestor of specified <paramref name="item" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindAncestor(System.Type)">
      <summary>
            Finds the ancestor of the specified <paramref name="type" />.
            </summary>
      <param name="type">The type to search ancestor for.</param>
      <returns>
        <see name="TypeDef" /> instance that is ancestor of specified <paramref name="type" /> or 
            <see langword="null" /> if the ancestor is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.FindInterfaces(System.Type)">
      <summary>
            Find the <see cref="T:System.Collections.Generic.IEnumerable`1" /> of interfaces that specified <paramref name="type" /> implements.
            </summary>
      <param name="type">The type to search interfaces for.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see name="TypeDef" /> instance that are implemented by the specified <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.Contains(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Determines whether collection contains a specific item.
            </summary>
      <param name="item">Value to search for.</param>
      <returns>
        <see langword="True" /> if the object is found; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.Contains(System.Type)">
      <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see langword="true" /> if this instance contains the specified key; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.TypeDefCollection.TryGetValue(System.Type)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key of the value to get.</param>
      <returns>The value associated with the specified <paramref name="key" /> or <see langword="null" /> 
            if item was not found.</returns>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.TypeDefCollection.Item(System.Type)">
      <summary>
            An indexer that provides access to collection items.
            </summary>
      <exception cref="T:System.ArgumentException"> when item was not found.</exception>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.IndexDef">
      <summary>
            Defines a single index.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.Definitions.IndexDef.DefaultFillFactor">
      <summary>
            Default fill factor.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.IndexDef.ValidateName(System.String)">
      <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
      <param name="newName">The new name of this instance.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsPrimary">
      <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsUnique">
      <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IsSecondary">
      <summary>
            Gets or sets a value indicating whether this instance is secondary index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.Attributes">
      <summary>
            Gets the attributes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.FillFactor">
      <summary>
            Gets or sets the fill factor for index, must be a real number between <see langword="0" /> and <see langword="1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.KeyFields">
      <summary>
            Gets the key fields that are included in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.IndexDef.IncludedFields">
      <summary>
            Gets the non key fields that are included in this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.CachingKeyGenerator`1">
      <summary>
            Generator with caching capabilities.
            </summary>
      <typeparam name="TKeyType">The type of the field.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.CachingKeyGenerator`1.TryGenerateKey(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.CachingKeyGenerator`1.NextBulk">
      <summary>
            Retrieves the next portion of unique key values.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.CachingKeyGenerator`1.#ctor(Xtensive.Orm.Configuration.DomainConfiguration)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.CachingKeyGenerator`1.CacheSize">
      <summary>
            Gets or sets the size of the cache.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.CachingKeyGenerator`1.SequenceIncrement">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.CachingKeyGenerator`1.CachedKeys">
      <summary>
            Gets the cache.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.ICachingKeyGeneratorService">
      <summary>
            Handler for <see cref="T:Xtensive.Orm.CachingKeyGenerator`1" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.ICachingKeyGeneratorService.NextBulk``1(Xtensive.Orm.CachingKeyGenerator{``0})">
      <summary>
            Gets the bulk of keys.
            </summary>
      <typeparam name="TFieldType">The type of the key field.</typeparam>
      <param name="keyGenerator">The key generator requested the bulk of keys.</param>
      <returns>
            The sequence enumerating the next bulk of keys.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.Building.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.IndexBuilder.BuildIndex(Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Building.Definitions.IndexDef,System.Boolean)">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
    </member>
    <member name="T:Xtensive.Orm.Building.Definitions.DomainModelDef">
      <summary>
            Defines the whole <see cref="T:Xtensive.Orm.Domain" /> model.
            The root definition.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.DefineType(System.Type)">
      <summary>
            Defines new <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> and adds it to <see cref="T:Xtensive.Orm.Building.Definitions.DomainModelDef" /> instance.
            </summary>
      <param name="type">The underlying type.</param>
      <returns>Newly created <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.FindRoot(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Finds the root of inheritance hierarchy for the specified <paramref name="item" />.
            </summary>
      <param name="item">The type to search root for.</param>
      <returns>
        <see name="TypeDef" /> instance that is root of specified <paramref name="item" /> or 
            <see langword="null" /> if the root is not found in this collection.</returns>
      <exception cref="T:System.ArgumentNullException">When <paramref name="item" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.FindHierarchy(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Finds the hierarchy.
            </summary>
      <param name="item">The type to search hierarchy for.</param>
      <returns>
        <see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef" /> instance or <see langword="null" /> if hierarchy is not found.</returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Definitions.DomainModelDef.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Orm.Building.Definitions.DomainModelDef" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.Types">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> instances contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.Hierarchies">
      <summary>
            Gets the collection of <see cref="T:Xtensive.Orm.Building.Definitions.HierarchyDef" /> instances contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Definitions.DomainModelDef.FullTextIndexes">
      <summary>
            Gets the collection of <see cref="T:Xtensive.Orm.Building.Definitions.FullTextIndexDef" /> instances contained in this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TableMappingAttribute">
      <summary>
            Table mapping attribute.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TableMappingAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Orm.TableMappingAttribute.Name" /> property value.</param>
    </member>
    <member name="P:Xtensive.Orm.TableMappingAttribute.Name">
      <summary>
            Gets the base part of the field's related column name 
            or the base part of the class' related table name.
            </summary>
      <remarks>
            You can use the following characters in <see cref="P:Xtensive.Orm.TableMappingAttribute.Name" />s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Orm.TableMappingAttribute.Name" /> can't be an empty string or <see langword="null" />.
            </remarks>
    </member>
    <member name="T:Xtensive.Orm.FieldMappingAttribute">
      <summary>
            Field mapping attribute.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.FieldMappingAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Field mapping name.</param>
    </member>
    <member name="P:Xtensive.Orm.FieldMappingAttribute.Name">
      <summary>
            Gets the base part of the field's related column name.
            </summary>
      <remarks>
            You can use the following characters in <see cref="P:Xtensive.Orm.FieldMappingAttribute.Name" />s: [_A-Za-z0-9-.]. 
            <see cref="P:Xtensive.Orm.FieldMappingAttribute.Name" /> can't be an empty string or <see langword="null" />.
            </remarks>
    </member>
    <member name="T:Xtensive.Orm.AssociationAttribute">
      <summary>
            Provides additional properties to association. 
            This attribute can be applied on persistent properties of <see cref="T:Xtensive.Orm.Entity" /> or <see cref="T:Xtensive.Orm.EntitySet`1" /> type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.AssociationAttribute.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.AssociationAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="pairTo">The pair to.</param>
    </member>
    <member name="P:Xtensive.Orm.AssociationAttribute.OnTargetRemove">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> action that will be executed in case that 
            target (referenced) Entity is about to be removed.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.AssociationAttribute.OnOwnerRemove">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Orm.OnRemoveAction" /> action that will be executed in case that 
            owner Entity (the owner of the reference field) is about to be removed.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.AssociationAttribute.PairTo">
      <summary>
            Indicates that association (persistent collection or persistent field)
            is inverse end of another another collection or reference field.
            </summary>
      <remarks>
        <para>
            When reference field is paired to another reference field, their value is automatically synchronized.
            </para>
        <para>
            When collection is paired to reference field (One-to-Many association), 
            it does not allocate any space in the database and all operations on this EntitySet are 
            automatically synchronized to paired reference field.
            </para>
        <para>
            When collection is paired to another collection (Many-to-Many) association, auxiliary table
            will be automatically created to support this association.
            </para>
      </remarks>
      <example>In the following example User entity has three associations of different types.
            <code>
            public class User : Entity
            {
              ...
              
              // One-to-one association with "User" propery of "Account" class.
              [Association(PairTo = "User")]
              public Account Account { get; private set; }
              
              // One-to-many association
              [Association(PairTo = "Author")]
              public EntitySet&lt;BlogPost&gt; BlogPostss { get; private set; }
              
              // Many-to-many association
              [Association(PairTo = "Friends")]
              public EntitySet&lt;User&gt; Friends { get; private set; }
            }
            </code></example>
    </member>
    <member name="T:Xtensive.Orm.IndexAttribute">
      <summary>
            Defines secondary index.
            </summary>
      <example>
        <code lang="cs" source="..\Xtensive.Orm\Xtensive.Orm.Manual\Attributes\AttributesTest.cs" region="Model" />
      </example>
    </member>
    <member name="M:Xtensive.Orm.IndexAttribute.#ctor(System.String,System.String[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keyField">The first key field.</param>
      <param name="keyFields">The other (optional) key fields.</param>
    </member>
    <member name="P:Xtensive.Orm.IndexAttribute.Name">
      <summary>
            Gets or sets the index name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IndexAttribute.KeyFields">
      <summary>
            Key fields that compose the index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IndexAttribute.IncludedFields">
      <summary>
            Non key fields that are included into the index.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IndexAttribute.FillFactor">
      <summary>
            Fill factor for this index, must be a real number between 
            <see langword="0" /> and <see langword="1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.IndexAttribute.Unique">
      <summary>
            Gets or sets a value indicating whether the index is unique.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradeContext">
      <summary>
            Upgrade context.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeContext.Demand">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" />, or throws <see cref="T:System.InvalidOperationException" />, if active context is not found.
            </summary>
      <returns>Current context.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Current" />
        <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeContext.CreateActiveScope">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeContext.BuildUpgradeHandlers">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">More then one enabled handler is provided for some assembly.</exception>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Stage">
      <summary>
            Gets the current upgrade stage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.OriginalConfiguration">
      <summary>
            Gets the original <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Configuration">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Configuration.DomainConfiguration" />
            at the current upgrade stage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints">
      <summary>
            Gets the upgrade hints.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaHints">
      <summary>
            Gets the schema upgrade hints.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaDifference">
      <summary>
            Gets the storage model difference 
            at the current upgrade stage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.SchemaUpgradeActions">
      <summary>
            Gets the schema upgrade actions
            at the current upgrade stage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedDomainModel">
      <summary>
            Gets the domain model that was extracted from storage.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.ExtractedTypeMap">
      <summary>
            Gets the extracted type map (Full name of the type and TypeId).
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Services">
      <summary>
            Gets or sets the collection of services related to upgrade.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.UpgradeHandlers">
      <summary>
            Gets the map of upgrade handlers.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.OrderedUpgradeHandlers">
      <summary>
            Gets the ordered collection of upgrade handlers.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.Modules">
      <summary>
            Gets the ordered collection of upgrade handlers.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.TransactionScope">
      <summary>
            Gets or sets current transaction scope.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeContext.IsActive">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradeStage">
      <summary>
            Upgrade stages enumeration.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Initializing">
      <summary>
            The very fist upgrade stage.
            Only system types are visible;
            schema isn't upgraded, but only checked for compatibility with
            the model containing system types only (<see cref="F:Xtensive.Orm.Building.SchemaUpgradeMode.ValidateCompatible" />).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Upgrading">
      <summary>
            The second upgrade stage.
            All the types are visible, including upgrade-only types;
            schema is upgraded; 
            <see cref="M:Xtensive.Orm.Upgrade.IUpgradeHandler.OnStage" /> events are raised at the beginning of this stage;
            <see cref="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnUpgrade" /> events are raised at the end of this stage.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Upgrade.UpgradeStage.Final">
      <summary>
            The final upgrade stage.
            Only runtime types are visible; upgrade-only types are invisible;
            schema is upgraded once more (upgrade-only types are removed); 
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration">
      <summary>
            Additional domain build process configuration 
            used by <see cref="T:Xtensive.Orm.Building.Builders.DomainBuilder" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.#ctor(Xtensive.Orm.Building.SchemaUpgradeMode,Xtensive.Collections.ReadOnlyList{Xtensive.Orm.IModule},Xtensive.IoC.IServiceContainer)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="schemaUpgradeMode">The schema upgrade mode.</param>
      <param name="modules">The collection of modules.</param>
      <param name="services">The collection of services.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.SchemaUpgradeMode">
      <summary>
            Gets or sets the schema upgrade mode.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.TypeFilter">
      <summary>
            Gets or sets the type filter.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.FieldFilter">
      <summary>
            Gets or sets the property filter.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.SchemaReadyHandler">
      <summary>
            Gets or sets the "schema ready" handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.UpgradeActionsReadyHandler">
      <summary>
            Gets or sets the "upgrade actions ready" handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.UpgradeHandler">
      <summary>
            Gets or sets the upgrade handler.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.TypeIdProvider">
      <summary>
            Gets or sets the type id provider.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.Modules">
      <summary>
            Gets the collection of extension modules.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.Builders.DomainBuilderConfiguration.Services">
      <summary>
            Gets the collection of services related to building or upgrade.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.TypeBuilder.BuildType(Xtensive.Orm.Building.Definitions.TypeDef)">
      <summary>
            Builds the <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance, its key fields and <see cref="T:Xtensive.Orm.Model.HierarchyInfo" /> for hierarchy root.
            </summary>
      <param name="typeDef">
        <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> instance.</param>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.TypeBuilder.BuildFields(Xtensive.Orm.Building.Definitions.TypeDef,Xtensive.Orm.Model.TypeInfo)">
      <summary>
            Builds the fields.
            </summary>
      <param name="typeDef">The <see cref="T:Xtensive.Orm.Building.Definitions.TypeDef" /> instance.</param>
      <param name="typeInfo">The corresponding <see cref="T:Xtensive.Orm.Model.TypeInfo" /> instance.</param>
    </member>
    <member name="T:Xtensive.Orm.SessionExtensions">
      <summary>
        <see cref="T:Xtensive.Orm.Session" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SessionExtensions.ToStringSafely(Xtensive.Orm.Session)">
      <summary>
            Gets the string representation of specified 
            <see cref="T:Xtensive.Orm.Session" /> safely (with null check).
            </summary>
      <param name="session">The session to get the string representation for.</param>
      <returns>The string representation of specified <paramref name="session" />;
            "n\a", if <paramref name="session" /> is <see langword="null" />.</returns>
    </member>
    <member name="T:Xtensive.Orm.Building.BuildingStage">
      <summary>
            Enumerates possible <see cref="P:Xtensive.Orm.Building.BuildingContext.Stage" /> values.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.BuildingStage.Created">
      <summary>
            Initial state.
            Value is <see langword="0x0" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.BuildingStage.Building">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" /> is building (<see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /> method is executing).
            Value is <see langword="0x1" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.BuildingStage.Upgrading">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" /> is upgrading the schema.
            <see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /> method is still executing.
            Value is <see langword="0x4" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.BuildingStage.Ready">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" /> is ready to use.
            Value is <see langword="0x10" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.BuildingStage.Failed">
      <summary>
            At least one error has occured during <see cref="T:Xtensive.Orm.Domain" /> building.
            Value is <see langword="0x100" />. 
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.BuildingScope">
      <summary>
            The scope for <see cref="T:Xtensive.Orm.Building.BuildingContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.BuildingScope.Context">
      <summary>
            Gets the context.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.SessionEventArgs">
      <summary>
            Provides data for <see cref="E:Xtensive.Orm.Domain.SessionOpen" /> event.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SessionEventArgs.#ctor(Xtensive.Orm.Session)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="session">The session.</param>
    </member>
    <member name="P:Xtensive.Orm.SessionEventArgs.Session">
      <summary>
            Gets the session.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.StorageInfo">
      <summary>
            Storage schema.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.StorageInfo.DefaultName">
      <summary>
            Default <see cref="T:Xtensive.Storage.Model.StorageInfo" /> node name.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.StorageInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.StorageInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.StorageInfo.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The storage name.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.StorageInfo.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.StorageInfo.Actions">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.StorageInfo.Tables">
      <summary>
            Gets tables.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.StorageInfo.Sequences">
      <summary>
            Gets sequences.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData">
      <summary>
            Global temporary data context.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Get(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Set(System.String,System.Object)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData" /> instance.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradingDomainBuilder">
      <summary>
            Builds domain in extended modes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradingDomainBuilder.Build(Xtensive.Orm.Configuration.DomainConfiguration)">
      <summary>
            Builds the new <see cref="T:Xtensive.Orm.Domain" /> by the specified configuration.
            </summary>
      <param name="configuration">The domain configuration.</param>
      <returns>Newly created <see cref="T:Xtensive.Orm.Domain" />.</returns>
      <exception cref="T:System.ArgumentNullException">Parameter <paramref name="configuration" /> is null.</exception>
      <exception cref="T:Xtensive.Orm.DomainBuilderException">At least one error have been occurred 
            during storage building process.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>configuration.UpgradeMode</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradingDomainBuilder.BuildStageDomain(Xtensive.Orm.Upgrade.UpgradeStage)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>context.Stage</c> is out of range.</exception>
    </member>
    <member name="T:Xtensive.Orm.Building.Builders.DomainBuilder">
      <summary>
            Utility class for <see cref="N:Xtensive.Storage" /> building.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.DomainBuilder.BuildDomain(Xtensive.Orm.Configuration.DomainConfiguration,Xtensive.Orm.Building.Builders.DomainBuilderConfiguration)">
      <summary>
            Builds the domain.
            </summary>
      <param name="configuration">The domain configuration.</param>
      <param name="builderConfiguration">The builder configuration.</param>
      <returns>Built domain.</returns>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.DomainBuilder.CreateHandlerFactory">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
    </member>
    <member name="M:Xtensive.Orm.Building.Builders.DomainBuilder.SynchronizeSchema(Xtensive.Orm.Building.SchemaUpgradeMode)">
      <exception cref="T:Xtensive.Orm.SchemaSynchronizationException">Extracted schema is incompatible 
            with the target schema in specified <paramref name="schemaUpgradeMode" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>schemaUpgradeMode</c> is out of range.</exception>
    </member>
    <member name="T:Xtensive.Storage.Providers.ProviderAttribute">
      <summary>
            An attribute that must be applied to <see cref="T:Xtensive.Storage.Providers.HandlerFactory" />
            to make it available for the storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.ProviderAttribute.Equals(Xtensive.Storage.Providers.ProviderAttribute)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.ProviderAttribute.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.ProviderAttribute.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.ProviderAttribute.Protocol">
      <summary>
            Gets or sets the protocol the provider is responsible for.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.ProviderAttribute.Description">
      <summary>
            Gets or sets the description of the provider.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.SchemaUpgradeMode">
      <summary>
            Schema upgrade modes.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.ValidateExact">
      <summary>
            Validate schema to be equal to the domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.ValidateCompatible">
      <summary>
            Validate schema to be compatible (equal or greater) with the domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.ValidateLegacy">
      <summary>
            Validate schema to be compatible with the domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.Perform">
      <summary>
            Upgrade schema to domain model.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.PerformSafely">
      <summary>
            Upgrade schema to domain model safely - 
            i.e. without any operations leading to data lost.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.Recreate">
      <summary>
            Completely recreate the schema.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaUpgradeMode.Skip">
      <summary>
            Skip schema upgrade.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.GetTargetSchemaProvider">
      <summary>
            Gets the target schema.
            </summary>
      <returns>The target schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.GetExtractedSchemaProvider">
      <summary>
            Gets the extracted schema.
            This method caches the schema inside <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" />.
            </summary>
      <returns>The extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.GetNativeExtractedSchema">
      <summary>
            Gets the native extracted schema.
            This method caches the schema inside <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" />.
            </summary>
      <returns>The native extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.ClearExtractedSchemaCache">
      <summary>
            Clears the extracted schema cache.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.ExtractSchema">
      <summary>
            Extracts the schema.
            </summary>
      <returns>The extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.ExtractNativeSchema">
      <summary>
            Extracts the native schema.
            </summary>
      <returns>The native extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Model.StorageInfo)">
      <summary>
            Upgrades the storage.
            </summary>
      <param name="upgradeActions">The upgrade actions.</param>
      <param name="sourceSchema">The source schema.</param>
      <param name="targetSchema">The target schema.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Creates the type info.
            </summary>
      <param name="type">The type.</param>
      <param name="length">The length.</param>
      <returns>Newly created <see cref="T:Xtensive.Storage.Model.TypeInfo" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.SchemaUpgradeHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Building.SchemaComparisonResult">
      <summary>
            The result of schema comparison.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.SchemaComparisonResult.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Building.SchemaComparisonResult.#ctor(Xtensive.Orm.Building.SchemaComparisonStatus,System.Boolean,System.Nullable{System.Boolean},Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Modelling.Comparison.Difference,Xtensive.Modelling.Actions.ActionSequence,System.Collections.Generic.IList{Xtensive.Modelling.Actions.NodeAction})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="schemaComparisonStatus">The comparison status.</param>
      <param name="hasColumnTypeChanges">Indicates whether there are column type changes.</param>
      <param name="isCompatibleInLegacyMode">Indicates whether schemes are compatible in legacy mode.</param>
      <param name="hints">The upgrade hints.</param>
      <param name="difference">The difference.</param>
      <param name="upgradeActions">The upgrade actions.</param>
      <param name="unsafeActions">The unsafe (breaking) actions.</param>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.SchemaComparisonStatus">
      <summary>
            Gets the comparison status.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.HasUnsafeActions">
      <summary>
            Gets or sets a value indicating whether there are unsafe actions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.HasColumnTypeChanges">
      <summary>
            Gets or sets a value indicating whether there are column type changes.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.IsCompatibleInLegacyMode">
      <summary>
            Indicates whether storage schema is compatible with domain model.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.UnsafeActions">
      <summary>
            Gets the list of unsafe actions.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.Hints">
      <summary>
            Gets the upgrade hints.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.Difference">
      <summary>
            Gets the schema difference.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Building.SchemaComparisonResult.UpgradeActions">
      <summary>
            Gets all upgrade actions.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Building.SchemaComparer">
      <summary>
            Compares storage models.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Building.SchemaComparer.Compare(Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Model.StorageInfo,Xtensive.Modelling.Comparison.Hints.HintSet,Xtensive.Orm.Building.SchemaUpgradeMode,Xtensive.Orm.Model.DomainModel)">
      <summary>
            Compares <paramref name="sourceSchema" /> and <paramref name="targetSchema" />.
            </summary>
      <param name="sourceSchema">The source schema.</param>
      <param name="targetSchema">The target schema.</param>
      <param name="hints">The upgrade hints.</param>
      <returns>Comparison result.</returns>
    </member>
    <member name="T:Xtensive.Orm.Building.SchemaComparisonStatus">
      <summary>
            Schema comparison status.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaComparisonStatus.Equal">
      <summary>
            Target schema is equal to the extracted schema.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaComparisonStatus.TargetIsSuperset">
      <summary>
            Target schema contains additional elements.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaComparisonStatus.TargetIsSubset">
      <summary>
            Target schema doesn't contain some elements of the extracted schema.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Building.SchemaComparisonStatus.NotEqual">
      <summary>
            Both new and removed elements are found.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Upgrade.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.SchemaSynchronizationException">
      <summary>
            Describes schema synchronization errors 
            detected during <see cref="T:Xtensive.Orm.Domain" />.<see cref="M:Xtensive.Orm.Domain.Build(Xtensive.Orm.Configuration.DomainConfiguration)" /> execution.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Xtensive.Orm.SchemaSynchronizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Orm.Configuration.Internals.DomainTypeRegistrationHandler">
      <summary>
        <see cref="T:Xtensive.Collections.ITypeRegistrationProcessor" /> for processing <see cref="T:Xtensive.Orm.SessionBound" /> 
            and <see cref="T:Xtensive.Orm.IEntity" /> descendants registration in 
            <see cref="P:Xtensive.Orm.Configuration.DomainConfiguration.Types" /> registry.
            </summary>
      <remarks>This implementation provides topologically sorted list 
            of <see cref="T:System.Type" />s.</remarks>
    </member>
    <member name="M:Xtensive.Orm.Configuration.Internals.DomainTypeRegistrationHandler.Process(Xtensive.Collections.TypeRegistry,Xtensive.Collections.TypeRegistration,System.Type)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Configuration.Internals.DomainTypeRegistrationHandler.BaseType">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Upgrade.MoveFieldHint">
      <summary>
            Move field hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Equals(Xtensive.Orm.Upgrade.MoveFieldHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.String,System.String,System.Type,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType" />.</param>
      <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField" />.</param>
      <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType" />.</param>
      <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.#ctor(System.String,System.String,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType" />.</param>
      <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField" /> and <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField" />.</param>
      <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Create``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TTarget">The target type.</typeparam>
      <param name="sourceType">The source type.</param>
      <param name="sourceField">The source field.</param>
      <param name="targetPropertyAccessExpression">The target field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.MoveFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TTarget">The target type.</typeparam>
      <param name="sourceType">The source type.</param>
      <param name="targetPropertyAccessExpression">The target field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceType">
      <summary>
            Gets the source type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.SourceField">
      <summary>
            Gets the source field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.MoveFieldHint.TargetField">
      <summary>
            Gets the target field.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RemoveFieldHint">
      <summary>
            Remove field hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Equals(Xtensive.Orm.Upgrade.RemoveFieldHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.#ctor(System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Type" />.</param>
      <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Field" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveFieldHint.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="T">The type.</typeparam>
      <param name="propertyAccessExpression">The field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Type">
      <summary>
            Gets the source type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.Field">
      <summary>
            Gets the source field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RemoveFieldHint.AffectedColumns">
      <summary>
            Gets affected column paths.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RemoveTypeHint">
      <summary>
            Remove type hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.Equals(Xtensive.Orm.Upgrade.RemoveTypeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RemoveTypeHint.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.RemoveTypeHint.Type" />.</param>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RemoveTypeHint.Type">
      <summary>
            Gets the source type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RemoveTypeHint.AffectedTables">
      <summary>
            Gets affected column paths.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradeScope">
      <summary>
            The scope for <see cref="T:Xtensive.Orm.Upgrade.UpgradeContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeScope.#ctor(Xtensive.Orm.Upgrade.UpgradeContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.UpgradeHandler">
      <summary>
            Default <see cref="T:Xtensive.Orm.Upgrade.IUpgradeHandler" /> implementation.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Upgrade.UpgradeHandler.RecycledSuffix">
      <summary>
            The ".Recycled" suffix.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnBeforeStage">
      <inheritdoc />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>context.Stage</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnSchemaReady">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnStage">
      <inheritdoc />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>context.Stage</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.CanUpgradeFrom(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.IsTypeAvailable(System.Type,Xtensive.Orm.Upgrade.UpgradeStage)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>UpgradeContext.Stage</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.IsFieldAvailable(System.Reflection.PropertyInfo,Xtensive.Orm.Upgrade.UpgradeStage)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>UpgradeContext.Stage</c> is out of range.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.OnUpgrade">
      <summary>
            Override this method to implement custom persistent data migration logic.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.AddUpgradeHints(Xtensive.Collections.ISet{Xtensive.Orm.Upgrade.UpgradeHint})">
      <summary>
            Override this method to add upgrade hints to
            <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints" /> collection.
            </summary>
      <param name="hints">A set of hints to add new hints to
            (a shortcut to <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints" /> collection).</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssembly">
      <summary>
            Detects the assembly this handler is made for.
            </summary>
      <returns>The assembly.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssemblyName">
      <summary>
            Detects the name of the assembly this handler is made for.
            </summary>
      <returns>The name of the assembly.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.DetectAssemblyVersion">
      <summary>
            Detects the version of the assembly this handler is made for.
            </summary>
      <returns>The version of the assembly.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.AddAutoHints(Xtensive.Collections.ISet{Xtensive.Orm.Upgrade.UpgradeHint})">
      <summary>
            Adds the "auto" hints - e.g. hints for recycled types.
            </summary>
      <param name="hints">A set of hints to add new hints to
            (a shortcut to <see cref="P:Xtensive.Orm.Upgrade.UpgradeContext.Hints" /> collection).</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.GetOriginalName(System.Type)">
      <summary>
            Gets the original name of the recycled type.
            </summary>
      <param name="recycledType">The recycled type to get the original name for.</param>
      <returns>The original name of the recycled type.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.TryStripRecycledSuffix(System.String)">
      <summary>
            Tries to strip the ".Recycled" suffix from the namespace.
            </summary>
      <param name="nameSpace">The namespace to remove the suffix from.</param>
      <returns>
            The namespace without ".Recycled" suffix, if it was there;
            otherwise the same value.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.UpgradeHandler.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.IsEnabled">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.Assembly">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.AssemblyName">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Upgrade.UpgradeHandler.AssemblyVersion">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Query">
      <summary>
            Single access point allowing to run LINQ queries,
            create future (delayed) and compiled queries,
            and finally, resolve <see cref="T:Xtensive.Orm.Key" />s to <see cref="T:Xtensive.Orm.Entity">entities</see>.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Query.All``1">
      <summary>
            The "starting point" for any LINQ query -
            a <see cref="T:System.Linq.IQueryable`1" /> enumerating all the instances
            of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">Type of the sequence element.</typeparam>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> enumerating all the instances
            of type <typeparamref name="T" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.All(System.Type)">
      <summary>
            The "starting point" for dynamic LINQ query -
            a <see cref="T:System.Linq.IQueryable" /> enumerating all the instances
            of type <paramref name="elementType" />.
            </summary>
      <param name="elementType">Type of the sequence element.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable" /> enumerating all the instances
            of type <paramref name="elementType" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.FreeText``1(System.String)">
      <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
      <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
      <param name="searchCriteria">The search criteria in free text form.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Xtensive.Orm.FullTextMatch`1" />
            allowing to continue building the query.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.FreeText``1(System.Linq.Expressions.Expression{System.Func{System.String}})">
      <summary>
            Performs full-text query for the text specified in free text form.
            </summary>
      <typeparam name="T">Type of the entity to query full-text index of.</typeparam>
      <param name="searchCriteria">The search criteria in free text form.</param>
      <returns>
            An <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Xtensive.Orm.FullTextMatch`1" />
            allowing to continue building the query.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Single(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            </returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Entity with the specified key is not found.</exception>
    </member>
    <member name="M:Xtensive.Orm.Query.SingleOrDefault(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Single``1(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Single``1(System.Object[])">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="keyValues" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="keyValues">Key values.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="keyValues" /> identify.
            <see langword="null" />, if there is no such entity.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.SingleOrDefault``1(Xtensive.Orm.Key)">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="key" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="key">The key to resolve.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="key" /> identifies.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.SingleOrDefault``1(System.Object[])">
      <summary>
            Resolves (gets) the <see cref="T:Xtensive.Orm.Entity" /> by the specified <paramref name="keyValues" />
            in the current <see cref="T:Xtensive.Orm.Session" />.
            </summary>
      <typeparam name="T">Type of the entity.</typeparam>
      <param name="keyValues">Key values.</param>
      <returns>
            The <see cref="T:Xtensive.Orm.Entity" /> specified <paramref name="keyValues" /> identify.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Execute``1(System.Func{System.Linq.IQueryable{``0}})">
      <summary>
            Finds compiled query in cache by specified <paramref name="query" /> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo" /> instance)
            and executes it, if found;
            otherwise executes the <paramref name="query" /> delegate
            and caches the compilation result.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Execute``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
      <summary>
            Finds compiled query in cache by provided <paramref name="key" />
            and executes it, if found;
            otherwise executes the <paramref name="query" /> delegate
            and caches the compilation result.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Execute``1(System.Func{``0})">
      <summary>
            Finds compiled query in cache by provided <paramref name="query" /> delegate
            (in fact, by its <see cref="T:System.Reflection.MethodInfo" /> instance)
            and executes it, if found;
            otherwise executes the <paramref name="query" /> delegate
            and caches the compilation result.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Execute``1(System.Object,System.Func{``0})">
      <summary>
            Finds compiled query in cache by provided <paramref name="key" />
            and executes it, if found;
            otherwise executes the <paramref name="query" /> delegate
            and caches the compilation result.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>Query result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Query.ExecuteFutureScalar``1(System.Object,System.Func{``0})">
      <summary>
            Creates future scalar query and registers it for the later execution.
            The query compilation result associated with the future scalar will be cached as well.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.ExecuteFutureScalar``1(System.Func{``0})">
      <summary>
            Creates future scalar query and registers it for the later execution.
            The query compilation result associated with the future scalar will be cached as well.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Object,System.Func{System.Linq.IQueryable{``0}})">
      <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="key">An object identifying this query in cache.</param>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.ExecuteFuture``1(System.Func{System.Linq.IQueryable{``0}})">
      <summary>
            Creates future query and registers it for the later execution.
            The query compilation result will be cached as well.
            </summary>
      <typeparam name="TElement">The type of the resulting sequence element.</typeparam>
      <param name="query">A delegate performing the query to cache.</param>
      <returns>
            The future that will be executed when its result is requested.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Query.Store``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Stores the specified sequence of keys (<see cref="T:Xtensive.Orm.Entity">entities</see>),
            anonymous types or DTOs to the database and allows it to use as
            <see cref="T:System.Linq.IQueryable`1" /> further.
            </summary>
      <typeparam name="TElement">The type of the sequence element.</typeparam>
      <param name="source">The sequence to store.</param>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" /> providing access to the stored sequence.</returns>
    </member>
    <member name="T:Xtensive.Orm.Linq.ParameterExtractor">
      <summary>
            Expression visitor that determines whether <see cref="T:System.Linq.Expressions.Expression" /> could be parameter.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.ParameterExtractor.IsParameter(System.Linq.Expressions.Expression)">
      <summary>
            Determines whether the specified <paramref name="e" /> is parameter.
            </summary>
      <param name="e">The expression.</param>
      <returns>
        <see langword="true" /> if the specified <paramref name="e" /> is parameter; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Linq.ParameterExtractor.ExtractParameter``1(System.Linq.Expressions.Expression)">
      <summary>
            Extracts the parameter.
            </summary>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:Xtensive.Orm.Linq.ParameterExtractor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.ParameterExtractor.VisitUnknown(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.ParameterExtractor.#ctor(Xtensive.Orm.Linq.ExpressionEvaluator)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Materialization.ExpressionMaterializer.CreateEntity(Xtensive.Orm.Linq.Expressions.IEntityExpression,System.Linq.Expressions.Expression)">
      <exception cref="T:System.InvalidOperationException">Unable to materialize Entity.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Materialization.ExpressionMaterializer.VisitEntityFieldExpression(Xtensive.Orm.Linq.Expressions.EntityFieldExpression)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Orm.Linq.Materialization.MaterializationHelper.Materialize``1(System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple},Xtensive.Orm.Linq.Materialization.MaterializationContext,Xtensive.Parameters.ParameterContext,System.Func{Xtensive.Tuples.Tuple,Xtensive.Orm.Linq.Materialization.ItemMaterializationContext,``0},System.Collections.Generic.Dictionary{Xtensive.Parameters.Parameter{Xtensive.Tuples.Tuple},Xtensive.Tuples.Tuple})">
      <summary>
            Materializes the specified data source.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="dataSource">The data source.</param>
      <param name="context">The context.</param>
      <param name="parameterContext">The parameter context.</param>
      <param name="itemMaterializer">The item materializer.</param>
      <param name="tupleParameterBindings">The tuple parameter bindings.</param>
    </member>
    <member name="T:Xtensive.Orm.Linq.Queryable`1">
      <summary>
            An implementation of <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
      <typeparam name="T">The type of the content item of the data source.</typeparam>
    </member>
    <member name="M:Xtensive.Orm.Linq.Queryable`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.Queryable`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.Queryable`1.#ctor(Xtensive.Orm.Linq.QueryProvider,System.Linq.Expressions.Expression)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="expression" />  is out of range.</exception>
    </member>
    <member name="P:Xtensive.Orm.Linq.Queryable`1.Expression">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Linq.Queryable`1.ElementType">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Orm.Linq.Queryable`1.Translated">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordQuery" /> this query is compiled to.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Metadata.MetadataBase">
      <summary>
            Abstract base class for any metadata type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Metadata.MetadataBase.OnSettingFieldValue(Xtensive.Orm.Model.FieldInfo,System.Object)">
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="M:Xtensive.Orm.Metadata.MetadataBase.OnRemove">
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="M:Xtensive.Orm.Metadata.MetadataBase.EnsureIsWritable">
      <summary>
            Ensures the entity is writable.
            </summary>
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="M:Xtensive.Orm.Metadata.MetadataBase.#ctor(System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="id">The identifier.</param>
    </member>
    <member name="M:Xtensive.Orm.Metadata.MetadataBase.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The identifier.</param>
    </member>
    <member name="T:Xtensive.Orm.Metadata.Assembly">
      <summary>
            Persistent descriptor of an assembly with registered persistent types.
            Used for schema upgrade purposes.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Metadata.Assembly.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Metadata.Assembly.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The assembly name.</param>
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Assembly.Name">
      <summary>
            Gets the name of the assembly.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Assembly.Version">
      <summary>
            Gets or sets the assembly version.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Metadata.Type">
      <summary>
            Persistent descriptor of registered type.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Metadata.Type.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Metadata.Type.#ctor(System.Int32,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="id">The type identifier.</param>
      <param name="name">The name of the type.</param>
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Type.Id">
      <summary>
            Gets or sets the type identifier.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Type.Name">
      <summary>
            Gets or sets the full type name.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.TupleEnumerableExtensions">
      <summary>
            Extends <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.TupleEnumerableExtensions.AsTupleEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts <see cref="T:System.Collections.Generic.IEnumerable`1" /> to <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Xtensive.Tuples.Tuple" />s.
            Supports only primitive types, <see cref="T:Xtensive.Orm.Structure" />, <see cref="T:Xtensive.Orm.Entity" /></summary>
      <typeparam name="T">Type of enumerable items.</typeparam>
      <param name="source">Source enumerable.</param>
      <returns>A sequence of <see cref="T:Xtensive.Tuples.Tuple" /> objects.</returns>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="T" /> is not supported.</exception>
    </member>
    <member name="T:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor">
      <summary>
            Apply parameter access visitor. 
            This type is used internally by DataObjects.Net.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor.Visit(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Linq.Expressions.Visitors.ApplyParameterAccessVisitor.#ctor(Xtensive.Storage.Rse.ApplyParameter,System.Func{System.Linq.Expressions.MethodCallExpression,System.Int32,System.Linq.Expressions.Expression})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Linq.Materialization.ItemMaterializationContext.Materialize(System.Int32,System.Int32,Xtensive.Orm.Model.TypeInfo,Xtensive.Core.Pair{System.Int32}[],Xtensive.Tuples.Tuple)">
      <exception cref="T:System.InvalidOperationException">Something went wrong.</exception>
    </member>
    <member name="T:Xtensive.Orm.Metadata.Extension">
      <summary>
            Persistent value of any kind indentified by its <see cref="P:Xtensive.Orm.Metadata.Extension.Name" />.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Metadata.Extension.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Metadata.Extension.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">A value for <see cref="P:Xtensive.Orm.Metadata.Extension.Name" />.</param>
      <exception cref="T:System.Exception">Object is read-only.</exception>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Extension.Name">
      <summary>
            Gets or sets the name of the extension.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Extension.Text">
      <summary>
            Gets or sets the text data.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Metadata.Extension.Data">
      <summary>
            Gets or sets the binary data.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RecycledAttribute">
      <summary>
            An attribute describing the recycled type or property.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledAttribute.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RecycledAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="originalName">The original name of the type or property.</param>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RecycledAttribute.OriginalName">
      <summary>
            Gets or sets the original name of the type or property.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.ChangeFieldTypeHint">
      <summary>
            Change field type enforced (ignore type conversion verification) hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Equals(Xtensive.Orm.Upgrade.ChangeFieldTypeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.#ctor(System.Type,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Value for <see cref="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Type" />.</param>
      <param name="fieldName">Value for <see cref="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.FieldName" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="T">The type.</typeparam>
      <param name="propertyAccessExpression">The field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.Type">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.FieldName">
      <summary>
            Gets the target field name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.ChangeFieldTypeHint.AffectedColumns">
      <summary>
            Gets affected column paths.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.CopyFieldHint">
      <summary>
            Copy field hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Equals(Xtensive.Orm.Upgrade.CopyFieldHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType" />.</param>
      <param name="sourceField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField" />.</param>
      <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType" />.</param>
      <param name="targetField">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.#ctor(System.String,System.String,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sourceType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType" />.</param>
      <param name="field">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField" /> and <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField" />.</param>
      <param name="targetType">Value for <see cref="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType" />.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TSource">The source type.</typeparam>
      <typeparam name="TTarget">The target type.</typeparam>
      <param name="sourcePropertyAccessExpression">The source field access expression.</param>
      <param name="targetPropertyAccessExpression">The target field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TTarget">The target type.</typeparam>
      <param name="sourceType">The source type.</param>
      <param name="sourceField">The source field.</param>
      <param name="targetPropertyAccessExpression">The target field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.CopyFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="TTarget">The target type.</typeparam>
      <param name="sourceType">The source type.</param>
      <param name="targetPropertyAccessExpression">The target field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceType">
      <summary>
            Gets the source type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.SourceField">
      <summary>
            Gets the source field.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetType">
      <summary>
            Gets the target type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.CopyFieldHint.TargetField">
      <summary>
            Gets the target field.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.DomainModelConverter">
      <summary>
            Converts <see cref="T:Xtensive.Orm.Model.DomainModel" /> to indexing storage model.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.Convert(Xtensive.Orm.Model.DomainModel)">
      <summary>
            Converts the specified <see cref="T:Xtensive.Orm.Model.DomainModel" /> to
            <see cref="P:Xtensive.Orm.Upgrade.DomainModelConverter.StorageInfo" />.
            </summary>
      <param name="domainModel">The domain model.</param>
      <returns>The storage model.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.Visit(Xtensive.Orm.Model.Node)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitDomainModel(Xtensive.Orm.Model.DomainModel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitIndexInfo(Xtensive.Orm.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitColumnInfo(Xtensive.Orm.Model.ColumnInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitAssociationInfo(Xtensive.Orm.Model.AssociationInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitKeyInfo(Xtensive.Orm.Model.KeyInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitSequenceInfo(Xtensive.Orm.Model.SequenceInfo)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Thrown always by this method.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitFullTextIndexInfo(Xtensive.Orm.Model.FullTextIndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitPrimaryIndexInfo(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Visits primary index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitKeyField(Xtensive.Orm.Model.KeyField)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitFieldInfo(Xtensive.Orm.Model.FieldInfo)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitHierarchyInfo(Xtensive.Orm.Model.HierarchyInfo)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.VisitTypeInfo(Xtensive.Orm.Model.TypeInfo)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.DomainModelConverter.#ctor(Xtensive.Storage.Providers.ProviderInfo,System.Boolean,System.Func{Xtensive.Orm.Model.AssociationInfo,Xtensive.Orm.Model.FieldInfo,System.String},System.Boolean,System.Func{Xtensive.Orm.Model.TypeInfo,Xtensive.Orm.Model.TypeInfo,System.String},System.Func{System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Xtensive.Storage.Model.TypeInfo})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="buildForeignKeys">If set to <see langword="true" />, foreign keys
            will be created for associations.</param>
      <param name="foreignKeyNameGenerator">The foreign key name generator.</param>
      <param name="buildHierarchyForeignKeys">If set to <see langword="true" />, foreign keys
            will be created for hierarchies.</param>
      <param name="hierarchyForeignKeyNameGenerator">The hierarchy foreign key name generator.</param>
      <param name="typeBuilder">The type builder.</param>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.GeneratorResolver">
      <summary>
            Gets the persistent generator filter.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.ProviderInfo">
      <summary>
            Gets the provider info.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.TypeBuilder">
      <summary>
            Gets the type builder.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.StorageInfo">
      <summary>
            Gets the storage info.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.Model">
      <summary>
            Gets the currently converting model.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.BuildForeignKeys">
      <summary>
            Gets a value indicating whether 
            build foreign keys for associations.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.ForeignKeyNameGenerator">
      <summary>
            Gets the foreign key name generator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.BuildHierarchyForeignKeys">
      <summary>
            Gets or sets a value indicating whether 
            build foreign keys for hierarchies.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.HierarchyForeignKeyNameGenerator">
      <summary>
            Gets the hierarchy foreign key name generator.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.DomainModelConverter.CurrentTable">
      <summary>
            Gets or sets the currently visiting table.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.TableInfo">
      <summary>
            Table.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TableInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TableInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TableInfo.#ctor(Xtensive.Storage.Model.StorageInfo,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.Columns">
      <summary>
            Gets columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.PrimaryIndex">
      <summary>
            Gets or sets the primary index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.SecondaryIndexes">
      <summary>
            Gets secondary indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.ForeignKeys">
      <summary>
            Gets foreign keys.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.FullTextIndexes">
      <summary>
            Gets full-text indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TableInfo.AllIndexes">
      <summary>
            Gets all indexes belongs to the table.
            </summary>
      <returns>
        <see cref="T:Xtensive.Storage.Model.IndexInfo" /> iterator.</returns>
    </member>
    <member name="T:Xtensive.Storage.Model.PrimaryIndexInfo">
      <summary>
            Primary index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryIndexInfo.PopulateValueColumns">
      <summary>
            Populates <see cref="P:Xtensive.Storage.Model.PrimaryIndexInfo.ValueColumns" /> collection by
            including all the columns except <see cref="P:Xtensive.Storage.Model.IndexInfo.KeyColumns" />
            into it.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryIndexInfo.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">Validation error.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryIndexInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryIndexInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryIndexInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The parent table.</param>
      <param name="name">The index name.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.PrimaryIndexInfo.ValueColumns">
      <summary>
            Gets value columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ColumnInfo">
      <summary>
            Column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">Validation error.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The parent table.</param>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String,Xtensive.Storage.Model.TypeInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The parent table.</param>
      <param name="name">The column name.</param>
      <param name="type">Type of the column.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.Type">
      <summary>
            Gets or sets the type of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ColumnInfo.DefaultValue">
      <summary>
            Gets or sets the default column value.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ColumnInfoCollection">
      <summary>
            Column collection.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoCollection.#ctor(Xtensive.Modelling.Node)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.TypeInfo">
      <summary>
            Type of table column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.Clone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.Equals(Xtensive.Storage.Model.TypeInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.op_Equality(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.op_Inequality(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Nullable{System.Int32},System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="length">The length.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Nullable{System.Int32},System.Globalization.CultureInfo,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="length">The length.</param>
      <param name="culture">The culture.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="length">The length.</param>
      <param name="scale">The scale.</param>
      <param name="precision">The precision.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Boolean,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="isNullable">Indicates whether type is nullable.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Boolean,System.Nullable{System.Int32},System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="isNullable">Indicates whether type is nullable.</param>
      <param name="length">The length.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Boolean,System.Nullable{System.Int32},System.Globalization.CultureInfo,System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="isNullable">Indicates whether type is nullable.</param>
      <param name="length">The length.</param>
      <param name="culture">The culture.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(System.Type,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">Underlying data type.</param>
      <param name="isNullable">Indicates whether type is nullable.</param>
      <param name="length">The length.</param>
      <param name="scale">The scale.</param>
      <param name="precision">The precision.</param>
      <param name="nativeType">The native type.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Undefined">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.TypeInfo" /> with undefined type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsTypeUndefined">
      <summary>
            Gets a value indicating whether type is undefined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Type">
      <summary>
            Gets the type of the data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.IsNullable">
      <summary>
            Indicates whether <see cref="P:Xtensive.Storage.Model.TypeInfo.Type" /> is nullable.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Length">
      <summary>
            Gets the length.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Culture">
      <summary>
            Gets the culture.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Scale">
      <summary>
            Gets the scale.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.Precision">
      <summary>
            Gets the precision.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.TypeInfo.NativeType">
      <summary>
            Gets the native type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.KeyColumnRef">
      <summary>
            References to key column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef.#ctor(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef.#ctor(Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef.#ctor(Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.ColumnInfo,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
      <param name="direction">The direction.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.IndexInfo">
      <summary>
            The base abstract class for all indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent table.</param>
      <param name="name">The index.</param>
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsUnique">
      <summary>
            Gets a value indicating whether this instance is unique.
            </summary>
      <exception cref="T:System.NotSupportedException">Already initialized.</exception>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.IsPrimary">
      <summary>
            Gets a value indicating whether this instance is primary.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.IndexInfo.KeyColumns">
      <summary>
            Gets key columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.TableInfoCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.TableInfo" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.TableInfoCollection.#ctor(Xtensive.Storage.Model.StorageInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="storage">The storage.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.SecondaryIndexInfo">
      <summary>
            Secondary index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfo.PopulatePrimaryKeyColumns">
      <summary>
            Populates <see cref="P:Xtensive.Storage.Model.SecondaryIndexInfo.PrimaryKeyColumns" /> collection by
            copying them from primary index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfo.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">Empty secondary key columns collection.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The parent table.</param>
      <param name="name">The index name.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.SecondaryIndexInfo.PrimaryKeyColumns">
      <summary>
            Gets value columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.SecondaryIndexInfo.IncludedColumns">
      <summary>
            Gets included columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.IncludedColumnRef">
      <summary>
            References to included column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IncludedColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.IncludedColumnRef.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.IncludedColumnRef.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.ForeignKeyInfo">
      <summary>
            Foreign key.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyInfo.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">Validations errors.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent table.</param>
      <param name="name">The name of foreign key.</param>
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.ForeignKeyInfo.PrimaryKey">
      <summary>
            Gets or sets the foreign index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ForeignKeyInfo.ForeignKeyColumns">
      <summary>
            Gets foreign key columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ForeignKeyInfo.OnRemoveAction">
      <summary>
            Gets or sets the "on remove" action.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.ForeignKeyInfo.OnUpdateAction">
      <summary>
            Gets or sets the "on update" action.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ReferentialAction">
      <summary>
            Referential integrity maintenance actions.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.ReferentialAction.None">
      <summary>
            Do nothing to maintain referential integrity.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.ReferentialAction.Default">
      <summary>
            The same as <see cref="F:Xtensive.Storage.Model.ReferentialAction.Restrict" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.ReferentialAction.Restrict">
      <summary>
            Restricts primary key update \ removal when it is referenced by some foreign key.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.ReferentialAction.Cascade">
      <summary>
            Cascades primary key update \ removal to its foreign key.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.ReferentialAction.Clear">
      <summary>
            Clears the foreign key on its primary key update \ removal.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ForeignKeyColumnRef">
      <summary>
            References to foreign key column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyColumnRef.#ctor(Xtensive.Storage.Model.ForeignKeyInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyColumnRef.#ctor(Xtensive.Storage.Model.ForeignKeyInfo,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The foreign key.</param>
      <param name="column">The column.</param>
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.SequenceInfo">
      <summary>
            Sequence.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SequenceInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.SequenceInfo.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">
        <c>ValidationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.SequenceInfo.#ctor(Xtensive.Storage.Model.StorageInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Seed">
      <summary>
            Gets or sets the start value.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Increment">
      <summary>
            Gets or sets the increment.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Type">
      <summary>
            Gets or sets the type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.SequenceInfo.Current">
      <summary>
            Gets or sets the current sequence value.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.FullTextIndexInfo">
      <summary>
            Full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.ValidateState">
      <exception cref="T:Xtensive.Storage.Model.ValidationException">
      </exception>
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfo.#ctor(Xtensive.Storage.Model.TableInfo,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent table.</param>
      <param name="name">The index.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.FullTextIndexInfo.Columns">
      <summary>
            Gets columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ValueColumnRef">
      <summary>
            References to value column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ValueColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ValueColumnRef.#ctor(Xtensive.Storage.Model.PrimaryIndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ValueColumnRef.#ctor(Xtensive.Storage.Model.PrimaryIndexInfo,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.ValueColumnRefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.ValueColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ValueColumnRefCollection.#ctor(Xtensive.Storage.Model.PrimaryIndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.FullTextColumnRef">
      <summary>
            Reference to full-text column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRef.#ctor(Xtensive.Storage.Model.FullTextIndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRef.#ctor(Xtensive.Storage.Model.FullTextIndexInfo,Xtensive.Storage.Model.ColumnInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRef.#ctor(Xtensive.Storage.Model.FullTextIndexInfo,Xtensive.Storage.Model.ColumnInfo,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRef.#ctor(Xtensive.Storage.Model.FullTextIndexInfo,Xtensive.Storage.Model.ColumnInfo,System.String,Xtensive.Storage.Model.ValueColumnRef)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.KeyColumnRefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.KeyColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRefCollection.#ctor(Xtensive.Storage.Model.IndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.SecondaryIndexInfoCollection">
      <summary>
            A collection of secondary indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SecondaryIndexInfoCollection.#ctor(Xtensive.Storage.Model.TableInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The table.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.ForeignKeyColumnCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.ForeignKeyColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyColumnCollection.Set(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Replaces all column references to references to columns of 
            specified <paramref name="source" /> index.
            </summary>
      <param name="source">The index to use.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyColumnCollection.#ctor(Xtensive.Modelling.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.Ref`2">
      <summary>
            The reference to model node.
            </summary>
      <typeparam name="TTarget">The type of the target node.</typeparam>
      <typeparam name="TParent">The type of the parent node.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Model.Ref`2.#ctor(`1)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Model.Ref`2.Value">
      <summary>
            Gets or sets referenced node.
            </summary>
      <exception cref="T:System.NotSupportedException">Value is already initialized.</exception>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RenameFieldHint">
      <summary>
            Rename field hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Equals(Xtensive.Orm.Upgrade.RenameFieldHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.#ctor(System.Type,System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="targetType">The current type.</param>
      <param name="oldFieldName">Old name of the field.</param>
      <param name="newFieldName">New name of the field.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameFieldHint.Create``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="T">The type.</typeparam>
      <param name="oldFieldName">Old name of the field.</param>
      <param name="newFieldAccessExpression">The new field access expression.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.TargetType">
      <summary>
            Gets or sets the type of the target.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.OldFieldName">
      <summary>
            Gets the old field name.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RenameFieldHint.NewFieldName">
      <summary>
            Gets new field name.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.RenameTypeHint">
      <summary>
            Rename type hint.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Equals(Xtensive.Orm.Upgrade.RenameTypeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Equals(Xtensive.Orm.Upgrade.UpgradeHint)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.#ctor(System.String,System.Type)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="oldType">The old type.</param>
      <param name="newType">The new type.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.RenameTypeHint.Create``1(System.String)">
      <summary>
            Creates the instance of this hint.
            </summary>
      <typeparam name="T">The new type.</typeparam>
      <param name="oldName">The old type name.</param>
      <returns>The newly created instance of this hint.</returns>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RenameTypeHint.NewType">
      <summary>
            Gets the new type.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.RenameTypeHint.OldType">
      <summary>
            Gets the name of old type.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.TypeConversionVerifier">
      <summary>
            Verifies whether the conversion between types is allowed or not.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.TypeConversionVerifier.CanConvert(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Verifies whether the source type can be converted to the target type. 
            Loss of data is allowed.
            </summary>
      <param name="from">The source type.</param>
      <param name="to">The target type.</param>
      <returns>
        <see langword="true" /> if the source type can be converted to the 
            target type; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.TypeConversionVerifier.CanConvertSafely(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.TypeInfo)">
      <summary>
            Verifies whether the source type can be converted to the target 
            type without loss of data.
            </summary>
      <param name="from">The source type.</param>
      <param name="to">The target type.</param>
      <returns>
        <see langword="true" /> if the source type can be converted to the 
            target type without loss of data; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.AssemblyInfoAttribute">
      <summary>
            An attribute providing persistence-related information for the assembly.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The name of the assembly.</param>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The name of the assembly.</param>
      <param name="version">The version of the assembly.</param>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.Name">
      <summary>
            Gets or sets the name of the assembly to use in <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler" />.
            </summary>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.AssemblyInfoAttribute.Version">
      <summary>
            Gets or sets the version of the assembly to use in <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler" />.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Upgrade.SystemUpgradeHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Upgrade.UpgradeHandler" /> implementation 
            for <see cref="N:Xtensive.Orm" /> assembly.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.SystemUpgradeHandler.OnStage">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Orm.Upgrade.SystemUpgradeHandler.CheckAssemblies">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Impossible to upgrade all assemblies.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.SystemUpgradeHandler.UpdateAssemblies">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Impossible to upgrade all assemblies.</exception>
    </member>
    <member name="M:Xtensive.Orm.Upgrade.SystemUpgradeHandler.UpdateTypes">
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
    </member>
    <member name="P:Xtensive.Orm.Upgrade.SystemUpgradeHandler.IsEnabled">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Orm.Serialization.DeserializationScope">
      <summary>
            Deserialization scope.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Serialization.DeserializationScope.#ctor(Xtensive.Orm.Serialization.DeserializationContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="P:Xtensive.Orm.Serialization.DeserializationScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Serialization.EntityReference">
      <summary>
            Object to be serialized instead of <see cref="T:Xtensive.Orm.Entity" /> when serialization <see cref="F:Xtensive.Orm.Serialization.SerializationKind.ByReference" /> is used.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Serialization.SerializationScope">
      <summary>
            Serialization scope.
            </summary>
    </member>
    <member name="M:Xtensive.Orm.Serialization.SerializationScope.#ctor(Xtensive.Orm.Serialization.SerializationContext)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="context">The context.</param>
    </member>
    <member name="P:Xtensive.Orm.Serialization.SerializationScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="T:Xtensive.Orm.Serialization.SerializationKind">
      <summary>
            Serialization kind (serialization by reference or by value).
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Serialization.SerializationKind.ByReference">
      <summary>
            Serialization by reference.
            </summary>
    </member>
    <member name="F:Xtensive.Orm.Serialization.SerializationKind.ByValue">
      <summary>
            Serialization by value 
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.Command">
      <summary>
            Abstract base class for any command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.Command.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.Command.#ctor(Xtensive.Storage.Commands.CommandType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type of the command.</param>
    </member>
    <member name="P:Xtensive.Storage.Commands.Command.Type">
      <summary>
            Gets the type of the command.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Command.ResultType">
      <summary>
            Gets the type of the result.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.CommandType">
      <summary>
            Enumerates possible command types.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Commands.CommandType.Query">
      <summary>
            Query command.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Commands.CommandType.Update">
      <summary>
            Update command.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Commands.CommandType.SetOption">
      <summary>
            Set option command.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.CommandResult">
      <summary>
            An abstract base class for <see cref="T:Xtensive.Storage.Commands.Command" /> execution result.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.GetValueInternal">
      <summary>
            Gets the untyped result value.
            </summary>
      <returns>Untyped result value.</returns>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.Equals(Xtensive.Storage.Commands.CommandResult)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.op_Equality(Xtensive.Storage.Commands.CommandResult,Xtensive.Storage.Commands.CommandResult)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.op_Inequality(Xtensive.Storage.Commands.CommandResult,Xtensive.Storage.Commands.CommandResult)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult.Value">
      <summary>
            Gets the result value.
            <see langword="null" />, if <see cref="P:Xtensive.Storage.Commands.CommandResult.Error" /> is set.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult.Error">
      <summary>
            Gets the error.
            If set, the <see cref="P:Xtensive.Storage.Commands.CommandResult.Value" /> is <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult.HasError">
      <summary>
            Gets a value indicating whether <see cref="P:Xtensive.Storage.Commands.CommandResult.Error" /> != <see langword="null" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult.IsDefault">
      <summary>
            Gets a value indicating whether this result is a default one.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.CommandResult`1">
      <summary>
            Typed version of <see cref="T:Xtensive.Storage.Commands.CommandResult" />.
            </summary>
      <typeparam name="T">The type of the <see cref="P:Xtensive.Storage.Commands.CommandResult.Value" /></typeparam>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.GetValueInternal">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.Equals(Xtensive.Storage.Commands.CommandResult{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.Equals(Xtensive.Storage.Commands.CommandResult)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.#ctor(System.Exception)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="error">The error.</param>
    </member>
    <member name="M:Xtensive.Storage.Commands.CommandResult`1.#ctor(System.Func{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
            Sets <see cref="P:Xtensive.Storage.Commands.CommandResult.Error" /> property to
            caught exception, if <paramref name="valueGenerator" />
            fails.
            </summary>
      <param name="valueGenerator">The value generator.</param>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult`1.Default">
      <summary>
            Gets the default command result for <typeparamref name="T" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult`1.Value">
      <summary>
            Gets the result value.
            <see langword="null" />, if <see cref="P:Xtensive.Storage.Commands.CommandResult.Error" /> is set.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.CommandResult`1.IsDefault">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Commands.Command`1">
      <summary>
        <see cref="T:Xtensive.Storage.Commands.CommandResult" /> with specific result type.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Commands.Command`1.#ctor(Xtensive.Storage.Commands.CommandType)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Commands.IDataManager">
      <summary>
            Data management API (DML API).
            Provides read-write access to any index 
            in the <see cref="T:Xtensive.Storage.Commands.IStorage" />, allows to 
            execute queries on them.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.IDataManager.Execute(Xtensive.Storage.Commands.Command)">
      <summary>
            Executes the specified command.
            </summary>
      <param name="command">The command to execute.</param>
      <returns>Command execution result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Commands.IDataManager.Execute(System.Collections.Generic.List{Xtensive.Storage.Commands.Command})">
      <summary>
            Executes the specified sequence of commands.
            </summary>
      <param name="commands">The sequence of commands to execute.</param>
      <returns>Command execution results (one per each command).
            Value for the specified index exists only if its 
            <see cref="P:Xtensive.Storage.Commands.CommandResult.IsDefault" /> property returns <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Storage.Commands.IIndexResolver">
      <summary>
            A resolver of indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.IIndexResolver.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets the index.
            </summary>
      <param name="indexInfo">The index.</param>
      <returns>The unique ordered index.</returns>
    </member>
    <member name="T:Xtensive.Storage.Commands.IModelManager">
      <summary>
            Model manager API (DDL API).
            Manages the indexes stored in the <see cref="T:Xtensive.Storage.Commands.IStorage" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.IModelManager.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <summary>
            Updates the <see cref="P:Xtensive.Storage.Commands.IModelManager.Model" /> by applying specified 
            action sequence to it.
            </summary>
      <param name="sequence">The sequence to apply.</param>
    </member>
    <member name="P:Xtensive.Storage.Commands.IModelManager.Model">
      <summary>
            Gets the current storage model.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.IQueryCommand">
      <summary>
            Query command interface.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.IQueryCommand.Definition">
      <summary>
            Gets or sets the definition of the query.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.IStorage">
      <summary>
            Indexing storage API.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.IStorage.CreateView(System.Transactions.IsolationLevel)">
      <summary>
            Creates a new transactional view.
            </summary>
      <param name="isolationLevel">Required isolation level.</param>
      <returns>New transactional view.</returns>
    </member>
    <member name="M:Xtensive.Storage.Commands.IStorage.GetView(System.Guid)">
      <summary>
            Gets the transactional view.
            </summary>
      <param name="transactionId">The transaction identifier to get the view for.</param>
      <returns>The transactional view;
            <see langword="null" />, if no view is available for the specified transaction.</returns>
    </member>
    <member name="T:Xtensive.Storage.Commands.IStorageView">
      <summary>
            Transactional storage view.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.IStorageView.Transaction">
      <summary>
            Gets the transaction this view belongs to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Commands.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.QueryCommand`1">
      <summary>
            Query command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.QueryCommand`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.QueryCommand`1.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.QueryCommand`1.#ctor(System.Object)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="definition">Query definition.</param>
    </member>
    <member name="P:Xtensive.Storage.Commands.QueryCommand`1.Definition">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Commands.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.ExEmptyKeyColumnsCollection">
      <summary>
              Looks up a localized string similar to Empty key columns collection..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.ExInvalidParentValue">
      <summary>
              Looks up a localized string similar to Invalid Parent value..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.ExItemWithNameXAlreadyExists">
      <summary>
              Looks up a localized string similar to Item with name '{0}' already exists..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.KeyMustExistsSuffix">
      <summary>
              Looks up a localized string similar to , key must exists.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.OptionCommandFormat">
      <summary>
              Looks up a localized string similar to {0}: {1} = {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.QueryCommandFormat">
      <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.Resources.Strings.UpdateCommandFormat">
      <summary>
              Looks up a localized string similar to {0}: {1} = {2}{3}.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.SetOptionCommand`1">
      <summary>
            Set option command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.SetOptionCommand`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.SetOptionCommand`1.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.SetOptionCommand`1.#ctor(System.String,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:Xtensive.Storage.Commands.SetOptionCommand`1.Name">
      <summary>
            Gets or sets the name of the option.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.SetOptionCommand`1.Value">
      <summary>
            Gets or sets the new value.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.NoResult">
      <summary>
            Void type replacement.
            Used within particular <see cref="T:Xtensive.Storage.Commands.CommandResult`1" /> instance as its type parameter.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Commands.NoResult.Default">
      <summary>
            The only member of this enumeration.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Commands.UpdateCommand">
      <summary>
            Update command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Commands.UpdateCommand.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Commands.UpdateCommand.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.UpdateCommand.TableName">
      <summary>
            Gets or sets the name of affected table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.UpdateCommand.Key">
      <summary>
            Gets or sets the key.
            <see langword="null" /> indicates that
            key must be generated automatically.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.UpdateCommand.KeyMustExist">
      <summary>
            Gets or sets a value indicating whether key must exist in the table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Commands.UpdateCommand.Value">
      <summary>
            Gets or sets the new value.
            <see langword="null" /> indicates that row must be removed.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.NodeBase`1">
      <summary>
            A base class for all nodes in storage model.
            </summary>
      <typeparam name="TParent">The type of the parent node.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeBase`1.#ctor(`0,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent.</param>
      <param name="name">The name.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.SequenceInfoCollection">
      <summary>
            The collection of <see cref="T:Xtensive.Storage.Model.SequenceInfo" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.SequenceInfoCollection.#ctor(Xtensive.Storage.Model.StorageInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The storage.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings._Culture">
      <summary>
              Looks up a localized string similar to Culture.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Comma">
      <summary>
              Looks up a localized string similar to , .
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExCanNotFindReferenceToColumnX">
      <summary>
              Looks up a localized string similar to Can not find reference to column "{0}"..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExColumnXContainsBothKeyAndValueCollections">
      <summary>
              Looks up a localized string similar to Column "{0}" contains both key and value collections..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExEmptyColumnsCollection">
      <summary>
              Looks up a localized string similar to Columns collection is empty..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExEmptyKeyColumnsCollection">
      <summary>
              Looks up a localized string similar to KeyColumns collection is empty..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalidDirectionValue">
      <summary>
              Looks up a localized string similar to Invalid Direction value (Direction.None)..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalideIncrementValue">
      <summary>
              Looks up a localized string similar to Increment value must be greater then zero..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalidForeignKeyStructure">
      <summary>
              Looks up a localized string similar to Invalid ForeignKey structure: its column sequence do not match PrimaryKey column sequence..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalidIncludedColumnsCollection">
      <summary>
              Looks up a localized string similar to IncludedColumns collection is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalidPrimaryKeyColumnsCollection">
      <summary>
              Looks up a localized string similar to PrimaryKeyColumns collection is invalid..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExInvalidPrimaryKeyStructure">
      <summary>
              Looks up a localized string similar to Invalid PrimaryKeyInfo structure: sequence KeyColumns and ValueColumns do not match sequence of all the Columns of the table..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExMoreThenOneIncludedColumnReferenceToColumnX">
      <summary>
              Looks up a localized string similar to IncludedColumns collection contains more then one reference to column "{0}"..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExMoreThenOneKeyColumnReferenceToColumnX">
      <summary>
              Looks up a localized string similar to KeyColumns collection contains more then one reference to column "{0}"..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExMoreThenOneValueColumnReferenceToColumnX">
      <summary>
              Looks up a localized string similar to ValueColumns collection contains more then one reference to column "{0}"..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExPrimaryKeyColumnCanNotBeNullable">
      <summary>
              Looks up a localized string similar to Primary key column can not be nullable..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExReferencedColumnXDoesNotBelongToIndexY">
      <summary>
              Looks up a localized string similar to Referenced column "{0}" does not belong to index "{1}"..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUndefinedForeignKey">
      <summary>
              Looks up a localized string similar to ForeignKey is undefined..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUndefinedPrimaryKey">
      <summary>
              Looks up a localized string similar to PrimaryKey is undefined..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUndefinedTypeOfColumnX">
      <summary>
              Looks up a localized string similar to Type of column "{0}" is undefined..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUndefinedTypeOfSequenceX">
      <summary>
              Looks up a localized string similar to Type of sequence "{0}" is undefined..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Length">
      <summary>
              Looks up a localized string similar to Length.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.NativeType">
      <summary>
              Looks up a localized string similar to Native type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.NullableMark">
      <summary>
              Looks up a localized string similar to ?.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Precision">
      <summary>
              Looks up a localized string similar to Precision.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.PropertyPairFormat">
      <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Scale">
      <summary>
              Looks up a localized string similar to Scale.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Model.Resources.Strings.Type">
      <summary>
              Looks up a localized string similar to Type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ValidationException">
      <summary>
            Describes errors detected during 
            <see cref="M:Xtensive.Modelling.Node.Validate" />.<see cref="T:Xtensive.Modelling.Node" /> execution.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.#ctor(System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="nodePath">The path of the invalid node.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="M:Xtensive.Storage.Model.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Storage.Model.ValidationException.NodePath">
      <summary>
            Gets the path of the node which validation has failed.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.ForeignKeyCollection">
      <summary>
            Foreign key collection.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ForeignKeyCollection.#ctor(Xtensive.Storage.Model.TableInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The table.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.FullTextIndexInfoCollection">
      <summary>
            A collection of full-text indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextIndexInfoCollection.#ctor(Xtensive.Storage.Model.TableInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="table">The table.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.NodeCollectionBase`2">
      <summary>
            An abstract base class for any collection of storage model nodes.
            </summary>
      <typeparam name="TNode">The type of the node.</typeparam>
      <typeparam name="TParent">The type of the parent node.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Model.NodeCollectionBase`2.#ctor(Xtensive.Modelling.Node,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Model.ColumnInfoRef`1">
      <summary>
            An abstract base class for all columns refs.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.ColumnInfoRef`1.#ctor(`0,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The column.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.IntegrityException">
      <summary>
            Describes errors detected during <see cref="T:Xtensive.Storage.Model.StorageInfo" />.<see cref="M:Xtensive.Modelling.Node.Validate" /> execution.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IntegrityException.#ctor(System.String,System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
      <param name="nodePath">The path of the invalid node.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.IntegrityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="P:Xtensive.Storage.Model.IntegrityException.NodePath">
      <summary>
            Gets the path of the node which validation has failed.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.FullTextColumnRefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.FullTextColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.FullTextColumnRefCollection.#ctor(Xtensive.Storage.Model.FullTextIndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.IncludedColumnRefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.IncludedColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.IncludedColumnRefCollection.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.PrimaryKeyColumnRefCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Storage.Model.PrimaryKeyColumnRef" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryKeyColumnRefCollection.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.PrimaryKeyColumnRef">
      <summary>
            References to key column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryKeyColumnRef.CreateNesting">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.PrimaryKeyColumnRef.#ctor(Xtensive.Storage.Model.SecondaryIndexInfo,Xtensive.Storage.Model.ColumnInfo,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
      <param name="direction">The direction.</param>
    </member>
    <member name="T:Xtensive.Storage.Model.KeyColumnRef`1">
      <summary>
            References to key column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef`1.ValidateState">
      <inheritdoc />
      <exception cref="T:Xtensive.Storage.Model.ValidationException">Invalid <see cref="P:Xtensive.Storage.Model.KeyColumnRef`1.Direction" /> value 
            (<see cref="F:Xtensive.Core.Direction.None" />).</exception>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef`1.#ctor(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef`1.#ctor(`0,Xtensive.Storage.Model.ColumnInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
    </member>
    <member name="M:Xtensive.Storage.Model.KeyColumnRef`1.#ctor(`0,Xtensive.Storage.Model.ColumnInfo,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="parent">The parent index.</param>
      <param name="column">The referenced column.</param>
      <param name="direction">The direction.</param>
    </member>
    <member name="P:Xtensive.Storage.Model.KeyColumnRef`1.Direction">
      <summary>
            Gets or sets the column direction.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Model.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Model.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ICompiler">
      <summary>
            Provider compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.ICompiler.OuterReferences">
      <summary>
            Gets the outer referenced provider for <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.ICompiler.Location">
      <summary>
            Gets execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.IPreCompiler">
      <summary>
            Provider's tree pre-compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.IPreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.IPostCompiler">
      <summary>
            Provider's tree post-compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.IPostCompiler.Process(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.DefaultCompilationService">
      <summary>
            Default <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationService" /> implementation.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultCompilationService.ResolveOrderingDescriptor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Default method to resolve <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> 
            for <paramref name="provider" />.
            </summary>
      <param name="provider">The provider.</param>
      <returns>Resolved <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultCompilationService.#ctor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExAggregateXIsNotSupportedForTypeY">
      <summary>
              Looks up a localized string similar to Aggregate '{0}' is not supported for type '{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExAtLeastOneColumnIndexPairMustBeSpecified">
      <summary>
              Looks up a localized string similar to At least one column index pair must be specified..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCanNotCompileNoCompiler">
      <summary>
              Looks up a localized string similar to Can't compile - active CompilationContext has no Compiler (Compiler is null)..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCanNotCompileNoEnumerationContext">
      <summary>
              Looks up a localized string similar to Can't compile - no active EnumerationContext exists..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantCompileProviderX">
      <summary>
              Looks up a localized string similar to Can't compile the provider '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantConvertXToY">
      <summary>
              Looks up a localized string similar to Can't convert the {0} to the {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantOpenEnumerationScopeSinceThereIsNoCurrentCompilationContext">
      <summary>
              Looks up a localized string similar to Can't open EnumerationScope, since there is no current CompilationContext..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnGroupCouldNotBeFound">
      <summary>
              Looks up a localized string similar to Column group could not be found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnsUsedByCalculatedColumnExpressionContainingApplyParameterAreRemoved">
      <summary>
              Looks up a localized string similar to Columns used by the CalculatedColumn's expression containing the ApplyParameter are removed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnsUsedByPredicateContainingApplyParameterAreRemoved">
      <summary>
              Looks up a localized string similar to Columns used by the predicate containing ApplyParameter are removed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCurrentCompilerIsNotSuitableForThisOperationMostLikelyThereIsNoActiveSession">
      <summary>
              Looks up a localized string similar to Current compiler is not suitable for this operation, most likely there is no active Session..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExFilterTupleDescriptorMistmatchesWithSourceMappingDescriptor">
      <summary>
              Looks up a localized string similar to Filter tuple descriptor mistmatches with source mapping descriptor..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExInvalidFieldNameX">
      <summary>
              Looks up a localized string similar to Invalid field name '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustBeRoot">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must be the root expression..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustHaveXForm">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must have the '{0}' form..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustNotBeRoot">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must not be the root expression..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOnlySingleColumnKeySupported">
      <summary>
              Looks up a localized string similar to Only single-column key supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider">
      <summary>
              Looks up a localized string similar to The ordering of records is not specified for RowNumberProvider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOrderKeyNotFoundInMapping">
      <summary>
              Looks up a localized string similar to Order key not found in mapping..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExParameterXIsNotATupleAccessExpression">
      <summary>
              Looks up a localized string similar to Parameter '{0}' is not a tuple access expression.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExPredicateContainsAccessesToDifferentApplyParameters">
      <summary>
              Looks up a localized string similar to Predicate contains accesses to different ApplyParameters..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExProviderMustBeEitherCompilableProviderOrExecutableProvider">
      <summary>
              Looks up a localized string similar to Provider must be either CompilableProvider or ExecutableProvider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExSelectProviderRemovesColumnsUsedForOrdering">
      <summary>
              Looks up a localized string similar to The SelectProvider removes columns used for an ordering..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExSequenceContainsMoreThanOneElement">
      <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExTypeOfExpressionReturnValueIsNotX">
      <summary>
              Looks up a localized string similar to The type of the expression's return value is not '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExUnableToInitializeJoinIndexProviderColumnsCountMismatch">
      <summary>
              Looks up a localized string similar to Unable to initialize JoinIndexProvider. Columns count mismatch..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExValueIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to Value is already assigned.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExValueOfParameterWCantBeXIfValueOfParameterYIsZ">
      <summary>
              Looks up a localized string similar to The value of the parameter {0} can't be {1}, if the value of the parameter {2} is {3}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExXCantBeExecuted">
      <summary>
              Looks up a localized string similar to {0} can't be executed on specified sources..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExXMustBeActive">
      <summary>
              Looks up a localized string similar to '{0}' must be active..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.NotAvailable">
      <summary>
              Looks up a localized string similar to n/a.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.RowNumberX">
      <summary>
              Looks up a localized string similar to RowNumber{0}.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.EnumerationScope">
      <summary>
            An implementation of <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> 
            suitable for storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.EnumerationScope.#ctor(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.ClientStorageView">
      <summary>
            Client-side storage view proxy.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientStorageView.Execute(Xtensive.Storage.Commands.Command)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Commands.Command})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientStorageView.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientStorageView.#ctor(Xtensive.Storage.Providers.Indexing.IndexStorageView)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="realStorageView">The real storage view.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientStorageView.RealStorageView">
      <summary>
            Gets the real storage view.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientStorageView.Model">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientStorageView.Transaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexStorage">
      <summary>
            An abstract base class for all index storages.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.CreateView(System.Transactions.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.GetView(System.Guid)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.GetRealIndexStatisticsAdapter(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets an adapter for real index allowing to access its statistics.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>An adapter for real index allowing to access its statistics.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.GetTransform(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets the transform for index.
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>The index transform.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.Ping">
      <summary>
            Used to periodically ping this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.InitializeLifetimeService">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorage.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">The storage name.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorage.Model">
      <summary>
            Gets the model.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorage.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexStorageView">
      <summary>
            An abstract base class for all index storage views.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.Execute(Xtensive.Storage.Commands.Command)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Commands.Command})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.ClearSchema">
      <summary>
            Clears the schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.CreateNewSchema(Xtensive.Storage.Model.StorageInfo)">
      <summary>
            Creates the new schema.
            </summary>
      <param name="newSchema">The new schema.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.Ping">
      <summary>
            Used to periodically ping this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.Initialize(Xtensive.Storage.Providers.Indexing.SessionHandler)">
      <summary>
            Initializes this view.
            </summary>
      <param name="sessionHandler">The session handler.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexStorageView.#ctor(Xtensive.Storage.Providers.Indexing.IndexStorage,Xtensive.Storage.Model.StorageInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="storage">The storage.</param>
      <param name="model">The model.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorageView.SessionHandler">
      <summary>
            Gets or sets the session handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorageView.Storage">
      <summary>
            Gets the storage.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorageView.Model">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexStorageView.Transaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.ClientTransaction">
      <summary>
            Client-side transaction object proxy.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientTransaction.Commit">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.ClientTransaction.Rollback">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientTransaction.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientTransaction.State">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientTransaction.IsolationLevel">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.ClientTransaction.TimeStamp">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" />-level handler for index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.BuildMapping">
      <inheritdoc />
      <exception cref="T:Xtensive.Orm.DomainBuilderException">Something went wrong.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.GetStorageIndexInfo(Xtensive.Orm.Model.IndexInfoRef)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.IndexInfo" />
            by <see cref="T:Xtensive.Orm.Model.IndexInfoRef" />. 
            </summary>
      <param name="indexInfoRef">The index info reference.</param>
      <returns>Converted index info.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.GetStorageIndexInfo(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Orm.Model.IndexInfo" />
            by <see cref="T:Xtensive.Orm.Model.IndexInfo" />. 
            </summary>
      <param name="indexInfo">The index info.</param>
      <returns>Converted index info.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.CreateProviderInfo">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.TryGetRemoteStorage(System.String,Xtensive.Storage.Providers.Indexing.IndexStorage@)">
      <summary>
            Tries get remote storage.
            </summary>
      <param name="url">The remote URL.</param>
      <param name="remoteStorage">The remote storage.</param>
      <returns>
        <see langword="true" /> if remote storage has been found, 
            otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.MarshalStorage(Xtensive.Storage.Providers.Indexing.IndexStorage,System.String,System.Int32)">
      <summary>
            Shares the storage by remoting.
            </summary>
      <param name="localStorage">The local storage.</param>
      <param name="url">The URL.</param>
      <param name="port">The port.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.CreateLocalStorage(System.String)">
      <summary>
            Creates the local index storage.
            </summary>
      <param name="name">The name of storage.</param>
      <returns>Newly created index storage.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.GetCompilerProviderContainerTypes">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.CreatePreCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.DomainHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.DomainHandler.Storage">
      <summary>
            Gets the index storage.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExCanNotFindIndexXInStorage">
      <summary>
              Looks up a localized string similar to Can not find index '{0}' in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExCollectionIsEmpty">
      <summary>
              Looks up a localized string similar to The collection is empty.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExCurrentStorageProviderDoesNotSupportSavepoints">
      <summary>
              Looks up a localized string similar to Current storage provider does not support savepoints (nested transactions)..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExIndexingStoragesSupportOnlyConnectionUrls">
      <summary>
              Looks up a localized string similar to Indexing storages support only connection URLs.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExInstanceXIsNotFound">
      <summary>
              Looks up a localized string similar to Instance of type '{0}' with specified key is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExTransactionIsAlreadyOpened">
      <summary>
              Looks up a localized string similar to Transaction is already opened..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExTransactionIsNotOpened">
      <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.ExUnsupportedIndex">
      <summary>
              Looks up a localized string similar to Index '{0}' with attributes '{1}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXBeginningTransactionWithYIsolationLevel">
      <summary>
              Looks up a localized string similar to Session '{0}'. Beginning transaction @ {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXCommitTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Commit transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXMakeSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Make savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXReleaseSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Release savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXRollbackToSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback to savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Resources.Strings.LogSessionXRollbackTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback transaction..
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexCompiler.#ctor(Xtensive.Storage.Providers.HandlerAccessor)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexCompiler.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> object providing access to available storage handlers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector">
      <summary>
            Converts <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" /> to <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />, if possible.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector.#ctor(System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="throwOnCorrectionFault">if set to <see langword="true" /> 
            then <see cref="T:System.InvalidOperationException" /> will be thrown in case of 
            the correction's fault; otherwise the origin <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            will be returned.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor">
      <summary>
            Descriptor of a provider's ordering behavior.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsOrderSensitive">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            is sensitive to records order.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.PreservesOrder">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            preserves records order.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.BreaksOrder">
      <summary>
            Gets a value indicating whether the provider is order breaker,
            such as <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" /> or <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsSorter">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            sorts records.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="isOrderSensitive">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsOrderSensitive" />.</param>
      <param name="preservesOrder">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.PreservesOrder" />.</param>
      <param name="isOrderingBoundary">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.BreaksOrder" />.</param>
      <param name="isSorter">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsSorter" />.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector">
      <summary>
            Corrects an ordering of records.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector.#ctor(System.Func{Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="orderingDescriptorResolver">The resolver of
            <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer">
      <summary>
            Optimizer that selects indexes and their key's ranges to be used.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer.#ctor(Xtensive.Orm.Model.DomainModel,Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="domainModel">The domain model.</param>
      <param name="providerResolver">The statistics provider resolver.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver">
      <summary>
            Resolver of a <see cref="T:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1" /> for a specified <see cref="T:Xtensive.Orm.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver.Resolve(Xtensive.Orm.Model.IndexInfo)">
      <summary> 
            Resolves the <see cref="T:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1" /> for <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The description of the index.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler">
      <summary>
            Composite optimizer.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler.#ctor(Xtensive.Storage.Rse.Compilation.IPreCompiler[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="preCompilers">Pre-compilers to be composed.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.EmptyPostCompiler">
      <summary>
            Empty <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler" /> implementation.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.HandlerFactory">
      <summary>
            Base handler factory for indexing storages.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ICompiler`1">
      <summary>
            Provider compiler contract.
            </summary>
      <typeparam name="TResult">Compilation result.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler`1.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler`1.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.Compiler`1">
      <summary>
            Abstract base class for RSE <see cref="T:Xtensive.Storage.Rse.Providers.Provider" /> compilers that implements visitor pattern.
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />s into <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
      <param name="cp">The provider to compile.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" />.
            </summary>
      <param name="provider">Row number provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.#ctor(Xtensive.Core.Location)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="location">Location.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.Compiler`1.Location">
      <summary>
            Gets execution site location.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.Compiler`1.OuterReferences">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.RseCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.#ctor(Xtensive.Core.Location)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.RseCompiler.DefaultClientLocation">
      <summary>
            Gets the default client location.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.RseCompiler.DefaultServerLocation">
      <summary>
            Gets the default server location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.RawProvider">
      <summary>
            Enumerates specified array of <see cref="T:Xtensive.Tuples.Tuple" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RawProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RawProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Count">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.ParametersToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.PredicateJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.PredicateJoinProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.MultiSeekProvider">
      <summary>
            Multi-seek operation executable provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MultiSeekProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MultiSeekProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.FilterProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.CalculateProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.StoreProvider.Scope">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.StoreProvider.Name">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ApplyProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ExistenceProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.IncludeProvider">
      <summary>
            Executable provider that returns <see cref="T:System.Boolean" /> column. 
            Column value is <see langword="true" /> if source value equal to one of provided values; 
            otherwise, <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.IncludeProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ICachingProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers that compute and cache the result before the enumeration.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ICachingProvider.IsResultCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets a value indicating whether the result of this provider is cached for the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> - 
            i.e. its enumeration won't lead to a significant delay needed for the computation in this context.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ICachingProvider.EnsureResultIsCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Ensures the result is cached in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            This method can be called more then once.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Orm.Model.IndexAttributes.Union" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="sourceProviders">Providers of inheritor indexes.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Orm.Model.IndexAttributes.Join" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,System.Int32,System.Collections.Generic.List{Xtensive.Core.Pair{System.Int32,System.Collections.Generic.List{System.Int32}}},Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="keyColumnsCount">Count of key columns.</param>
      <param name="root">Root index provider.</param>
      <param name="inheritors">Inheritor index providers.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Orm.Model.IndexAttributes.Filtered" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">Source executable provider.</param>
      <param name="typeIdColumn">Index of typeId column.</param>
      <param name="typeIds">Identifiers of descendants types.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Orm.Model.IndexAttributes.View" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
      <param name="columnMap">The column map.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Count">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Orm.Model.IndexAttributes.Typed" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Seek(Xtensive.Tuples.Tuple)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">Source executable provider.</param>
      <param name="typeIdColumn">Index of typeId column.</param>
      <param name="typeId">Identifiers of the type.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexProvider">
      <summary>
            General index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexProvider.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Model.IndexInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="indexDescriptor">Descriptor of the index.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Session" />-level handler for index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">Transaction is not open.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.PersistAction},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.TranslateException(System.Object,System.Exception)">
      <summary>
            Translates thrown exception.
            </summary>
      <param name="query">The query.</param>
      <param name="exception">The exception.</param>
      <returns>Translated exception.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SessionHandler.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.SessionHandler.StorageView">
      <summary>
            Gets the storage view.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.SessionHandler.TransactionIsStarted">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexResolver">
      <summary>
            An <see cref="T:Xtensive.Storage.Commands.IIndexResolver" /> implementation that forwards all requests
            to current <see cref="T:Xtensive.Storage.Providers.Indexing.SessionHandler" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexResolver.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexResolver.#ctor(Xtensive.Storage.Providers.Indexing.SessionHandler)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="sessionHandler">The session handler.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexTransaction">
      <summary>
            An abstract base implementation of <see cref="T:Xtensive.Transactions.ITransaction" />
            for indexing engines.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexTransaction.Commit">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexTransaction.Rollback">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexTransaction.Identifier">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexTransaction.IsolationLevel">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexTransaction.TimeStamp">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.IndexTransaction.State">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.IndexUpdateCommand">
      <summary>
            Update command for indexing storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexUpdateCommand.Update(System.String,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
      <summary>
            Creates update command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <param name="newValue">The new value.</param>
      <returns>Update command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexUpdateCommand.Insert(System.String,Xtensive.Tuples.Tuple,Xtensive.Tuples.Tuple)">
      <summary>
            Creates insert command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <returns>Insert command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexUpdateCommand.Remove(System.String,Xtensive.Tuples.Tuple)">
      <summary>
            Creates remove command.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="key">The key.</param>
      <returns>Remove command.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.IndexUpdateCommand.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Indexing.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Domain" />-level handler for memory index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.DomainHandler.CreateLocalStorage(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage">
      <summary>
            In memory index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage.CreateView(System.Transactions.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage.GetView(System.Guid)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage.GetRealIndexStatisticsAdapter(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage.GetTransform(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.HandlerFactory">
      <summary>
            Handlers factory for memory index storage.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView">
      <summary>
            View of "in memory" indexing storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.Execute(Xtensive.Storage.Commands.Command)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.Execute(System.Collections.Generic.List{Xtensive.Storage.Commands.Command})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.Update(Xtensive.Modelling.Actions.ActionSequence)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.ClearSchema">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.CreateNewSchema(Xtensive.Storage.Model.StorageInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.GetIndex(Xtensive.Storage.Model.IndexInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.FindTuple(System.String,Xtensive.Tuples.Tuple)">
      <exception cref="T:System.InvalidOperationException">Instance with specific key is not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.#ctor(Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorage,Xtensive.Storage.Model.StorageInfo,System.Transactions.IsolationLevel)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="storage">The storage.</param>
      <param name="model">The model.</param>
      <param name="isolationLevel">The transaction isolation level.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexStorageView.Transaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction">
      <summary>
            Indexing storage transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction.Commit">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction.Rollback">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction.#ctor(System.Guid,System.Transactions.IsolationLevel)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="identifier">The identifier.</param>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction.TimeStamp">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Memory.MemoryIndexTransaction.State">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.SchemaUpgradeHandler.ExtractSchema">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.SchemaUpgradeHandler.ExtractNativeSchema">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.Memory.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Model.StorageInfo)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Indexing.Memory.SchemaUpgradeHandler.StorageView">
      <summary>
            Gets the storage view.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Indexing.Memory.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Session" />-level handler for memory index storage.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Indexing.MergedStatisticsProvider.#ctor(Xtensive.Indexing.Optimization.IOptimizationInfoProvider{Xtensive.Tuples.Tuple}[])">
      <exception cref="T:System.Exception">
        <paramref name="underlyingProviders" /> is empty.</exception>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService">
      <summary>
        <see cref="T:Xtensive.Storage.Providers.ICachingKeyGeneratorService" /> implementation for SQL databases.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService.NextBulk``1(Xtensive.Orm.CachingKeyGenerator{``0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService.GetCurrentValueImplementation(Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService.GetNextImplementation(Xtensive.Orm.KeyGenerator,Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService.GetSequenceBasedNextImplementation(Xtensive.Orm.KeyGenerator,Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation based on real sequence.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
      <exception cref="T:System.InvalidOperationException">Required sequence is not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CachingKeyGeneratorService.GetTableBasedNextImplementation(Xtensive.Orm.KeyGenerator,Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation based on regular table with
            auto-increment column.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
      <exception cref="T:System.InvalidOperationException">Required schema object is not found.</exception>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.IQueryExecutor">
      <summary>
            A service, that provides SQL query execution functionality.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteTupleReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes the specified request.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> that contains result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteScalar(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteScalar(System.String)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="commandText">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteNonQuery(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteNonQuery(System.String)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="commandText">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.Store(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple})">
      <summary>
            Stores the specified tuples in specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
      <param name="tuples">The tuples to store.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.Clear(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Clears the specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Driver">
      <summary>
            SQL provider driver.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExColumnXIsNotFoundInTableY">
      <summary>
              Looks up a localized string similar to Column '{0}' is not found in table '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExCommandsAreNotTranslatedYet">
      <summary>
              Looks up a localized string similar to Commands are not translated yet..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExConnectionIsNotOpen">
      <summary>
              Looks up a localized string similar to Connection is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExCurrentStorageProviderDoesNotSupportSavepoints">
      <summary>
              Looks up a localized string similar to Current storage provider does not support savepoints (nested transactions)..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExEnumerationIsAlreadyFinished">
      <summary>
              Looks up a localized string similar to Enumeration is already finished..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExEnumerationIsNotStarted">
      <summary>
              Looks up a localized string similar to Enumeration is not started..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorOnInsert">
      <summary>
              Looks up a localized string similar to Unable to insert instance of type '{0}' with specified key. Query affected {1} tables, but expected {2} tables..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorOnUpdate">
      <summary>
              Looks up a localized string similar to Unable to update instance of type {0} with specified key. Query affected {1} tables, but expecrted {2} tables..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorXOriginalMessageY">
      <summary>
              Looks up a localized string similar to Error '{0}'. Original message: {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorXWhileExecutingQueryYOriginalMessageZ">
      <summary>
              Looks up a localized string similar to Error '{0}' while executing query '{1}'. Original message: {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIncorrectCommandParameters">
      <summary>
              Looks up a localized string similar to Incorrect command parameters..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIndexIsChanged">
      <summary>
              Looks up a localized string similar to Index '{0}' is changed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIndexXIsNotFound">
      <summary>
              Looks up a localized string similar to Index '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExInstanceMultipleResults">
      <summary>
              Looks up a localized string similar to Multiple instances of type '{0}' with specified key are found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExInstanceNotFound">
      <summary>
              Looks up a localized string similar to Instance of type '{0}' with specified key is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExMemberXIsNotSupported">
      <summary>
              Looks up a localized string similar to Member '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExMultipleResults">
      <summary>
              Looks up a localized string similar to Specified query returns multiple results..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExOnlyEqualityRangesAreSupported">
      <summary>
              Looks up a localized string similar to Only equality ranges are supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider">
      <summary>
              Looks up a localized string similar to The ordering of records is not specified for RowNumberProvider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExParametersCountIsNotSameAsSourceColumnListsCount">
      <summary>
              Looks up a localized string similar to Parameters count is not same as source column lists count..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExReaderIsNotInConsistentState">
      <summary>
              Looks up a localized string similar to Reader is not in consistent state..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExRowNumberWindowFunctionIsNotSupportedOnThisVersionOfPostgreSql">
      <summary>
              Looks up a localized string similar to ROW_NUMBER window function is not supported on this version of PostgreSQL.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExSequenceXIsNotFoundInStorage">
      <summary>
              Looks up a localized string similar to Sequence '{0}' is not found in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExSourceColumnListContainsNullValues">
      <summary>
              Looks up a localized string similar to Source column list contains null values..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExStringTrimSupportedOnlyWithConstants">
      <summary>
              Looks up a localized string similar to String.Trim(char[]), String.TrimStart(char[]), string.TrimEnd(char[]) supported only with argument being array of constants..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTableXIsNotFound">
      <summary>
              Looks up a localized string similar to Table '{0}' is not found in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTemporaryTableXIsLocked">
      <summary>
              Looks up a localized string similar to Temporary table '{0}' is locked.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTransactionIsAlreadyOpen">
      <summary>
              Looks up a localized string similar to Transaction is already open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTransactionIsNotOpen">
      <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTypeHasNoPrimaryIndex">
      <summary>
              Looks up a localized string similar to Type '{0}' has no primary index..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnableToCreateConnection">
      <summary>
              Looks up a localized string similar to Unable to create the connection. Check if all needed assemblies are available..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnableToFindColumnInPrimaryIndex">
      <summary>
              Looks up a localized string similar to Unable to find column '{0}' of index '{1}' in primary index..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnsupportedColumnType">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported by current storage provider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnsupportedIndex">
      <summary>
              Looks up a localized string similar to Index '{0}' with attributes '{1}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExXIsNotSupported">
      <summary>
              Looks up a localized string similar to '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXBeginningTransactionWithYIsolationLevel">
      <summary>
              Looks up a localized string similar to Session '{0}'. Beginning transaction @ {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXClosingConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Closing connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXCommitTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Commit transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXCreatingConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Creating connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXMakeSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Make savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXOpeningConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Opening connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXQueryY">
      <summary>
               Looks up a localized string similar to Session '{0}'. SQL batch: 
            {1}.
             </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXReleaseSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Release savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXRollbackToSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback to savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXRollbackTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXSchemaUpgradeScriptY">
      <summary>
               Looks up a localized string similar to Session '{0}'. Schema upgrade script:
            {1}.
             </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandProcessor">
      <summary>
            A command processor.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.DefaultParameterNamePrefix">
      <summary>
            Default parameter name prefix.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.factory">
      <summary>
            Factory of command parts.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.tasks">
      <summary>
            Currently registered tasks.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.domainHandler">
      <summary>
            A SQL handler of current domain.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.driver">
      <summary>
            A SQL driver.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.session">
      <summary>
            Session this command processor is bound to.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.connection">
      <summary>
            Connection this command processor is bound to.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.reenterCount">
      <summary>
            Number of recursive enters in query execution methods.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.activeCommand">
      <summary>
            Active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes all registred requests plus the specified one query,
            returning <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the last query.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the specified request.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests(System.Boolean)">
      <summary>
            Executes all registred requests,
            optionally skipping the last requests according to 
            <paramref name="allowPartialExecution" /> argument.
            </summary>
      <param name="allowPartialExecution">
            if set to <see langword="true" /> command processor is allowed to skip last request,
            if it decides to.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests">
      <summary>
            Executes the all registered requests.
            Calling this method is equivalent to calling <see cref="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests(System.Boolean)" /> with <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.RegisterTask(Xtensive.Storage.Providers.Sql.SqlTask)">
      <summary>
            Registers the specified task for execution.
            </summary>
      <param name="task">The task to register.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ClearTasks">
      <summary>
            Clears all registered tasks.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.RunTupleReader(System.Data.Common.DbDataReader,Xtensive.Tuples.TupleDescriptor)">
      <summary>
            Wrapps the specified <see cref="T:System.Data.Common.DbDataReader" />
            into a <see cref="T:System.Collections.Generic.IEnumerator`1" /> according to a specified <see cref="T:Xtensive.Tuples.TupleDescriptor" />.
            </summary>
      <param name="reader">The reader to wrap.</param>
      <param name="descriptor">The descriptor of a result.</param>
      <returns>Created <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.AllocateCommand">
      <summary>
            Allocates the active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.DisposeCommand">
      <summary>
            Disposes the active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.#ctor(Xtensive.Storage.Providers.Sql.DomainHandler,Xtensive.Orm.Session,Xtensive.Sql.SqlConnection,Xtensive.Storage.Providers.Sql.CommandPartFactory)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="domainHandler">The domain handler.</param>
      <param name="session">The session.</param>
      <param name="connection">The connection.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor">
      <summary>
            Provider-level <see cref="T:System.Data.Common.DbDataReader" /> accessor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandPartFactory">
      <summary>
            A factory of <see cref="T:Xtensive.Storage.Providers.Sql.CommandPart" />s.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPartFactory.connection">
      <summary>
            Connection this command part factory is bound to,
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandPartFactory.CreatePersistCommandPart(Xtensive.Storage.Providers.Sql.SqlPersistTask,System.String)">
      <summary>
            Creates the persist command part.
            </summary>
      <param name="task">The task.</param>
      <param name="parameterNamePrefix">The parameter name prefix.</param>
      <returns>Created command part.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandPartFactory.CreateQueryCommandPart(Xtensive.Storage.Providers.Sql.SqlQueryTask,System.String)">
      <summary>
            Creates the query command part.
            </summary>
      <param name="task">The task.</param>
      <param name="parameterNamePrefix">The parameter name prefix.</param>
      <returns>Created command part.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlTask">
      <summary>
            An abstract task for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <summary>
            Processes this command with the specified <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
      <param name="processor">The processor to use.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Command">
      <summary>
            A command ready for execution.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.AddPart(Xtensive.Storage.Providers.Sql.CommandPart)">
      <summary>
            Adds the part to this command.
            </summary>
      <param name="part">The part to add.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.AddPart(Xtensive.Storage.Providers.Sql.CommandPart,Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Adds the part to this command.
            </summary>
      <param name="part">The part to add.</param>
      <param name="task">The task.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.ExecuteNonQuery">
      <summary>
            Executes this command. This method is equivalent of <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.ExecuteReader">
      <summary>
            Executes this command. This method is equivalent of <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Command.Statements">
      <summary>
            Gets the statements this command is consist of.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Command.QueryTasks">
      <summary>
            Gets the query tasks registered in this command.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlQueryTask">
      <summary>
            A query task (i.e. SELECT) for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request">
      <summary>
            A request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.ParameterContext">
      <summary>
            A parameter context to activate during parameters binding.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Output">
      <summary>
            A list of tuples to store result in.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.#ctor(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="request">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.#ctor(Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Parameters.ParameterContext,System.Collections.Generic.List{Xtensive.Tuples.Tuple})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="request">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request" />.</param>
      <param name="parameterContext">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.ParameterContext" />.</param>
      <param name="output">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Output" />.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlPersistTask">
      <summary>
            A persist task (i.e. INSERT, UPDATE, DELETE) for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlPersistTask.RequestSequence">
      <summary>
            A request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlPersistTask.Tuple">
      <summary>
            A tuple containing parameter for request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlPersistTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor">
      <summary>
            A command processor that arranges incoming commands into series of batches
            to minimize client-server network roundtrips.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ExecuteRequests(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandPart">
      <summary>
            A part of a command.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Query">
      <summary>
            Query text.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Parameters">
      <summary>
            Parameters bound to this command part.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Disposables">
      <summary>
            Objects that should be disposed uppon this command part completion.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequest">
      <summary>
            Modification (Insert, Update, Delete) request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequest.#ctor(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequest.#ctor(Xtensive.Sql.ISqlCompileUnit,System.Collections.Generic.IEnumerable{Xtensive.Storage.Providers.Sql.PersistParameterBinding})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="statement">The statement.</param>
      <param name="parameterBindings">The parameter bindings.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequest.ParameterBindings">
      <summary>
            Gets the parameter bindings.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding">
      <summary>
            A binding of a parameter for <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistParameterBinding.#ctor(System.Int32,Xtensive.Sql.TypeMapping,Xtensive.Storage.Providers.Sql.PersistParameterBindingType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="fieldIndex">Index of the field that contain new value.</param>
      <param name="typeMapping">The type mapping.</param>
      <param name="bindingType">Type of the binding.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistParameterBinding.#ctor(System.Int32,Xtensive.Sql.TypeMapping)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="fieldIndex">Index of the field that contain new value.</param>
      <param name="typeMapping">The type mapping.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistParameterBinding.BindingType">
      <summary>
            Gets the type of the binding.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistParameterBinding.FieldIndex">
      <summary>
            Gets the index of the field to extract value from.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding">
      <summary>
            A binding of a parameter for <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryParameterBinding.#ctor(System.Func{System.Object},Xtensive.Sql.TypeMapping,Xtensive.Storage.Providers.Sql.QueryParameterBindingType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="valueAccessor">Value for <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" />.</param>
      <param name="typeMapping">Value for <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" />.</param>
      <param name="bindingType">Value for <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.BindingType" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryParameterBinding.#ctor(System.Func{System.Object},Xtensive.Sql.TypeMapping)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />.
            </summary>
      <param name="valueAccessor">
      </param>
      <param name="typeMapping">
      </param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor">
      <summary>
            Gets the value accessor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.BindingType">
      <summary>
            Gets the type of the binding.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryParameterBindingType">
      <summary>
            Possible types of <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.Regular">
      <summary>
            Indicates no special handling of parameter values.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.SmartNull">
      <summary>
            Indicates that special handling of null values is performed.
            If <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" /> returns <see langword="null" />
            generated query with contain "something is null" check instead of "something = @p".
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.BooleanConstant">
      <summary>
            Indicates that <see cref="T:System.Boolean" /> parameters is automatically propagated to constants
            according to a value returned by <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" />.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.LimitOffset">
      <summary>
            Indicates that parameter is a argument for paging operators
            and should be inlined in query as constant value.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.RowFilter">
      <summary>
            Indicates that parameter is row filter argument (i.e. a number of parameter vectors).
            <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" /> returns a collection of <see cref="T:Xtensive.Tuples.Tuple" />s.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryRowFilterParameterBinding">
      <summary>
            A special version of <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" /> used for complex filters.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRowFilterParameterBinding.RowTypeMapping">
      <summary>
            Gets the complex type mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.ParameterBinding">
      <summary>
            Describes SQL parameter binding.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.ParameterBinding.#ctor(Xtensive.Sql.TypeMapping)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping">
      <summary>
            Gets the type mapping.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.ParameterBinding.ParameterReference">
      <summary>
            Gets the parameter reference.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistParameterBindingType">
      <summary>
            Possible types of <see cref="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.Regular">
      <summary>
            Indicates that no special handling of parameter is performed.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.CharacterLob">
      <summary>
            Indicates that parameter is a large character object and should be persisted via <see cref="T:Xtensive.Sql.ICharacterLargeObject" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.BinaryLob">
      <summary>
            Indicates that parameter is a large binary object and should be persisted via <see cref="T:Xtensive.Sql.IBinaryLargeObject" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandProcessorFactory">
      <summary>
            A handlers that is capable of creating <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessorFactory.CreateCommandProcessor(Xtensive.Orm.Session,Xtensive.Sql.SqlConnection)">
      <summary>
            Creates the command processor.
            </summary>
      <param name="session">The session.</param>
      <param name="connection">The connection.</param>
      <returns>Created command processor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessorFactory.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CursorCommandPartFactory">
      <summary>
            A command part factory that wraps queries into "open cursor" statements
            to return multiple query results from single batch.
            Currently this is very Oracle specific.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor">
      <summary>
            A command processor that simply executes all incoming commands immediately.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ExecuteRequests(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DbCommandExtensions">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DbCommandExtensions.ToHumanReadableString(System.Data.Common.DbCommand)">
      <summary>
            Converts the specified <see cref="T:System.Data.Common.DbCommand" /> to human readable string.
            </summary>
      <param name="command">The command to beautify.</param>
      <returns>Human readable representation of the specified command.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask">
      <summary>
            A task for <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Type">
      <summary>
            Gets the type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.FieldMap">
      <summary>
            Gets the field map that describes updated fields.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Kind">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestKind" />.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.ModelMapping">
      <summary>
            Defines model mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder">
      <summary>
            Builder of <see cref="T:Xtensive.Storage.Providers.Sql.Request" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.Build(Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask)">
      <summary>
            Builds the request.
            </summary>
      <param name="task">The request builder task.</param>
      <returns>
        <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> instance for the specified <paramref name="task" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableManager">
      <summary>
            A manager of temporary tables.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.BuildDescriptor(System.String,Xtensive.Tuples.TupleDescriptor)">
      <summary>
            Builds the descriptor of a temporary table.
            </summary>
      <param name="name">The name of the temporary table.</param>
      <param name="source">The source.</param>
      <returns>Built descriptor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.BuildDescriptor(System.String,Xtensive.Tuples.TupleDescriptor,System.String[])">
      <summary>
            Builds the descriptor of a temporary table.
            </summary>
      <param name="name">The name of the temporary table.</param>
      <param name="source">The source.</param>
      <param name="fieldNames">The names of field in temporary table.</param>
      <returns>Built descriptor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.Acquire(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Acquires the lock on the specified temporary table.
            </summary>
      <param name="context">The <see cref="T:Xtensive.Storage.Providers.EnumerationContext" />.</param>
      <param name="descriptor">The descriptor of temporary table.</param>
      <returns>
            A <see cref="T:System.IDisposable" /> implementor that should be used to free acquired lock.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.CreateTemporaryTable(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Creates the temporary table with the specified name.
            </summary>
      <param name="schema">The schema to create table in.</param>
      <param name="tableName">Name of the table.</param>
      <returns>Created table.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.InitializeTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Initializes the table. This is called once per session on a first acquire request.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.AcquireTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Gets the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.ReleaseTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Releases the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.ProcessAggregate(Xtensive.Storage.Providers.Sql.SqlProvider,System.Collections.Generic.List{Xtensive.Sql.Dml.SqlExpression},Xtensive.Storage.Rse.AggregateColumn)">
      <summary>
            Translates <see cref="T:Xtensive.Storage.Rse.AggregateColumn" /> to corresponding <see cref="T:Xtensive.Sql.Dml.SqlExpression" />.
            </summary>
      <param name="source">The source <see cref="T:Xtensive.Storage.Providers.Sql.SqlProvider" />.</param>
      <param name="sourceColumns">The source columns.</param>
      <param name="aggregateColumn">The aggregate column.</param>
      <returns>Aggregate processing result (expression).</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.#ctor(Xtensive.Storage.Providers.HandlerAccessor)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.DomainHandler">
      <summary>
            Gets the SQL domain handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.Driver">
      <summary>
            Gets the SQL driver.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.ProviderInfo">
      <summary>
            Gets the provider info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> object providing access to available storage handlers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.PrimaryIndexMapping">
      <summary>
            Defines primary index mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.ColumnMapping">
      <summary>
            Defines column mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.SkipTakeCorrector">
      <summary>
            Corrects an using of <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" /> and <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" /></summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.RedundantColumnOptimizer">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" /> implementation that removes redundant columns in tree.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.HandlerFactory">
      <summary>
            Base handler factory for SQL storages.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor">
      <summary>
            A descriptor of temporary table.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">A value for <see cref="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.Name" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.Name">
      <summary>
            Gets the unique name of this temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.TupleDescriptor">
      <summary>
            Gets or sets the tuple descriptor associated with this table descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.CreateStatement">
      <summary>
            Gets or sets the table creation script.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.DropStatement">
      <summary>
            Gets or sets the table destruction script.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.StoreRequest">
      <summary>
            Gets or sets the persist request used to store data in temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.ClearRequest">
      <summary>
            Gets or sets the clear reqest used to delete all data from temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.QueryStatement">
      <summary>
            Gets or sets the query statement associated with this table descriptor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IInlinableProvider">
      <summary>
            A compilable provider, which columns can be inlined during translation to SQL.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IInlinableProvider.IsInlined">
      <summary>
            Gets a value indicating whether columns of a provider should be inlined.
            For non-SQL storages this property has no effect on compilation.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.RequestOptions">
      <summary>
            Options for <see cref="T:Xtensive.Storage.Providers.Sql.Request" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.RequestOptions.Empty">
      <summary>
            Empty option set.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.RequestOptions.AllowBatching">
      <summary>
            Batching of this request is allowed.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlStoreProvider">
      <summary>
            Default implementation of SQL temporary data provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlStoreProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlStoreProvider.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor,Xtensive.Storage.Rse.Providers.Compilable.StoreProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="handlers">The handlers.</param>
      <param name="request">The request.</param>
      <param name="descriptor">The descriptor.</param>
      <param name="origin">The origin.</param>
      <param name="source">The source.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlStoreProvider.Scope">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlStoreProvider.Name">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer">
      <summary>
            An expression visitor specialized for finding tuple access expressions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.VisitUnknown(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression)">
      <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="expression">The predicate.</param>
      <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="expression">The predicate.</param>
      <param name="parameter">The tuple parameter to be considered.</param>
      <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.#ctor(System.Action{Xtensive.Storage.Rse.ApplyParameter,System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="registerOuterColumn">A <see langword="delegate" /> invoked on each outer column usage.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlIncludeProvider">
      <summary>
            Default implementation for SQL <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlIncludeProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlIncludeProvider.OnAfterEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlIncludeProvider.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor,System.Func{System.Collections.Generic.IEnumerable{Xtensive.Tuples.Tuple}},Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="handlers">The handlers.</param>
      <param name="request">The request.</param>
      <param name="tableDescriptor">The table descriptor.</param>
      <param name="filterDataSource">The filter data source.</param>
      <param name="origin">The origin.</param>
      <param name="source">The source.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.SecondaryIndexMapping">
      <summary>
            Defines secondary index mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.NonTransactionalStage">
      <summary>
            Enumerates non-transactional stages.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.Prologue">
      <summary>
            Prologue.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.Epilogue">
      <summary>
            Epilogue.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilderContext">
      <summary>
        <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder" /> context.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestKind">
      <summary>
            Kinds of <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Insert">
      <summary>
            Insert request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Remove">
      <summary>
            Remove request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Update">
      <summary>
            Update request.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Model.StorageInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.ExtractSchema">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.ExtractNativeSchema">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Orm.Session" />-level handler for SQL storages.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.QueryTask},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.BeginTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.CreateSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.RollbackToSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.ReleaseSavepoint(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.CommitTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.RollbackTransaction(Xtensive.Orm.Transaction)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Orm.Internals.PersistAction},System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.AddBaseServiceRegistrations(System.Collections.Generic.List{Xtensive.IoC.ServiceRegistration})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.TransactionIsStarted">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.Connection">
      <summary>
            Gets the connection.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlActionTranslator">
      <summary>
            Translates upgrade <see cref="T:Xtensive.Modelling.Actions.NodeAction" />s to Sql.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.Translate">
      <summary>
            Translates all registered actions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.VisitCopyDataAction(Xtensive.Modelling.Actions.DataAction)">
      <exception cref="T:System.InvalidOperationException">Can not create copy command 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.ProcessUpdateDataAction(Xtensive.Modelling.Actions.DataAction,System.Boolean)">
      <exception cref="T:System.InvalidOperationException">Can not create update command 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CreateConditionalExpression(Xtensive.Modelling.Comparison.Hints.DataHint,Xtensive.Sql.Dml.SqlTableRef)">
      <exception cref="T:System.InvalidOperationException">Can not create expression 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.#ctor(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Sql.Model.Schema,Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Model.StorageInfo,Xtensive.Storage.Providers.ProviderInfo,Xtensive.Storage.Providers.Sql.Driver,System.String,System.Collections.Generic.List{System.String},System.Func{Xtensive.Sql.ISqlCompileUnit,System.Object},System.Func{Xtensive.Sql.ISqlCompileUnit,System.Int32},System.Func{Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String,Xtensive.Sql.ISqlCompileUnit})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="actions">The actions to translate.</param>
      <param name="schema">The schema.</param>
      <param name="sourceModel">The source model.</param>
      <param name="targetModel">The target model.</param>
      <param name="providerInfo">The provider info.</param>
      <param name="driver">The driver.</param>
      <param name="typeIdColumnName">Name of the type id column.</param>
      <param name="enforceChangedColumns">Columns thats types must be changed 
            enforced (without type conversion verification).</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CleanupDataCommands">
      <summary>
            Gets the data cleanup commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.PreUpgradeCommands">
      <summary>
            Gets the command thats must be 
            executed before upgrade commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.UpgradeCommands">
      <summary>
            Gets the translation result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CopyDataCommands">
      <summary>
            Gets the data copy commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.PostCopyDataCommands">
      <summary>
            Gets the data cleanup commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CleanupCommands">
      <summary>
            Gets the post upgrade commands, thats
            must be executed after data manipulate commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.NonTransactionalPrologCommands">
      <summary>
            Gets the non transactional commands that should be executed non transactionally.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.NonTransactionalEpilogCommands">
      <summary>
            Gets the non transactional commands that should be executed non transactionally.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlModelConverter">
      <summary>
            Converts <see cref="T:Xtensive.Sql.Model.Catalog" /> to indexing storage model.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.GetConversionResult">
      <summary>
            Get the result of conversion specified 
            <see cref="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.Schema" /> to <see cref="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.StorageInfo" />.
            </summary>
      <returns>The storage model.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSchema(Xtensive.Sql.Model.Schema)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.Visit(Xtensive.Sql.Model.Node)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTable(Xtensive.Sql.Model.Table)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitIndex(Xtensive.Sql.Model.Index)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSequence(Xtensive.Sql.Model.Sequence)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitGeneratorTable(Xtensive.Sql.Model.Table)">
      <summary>
            Visits the generator table.
            </summary>
      <param name="generatorTable">The generator table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.ExtractType(Xtensive.Sql.Model.TableColumn)">
      <summary>
            Extracts the <see cref="T:Xtensive.Storage.Model.TypeInfo" /> from <see cref="T:Xtensive.Sql.Model.TableColumn" />.
            </summary>
      <param name="column">The column.</param>
      <returns>Data type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.ConvertReferentialAction(Xtensive.Sql.ReferentialAction)">
      <summary>
            Converts the <see cref="T:Xtensive.Sql.ReferentialAction" /> to 
            <see cref="T:Xtensive.Storage.Model.ReferentialAction" />.
            </summary>
      <param name="toConvert">The action to convert.</param>
      <returns>Converted action.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.FindIndex(Xtensive.Storage.Model.TableInfo,System.Collections.Generic.List{Xtensive.Storage.Model.ColumnInfo})">
      <summary>
            Finds the specific index by key columns.
            </summary>
      <param name="table">The table.</param>
      <param name="keyColumns">The key columns.</param>
      <returns>The index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.IsGeneratorTable(Xtensive.Sql.Model.Table)">
      <summary>
            Determines whether specific table used as sequence.
            </summary>
      <param name="table">The table.</param>
      <returns>
        <see langword="true" /> if table used as sequence; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.#ctor(Xtensive.Sql.Model.Schema,Xtensive.Storage.Providers.ProviderInfo)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="storageSchema">The schema.</param>
      <param name="providerInfo">The provider info.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCatalog(Xtensive.Sql.Model.Catalog)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCollation(Xtensive.Sql.Model.Collation)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDataTable(Xtensive.Sql.Model.DataTable)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDomain(Xtensive.Sql.Model.Domain)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartition(Xtensive.Sql.Model.Partition)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitConstraint(Xtensive.Sql.Model.Constraint)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTranslation(Xtensive.Sql.Model.Translation)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitView(Xtensive.Sql.Model.View)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.StorageInfo">
      <summary>
            Gets the storage info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.ProviderInfo">
      <summary>
            Gets the provider info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.Schema">
      <summary>
            Gets the schema.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Firebird.DomainHandler">
      <summary>
            A domain handler for Firebird RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.Firebird.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Firebird.HandlerFactory">
      <summary>
            Storage provider for Firebird.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Firebird.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Oracle.DomainHandler">
      <summary>
            A domain handler for Oracle RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.Oracle.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Oracle.HandlerFactory">
      <summary>
            Storage provider for Oracle.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.DomainHandler">
      <summary>
            A domain handler specific to PostgreSQL RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.HandlerFactory">
      <summary>
            Storage provider for PostgreSQL.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.DomainHandler">
      <summary>
            A domain handler specific to Microsoft SQL Server RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.HandlerFactory">
      <summary>
            Storage provider for Microsoft SQL Server CE.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableStateRegistry">
      <summary>
            A registry of temporary tables.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableStateRegistry.States">
      <summary>
            Gets or sets the states of temporary tables.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager">
      <summary>
            A temporary table manager specific to SQL Server CE
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.CreateTemporaryTable(Xtensive.Sql.Model.Schema,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.InitializeTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.AcquireTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.ReleaseTable(Xtensive.Storage.Providers.EnumerationContext,Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServer.DomainHandler">
      <summary>
            A domain handler specific to Microsoft SQL Server RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServer.DomainHandler.CreateCompiler">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServer.HandlerFactory">
      <summary>
            Storage provider for Microsoft SQL Server.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlTemporaryDataProvider">
      <summary>
            Abstract base class for any SQL temporary data provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IHasNamedResult">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IHasNamedResult.Scope">
      <summary>
            Gets the scope of the result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IHasNamedResult.Name">
      <summary>
            Gets the name of the saved result.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ClientCompiler">
      <summary>
            Default implementation of <see cref="T:Xtensive.Storage.Rse.Compilation.Compiler`1" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <exception cref="T:System.NotSupportedException">
      </exception>
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.EmptyPreCompiler">
      <summary>
            Empty <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" /> implementation.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.EmptyPreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext">
      <summary>
            Default <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> implementation.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.CreateActiveScope">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.Options">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.GlobalTemporaryData">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.TransactionTemporaryData">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Always thrown by this property getter.</exception>
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter">
      <summary>
            An expression visitor specialized for rewriting tuple access expressions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.VisitUnknown(System.Linq.Expressions.Expression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression)">
      <summary>
            Replaces column usages according to a specified map.
            </summary>
      <param name="expression">The predicate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Replaces column usages according to a specified map.
            </summary>
      <param name="expression">The predicate.</param>
      <param name="parameter">The tuple parameter to be considered.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.#ctor(System.Collections.Generic.IList{System.Int32},System.Func{Xtensive.Storage.Rse.ApplyParameter,System.Int32,System.Int32},System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="resolveOuterColumn">A <see langword="delegate" /> invoked when outer column usage is to be rewritten.</param>
      <param name="mappings">The mappings.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.ColumnMappingInspector.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.RsExtractionResult">
      <summary>
            Result of extraction a <see cref="T:Xtensive.Indexing.RangeSet`1" /> from a predicate.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.CnfParser">
      <summary>
            Extractor of <see cref="T:Xtensive.Indexing.RangeSet`1" /> from a boolean expression in a conjunctive normal form.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.TupleExpressionInfo">
      <summary>
            Information about expression containing an access to a field of tuple.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSetHeaderExtensions">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeaderExtensions.IndexOf(Xtensive.Storage.Rse.RecordSetHeader,System.String)">
      <summary>
            Gets index of column with specified name.
            </summary>
      <param name="header">The header to search in.</param>
      <param name="columnName">Name of the column to get.</param>
      <returns>Index of the specified column.
            <see langword="-1" />, if there is no column with specified name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeaderExtensions.GetRecordSetHeader(Xtensive.Orm.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object for the specified <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The index info to get the header for.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider">
      <summary>
            Abstract base class for <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> that's aware of its location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Core.Location,Xtensive.Storage.Rse.Providers.Provider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider.Location">
      <summary>
            Gets or sets execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ExecutableProvider`1">
      <summary>
            Abstract base class for <typeparamref name="TOrigin" />-typed executable providers.
            </summary>
      <typeparam name="TOrigin">The type of the <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" />.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="sources">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin">
      <summary>
            Gets the provider this provider is compiled from.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1">
      <summary>
            An abstract base class for executable provider having <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left" /> and <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right" /> data sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="left">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left" /> property value.</param>
      <param name="right">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left">
      <summary>
            Gets the "left" data source of this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right">
      <summary>
            Gets the "right" data source of this provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1">
      <summary>
            An abstract base class for executable provider having a single data <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source">
      <summary>
            Gets the only data source of this provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1">
      <summary>
            Fully transparent provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.HashJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1">
      <summary>
            Executable provider that makes decision which real executable provider to use.
            </summary>
      <typeparam name="TOrigin">Compilable provider.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.BuildSubstitution">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Substitution" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.GetService``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnAfterEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Initialize">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Substitution">
      <summary>
            Gets the real provider used by this class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.NestedLoopJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.LoopJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.OuterMergeJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MergeJoinProvider.Initialize">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IListProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers supporting random access to their items.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.IListProvider.GetItem(System.Int32)">
      <summary>
            Gets the item by its index.
            </summary>
      <param name="index">The index to get the item at.</param>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader">
      <summary>
            Base class for <see cref="T:Xtensive.Storage.Rse.RecordQuery" /><see cref="T:Xtensive.Indexing.IIndexReader`2" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.MoveTo(Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Tuples.Tuple}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">
        <see cref="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Provider" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Provider">
      <summary>
            Gets the provider this reader is created for.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Range">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Direction">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Current">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IOrderedProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers that return ordered sequence of records.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IIndexedProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers that support indexed access to their records.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.BloomFilter.IBloomFilter`1">
      <summary>
            Describes Bloom filter.
            </summary>
      <typeparam name="T">Type of value to filter.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.IBloomFilter`1.AddValue(`0)">
      <summary>
            Puts value in bloom filter.
            </summary>
      <param name="value">Value to put to bloom filter.</param>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.IBloomFilter`1.HasValue(`0)">
      <summary>
            Checks filter's state of value.
            </summary>
      <param name="value">Value to check.</param>
      <returns>
        <see langword="True" /> if value's hash found in filter, otherwise <see langword="false" />.</returns>
      <remarks>
        <see langword="True" /> result is not guarantee that requested value was put in filter. More verification
            required to be sure. <see langword="False" /> result guarantee that requested values was never put in filter.
            </remarks>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.IBloomFilter`1.Clear">
      <summary>
            Clears filter's state
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.IBloomFilter`1.Serialize(System.IO.Stream)">
      <summary>
            Serializes filter to stream.
            </summary>
      <param name="stream">Stream to serialize the data to.</param>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.Size">
      <summary>
            Gets size of filter's data in bits.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.SizeInBytes">
      <summary>
            Gets size of filter's data in bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.FilledBitCount">
      <summary>
            Gets the count of set bits in filter's date.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.FillFactor">
      <summary>
            Gets filter's fill factor.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.Hasher">
      <summary>
            Gets hash functions.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.IBloomFilter`1.HashCount">
      <summary>
            Gets count of hash functions used in bloom filter.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.BloomFilter.BloomFilter`1">
      <summary>
            Base class for <see cref="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1" /> and <see cref="T:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1" />. 
            Encapsulates common functionality of both classes.
            </summary>
      <typeparam name="T">Type of value to filter.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.AddValue(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.HasValue(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.AddHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.HasHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.Serialize(System.IO.Stream)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.SerializeDescriptor(System.IO.Stream)">
      <summary>
            Serializes filter's descriptor to the specified <paramref name="stream" />.
            </summary>
      <param name="stream">Stream to serialize the descriptor into.</param>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.GetOptimalHashCount(System.Double)">
      <summary>
            Calculates optimal count of hash functions for specified <paramref name="bitsPerValue" /> factor.
            </summary>
      <param name="bitsPerValue">Count of bits per value.</param>
      <returns>Optimal count of hash functions.</returns>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.#ctor(System.IO.Stream)">
      <summary>
            Initializes bloom filter with serialized data.
            </summary>
      <param name="stream">Stream to deserialize the filter from.</param>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.#ctor(System.Int64,System.Int32)">
      <summary>
            Initializes bloom filter with size and hash functions. Uses default hash provider to calculate hashes.
            </summary>
      <param name="size">Count of bits to use in filter.</param>
      <param name="hashCount">Count of hash functions to use. See <see cref="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.GetOptimalHashCount(System.Double)" /> to get this parameter optimal.</param>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.HashCount">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.SizeInBytes">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.Size">
      <summary>
            Gets size of filter's data in bits.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.FillFactor">
      <summary>
            Gets filter's fill factor.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.FilledBitCount">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.BloomFilter`1.Hasher">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1">
      <summary>
            Bloom filter storing its underlying data in memory.
            </summary>
      <typeparam name="T">Type of value to filter.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.AddHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.HasHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.Serialize(System.IO.Stream)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.#ctor(System.Int64,System.Int32)">
      <summary>
            Creates new instance of <see cref="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1" />.
            </summary>
      <param name="size">Count of bits to use in filter.</param>
      <param name="hashCount">Count of hash functions to use. See <see cref="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.GetOptimalHashCount(System.Double)" /> to get this parameter optimal.</param>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.#ctor(System.IO.Stream)">
      <summary>
            Creates new instance of <see cref="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1" />.
            </summary>
      <param name="stream">Stream to deserialize the filter from.</param>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1.FilledBitCount">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1">
      <summary>
            Bloom filter. Uses stream to store and retrieve its data.
            </summary>
      <typeparam name="T">Type of value to filter.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.AddHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.HasHashes(System.Int64[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.Serialize(System.IO.Stream)">
      <summary>
            Serializes filter to stream.
            </summary>
      <param name="stream">Stream to serialize to.</param>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.#ctor(System.IO.Stream)">
      <summary>
            Creates new instance of <see cref="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1" /> from serialize stream.
            </summary>
      <param name="stream">Stream to deserialize the filter from.</param>
      <remarks>
        <paramref name="stream" /> must contains serialized data. See <see cref="M:Xtensive.Indexing.BloomFilter.IBloomFilter`1.Serialize(System.IO.Stream)" /> for details about filter serialization.</remarks>
    </member>
    <member name="M:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.#ctor(System.IO.Stream,System.Int64,System.Int32)">
      <summary>
            Creates new instance of <see cref="T:Xtensive.Indexing.BloomFilter.MemoryBloomFilter`1" />. 
            Uses specified stream to store filter's data.
            </summary>
      <param name="stream">Stream to store the filter's data in.</param>
      <param name="size">Count of bits to use in filter.</param>
      <param name="hashCount">Count of hash functions to use. See <see cref="M:Xtensive.Indexing.BloomFilter.BloomFilter`1.GetOptimalHashCount(System.Double)" /> to get this parameter optimal.</param>
    </member>
    <member name="P:Xtensive.Indexing.BloomFilter.StreamBloomFilter`1.FilledBitCount">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.IIndexReader`2">
      <summary>
            An extended version of <see cref="T:System.Collections.Generic.IEnumerator`1" /> for indexes.
            </summary>
      <typeparam name="TKey">The type of index key.</typeparam>
      <typeparam name="TItem">The type of index item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IIndexReader`2.MoveTo(Xtensive.Indexing.Entire{`0})">
      <summary>
            Moves the internal pointer to the specified key.
            You still should call <see cref="M:System.Collections.IEnumerator.MoveNext" />
            after calling this method to make 
            <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property value available.
            </summary>
      <param name="key">The key to move to.</param>
      <remarks>
        <note type="caution">
              The specified <paramref name="key" /> must be 
              inside the <see cref="P:Xtensive.Indexing.IIndexReader`2.Range" /> of this reader.
            </note>
      </remarks>
    </member>
    <member name="P:Xtensive.Indexing.IIndexReader`2.Range">
      <summary>
            Gets the range of enumeration.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IIndexReader`2.Direction">
      <summary>
            Gets the direction of enumeration relatively to index key comparer.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexReaderBase`3.#ctor(`0,Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`1}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="index">The index.</param>
      <param name="range">The range to read.</param>
    </member>
    <member name="M:Xtensive.Indexing.IndexReaderBase`3.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.IIndex">
      <summary>
            Base index interface.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IIndex.Clear">
      <summary>
            Clears this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IHasKeyExtractor`2">
      <summary>
            An object having <see cref="P:Xtensive.Indexing.IHasKeyExtractor`2.KeyExtractor" /> contract.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="P:Xtensive.Indexing.IHasKeyExtractor`2.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IMeasurable`1">
      <summary>
            Configurable measurable - an editable dictionary-like collection 
            of <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> objects representing measure definitions.
            </summary>
      <typeparam name="TItem">The type of item of underlying <see cref="T:Xtensive.Collections.ICountable`1" />.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasurable`1.GetMeasureResult(System.String)">
      <summary>
            Gets the measurement for <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="name" />.
            </summary>
      <param name="name">The name of the measure.</param>
      <returns>The measurement result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasurable`1.GetMeasureResults(System.String[])">
      <summary>
            Gets the measurements for a set of <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="names" />.
            </summary>
      <param name="names">The names of measures to get.</param>
      <returns>The <see cref="T:System.Array" /> of measurement results for specified <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" />s.</returns>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasurable`1.HasMeasures">
      <summary>
            Gets result indicating whether this instance contains measures.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasurable`1.Measures">
      <summary>
            Gets the set of measures.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IIndex`2">
      <summary>
            Base generic index interface.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.Add(`1)">
      <summary>
            Adds the element to the index.
            </summary>
      <param name="item">The item to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null reference.</exception>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.Remove(`1)">
      <summary>
            Removes the <paramref name="item" /> from the index.
            </summary>
      <param name="item">Item to remove.</param>
      <returns>
        <see langword="True" /> if the item is found and removed;
            otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null reference.</exception>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.Replace(`1)">
      <summary>
            Replaces the <paramref name="item" /> using extracted key.
            </summary>
      <param name="item">Item to replace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null reference.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Item with extracted key could not be found.</exception>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.RemoveKey(`0)">
      <summary>
            Removes the item(s) from the index by its (their) <paramref name="key" />.
            </summary>
      <param name="key">Key of the item(s) to remove.</param>
      <returns>
        <see langword="True" /> if the item(s) with specified key is found and removed;
            otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null reference.</exception>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.Contains(`1)">
      <summary>
             Determines whether the index contains specified item.
            </summary>
      <returns>
        <see langword="true" /> if this instance contains the item; otherwise, <see langword="false" />.
            </returns>
      <param name="item">The item to check for the containment.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null reference.</exception>
    </member>
    <member name="M:Xtensive.Indexing.IIndex`2.ContainsKey(`0)">
      <summary>
             Determines whether the index contains specified key.
            </summary>
      <returns>
        <see langword="true" /> if this instance contains the key; otherwise, <see langword="false" />.
            </returns>
      <param name="key">The key to check for the containment.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null reference.</exception>
    </member>
    <member name="T:Xtensive.Indexing.IndexBase`2">
      <summary>
            Base class for all indexes.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.Replace(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexBase`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.Size">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.HasMeasures">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexBase`2.Measures">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.IHasKeyComparers`1">
      <summary>
            An object having 3 key comparers contract.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="P:Xtensive.Indexing.IHasKeyComparers`1.KeyComparer">
      <summary>
            Gets key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IHasKeyComparers`1.EntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IHasKeyComparers`1.AsymmetricKeyCompare">
      <summary>
            Gets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IOrderedEnumerable`2">
      <summary>
            Typed ordered enumerable of <typeparamref name="TItem" /> instances.
            </summary>
      <remarks>
            Items are ordered by <typeparamref name="TKey" />.
            </remarks>
      <typeparam name="TKey">Type of item key.</typeparam>
      <typeparam name="TItem">Item type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <typeparamref name="TKey" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <typeparamref name="TItem" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <typeparamref name="TItem" />s in the given range set.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range set.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.Seek(`0)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="key">Item key to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IOrderedEnumerable`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IRangeMeasurable`2">
      <summary>
            Range measurable - an <see cref="T:Xtensive.Indexing.Measures.IMeasurable`1" /> providing a set of 
            associated <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> objects for any of its <see cref="T:Xtensive.Indexing.Range`1" />s.
            </summary>
      <typeparam name="TKey">The range key.</typeparam>
      <typeparam name="TItem">The type of item of underlying <see cref="T:Xtensive.Indexing.Measures.IMeasurable`1" />.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IRangeMeasurable`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <summary>
            Gets the measurement result for <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="name" />.
            </summary>
      <param name="range">The range of <typeparamref name="TKey" />s.</param>
      <param name="name">The name of the measure.</param>
      <returns>The measurement result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IRangeMeasurable`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <summary>
            Gets the measurement result for a set of <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="names" />.
            </summary>
      <param name="range">The range of <typeparamref name="TKey" />s.</param>
      <param name="names">The names of measures to get.</param>
      <returns>The <see cref="T:System.Array" /> of measurement results for specified <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" />s.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1">
      <summary>
            Statistics provider.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1.GetStatistics">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Optimization.IStatistics`1" />.
            </summary>
      <returns>The statistics.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1.GetEntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Comparison.AdvancedComparer`1" /> which is used by the index to compare keys.
            </summary>
      <returns>The comparer.</returns>
    </member>
    <member name="T:Xtensive.Indexing.IOrderedIndex`2">
      <summary>
            Defines index that can return a <see cref="T:System.Collections.Generic.IEnumerator`1" /> that 
            enumerates through the range of index items.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="T:Xtensive.Indexing.OrderedIndexBase`2">
      <summary>
            Base class for all unique ordered indexes.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetStatistics">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetEntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.OrderedIndexBase`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.IUniqueIndex`2">
      <summary>
            Unique index contract.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IUniqueIndex`2.GetItem(`0)">
      <summary>
            Gets the item by its key.
            </summary>
      <value>The element with the specified key.</value>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null reference.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
    </member>
    <member name="T:Xtensive.Indexing.UniqueIndexBase`2">
      <summary>
            Base class for all unique indexes.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexBase`2.Resolve(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexBase`2.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexBase`2.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexBase`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.IUniqueOrderedIndex`2">
      <summary>
            Unique ordered index contract.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="T:Xtensive.Indexing.UniqueOrderedIndexBase`2">
      <summary>
            Base class for all unique ordered indexes.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetStatistics">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetEntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueOrderedIndexBase`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Index`2">
      <summary>
            B+ index based index implementation.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Configure(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.ValidateConfiguration">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.#ctor(Xtensive.Indexing.IndexConfiguration{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="configuration">Index configuration.</param>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Dispose(System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Finalize">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dtor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.InternalReplace(Xtensive.Indexing.Implementation.DataPage{`0,`1},`0,`1)">
      <returns>Replaced item.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Add(`1)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">
        <paramref name="item" /> is already added.</exception>
      <exception cref="T:System.NotSupportedException">Write is not allowed by <see cref="P:Xtensive.Indexing.Index`2.Features" />.</exception>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.RemoveKey(`0)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Write is not allowed by <see cref="P:Xtensive.Indexing.Index`2.Features" />.</exception>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Replace(`1)">
      <inheritdoc />
      <exception cref="T:System.NotSupportedException">Write is not allowed by <see cref="P:Xtensive.Indexing.Index`2.Features" />.</exception>
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Index`2.Serialize(System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Serializes items from specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> into the index.
            </summary>
      <param name="source">Items to serialize into the index.</param>
    </member>
    <member name="P:Xtensive.Indexing.Index`2.HasMeasures">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Index`2.Features">
      <summary>
            Gets index  features.
            Property can be set only once.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Index`2.PageSize">
      <summary>
            Gets page size of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Index`2.Measures">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.IndexConfigurationBase`2">
      <summary>
            Index configuration. 
            Used by <see cref="T:Xtensive.Indexing.IndexBase`2" /> and its descendants
            to unify index initialization and configuration.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the index item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.#ctor(System.Converter{`1,`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keyExtractor">
        <see cref="P:Xtensive.Indexing.IndexConfigurationBase`2.KeyExtractor" /> property value.</param>
    </member>
    <member name="M:Xtensive.Indexing.IndexConfigurationBase`2.#ctor(System.Converter{`1,`0},Xtensive.Comparison.AdvancedComparer{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="keyExtractor">
        <see cref="P:Xtensive.Indexing.IndexConfigurationBase`2.KeyExtractor" /> property value.</param>
      <param name="keyComparer">
        <see cref="P:Xtensive.Indexing.IndexConfigurationBase`2.KeyComparer" /> property value.</param>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.Location">
      <summary>
            Gets or sets the location of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.Measures">
      <summary>
            Gets the set of measures.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.KeyExtractor">
      <summary>
            Gets or sets the key extractor associated with the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.KeyComparer">
      <summary>
            Gets or sets the key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.EntireKeyComparer">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfigurationBase`2.AsymmetricKeyCompare">
      <summary>
            Gets or sets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IndexConfiguration`2">
      <summary>
            Defines index configuration.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.IndexConfiguration`2.DefaultPageSize">
      <summary>
            Default order.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.IndexConfiguration`2.DefaultBloomFilterBitsPerValue">
      <summary>
            Default value for <see cref="P:Xtensive.Indexing.IndexConfiguration`2.BloomFilterBitsPerValue" /> property.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.IndexConfiguration`2.DefaultCacheSize">
      <summary>
            Default value for <see cref="P:Xtensive.Indexing.IndexConfiguration`2.CacheSize" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexConfiguration`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.IndexConfiguration`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.IndexConfiguration`2.CacheSize">
      <summary>
            Gets or sets number of pages cached by for page provider. 
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfiguration`2.UseBloomFilter">
      <summary>
            Gets or sets <see langword="true" /> if index uses <see cref="T:Xtensive.Indexing.BloomFilter.BloomFilter`1" /> to optimize access. It is <see langword="true" /> by default.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfiguration`2.BloomFilterBitsPerValue">
      <summary>
            Gets or sets count of bits <see cref="T:Xtensive.Indexing.BloomFilter.BloomFilter`1" /> uses per value. <see cref="F:Xtensive.Indexing.IndexConfiguration`2.DefaultBloomFilterBitsPerValue" /> is default value.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.IndexConfiguration`2.PageSize">
      <summary>
            Gets or sets index page size. It must be even value in range [2,65534].
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IndexExtensions">
      <summary>
        <see cref="T:Xtensive.Indexing.IIndex`2" /> and its "inner" (supported) interfaces extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexExtensions.GetFullRange``1(Xtensive.Indexing.IHasKeyComparers{``0})">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Range`1" /> object describing full key range 
            for the specified <paramref name="index" />
            which endpoints are ordered in <see cref="F:Xtensive.Core.Direction.Positive" /> direction.
            </summary>
      <typeparam name="TKey">The type of the <paramref name="index" /> key.</typeparam>
      <param name="index">The index to get the full range for.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.Range`1" /> object describing full key range 
            which endpoints are ordered in <see cref="F:Xtensive.Core.Direction.Positive" /> direction.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IndexExtensions.GetFullRange``1(Xtensive.Indexing.IHasKeyComparers{``0},Xtensive.Core.Direction)">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Range`1" /> object describing full key range 
            for the specified <paramref name="index" /> 
            which endpoints are ordered in specified <paramref name="direction" />.
            </summary>
      <typeparam name="TKey">The type of the <paramref name="index" /> key.</typeparam>
      <param name="index">The index to get the full range for.</param>
      <param name="direction">The direction of the range endpoints.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.Range`1" /> object describing full key range 
            which endpoints are ordered in specified <paramref name="direction" />.</returns>
    </member>
    <member name="T:Xtensive.Indexing.IndexFeatures">
      <summary>
        <see cref="T:Xtensive.Indexing.Index`2" /> features.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexReader`2.#ctor(Xtensive.Indexing.Index{`0,`1},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="index">The index.</param>
      <param name="range">The range to read.</param>
    </member>
    <member name="M:Xtensive.Indexing.IndexReader`2.Dispose">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Implementation.IPageRef">
      <summary>
            Reference to the <see cref="T:Xtensive.Indexing.Index`2" /> page.
            Has no methods itself, but can be passed to various methods
            of <see cref="T:Xtensive.Indexing.Implementation.IIndexPageProvider`2" />.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.Page`2">
      <summary>
            Base class for <see cref="T:Xtensive.Indexing.Index`2" /> page.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Node type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.Page`2.UpdateVersion">
      <summary>
            Updates page version.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.Page`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" />
      </summary>
      <param name="provider">Index page provider this page is bound to.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.Page`2.OnDeserialization(System.Object)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.Provider">
      <summary>
            Gets <see cref="T:Xtensive.Indexing.Implementation.IIndexPageProvider`2" />, associated with 
            <see cref="T:Xtensive.Indexing.Implementation.Page`2" /></summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.Identifier">
      <summary>
            Gets or sets page <see cref="T:Xtensive.Indexing.Implementation.IPageRef">identifier</see></summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.Version">
      <summary>
            Gets or sets page version.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.IsPersisted">
      <summary>
            Gets or sets page persisted status.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.AsDescriptorPage">
      <summary>
            Casts page to the <see cref="P:Xtensive.Indexing.Implementation.Page`2.DescriptorPage" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.AsDataPage">
      <summary>
            Casts page to the <see cref="T:Xtensive.Indexing.Implementation.DataPage`2" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.AsInnerPage">
      <summary>
            Casts page to the <see cref="T:Xtensive.Indexing.Implementation.InnerPage`2" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.AsLeafPage">
      <summary>
            Casts page to the <see cref="T:Xtensive.Indexing.Implementation.LeafPage`2" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.Page`2.DescriptorPage">
      <summary>
            Gets <see cref="P:Xtensive.Indexing.Implementation.Page`2.DescriptorPage" /> of the index.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IHasMeasureResults`1">
      <summary>
            Indicates that this instance has some measure results associated with it.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IHasMeasureResults`1.MeasureResults">
      <summary>
            Gets the measurements.
            </summary>
      <value>The measurements.</value>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.DataPage`2">
      <summary>
            Base class for <see cref="T:Xtensive.Indexing.Implementation.InnerPage`2" />
            and <see cref="T:Xtensive.Indexing.Implementation.LeafPage`2" /> of the
            <see cref="T:Xtensive.Indexing.Index`2" />.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Node type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.GetKey(System.Int32)">
      <summary>
            Gets the key at the specified <paramref name="index" />.
            </summary>
      <param name="index">Index of the key to get.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.Seek(`0)">
      <summary>
            Seeks for the specified key.
            </summary>
      <param name="key">The key to seek for.</param>
      <returns>Standard seek operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Seeks for the specified ray.
            </summary>
      <param name="ray">The ray to seek for.</param>
      <returns>Standard seek operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.Remove(System.Int32)">
      <summary>
            Removes the key at the specified <paramref name="index" />.
            </summary>
      <param name="index">Index of the key to remove.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.Split">
      <summary>
            Splits the page into two pages.
            </summary>
      <returns>The page created during the split operation.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.Merge(Xtensive.Indexing.Implementation.DataPage{`0,`1})">
      <summary>
            Merges the page with the specified one.
            </summary>
      <param name="page">The page to merge with.</param>
      <returns>
        <see langword="True" /> if pages were merged into a single one;
            otherwise (i.e. if second page still contains the items), <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.RecalculateMeasures">
      <summary>
            Recalculates the all measures.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.AddToMeasures(`1)">
      <summary>
            Adds specified <paramref name="item" /> to all the measures.
            </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.AddToMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <summary>
            Adds all the measure results of specified <paramref name="hasMeasures" /> to all the measures.
            </summary>
      <param name="hasMeasures">The measure results owner.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.SubtractFromMeasures(`1)">
      <summary>
            Subtracts specified <paramref name="item" /> from all the measures.
            </summary>
      <param name="item">The item to subtract.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.SubtractFromMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <summary>
            Subtracts all the measure results of specified <paramref name="hasMeasures" /> from all the measures.
            </summary>
      <param name="hasMeasures">The measure results owner.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DataPage`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DataPage`2.KeyExtractor">
      <summary>
            Gets the key extractor (shortcut to <see cref="P:Xtensive.Indexing.IndexBase`2.KeyExtractor" /> property.
            </summary>
      <value>The key extractor.</value>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DataPage`2.Size">
      <summary>
            Gets the size of the page.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DataPage`2.CurrentSize">
      <summary>
            Gets or sets the current size of the page.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DataPage`2.MeasureResults">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DataPage`2.Key">
      <summary>
            Gets key of the page.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.DescriptorPage`2">
      <summary>
            Base class for index descriptor page.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DescriptorPage`2.AddMeasure(Xtensive.Indexing.Measures.IMeasure{`1})">
      <summary>
            Adds a <paramref name="measure" /> to the index.
            </summary>
      <param name="measure">Measure to add.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DescriptorPage`2.Clear">
      <summary>
            Called to clear the index.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DescriptorPage`2.Initialize">
      <summary>
            Initializes the descriptor page.
            Invoked e.g. by <see cref="M:Xtensive.Indexing.Implementation.DescriptorPage`2.Clear" /> method.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.DescriptorPage`2.#ctor(Xtensive.Indexing.IndexConfiguration{`0,`1},Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" />
      </summary>
      <param name="configuration">Index configuration.</param>
      <param name="provider">Index page provider this page is bound to.</param>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DescriptorPage`2.Measures">
      <summary>
            Gets the set of measures stored on this page.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.DescriptorPage`2.BloomFilter">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Indexing.BloomFilter.IBloomFilter`1" /> associated with the index.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.InnerPage`2">
      <summary>
            Inner page of the <see cref="T:Xtensive.Indexing.Index`2" />.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Node type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.GetKey(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.GetPageRef(System.Int32)">
      <summary>
            Gets the page reference at the specified <paramref name="index" />.
            </summary>
      <param name="index">The index to get the page reference at.</param>
      <returns>Page reference at the specified <paramref name="index" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.GetPage(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Implementation.DataPage`2" /> at the specified <paramref name="index" />
            by resolving the <see cref="T:Xtensive.Indexing.Implementation.IPageRef" /> at it.
            </summary>
      <param name="index">The index to get the page at.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.Implementation.DataPage`2" /> at the specified <paramref name="index" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Insert(System.Int32,`0,Xtensive.Indexing.Implementation.IPageRef)">
      <summary>
            Inserts the <paramref name="key" />-<paramref name="pageRef" /> pair at the specified <paramref name="index" />.
            </summary>
      <param name="index">The index to insert at.</param>
      <param name="key">The key to insert.</param>
      <param name="pageRef">The page reference to insert.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Remove(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Split">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.Merge(Xtensive.Indexing.Implementation.DataPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.RecalculateMeasures">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.AddToMeasures(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.SubtractFromMeasures(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.AddToMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.SubtractFromMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.InnerPage`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.InnerPage`2.Size">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.InnerPage`2.Key">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.InnerPage`2.Item(System.Int32)">
      <summary>
            The indexer.
            </summary>
      <param name="index">The index to get the value for.</param>
      <returns>A pair of key-reference at the specified index.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.IIndexPageProvider`2">
      <summary>
        <see cref="T:Xtensive.Indexing.Index`2" /> page provider - creates, stores and loads pages.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.AssignIdentifier(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <summary>
            Assigns (generates) an identifier to the page.
            </summary>
      <param name="page">Page to generate the identifier for.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Resolve(Xtensive.Indexing.Implementation.IPageRef)">
      <summary>
            Resolves identifier by providing its owner.
            </summary>
      <param name="identifier">Identifier to resolve.</param>
      <returns>Identifier owner.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.AddToCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <summary>
            Adds the specified page to cache.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.RemoveFromCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <summary>
            Removes the specified page from cache.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.GetFromCache(Xtensive.Indexing.Implementation.IPageRef)">
      <summary>
            Gets the page from cache by specified <paramref name="pageRef" />.
            </summary>
      <param name="pageRef">The page reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Flush">
      <summary>
            Flushes all cached page changes.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Clear">
      <summary>
            Clears the index.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.CreateSerializer">
      <summary>
            Creates the serializer for the specified page provider.
            </summary>
      <returns>Newly created serializer.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.GetBloomFilter(System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Gets the bloom filter for specified <paramref name="source" />.
            </summary>
      <param name="source">The source.</param>
      <returns>The bloom filter.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Initialize">
      <summary>
            Initializes the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Index">
      <summary>
            Gets the <see cref="P:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Index" /> this provider is bound to.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.IIndexPageProvider`2.IsInitialized">
      <summary>
            Indicates if index is already initialized.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.IIndexPageProvider`2.Features">
      <summary>
            Gets index features supported by the provider.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.LeafPage`2">
      <summary>
            Leaf page of the <see cref="T:Xtensive.Indexing.Index`2" />.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">A node value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.GetKey(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.GetItems(System.Int32,System.Int32)">
      <summary>
            Gets the specified range of items on the page.
            </summary>
      <param name="offset">The offset of the range to get.</param>
      <param name="count">The count of items to get.</param>
      <returns>The specified range of items on the page.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Insert(System.Int32,`1)">
      <summary>
            Inserts the <paramref name="item" /> at the specified index.
            </summary>
      <param name="index">The index to insert the item at.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Remove(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Split">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.Merge(Xtensive.Indexing.Implementation.DataPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.RecalculateMeasures">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.AddToMeasures(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.AddToMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.SubtractFromMeasures(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.SubtractFromMeasures(Xtensive.Indexing.Measures.IHasMeasureResults{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.LeafPage`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.LeafPage`2.Size">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.LeafPage`2.Key">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Implementation.LeafPage`2.Item(System.Int32)">
      <summary>
            Gets the <typeparamref name="TItem" /> at the specified index.
            </summary>
      <param name="index">The index of the item.</param>
    </member>
    <member name="T:Xtensive.Indexing.MeasuredItem`2">
      <summary>
            Describes measured item.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.MeasuredItem`2.KeyIsNew">
      <summary>
            Indicates whether key is new.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.MeasuredItem`2.Key">
      <summary>
            The key.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.MeasuredItem`2.Value">
      <summary>
            The value.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.MeasuredItem`2.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.MeasuredItem`2.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.MeasuredItem`2.#ctor(`0,`1,System.Boolean)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
      <param name="keyIsNew">Indicates whether key is new.</param>
    </member>
    <member name="T:Xtensive.Indexing.Providers.IndexPageProviderBase`2">
      <summary>
            Default base class for <see cref="T:Xtensive.Indexing.Index`2" /> page providers.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.GetBloomFilter(System.Collections.Generic.IEnumerable{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.AssignIdentifier(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Resolve(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.AddToCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.RemoveFromCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.GetFromCache(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Flush">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.CreateSerializer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Index">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Providers.IndexPageProviderBase`2.IsInitialized">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Providers.IndexPageProviderBase`2.Features">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Providers.StreamPageProvider`2">
      <summary>
            Serialize-and-read <see cref="T:System.IO.Stream" /> page provider.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.GetBloomFilter(System.Collections.Generic.IEnumerable{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.AssignIdentifier(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.Resolve(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.AddToCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.RemoveFromCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.GetFromCache(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.Flush">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.CreateSerializer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.Initialize">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.#ctor(System.String,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="fileName">File name.</param>
      <param name="cacheSize">Page cache size (in pages).</param>
    </member>
    <member name="M:Xtensive.Indexing.Providers.StreamPageProvider`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Providers.StreamPageProvider`2.Features">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Providers.StreamPageProvider`2.StreamProvider">
      <summary>
            Gets the stream provider.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Providers.StreamPageProvider`2.Serializer">
      <summary>
            Gets the serializer user by this page provider.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Providers.StreamPageProvider`2.OffsetSerializer">
      <summary>
            Gets the offset serializer user by this page provider.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.StreamPageRef`2">
      <summary>
            Reference to the index page stored in the stream.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.Equals(Xtensive.Indexing.Implementation.StreamPageRef{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.Create(System.Int64)">
      <summary>
            Creates the <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> with specified <paramref name="offset" />.
            </summary>
      <param name="offset">The <see cref="P:Xtensive.Indexing.Implementation.StreamPageRef`2.Offset" /> of <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> to create.</param>
      <returns>Newly created <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> with specified <paramref name="offset" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.StreamPageRef`2.Create(Xtensive.Indexing.Implementation.StreamPageRefType)">
      <summary>
            Creates the <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> of specified <paramref name="type" />.
            </summary>
      <param name="type">The type of <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> to create.</param>
      <returns>Newly created <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> of specified <paramref name="type" />.</returns>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.StreamPageRef`2.Offset">
      <summary>
            Gets the offset of serialized page data in stream.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.StreamPageRef`2.IsDefined">
      <summary>
            Gets a value indicating whether this reference is defined (has defined offset).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Implementation.StreamPageRef`2.Type">
      <summary>
            Gets the type of reference.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.StreamPageRefType">
      <summary>
        <see cref="T:Xtensive.Indexing.Implementation.StreamPageRef`2" /> types.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Implementation.IIndexSerializer`2">
      <summary>
        <see cref="T:Xtensive.Indexing.Index`2" /> serializer for page providers.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexSerializer`2.SerializeLeafPage(Xtensive.Indexing.Implementation.LeafPage{`0,`1})">
      <summary>
            Serializes the specified leaf page.
            </summary>
      <param name="page">The page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexSerializer`2.SerializeInnerPage(Xtensive.Indexing.Implementation.InnerPage{`0,`1})">
      <summary>
            Serializes the specified inner page.
            </summary>
      <param name="page">The inner page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexSerializer`2.SerializeDescriptorPage(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <summary>
            Serializes the specified descriptor page.
            </summary>
      <param name="page">The descriptor page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexSerializer`2.SerializeBloomFilter(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <summary>
            Serializes the bloom filter.
            </summary>
      <param name="page">The descriptor page.</param>
    </member>
    <member name="M:Xtensive.Indexing.Implementation.IIndexSerializer`2.SerializeEof(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <summary>
            Serializes "EOF" mark.
            </summary>
      <param name="page">The descriptor page.</param>
    </member>
    <member name="T:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2">
      <summary>
            Default base class for <see cref="T:Xtensive.Indexing.Index`2" /> page provider helpers.
            </summary>
      <typeparam name="TKey">Key type.</typeparam>
      <typeparam name="TItem">Value type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.SerializeLeafPage(Xtensive.Indexing.Implementation.LeafPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.SerializeInnerPage(Xtensive.Indexing.Implementation.InnerPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.SerializeDescriptorPage(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.SerializeBloomFilter(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.SerializeEof(Xtensive.Indexing.Implementation.DescriptorPage{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The <see cref="P:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.Provider" /> property value.</param>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Providers.Internals.IndexSerializerBase`2.Provider">
      <summary>
            Gets the provider this serializer belongs to.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.StreamSerializer`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The index page provider.</param>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.StreamSerializer`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.CollectionIndexBase">
      <summary>
            Base class for any <see cref="T:Xtensive.Indexing.CollectionIndex`2" />.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexBase.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndexBase.Name">
      <summary>
            Gets the name of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndexBase.Index">
      <summary>
            Gets the underlying index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndexBase.Count">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.INonUniqueIndex`2">
      <summary>
            Non-unique index contract.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TItem">The type of the item (should include both key and value).</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.INonUniqueIndex`2.GetItems(`0)">
      <summary>
            Gets the items with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <typeparamref name="TItem" /> instances.</returns>
    </member>
    <member name="T:Xtensive.Indexing.CollectionIndex`2">
      <summary>
            Universal generic index to be used with <see cref="T:Xtensive.Notifications.ICollectionChangeNotifier`1" /> implementors and 
            optionally with <see cref="T:Xtensive.Notifications.IChangeNotifier" /> implementors.
            </summary>
      <remarks>This type is not intended to be used directly. It throws <see cref="T:System.NotSupportedException" /> on 
            <see cref="M:Xtensive.Indexing.CollectionIndex`2.Add(`1)" />, <see cref="M:Xtensive.Indexing.CollectionIndex`2.Remove(`1)" />, <see cref="M:Xtensive.Indexing.CollectionIndex`2.Clear" /> operations.</remarks>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetStatistics">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.GetEntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.Resolve(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.#ctor(System.String,Xtensive.Notifications.ICollectionChangeNotifier{`1},Xtensive.Indexing.IUniqueIndex{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Index name.</param>
      <param name="collection">The collection to bind the index to.</param>
      <param name="implementation">The index implementor.</param>
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndex`2.#ctor(System.String,Xtensive.Notifications.ICollectionChangeNotifier{`1},Xtensive.Indexing.INonUniqueIndex{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">Index name.</param>
      <param name="collection">The collection to bind the index to.</param>
      <param name="implementation">The index implementor.</param>
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.Name">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.Index">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.KeyExtractor">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.KeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.EntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.AsymmetricKeyCompare">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.CollectionIndex`2.Measures">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.CollectionIndexSet`1">
      <summary>
            A set of indexes that serves the collection of <typeparamref name="TItem" />s.
            </summary>
      <typeparam name="TItem">The type of collection items.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.GetItem``1">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.GetItemName(Xtensive.Indexing.CollectionIndexBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.#ctor(Xtensive.Indexing.CollectionIndexBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.CollectionIndexSet`1.#ctor(Xtensive.Indexing.CollectionIndexBase,Xtensive.Indexing.CollectionIndexBase[])">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Composite.CompositeIndex`2">
      <summary>
            Composite index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Composite.CompositeIndex`2.GetStatistics">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.CompositeIndex`2.GetEntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.CompositeIndex`2.OnConfigured">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Composite.CompositeIndex`2.Segments">
      <summary>
            Gets the index segments.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4">
      <summary>
            The configuration of <see cref="T:Xtensive.Indexing.IOrderedIndex`2" /> wrapper.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TUniqueKey">The type of the unique key.</typeparam>
      <typeparam name="TUniqueItem">The type of the unique item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.#ctor(Xtensive.Indexing.IndexConfigurationBase{`2,`3})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="uniqueIndexConfiguration">The unique index configuration.</param>
    </member>
    <member name="P:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.UniqueIndexConfiguration">
      <summary>
            Gets or sets the configuration of the unique index.
            </summary>
      <value>The base index configuration.</value>
    </member>
    <member name="P:Xtensive.Indexing.UniqueIndexWrapperConfiguration`4.UniqueIndex">
      <summary>
            Gets or sets the unique index.
            </summary>
      <value>The unique index.</value>
    </member>
    <member name="T:Xtensive.Indexing.Composite.IndexConfiguration`2">
      <summary>
            A <see cref="T:Xtensive.Indexing.Composite.CompositeIndex`2" /> configuration.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the Item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexConfiguration`2.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexConfiguration`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexConfiguration`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexConfiguration`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexConfiguration`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="uniqueIndexConfiguration">The unique index configuration.</param>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexConfiguration`2.Segments">
      <summary>
            Gets the segment configurations.
            </summary>
      <value>The segment configurations.</value>
    </member>
    <member name="T:Xtensive.Indexing.Composite.IndexSegmentSet`2">
      <summary>
            Describes a set of segments composing the composite index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentSet`2.GetItemName(Xtensive.Indexing.Composite.IndexSegment{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentSet`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentSet`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentReader`2.#ctor(Xtensive.Indexing.Composite.IndexSegment{`0,`1},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="index">The index.</param>
      <param name="range">The range to read.</param>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentReader`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.RangeHandler`2">
      <summary>
             Represents a wrapper that handles all range-specific operations.
            </summary>
      <typeparam name="TNode">Node type to which range operations are applied.</typeparam>
      <typeparam name="TPoint">Type of the point of <see cref="T:Xtensive.Indexing.Range`1" />.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.RangeHandler`2.Intersect(`0,Xtensive.Indexing.Range{`1})">
      <summary>
             Intersects <paramref name="x" /> with <see cref="T:Xtensive.Indexing.Range`1" /><paramref name="y" />.
            </summary>
      <param name="x">Node to intersect with.</param>
      <param name="y">Range.</param>
      <returns>A result <typeparamref name="TNode" /> of the operation.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeHandler`2.Union(`0,`0)">
      <summary>
             Unions <paramref name="x" /> with <typeparamref name="TNode" /><paramref name="y" />.
            </summary>
      <param name="x">Node to union with.</param>
      <param name="y">Node.</param>
      <returns>
        <see cref="T:Xtensive.Collections.FixedList3`1" /> as result of the operation.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeHandler`2.Subtract(`0,Xtensive.Indexing.Range{`1})">
      <summary>
             Subtracts from <paramref name="x" /><see cref="T:Xtensive.Indexing.Range`1" /><paramref name="y" />.
            </summary>
      <param name="x">Minuend <typeparamref name="TNode" />.</param>
      <param name="y">Subtrahend <see cref="T:Xtensive.Indexing.Range`1" />.</param>
      <returns>
        <see cref="T:Xtensive.Collections.FixedList3`1" /> as a result of the operation.</returns>
    </member>
    <member name="P:Xtensive.Indexing.RangeHandler`2.Comparer">
      <summary>
             Gets <see cref="T:System.Collections.Generic.IComparer`1" /> instance that compares range' points.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.RangeHandler`2.RangeExtractor">
      <summary>
            Gets <see cref="T:System.Converter`2" /> range extractor.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.DefaultRangeHandler`2">
      <summary>
             Default implementation of <see cref="T:Xtensive.Indexing.RangeHandler`2" />. 
            </summary>
      <remarks>
             Casts <typeparamref name="TNode" /> to <see cref="T:Xtensive.Indexing.IHasRange`2" /> and calls interface methods. If cast is invalid, throws <see cref="T:System.InvalidOperationException" /> exception.
            </remarks>
      <typeparam name="TNode">Type of node.</typeparam>
      <typeparam name="TPoint">Type of <see cref="T:Xtensive.Indexing.Range`1" />' point.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.DefaultRangeHandler`2.#ctor(Xtensive.Comparison.AdvancedComparer{`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="comparer">Point comparer.</param>
      <exception cref="T:System.InvalidOperationException">
        <typeparamref name="TNode" /> could not be casted to <see cref="T:Xtensive.Indexing.IHasRange`2" /> interface.</exception>
    </member>
    <member name="T:Xtensive.Indexing.DictionaryIndex`2">
      <summary>
            Unique index based on <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.Replace(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.DictionaryIndex`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.DictionaryIndex`2.Count">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Entire`1">
      <summary>
            Provides additional positive and negative infinity 
            values or infinitesimal shift values to its type parameter <typeparamref name="T" />.
            Much like <see cref="T:System.Nullable`1" />, but for describing
            <see cref="T:Xtensive.Indexing.Entire`1" /> value type.
            </summary>
      <typeparam name="T">The type to extend with <see cref="P:Xtensive.Indexing.Entire`1.ValueType" /> information.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.Clone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.op_Explicit(Xtensive.Indexing.Entire{`0})~`0">
      <summary>
            Performs an explicit conversion from <see cref="T:Xtensive.Indexing.Entire`1" /> to <typeparamref name="T" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.op_Implicit(`0)~Xtensive.Indexing.Entire{`0}">
      <summary>
            Performs an implicit conversion from <typeparamref name="T" /> to <see cref="T:Xtensive.Indexing.Entire`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.op_Equality(Xtensive.Indexing.Entire{`0},Xtensive.Indexing.Entire{`0})">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="x">The first argument.</param>
      <param name="y">The second argument.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.op_Inequality(Xtensive.Indexing.Entire{`0},Xtensive.Indexing.Entire{`0})">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="x">The first argument.</param>
      <param name="y">The second argument.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.CompareTo(Xtensive.Indexing.Entire{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.CompareTo(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.Equals(Xtensive.Indexing.Entire{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.Equals(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.#ctor(Xtensive.Indexing.InfinityType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="infinityType">Type of the infinity.</param>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.#ctor(`0,Xtensive.Indexing.EntireValueType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The value.</param>
      <param name="lastValueType">
        <see cref="P:Xtensive.Indexing.Entire`1.ValueType" /> property value.</param>
    </member>
    <member name="M:Xtensive.Indexing.Entire`1.#ctor(`0,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The value.</param>
      <param name="infinitesimalShiftDirection">Infinitesimal shift direction. Can't have value Direction.None.</param>
    </member>
    <member name="P:Xtensive.Indexing.Entire`1.MinValue">
      <summary>
            The smallest possible value of <see cref="T:Xtensive.Indexing.Entire`1" /> (negative infinity). 
            </summary>
      <value>The negative infinity.</value>
    </member>
    <member name="P:Xtensive.Indexing.Entire`1.MaxValue">
      <summary>
            The largest possible value of <see cref="T:Xtensive.Indexing.Entire`1" /> (positive infinity). 
            </summary>
      <value>The positive infinity.</value>
    </member>
    <member name="P:Xtensive.Indexing.Entire`1.Value">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Entire`1.ValueType">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Entire`1.HasValue">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Composite.IndexSegment`2">
      <summary>
            Describes segment of composite index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Replace(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegment`2.Configure(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegment`2.SegmentName">
      <summary>
            Gets the name of the segment.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegment`2.SegmentNumber">
      <summary>
            Gets the segment number.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegment`2.CompositeIndex">
      <summary>
            Gets the composite index this instance belongs to.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegment`2.EntireConverter">
      <summary>
            Gets the entire converter.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegment`2.MeasureResults">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2">
      <summary>
            The configuration of index segment.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the indexed item.</typeparam>
      <seealso cref="T:Xtensive.Indexing.IndexConfigurationBase`2" />
      <seealso cref="T:Xtensive.Indexing.Composite.CompositeIndex`2" />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="segmentName">The name of the segment.</param>
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.SegmentName">
      <summary>
            Gets or sets the name of the segment.
            </summary>
      <value>The name of the segment.</value>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.SegmentNumber">
      <summary>
            Gets the segment number.
            </summary>
      <value>The segment number.</value>
    </member>
    <member name="P:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2.MeasureMapping">
      <summary>
            Gets the measure mapping.
            </summary>
      <value>The measure mapping.</value>
    </member>
    <member name="T:Xtensive.Indexing.Composite.IndexSegmentConfigurationSet`2">
      <summary>
            A set of <see cref="T:Xtensive.Indexing.Composite.IndexSegmentConfiguration`2" /> items.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <seealso cref="T:Xtensive.Indexing.IndexConfigurationBase`2" />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfigurationSet`2.GetItemName(Xtensive.Indexing.Composite.IndexSegmentConfiguration{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfigurationSet`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Composite.IndexSegmentConfigurationSet`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.EntireHasher`1.GetHash(Xtensive.Indexing.Entire{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.EntireHasher`1.GetHashes(Xtensive.Indexing.Entire{`0},System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.EntireValueType">
      <summary>
            Enumerates possible types of entire value type.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.Default">
      <summary>
            Default type. Is equal to <see cref="F:Xtensive.Indexing.EntireValueType.Exact" />.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.Exact">
      <summary>
            The exact value. No infinity.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.PositiveInfinitesimal">
      <summary>
            Exact value plus infinitesimal.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.NegativeInfinitesimal">
      <summary>
            Exact value minus infinitesimal.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.PositiveInfinity">
      <summary>
            Positive infinity.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.EntireValueType.NegativeInfinity">
      <summary>
            Negative infinity.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.IndexFactory">
      <summary>
            Index factory. Creates and configures indexes.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.IndexFactory.CreateUnique``3(Xtensive.Indexing.IndexConfigurationBase{``0,``1})">
      <summary>
            Creates the unique index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImplementation">The type of the index implementation.</typeparam>
      <param name="configuration">The index descriptor.</param>
      <returns>Newly created and initialized with <paramref name="configuration" /><see cref="T:Xtensive.Indexing.IUniqueIndex`2" /> instance</returns>
    </member>
    <member name="M:Xtensive.Indexing.IndexFactory.CreateUniqueOrdered``3(Xtensive.Indexing.IndexConfigurationBase{``0,``1})">
      <summary>
            Creates the unique index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImplementation">The type of the index implementation.</typeparam>
      <param name="configuration">The index descriptor.</param>
      <returns>Newly created and initialized with <paramref name="configuration" /><see cref="T:Xtensive.Indexing.IUniqueIndex`2" /> instance</returns>
    </member>
    <member name="M:Xtensive.Indexing.IndexFactory.CreateNonUnique``4(Xtensive.Indexing.NonUniqueIndexConfiguration{``0,``1,``2})">
      <summary>
            Creates the non-unique index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TUniqueKey">The type of the unique key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImplementation">The type of the underlying index implementation.</typeparam>
      <param name="configuration">The index configuration.</param>
      <returns>
            Newly created and initialized with <paramref name="configuration" /><see cref="T:Xtensive.Indexing.INonUniqueIndex`2" /> instance.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.IndexFactory.CreateDifferential``4(Xtensive.Indexing.Differential.DifferentialIndexConfiguration{``0,``1})">
      <summary>
            Creates the differential index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImplementation">The type of the underlying index implementation.</typeparam>
      <typeparam name="TImpl">The type of the unique ordered index implementation.</typeparam>
      <param name="configuration">The configuration.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.IndexFactory.CreateComposite``3(Xtensive.Indexing.Composite.IndexConfiguration{``0,``1})">
      <summary>
            Creates the composite index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImplementation">The type of the underlying unique index implementation.</typeparam>
      <param name="configuration">The index configuration.</param>
      <returns>
            Newly created and initialized with <paramref name="configuration" /><see cref="T:Xtensive.Indexing.Composite.CompositeIndex`2" /> instance.
            </returns>
    </member>
    <member name="T:Xtensive.Indexing.InfinityType">
      <summary>
            Enumerates possible types of infinity.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.InfinityType.None">
      <summary>
            No infinity.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.InfinityType.Positive">
      <summary>
            Positive infinity.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.InfinityType.Negative">
      <summary>
            Negative infinity.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.ICollectionIndexProvider">
      <summary>
            Creates indexes for collections.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.ICollectionIndexProvider.CreateIndex``3(System.String,Xtensive.Notifications.ICollectionChangeNotifier{``1},System.Boolean,System.Converter{``1,``0})">
      <summary>
            Creates either unique or non-unique index for the <paramref name="owner" />.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the value.</typeparam>
      <typeparam name="TImplementation">The type of the implementation.</typeparam>
      <param name="name">The name of the index.</param>
      <param name="owner">The collection to be indexed.</param>
      <param name="unique">
        <see langword="True" /> if created index should be unique;
            otherwise, <see langword="false" />.</param>
      <param name="extractKey">Key extractor.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.IIndex" /> instance.
            </returns>
      <remarks>This method always creates <see cref="T:Xtensive.Indexing.CollectionIndex`2" /> instance
            wrapping the implementation of specified type (<typeparamref name="TImplementation" />).</remarks>
    </member>
    <member name="M:Xtensive.Indexing.ICollectionIndexProvider.CreateUniqueIndex``3(System.String,Xtensive.Notifications.ICollectionChangeNotifier{``1},System.Converter{``1,``0})">
      <summary>
            Creates unique index for the <paramref name="owner" />.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the value.</typeparam>
      <param name="name">The name of the index.</param>
      <param name="owner">The collection to be indexed.</param>
      <param name="extractKey">Key extractor.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.IIndex`2" /> instance.
            </returns>
      <remarks>This method always creates <see cref="T:Xtensive.Indexing.CollectionIndex`2" /> instance
            wrapping the implementation of specified type (<typeparamref name="TImplementation" />).</remarks>
    </member>
    <member name="M:Xtensive.Indexing.ICollectionIndexProvider.CreateNonUniqueIndex``3(System.String,Xtensive.Notifications.ICollectionChangeNotifier{``1},System.Converter{``1,``0})">
      <summary>
            Creates non-unique index for the <paramref name="owner" />.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the value.</typeparam>
      <param name="name">The name of the index.</param>
      <param name="owner">The collection to be indexed.</param>
      <param name="extractKey">Key extractor.</param>
      <returns>
        <see cref="T:Xtensive.Indexing.IIndex`2" /> instance.
            </returns>
      <remarks>This method always creates <see cref="T:Xtensive.Indexing.CollectionIndex`2" /> instance
            wrapping the implementation of specified type (<typeparamref name="TImplementation" />).</remarks>
    </member>
    <member name="T:Xtensive.Indexing.IIndexedCollection`1">
      <summary>
            Collection having a set of automatically maintained indexes contract.
            </summary>
      <typeparam name="TItem">The type of collection items.</typeparam>
    </member>
    <member name="P:Xtensive.Indexing.IIndexedCollection`1.Indexes">
      <summary>
            Gets the set of collection indexes.
            </summary>
      <value>The set of indexes.</value>
    </member>
    <member name="T:Xtensive.Indexing.IHasRange`2">
      <summary>
            Should be implemented by an object that contains <see cref="T:Xtensive.Indexing.Range`1" />.
            </summary>
      <typeparam name="TObject">The type of object containing the range.</typeparam>
      <typeparam name="TPoint">The type of range point.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.IHasRange`2.Merge(`0,Xtensive.Comparison.AdvancedComparer{`1})">
      <summary>
            Merges the object with another one.
            </summary>
      <param name="other">The object to merge with.</param>
      <param name="comparer">Point comparer to use.</param>
      <returns>A sequence of up to 3 <typeparamref name="TObject" /> instances
            representing the result of merge.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IHasRange`2.Subtract(Xtensive.Indexing.Range{`1},Xtensive.Comparison.AdvancedComparer{`1})">
      <summary>
            Subtracts the specified object from this one.
            </summary>
      <param name="other">The object to subtract.</param>
      <param name="comparer">Point comparer to use.</param>
      <returns>A sequence of up to 3 <typeparamref name="TObject" /> instances
            representing the result of subtraction.</returns>
    </member>
    <member name="M:Xtensive.Indexing.IHasRange`2.Intersect(Xtensive.Indexing.Range{`1},Xtensive.Comparison.AdvancedComparer{`1})">
      <summary>
            Intersects the object with another one.
            </summary>
      <param name="other">The object to intersect with.</param>
      <param name="comparer">Point comparer to use.</param>
      <returns>The result of subtraction.</returns>
    </member>
    <member name="P:Xtensive.Indexing.IHasRange`2.Range">
      <summary>
            Gets range associated with the object.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexReader`3.#ctor(Xtensive.Indexing.NonUniqueIndex{`0,`1,`2},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="index">The index.</param>
      <param name="range">The range to read.</param>
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexReader`3.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndexReader`2.#ctor(Xtensive.Indexing.SortedListIndex{`0,`1},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="index">The index.</param>
      <param name="range">The range to read.</param>
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndexReader`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.Joiner">
      <summary>
            A class providing various join algorithms.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.MergeJoin``3(Xtensive.Indexing.IOrderedEnumerable{``0,``1},Xtensive.Indexing.IOrderedEnumerable{``0,``2})">
      <summary>
            Merge join implementation.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.MergeJoinLeft``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Converter{``1,``0},System.Converter{``2,``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            "Merge join left" implementation.
            "Left" implies any item from the left sequence will be kept in the output sequence,
            even if there is no corresponding item in the right sequence; if so,
            default value for <typeparamref name="TRightValue" /> will be used as matching one there.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <param name="keyExtractorLeft">The key extractor for the left sequence.</param>
      <param name="keyExtractorRight">The key extractor for the right sequence.</param>
      <param name="comparer">The comparer.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.MergeJoinLeft``3(Xtensive.Indexing.IOrderedEnumerable{``0,``1},Xtensive.Indexing.IOrderedEnumerable{``0,``2})">
      <summary>
            "Merge join left" implementation.
            "Left" implies any item from the left sequence will be kept in the output sequence,
            even if there is no corresponding item in the right sequence; if so,
            default value for <typeparamref name="TRightValue" /> will be used as matching one there.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.LoopJoin``3(System.Collections.Generic.IEnumerable{``1},Xtensive.Indexing.IOrderedEnumerable{``0,``2},System.Converter{``1,``0})">
      <summary>
            Loop join implementation.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <param name="keyExtractor">The key extractor.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.LoopJoinLeft``3(System.Collections.Generic.IEnumerable{``1},Xtensive.Indexing.IOrderedEnumerable{``0,``2},System.Converter{``1,``0})">
      <summary>
            "Loop join left" implementation.
            "Left" implies any item from the left sequence will be kept in the output sequence,
            even if there is no corresponding item in the right sequence; if so,
            default value for <typeparamref name="TRightValue" /> will be used as matching one there.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <param name="keyExtractor">The key extractor.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.NestedLoopJoin``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Converter{``1,``0},System.Converter{``2,``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Nested loop join implementation.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <param name="keyExtractorLeft">The key extractor for the left sequence.</param>
      <param name="keyExtractorRight">The key extractor for the right sequence.</param>
      <param name="comparer">The comparer.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Joiner.NestedLoopJoinLeft``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Converter{``1,``0},System.Converter{``2,``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            "Nested loop join left" implementation.
            "Left" implies any item from the left sequence will be kept in the output sequence,
            even if there is no corresponding item in the right sequence; if so,
            default value for <typeparamref name="TRightValue" /> will be used as matching one there.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TRightValue">The type of the right value.</typeparam>
      <param name="left">The left sequence.</param>
      <param name="right">The right sequence.</param>
      <param name="keyExtractorLeft">The key extractor for the left sequence.</param>
      <param name="keyExtractorRight">The key extractor for the right sequence.</param>
      <param name="comparer">The comparer.</param>
      <returns>Join operation result.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IMeasure`1">
      <summary>
            Defines measure for some set of items - e.g. count of items.
            </summary>
      <typeparam name="TItem">The type of item in item collection this measure is defined for.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.Reset">
      <summary>
            Resets result of measurement to its default state.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.Add(`0)">
      <summary>
            Adds the specified item to the current measure.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.Subtract(`0)">
      <summary>
            Removes the specified item from the current measure.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.Add(Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Adds measure to the current one and returns new measure.
            </summary>
      <remarks>Does not modify current measure.</remarks>
      <param name="measure">The measure to add.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.Subtract(Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Subtracts measure from the current one and returns new measure.
            </summary>
      <remarks>Does not modify current measure.</remarks>
      <param name="measure">The measure to subtract.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.AddWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Adds measure to the current one.
            </summary>
      <param name="measure">The measure to add.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.SubtractWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Subtracts measure from the current one.
            </summary>
      <param name="measure">The measure to subtract.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.CreateNew">
      <summary>
            Creates new instance of current measure.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`1.CreateNew(System.String)">
      <summary>
            Creates new instance of current measure with the specified name.
            </summary>
      <param name="newName">The new measure name.</param>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasure`1.Result">
      <summary>
            Gets result of the measurement.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasure`1.Name">
      <summary>
            Gets name of the current measure.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult">
      <summary>
            Gets a value indicating whether this instance has value.
            </summary>
      <value>
        <see langword="true" /> if this instance has value; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IMeasure`2">
      <summary>
            Defines measure for some set of items - e.g. count of items.
            </summary>
      <typeparam name="TItem">The type of item in item collection this measure is defined for.</typeparam>
      <typeparam name="TResult">The type of measurement result.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasure`2.CreateNew(`1)">
      <summary>
            Creates new instance of current measure and initializes it with supplied result.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasure`2.ResultExtractor">
      <summary>
            Gets the delegate measuring <typeparamref name="TItem" /> - i.e. converting it to <typeparamref name="TResult" />.
            </summary>
      <value>The measuring delegate.</value>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasure`2.Result">
      <summary>
            Gets result of the measurement.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Measures.MeasureBase`2">
      <summary>
            Base class for measures.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Subtract(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.CreateNew(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.CreateNew(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Add(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Subtract(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.AddWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.SubtractWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Add(`1)">
      <summary>
            Adds the specified result to the current measure.
            </summary>
      <param name="extracted">Extracted result.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.Subtract(`1)">
      <summary>
            Subtracts the specified result from the current measure.
            </summary>
      <param name="extracted">Extracted result.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.#ctor(System.String,System.Converter{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Name" /> property value.</param>
      <param name="resultExtractor">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.ResultExtractor" /> property value.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureBase`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Name" /> property value.</param>
      <param name="resultExtractor">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.ResultExtractor" /> property value.</param>
      <param name="result">Initial <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Result" /> property value.</param>
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureBase`2.Name">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureBase`2.ResultExtractor">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureBase`2.Result">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureBase`2.HasResult">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.AdditiveMeasure`2">
      <summary>
            Base class for any additive measure.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.Measures.AdditiveMeasure`2.Arithmetic">
      <summary>
            The arithmetics.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.Subtract(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.AddWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.SubtractWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.Add(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.Subtract(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.#ctor(System.String,System.Converter{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.AdditiveMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.ComparableMeasure`2">
      <summary>
            Base class for any comparable measure.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.ComparableMeasure`2.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.ComparableMeasure`2.#ctor(System.String,System.Converter{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.ComparableMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.ComparableMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="name">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Name" /> property value.</param>
      <param name="resultExtractor">
        <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.ResultExtractor" /> property value.</param>
      <param name="result">Initial <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Result" /> property value.</param>
      <param name="count">Initial <see cref="P:Xtensive.Indexing.Measures.ComparableMeasure`2.Count" /> property value.</param>
    </member>
    <member name="P:Xtensive.Indexing.Measures.ComparableMeasure`2.Count">
      <summary>
            Gets or sets the count of the same items.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Measures.CountMeasure`2">
      <summary>
            A measure providing count of items.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measurement result.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.Measures.CountMeasure`2.CommonName">
      <summary>
            Common (the only possible) name of this measure.
            Value is "Count".
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.CountMeasure`2.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.CountMeasure`2.CreateNew(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.CountMeasure`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.CountMeasure`2.#ctor(`1)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="result">Initial <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Result" /> property value.</param>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IMeasureResultSet`1">
      <summary>
            Represent a set of measurements for a <see cref="T:Xtensive.Indexing.Measures.IMeasureSet`1" />.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasureResultSet`1.Add(`0)">
      <summary>
            Adds the specified item to all measure results.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" /> if all measure results were updated successfully 
            (<see cref="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult" /> is <see langword="true" />), 
            otherwise - <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasureResultSet`1.Subtract(`0)">
      <summary>
            Subtracts the specified item from all measure results.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <see langword="true" /> if all measure results where updated successfully 
            (<see cref="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult" /> is <see langword="true" />), 
            otherwise - <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasureResultSet`1.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasureResultSet`1.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Measures.IMeasure`1" /> at the specified index.
            </summary>
      <value>The <see cref="T:Xtensive.Indexing.Measures.IMeasure`1" />.</value>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasureResultSet`1.Item(System.String)">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Measures.IMeasure`1" /> by specified name.
            </summary>
      <value>The <see cref="T:Xtensive.Indexing.Measures.IMeasure`1" />.</value>
    </member>
    <member name="P:Xtensive.Indexing.Measures.IMeasureResultSet`1.IsConsistent">
      <summary>
            Gets a value indicating whether this instance is consistent - i.e. all 
            contained <see cref="T:Xtensive.Indexing.Measures.IMeasure`1" /> instances have results.
            </summary>
      <value>
        <see langword="True" /> if this instance is consistent; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Indexing.Measures.IMeasureSet`1">
      <summary>
            A set of measures that serves the collection of <typeparamref name="TItem" />s.
            </summary>
      <typeparam name="TItem">The type of collection item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.IMeasureSet`1.GetItem``1(System.String)">
      <summary>
            Gets measure by name.
            </summary>
      <typeparam name="TMeasure">Measure type.</typeparam>
      <param name="name">Measure name.</param>
      <returns>
        <typeparamref name="TMeasure" /> measure.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Measures.MaxMeasure`2">
      <summary>
            A measure providing maximum of the items.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.CreateNew(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.Subtract(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.AddWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.SubtractWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.Add(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.Subtract(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.#ctor(System.String,System.Converter{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MaxMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1,System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.MeasureResultSet`1">
      <summary>
            A set of measurements.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureResultSet`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureResultSet`1.Subtract(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureResultSet`1.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureResultSet`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureResultSet`1.#ctor(Xtensive.Indexing.Measures.IMeasureSet{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="measures">The initial content of the set.</param>
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureResultSet`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureResultSet`1.Item(System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureResultSet`1.IsConsistent">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Measures.MeasureResultSet`1.Count">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.MeasureSet`1">
      <summary>
            A configurable set of measures for a collection of <typeparamref name="TItem" />s.
            </summary>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureSet`1.GetItem``1(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureSet`1.GetItemName(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureSet`1.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureSet`1.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.MeasureUtils`1">
      <summary>
        <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" />-related utilities.
            </summary>
      <typeparam name="TItem">Type of measurable item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.EnsureMeasurementsAreNotNull(Xtensive.Indexing.Measures.IMeasure{`0},Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Ensures that the specified arguments are not null.
            </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.EnsureMeasurementsHaveValue(Xtensive.Indexing.Measures.IMeasure{`0},Xtensive.Indexing.Measures.IMeasure{`0})">
      <summary>
            Ensures that the both measurements have value.
            </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.EnsureMeasurementHasValue(Xtensive.Indexing.Measures.IMeasure{`0},System.String)">
      <summary>
            Ensures that the measurement has value.
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="name">The name of the measurement.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.GetMeasurements(Xtensive.Indexing.Measures.IMeasureResultSet{`0},System.String[])">
      <summary>
            Gets the measurement results.
            </summary>
      <param name="measureResults">The measurements.</param>
      <param name="names">The names of measures.</param>
      <returns>The <see cref="T:System.Array" /> of measurement results.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.BatchAdd(Xtensive.Indexing.Measures.IMeasureResultSet{`0},Xtensive.Indexing.Measures.IMeasureResultSet{`0})">
      <summary>
            Adds one set of measure results to another one.
            </summary>
      <param name="current">Current measurements results.</param>
      <param name="appliedResults">Second measurements results.</param>
      <returns>
        <see langword="true" /> if all measureResults were completed successfully 
            (<see cref="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult" /> is <see langword="true" />), 
            otherwise - <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.BatchSubtract(Xtensive.Indexing.Measures.IMeasureResultSet{`0},Xtensive.Indexing.Measures.IMeasureResultSet{`0})">
      <summary>
            Subtracts the one set of measure results from another one.
            </summary>
      <param name="current">Measure results to subtract from.</param>
      <param name="appliedResults">Second measurements set.</param>
      <returns>
        <see langword="true" /> if all measureResults were completed successfully 
            (<see cref="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult" /> is <see langword="true" />), 
            otherwise - <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.BatchRecalculate(Xtensive.Indexing.Measures.IMeasureResultSet{`0},System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Recalculates the measure results that have no value.
            </summary>
      <param name="measureResults">The measure results.</param>
      <param name="enumerable">The enumerable.</param>
      <returns>
        <see langword="true" /> if all measure results were completed successfully 
            (<see cref="P:Xtensive.Indexing.Measures.IMeasure`1.HasResult" /> is <see langword="true" />), 
            otherwise - <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.BatchCalculate(Xtensive.Indexing.Measures.IMeasureSet{`0},System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Calculates measurements for provided <paramref name="enumerable" />.
            </summary>
      <param name="measures">Measures to calculate.</param>
      <param name="enumerable">Elements to calculate measure for.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.BatchCalculate(Xtensive.Indexing.Measures.IMeasure{`0},System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Calculates measurement for provided <paramref name="enumerable" /> and returns new measure.
            </summary>
      <param name="measure">Measure to calculate.</param>
      <param name="enumerable">Elements to calculate measure for.</param>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MeasureUtils`1.GetMeasures(Xtensive.Indexing.Measures.IMeasureSet{`0},System.String[])">
      <summary>
            Returns an <see cref="T:Xtensive.Indexing.Measures.IMeasureSet`1" /> for provided <paramref name="measures" /> by their <paramref name="names" />.
            </summary>
      <param name="measures">The source measures.</param>
      <param name="names">Names of measures.</param>
    </member>
    <member name="T:Xtensive.Indexing.Measures.MinMeasure`2">
      <summary>
            A measure providing minimum of the items.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.CreateNew(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.Subtract(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.AddWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.SubtractWith(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.Add(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.Subtract(Xtensive.Indexing.Measures.IMeasure{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.#ctor(System.String,System.Converter{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.MinMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1,System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Measures.SizeMeasure`1">
      <summary>
            A measure providing size allocated by the items.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.Measures.SizeMeasure`1.CommonName">
      <summary>
            Common (the only possible) name of this measure.
            Value is "Size".
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.SizeMeasure`1.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.SizeMeasure`1.CreateNew(System.Int64)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.SizeMeasure`1.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Indexing.Measures.SizeMeasure`1.#ctor(System.Int64)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="result">Initial <see cref="P:Xtensive.Indexing.Measures.MeasureBase`2.Result" /> property value.</param>
    </member>
    <member name="T:Xtensive.Indexing.Measures.SumMeasure`2">
      <summary>
            A measure providing sum of the items.
            </summary>
      <typeparam name="TItem">Type of measured item.</typeparam>
      <typeparam name="TResult">Type of measure value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Measures.SumMeasure`2.CreateNew">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.SumMeasure`2.CreateNew(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.SumMeasure`2.#ctor(System.String,System.Converter{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Measures.SumMeasure`2.#ctor(System.String,System.Converter{`0,`1},`1)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.NonUniqueIndex`3">
      <summary>
            Implements <see cref="T:Xtensive.Indexing.INonUniqueIndex`2" /> wrapper over <see cref="T:Xtensive.Indexing.IUniqueIndex`2" /> instance.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TUniqueKey">The type of the unique key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetStatistics">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetEntireKeyComparer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Contains(`2)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetItems(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Add(`2)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Remove(`2)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Replace(`2)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.OnConfigured">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndex`3.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`2})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.NonUniqueIndex`3.UniqueIndex">
      <summary>
            Gets the underlying unique index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.NonUniqueIndex`3.EntireConverter">
      <summary>
            Gets the entire converter.
            </summary>
      <value>The key converter.</value>
    </member>
    <member name="P:Xtensive.Indexing.NonUniqueIndex`3.Count">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.NonUniqueIndexConfiguration`3">
      <summary>
            Index configuration. 
            Used by <see cref="T:Xtensive.Indexing.NonUniqueIndex`3" /> 
            to unify index initialization and configuration.
            </summary>
      <typeparam name="TKey">The type of the index key.</typeparam>
      <typeparam name="TUniqueKey">The type of unique index key.</typeparam>
      <typeparam name="TItem">The type of the index item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexConfiguration`3.Validate">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexConfiguration`3.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexConfiguration`3.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.NonUniqueIndexConfiguration`3.#ctor(Xtensive.Indexing.IndexConfigurationBase{`1,`2})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.NonUniqueIndexConfiguration`3.EntireConverter">
      <summary>
            Gets or sets the key converter.
            </summary>
      <value>The key converter.</value>
    </member>
    <member name="T:Xtensive.Indexing.Range`1">
      <summary>
            Range (continuous set of points) over a set of points 
            of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">A type of point.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.Range`1.Empty">
      <summary>
            An empty <see cref="T:Xtensive.Indexing.Range`1" /> for type <typeparamref name="T" />.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.Range`1.Full">
      <summary>
            Full <see cref="T:Xtensive.Indexing.Range`1" /> for type <typeparamref name="T" />.
            Equals to <see cref="F:Xtensive.Indexing.Range`1.Empty" />, if upper or lower range boundary for this type is absent.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.Contains(`0)">
      <summary>
            Check if range contains specified point.
            </summary>
      <param name="point">Point to check for containment.</param>
      <returns>
        <see langword="True" /> if range contains specified point;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.Intersects(Xtensive.Indexing.Range{`0})">
      <summary>
            Check if range intersects with the specified one.
            </summary>
      <param name="other">Range to check for intersection.</param>
      <returns>
        <see langword="True" /> if range intersects with the specified one;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.CompareTo(Xtensive.Indexing.Range{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Range`1.op_Equality(Xtensive.Indexing.Range{`0},Xtensive.Indexing.Range{`0})">
      <summary>
            Compares two <see cref="T:Xtensive.Indexing.Range`1" /> instances.
            </summary>
      <param name="x">First <see cref="T:Xtensive.Indexing.Range`1" />.</param>
      <param name="y">Second <see cref="T:Xtensive.Indexing.Range`1" />.</param>
      <returns>
        <see langword="true" /> if they are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.op_Inequality(Xtensive.Indexing.Range{`0},Xtensive.Indexing.Range{`0})">
      <summary>
            Compares two <see cref="T:Xtensive.Indexing.Range`1" /> instances.
            </summary>
      <param name="x">First <see cref="T:Xtensive.Indexing.Range`1" />.</param>
      <param name="y">Second <see cref="T:Xtensive.Indexing.Range`1" />.</param>
      <returns>
        <see langword="false" /> if they are equal; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.Equals(Xtensive.Indexing.Range{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Range`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Range`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Range`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Range`1.#ctor(Xtensive.Core.Pair{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="endpoints">Endpoints of the range.</param>
    </member>
    <member name="M:Xtensive.Indexing.Range`1.#ctor(`0,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="xPoint">First endpoint of the range.</param>
      <param name="yPoint">Second endpoint of the range.</param>
    </member>
    <member name="P:Xtensive.Indexing.Range`1.IsEmpty">
      <summary>
            Indicates whether range is an empty range (contains no any point).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Range`1.EndPoints">
      <summary>
            Gets the endpoints of this instance.
            </summary>
      <value>The endpoints.</value>
    </member>
    <member name="T:Xtensive.Indexing.RangeExtensions">
      <summary>
        <see cref="T:Xtensive.Indexing.Range`1" /> extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.GetDirection``1(Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Gets the <see cref="T:Xtensive.Core.Direction" /> of the range 
            relatively to specified <paramref name="comparer" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">Range to get the direction of.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>The <see cref="T:Xtensive.Core.Direction" /> of the range 
            relatively to specified <paramref name="comparer" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.GetLowerEndpoint``1(Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Gets lower endpoint of the range
            relatively to specified <paramref name="comparer" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">Range to get the lower endpoint of.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>The the lower endpoint of the range
            relatively to specified <paramref name="comparer" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.GetLowerEndpoint``1(Xtensive.Indexing.Range{``0},Xtensive.Core.Direction)">
      <summary>
            Gets lower endpoint of the range
            relatively to specified <paramref name="direction" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">Range to get the lower endpoint of.</param>\
            <param name="direction">Assumed range direction.</param><returns>The the lower endpoint of the range
            relatively to specified <paramref name="direction" />.</returns></member>
    <member name="M:Xtensive.Indexing.RangeExtensions.GetHigherEndpoint``1(Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Gets higher endpoint of the range
            relatively to specified <paramref name="comparer" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">Range to get the higher endpoint of.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>The the higher endpoint of the range
            relatively to specified <paramref name="comparer" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.GetHigherEndpoint``1(Xtensive.Indexing.Range{``0},Xtensive.Core.Direction)">
      <summary>
            Gets higher endpoint of the range
            relatively to specified <paramref name="direction" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">Range to get the higher endpoint of.</param>
      <param name="direction">Assumed range direction.</param>
      <returns>The the higher endpoint of the range
            relatively to specified <paramref name="direction" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Redirect``1(Xtensive.Indexing.Range{``0},Xtensive.Core.Direction,Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Converts the specified <paramref name="range" /> to positively directed
            relatively to specified <paramref name="comparer" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range to convert.</param>
      <param name="newDirection">The new direction of the range.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>Positively directed range (relatively to specified <paramref name="comparer" />), 
            which <see cref="P:Xtensive.Indexing.Range`1.EndPoints" /> are the same as of specified <paramref name="range" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Invert``1(Xtensive.Indexing.Range{``0})">
      <summary>
            Inverts the specified range - i.e. exchanges its endpoints.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range to invert.</param>
      <returns>Inverted range.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Contains``1(Xtensive.Indexing.Range{``0},``0,Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Check if range contains specified point.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range to check.</param>
      <param name="point">The point to check for containment.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>
        <see langword="True" /> if range contains specified point;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Contains``1(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{``0}},``0,System.Func{Xtensive.Indexing.Entire{``0},``0,System.Int32})">
      <summary>
            Check if range contains specified point.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range to check.</param>
      <param name="point">The point to check for containment.</param>
      <param name="asymmetricCompare">The comparer to use.</param>
      <returns>
        <see langword="True" /> if range contains specified point;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Intersects``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Check if range intersects with the specified one.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="first">The first range to check.</param>
      <param name="second">The second range to check.</param>
      <param name="comparer">Comparer to use.</param>
      <returns>
        <see langword="True" /> if ranges intersect with each other;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.CompareTo``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="first">The first range to compare.</param>
      <param name="second">The range to compare with the <paramref name="first" /> one.</param>
      <param name="comparer">The comparer.</param>
      <returns>Standard comparison result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.EqualTo``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="first">The first range to compare.</param>
      <param name="second">The range to compare with the <paramref name="first" /> one.</param>
      <param name="comparer">The comparer.</param>
      <returns>
        <see langword="True" /> if the current object is equal to the <paramref name="second" /> parameter; 
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Merge``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Merges two specified ranges.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The first range.</param>
      <param name="other">The second range.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>Merge operation result - up to 2 ranges.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Subtract``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Subtracts the <paramref name="subtracted" /> range from the specified <paramref name="range" />.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range to subtract from.</param>
      <param name="subtracted">The range to subtract.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>Subtraction result - up to 2 ranges.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.Intersect``1(Xtensive.Indexing.Range{``0},Xtensive.Indexing.Range{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Intersects the specified <paramref name="range" /> with the <paramref name="other" /> one.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Range`1" /> endpoints.</typeparam>
      <param name="range">The range.</param>
      <param name="other">The other.</param>
      <param name="comparer">The comparer.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.IsSimilar``1(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{``0}},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{``0}})">
      <summary>
            Determines whether the specified ranges are similar. 
            I.e., range' endpoints should have same structure (infinities and shifts on the same places).
            </summary>
      <param name="range">The range.</param>
      <param name="other">The other range.</param>
      <returns>
        <see langword="true" /> if the specified range is similar; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeExtensions.IsEqualityRange``1(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{``0}},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Determines whether specified <paramref name="range" /> has equals endpoints 
            and does not contains infinities or shifts for <see cref="T:Xtensive.Indexing.Entire`1" />.
            </summary>
      <typeparam name="T">Endpoint type.</typeparam>
      <param name="range">The range.</param>
      <param name="comparer">Endpoint comparer.</param>
      <returns>
        <see langword="true" /> if specified range has equals endpoints; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Indexing.Ray`1">
      <summary>
            Ray on an ordered set of items of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type of item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.Contains(`0)">
      <summary>
            Checks if this instance contains specified point.
            </summary>
      <param name="point">Point to check for containment.</param>
      <returns>
        <see langword="True" /> if this instance contains the specified point; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.Intersects(Xtensive.Indexing.Ray{`0})">
      <summary>
            Checks if ray intersects with another ray (i.e. they have common part).
            </summary>
      <param name="other">Ray to check for intersection.</param>
      <returns>
        <see langword="True" /> if ray intersects with the specified ray; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.CompareTo(Xtensive.Indexing.Ray{`0})">
      <summary>
            Compares this ray with <paramref name="other" /> ray.
            </summary>
      <param name="other">A <see cref="T:Xtensive.Indexing.Ray`1" /> to compare with.</param>
      <returns>
            Less than zero if <see cref="T:Xtensive.Indexing.Ray`1" /> less than<paramref name="other" />;
            zero if <see cref="T:Xtensive.Indexing.Ray`1" /> equals to <paramref name="other" />;
            +1 otherwise.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.Equals(Xtensive.Indexing.Ray{`0})">
      <summary>
            Compares the <see cref="T:Xtensive.Indexing.Ray`1" /> with <paramref name="other" /> item.
            </summary>
      <param name="other">A <see cref="T:Xtensive.Indexing.Ray`1" /> to compare with.</param>
      <returns>True if the <see cref="T:Xtensive.Indexing.Ray`1" /> equals to <paramref name="other" />;
            false otherwise.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.op_Equality(Xtensive.Indexing.Ray{`0},Xtensive.Indexing.Ray{`0})">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.op_Inequality(Xtensive.Indexing.Ray{`0},Xtensive.Indexing.Ray{`0})">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="point">The point of the ray.</param>
    </member>
    <member name="M:Xtensive.Indexing.Ray`1.#ctor(`0,Xtensive.Core.Direction)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="point">The point of the ray.</param>
      <param name="direction">The direction of the ray.</param>
    </member>
    <member name="P:Xtensive.Indexing.Ray`1.Point">
      <summary>
            Gets the point of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Ray`1.Direction">
      <summary>
            Gets the direction of this instance.
            </summary>
      <value>The direction.</value>
    </member>
    <member name="T:Xtensive.Indexing.RayExtensions">
      <summary>
        <see cref="T:Xtensive.Indexing.Ray`1" /> extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.RayExtensions.Contains``1(Xtensive.Indexing.Ray{``0},``0,Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Checks if this instance contains specified point.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Ray`1" /> point.</typeparam>
      <param name="ray">Ray to check.</param>
      <param name="point">Point to check for containment.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>
        <see langword="True" /> if this instance contains the specified point; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RayExtensions.Intersects``1(Xtensive.Indexing.Ray{``0},Xtensive.Indexing.Ray{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Checks if ray intersects with another ray (i.e. they have common part).
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Ray`1" /> point.</typeparam>
      <param name="first">First ray to check.</param>
      <param name="second">Second ray to check.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>
        <see langword="True" /> if ray intersects with the specified ray; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RayExtensions.CompareTo``1(Xtensive.Indexing.Ray{``0},Xtensive.Indexing.Ray{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Compares this ray with <paramref name="second" /> ray.
            </summary>
      <typeparam name="T">The type of <see cref="T:Xtensive.Indexing.Ray`1" /> point.</typeparam>
      <param name="first">The first ray to compare.</param>
      <param name="second">The ray to compare with the <paramref name="first" /> one.</param>
      <param name="comparer">The comparer to use.</param>
      <returns>
            Less than zero if <see cref="T:Xtensive.Indexing.Ray`1" /> less than<paramref name="second" />;
            zero if <see cref="T:Xtensive.Indexing.Ray`1" /> equals to <paramref name="second" />;
            +1 otherwise.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RayExtensions.EqualTo``1(Xtensive.Indexing.Ray{``0},Xtensive.Indexing.Ray{``0},Xtensive.Comparison.AdvancedComparer{``0})">
      <summary>
            Compares the <see cref="T:Xtensive.Indexing.Ray`1" /> with <paramref name="second" /> item.
            </summary>
      <param name="first">The first ray to compare.</param>
      <param name="second">The ray to compare with the <paramref name="first" /> one.</param>
      <param name="comparer">The comparer.</param>
      <returns>
            True if the <see cref="T:Xtensive.Indexing.Ray`1" /> equals to <paramref name="second" />;
            false otherwise.
            </returns>
    </member>
    <member name="T:Xtensive.Indexing.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.EntireFormat">
      <summary>
              Looks up a localized string similar to E:{0}.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExBothMeasurementsHaveNoValue">
      <summary>
              Looks up a localized string similar to Both measurements have no value..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExCantDeserializeBloomFilter">
      <summary>
              Looks up a localized string similar to Can't deserialize Bloom filter..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExCantDeserializeIndexPage">
      <summary>
              Looks up a localized string similar to Can't deserialize index page with the following identifier: {0}. Exception: {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExCantPassNoInfinityToThisConstructor">
      <summary>
              Looks up a localized string similar to InfinityType.None can't be passed to this constructor..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExEndPointOrderMustBeEqual">
      <summary>
              Looks up a localized string similar to EndPoints order of both ranges must be equal..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExEnumerationIsAlreadyFinished">
      <summary>
              Looks up a localized string similar to Enumeration is already finished..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExEnumerationIsNotStarted">
      <summary>
              Looks up a localized string similar to Enumeration is not started..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExFieldIsInfinite">
      <summary>
              Looks up a localized string similar to Field with index '{0}' is infinitу..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExHasherNotFound">
      <summary>
              Looks up a localized string similar to Hasher for type {0} not found..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIncorrectKeyOrder">
      <summary>
              Looks up a localized string similar to Incorrect key order. Keys should be enumerated in the direction specified by comparer..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexDoesntSupportMeasures">
      <summary>
              Looks up a localized string similar to Index "{0}" doesn't support measures..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexesCannotBeMerged">
      <summary>
              Looks up a localized string similar to Indexes cannot be merged..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexIsAlreadyInitialized">
      <summary>
              Looks up a localized string similar to Index is already initialized..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexPageProviderDoesntSupportSerialize">
      <summary>
              Looks up a localized string similar to IndexPageProvider doesn't support serialization (Serialize method)..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexPageProviderDoesntSupportWrite">
      <summary>
              Looks up a localized string similar to IndexPageProvider doesn't support data modification operations (Add \ Remove \ Clear methods)..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExIndexPageProviderIsUnboundToTheIndex">
      <summary>
              Looks up a localized string similar to IndexPageProvider is unbound to the Index..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExInvalidPageSize">
      <summary>
              Looks up a localized string similar to Invalid IndexConfiguration.PageSize property value. Should be greater than 0, less then 65536 and must be an even value..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExItemWithTheSameKeyHasBeenAdded">
      <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExMeasureIsNotDefined">
      <summary>
              Looks up a localized string similar to Measure "{0}" is not defined..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExMeasurementIsAlreadyCompleted">
      <summary>
              Looks up a localized string similar to Measurement is already completed..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExMeasurementMustHaveValue">
      <summary>
              Looks up a localized string similar to Measurement '{0}' must have value..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExMergeOperationRequireIntersectionOfOperands">
      <summary>
              Looks up a localized string similar to Merge operation require intersection of operands..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExNodeRefIsOutOfRange">
      <summary>
              Looks up a localized string similar to Node reference is out of range..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExRangeIsEmpty">
      <summary>
              Looks up a localized string similar to Range is empty..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExSpecifiedKeyCouldNotBeFound">
      <summary>
              Looks up a localized string similar to Specified key could not be found..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExStreamIsNotEmpty">
      <summary>
              Looks up a localized string similar to Stream is not empty..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExUnableToGetCountForBloomFilter">
      <summary>
              Looks up a localized string similar to Argument must be ICountable, ICollection or ICollection&lt;TITem&gt; in order to get Count..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExUniqueConstraintViolation">
      <summary>
              Looks up a localized string similar to Unique constraint violation.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExUseAnotherCreateMethod">
      <summary>
              Looks up a localized string similar to Use another Create method to create StreamPageRef of such type..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ExValueIsNotAvailable">
      <summary>
              Looks up a localized string similar to Value is not available..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.InfinitesimalFormat">
      <summary>
              Looks up a localized string similar to {0}{1}d.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.Infinity">
      <summary>
              Looks up a localized string similar to inf.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.MeasuresAndMeasurementsHaveDifferentAmountOfItems">
      <summary>
              Looks up a localized string similar to Measures and measurements have different amount of items..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.MeasureWithTheNameWasNotFound">
      <summary>
              Looks up a localized string similar to Measure with the name '{0}' was not found..
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.NotAvailable">
      <summary>
              Looks up a localized string similar to n\a.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.Null">
      <summary>
              Looks up a localized string similar to null.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.RangeFormat">
      <summary>
              Looks up a localized string similar to ({0} ... {1}).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.RangeSetFormat">
      <summary>
              Looks up a localized string similar to RangeSet&lt;{0}&gt;({1}).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.RayFormat">
      <summary>
              Looks up a localized string similar to ({0} -&gt; {1}).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.ReversedFormat">
      <summary>
              Looks up a localized string similar to Reversed({0}).
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.SeekResultFormat">
      <summary>
              Looks up a localized string similar to {0} ({1}.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Resources.Strings.SeekResultPointerFormat">
      <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Reversed`1">
      <summary>
            Reversed type reverses the result provided by comparer
            for the original type, i.e. its values are sorted in
            descending order.
            </summary>
      <typeparam name="T">The type to reverse.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Reversed`1.ToString">
      <summary>
            Gets string representation of the object.
            </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Reversed`1.CompareTo(Xtensive.Indexing.Reversed{`0})">
      <summary>
            Compares this instance with another one.
            </summary>
      <param name="other">Instance to compare with.</param>
      <returns>Standard comparison result.</returns>
    </member>
    <member name="M:Xtensive.Indexing.Reversed`1.#ctor(`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="value">The <see cref="P:Xtensive.Indexing.Reversed`1.Value" /> value to initialize with.</param>
    </member>
    <member name="P:Xtensive.Indexing.Reversed`1.Value">
      <summary>
            Gets the value of reversed type.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.SeekResult`1">
      <summary>
            Result of <see cref="M:Xtensive.Indexing.IOrderedEnumerable`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})" /> operation.
            </summary>
      <typeparam name="TItem">Type of the item.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.SeekResult`1.ResultType">
      <summary>
            Seek operation status.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResult`1.Result">
      <summary>
            Seek operation result.
            If <see cref="F:Xtensive.Indexing.SeekResult`1.ResultType" /> is <see cref="F:Xtensive.Indexing.SeekResultType.None" />,
            <see cref="F:Xtensive.Indexing.SeekResult`1.Result" /> has no meaning.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.SeekResult`1.Equals(Xtensive.Indexing.SeekResult{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResult`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResult`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResult`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResult`1.#ctor(Xtensive.Indexing.SeekResultType,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="resultType">Seek operation status.</param>
      <param name="result">Seek operation result.</param>
    </member>
    <member name="T:Xtensive.Indexing.SeekResultPointer`1">
      <summary>
            Describes the result of internal seek (or seek-like) operations.
            </summary>
      <typeparam name="TPointer">The type of the pointer.</typeparam>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultPointer`1.ResultType">
      <summary>
            Type of the result.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultPointer`1.Pointer">
      <summary>
            The pointer to the result.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.SeekResultPointer`1.Equals(Xtensive.Indexing.SeekResultPointer{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResultPointer`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResultPointer`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResultPointer`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SeekResultPointer`1.#ctor(Xtensive.Indexing.SeekResultType,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="resultType">Type of the result.</param>
      <param name="pointer">The pointer to the result.</param>
    </member>
    <member name="T:Xtensive.Indexing.SeekResultType">
      <summary>
            Describes the part of result of such operation as 
            <see cref="M:Xtensive.Indexing.IOrderedEnumerable`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})" />.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultType.Default">
      <summary>
            The same as <see cref="F:Xtensive.Indexing.SeekResultType.None" />.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultType.None">
      <summary>
            No item is found.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultType.Exact">
      <summary>
            Exact match is found (i.e. equality condition is satisfied).
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.SeekResultType.Nearest">
      <summary>
            Next nearest match is found. 
            Nearest - in the specified <see cref="P:Xtensive.Indexing.Ray`1.Direction" /> of the ray.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.SortedListIndex`2">
      <summary>
            Simple unique ordered in-memory index based on ordered <see cref="T:System.Collections.Generic.List`1" />.
            </summary>
      <typeparam name="TKey">Type of index key.</typeparam>
      <typeparam name="TItem">Type of index value.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Add(`1)">
      <inheritdoc />
      <exception cref="T:System.InvalidOperationException">
        <paramref name="item" /> is already added.</exception>
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Replace(`1)">
      <inheritdoc />
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="item" /> could not be replaced.</exception>
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.OnConfigured">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.SortedListIndex`2.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.SortedListIndex`2.MeasureResults">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.SortedListIndex`2.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.SortedListIndex`2.Item(System.Int32)">
      <summary>
            Gets the item from the underlying sorted list by its <paramref name="index" />.
            </summary>
      <param name="index">The index of the item to get.</param>
      <returns>The item at the specified <paramref name="index" />.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Differential.DifferentialIndex`3">
      <summary>
            Differential index.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImpl">The type of the implementation.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.GetItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Contains(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.RemoveKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Replace(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.GetMeasureResult(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.GetMeasureResults(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}},System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Seek(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.Merge">
      <summary>
            Merges slices of the specified index.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.OnConfigured">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndex`3.#ctor(Xtensive.Indexing.IndexConfigurationBase{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndex`3.Origin">
      <summary>
            Gets the origin.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndex`3.Insertions">
      <summary>
            Gets the insertions.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndex`3.Removals">
      <summary>
            Gets the removals.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndex`3.MeasureResults">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndex`3.EntireConverter">
      <summary>
            Gets the entire converter.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2">
      <summary>
            Differential index configuration.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.CreateClone">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.CopyFrom(Xtensive.Configuration.ConfigurationBase)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.#ctor(Xtensive.Indexing.IUniqueOrderedIndex{`0,`1},Xtensive.Indexing.IUniqueOrderedIndex{`0,`1},Xtensive.Indexing.IUniqueOrderedIndex{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.#ctor(Xtensive.Indexing.IUniqueOrderedIndex{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.Origin">
      <summary>
            Gets or sets the origin configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.Insertions">
      <summary>
            Gets or sets the origin configuration.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexConfiguration`2.Removals">
      <summary>
            Gets or sets the origin configuration.
            </summary>
    </member>
    <member name="T:Xtensive.Indexing.Differential.DifferentialIndexReader`3">
      <summary>
            Differential index reader.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TItem">The type of the item.</typeparam>
      <typeparam name="TImpl">The type of the impl.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.MoveTo(Xtensive.Indexing.Entire{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.#ctor(Xtensive.Indexing.Differential.DifferentialIndex{`0,`1,`2},Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Indexing.Differential.DifferentialIndexReader`3" /> class.
            </summary>
      <param name="index">The index.</param>
      <param name="range">The range.</param>
    </member>
    <member name="M:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Index">
      <summary>
            Gets the index.
            </summary>
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Range">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Direction">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.Differential.DifferentialIndexReader`3.Current">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.EntireValueTypeExtensions">
      <summary>
        <see cref="T:Xtensive.Indexing.EntireValueType" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.EntireValueTypeExtensions.IsInfinity(Xtensive.Indexing.EntireValueType)">
      <summary>
            Determines whether the specified <see cref="T:Xtensive.Indexing.EntireValueType" /> is infinity.
            </summary>
      <param name="valueType">Entire value type to check.</param>
      <returns>
            Check result.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.MemorySerilizer`2.#ctor(Xtensive.Indexing.Implementation.IIndexPageProvider{`0,`1})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="provider">The index page provider.</param>
    </member>
    <member name="M:Xtensive.Indexing.Providers.Internals.MemorySerilizer`2.Dispose">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Dispose" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.Providers.MemoryPageProvider`2">
      <summary>
            Memory <see cref="T:Xtensive.Indexing.Implementation.IIndexPageProvider`2" /> which provides
            <see cref="T:Xtensive.Indexing.Index`2" /> with in-memory stored pages.
            </summary>
      <typeparam name="TKey">Key type of the page nodes.</typeparam>
      <typeparam name="TItem">Node type.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.GetBloomFilter(System.Collections.Generic.IEnumerable{`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.AssignIdentifier(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.Resolve(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.AddToCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.RemoveFromCache(Xtensive.Indexing.Implementation.Page{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.GetFromCache(Xtensive.Indexing.Implementation.IPageRef)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.Flush">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.CreateSerializer">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.Providers.MemoryPageProvider`2.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Indexing.RangeSet`1">
      <summary>
            Set of not intersected <see cref="T:Xtensive.Indexing.Range`1" />.
            </summary>
      <typeparam name="T">The type of points.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.CreateFullOrEmpty(System.Boolean,Xtensive.Comparison.AdvancedComparer{`0})">
      <summary>
            Creates the full <see cref="T:Xtensive.Indexing.RangeSet`1" /> or empty <see cref="T:Xtensive.Indexing.RangeSet`1" />.
            </summary>
      <param name="full">
      </param>
      <param name="pointTypeComparer">The comparer for the type of endpoints.</param>
      <returns>Newly created <see cref="T:Xtensive.Indexing.RangeSet`1" />.</returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.IsFull">
      <summary>
            Determines whether this instance contains a single full range.
            </summary>
      <returns>
        <see langword="true" /> if this instance is full; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.IsEmpty">
      <summary>
            Determines whether this instance does not contain any <see cref="T:Xtensive.Indexing.Range`1" />.
            </summary>
      <returns>
        <see langword="true" /> if this instance is empty; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.Unite(Xtensive.Indexing.RangeSet{`0})">
      <summary>
             Unites the current <see cref="T:Xtensive.Indexing.RangeSet`1" /> with the other one.
            </summary>
      <param name="otherSet">The other <see cref="T:Xtensive.Indexing.RangeSet`1" />.</param>
      <returns>
        <see langword="this" />
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.Intersect(Xtensive.Indexing.RangeSet{`0})">
      <summary>
            Intersects the current <see cref="T:Xtensive.Indexing.RangeSet`1" /> with the other one.
            </summary>
      <param name="otherSet">The other <see cref="T:Xtensive.Indexing.RangeSet`1" />.</param>
      <returns>
        <see langword="this" />
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.Invert">
      <summary>
            Inverts current <see cref="T:Xtensive.Indexing.RangeSet`1" />.
            </summary>
      <returns>
        <see langword="this" />
      </returns>
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSet`1.#ctor(Xtensive.Indexing.Range{`0},Xtensive.Comparison.AdvancedComparer{`0})">
      <summary>
            Creates new RangeSet containing a single <see cref="T:Xtensive.Indexing.Range`1" />.
            </summary>
      <param name="firstRange">
        <see cref="T:Xtensive.Indexing.Range`1" /> to be used as base for RangeSet.</param>
      <param name="pointComparer">The comparer for the endpoints.</param>
    </member>
    <member name="T:Xtensive.Indexing.RangeSetReader`2">
      <summary>
            Reader for <see cref="T:Xtensive.Indexing.RangeSet`1" /></summary>
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.MoveNext">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.Reset">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.MoveTo(Xtensive.Indexing.Entire{`0})">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Indexing.IIndexReader{`0,`1}})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="readersList">The list of readers.</param>
    </member>
    <member name="M:Xtensive.Indexing.RangeSetReader`2.Dispose">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.RangeSetReader`2.Current">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.RangeSetReader`2.Range">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Indexing.RangeSetReader`2.Direction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Indexing.Optimization.IStatistics`1">
      <summary>
            Statistics of an index.
            </summary>
      <typeparam name="T">The type of the key of the index.</typeparam>
    </member>
    <member name="M:Xtensive.Indexing.Optimization.IStatistics`1.GetData(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{`0}})">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Optimization.StatisticsData" />.
            </summary>
      <param name="range">The range.</param>
      <returns>The statistics data which was collected for the <paramref name="range" />.</returns>
    </member>
    <member name="T:Xtensive.Indexing.Optimization.StatisticsData">
      <summary>
            Data collected by an implementor of <see cref="T:Xtensive.Indexing.Optimization.IStatistics`1" />.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.Optimization.StatisticsData.RecordCount">
      <summary>
            The count of records to be loaded.
            </summary>
    </member>
    <member name="F:Xtensive.Indexing.Optimization.StatisticsData.SeekCount">
      <summary>
            The count of seeks which are necessary to load data.
            </summary>
    </member>
    <member name="M:Xtensive.Indexing.Optimization.StatisticsData.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="recordCount">The record count.</param>
      <param name="seekCount">The seek count.</param>
    </member>
    <member name="T:Xtensive.Sql.Compiler.Node">
      <summary>
            Node in SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerNamingScope">
      <summary>
            SQL compiler naming scope.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerNamingScope.Dispose">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Compiler.ContainerNode">
      <summary>
            Container node in SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlParameterNameProvider">
      <summary>
            SQL parameter name provider.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.GetName(System.Object)">
      <summary>
            Gets the name for the specified <paramref name="parameter" />.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>Name for the specified parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.#ctor(Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilationResult">
      <summary>
            Represents a <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" /> compilation results.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.ToString">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetParameterName(System.Object)">
      <summary>
            Gets the name of the <paramref name="parameter" /> assigned during compilation.
            All explicitly named parameters are not searched by this method.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>Assigned name.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText">
      <summary>
            Gets the textual representation of SQL DOM statement compilation.
            </summary>
      <value>The SQL text command.</value>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText(Xtensive.Sql.Compiler.SqlPostCompilerConfiguration)">
      <summary>
            Gets the textual representation of SQL DOM statement compilation.
            Query is postprocessed using the specified <paramref name="configuration" />.
            </summary>
      <param name="configuration">The postcompiler configuration.</param>
      <returns>The SQL text command.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlDriverBound">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> bound object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverBound.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.SqlDriverBound.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ISqlVisitor">
      <summary>
            A contract for visitor of SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompiler">
      <summary>
            Base class for any SQL compiler.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompiler.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerContext">
      <summary>
            SQL compiler context.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerConfiguration">
      <summary>
            A various options for <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerConfiguration.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.ForcedAliasing">
      <summary>
            Gets or sets a value indicating whether full automatic aliasing is enforced.
            </summary>
      <value>
        <see langword="true" /> if full automatic aliasing is enforced; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.ParameterNamePrefix">
      <summary>
            Gets or sets the parameter prefix.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerOutputScope">
      <summary>
            SQL compiler output scope.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerOutputScope.Dispose">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlPostCompilerConfiguration">
      <summary>
        <see cref="T:Xtensive.Sql.Compiler.PostCompiler" /> configuration.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlTranslator">
      <summary>
            SQL translator.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteString(System.String)">
      <summary>
            Returns quoted string.
            </summary>
      <param name="str">Unquoted string.</param>
      <returns>Quoted string.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteIdentifier(System.String[])">
      <summary>
            Returns string holding quoted identifier name.
            </summary>
      <param name="names">An <see cref="T:System.Array" /> of unquoted identifier name parts.</param>
      <returns>Quoted identifier name.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.BuildBatch(System.String[])">
      <summary>
            Builds the batch from specified SQL statements.
            </summary>
      <param name="statements">The statements.</param>
      <returns>String containing the whole batch.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.FloatFormatString">
      <summary>
            Gets the float format string.
            See <see cref="M:System.Double.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DoubleFormatString">
      <summary>
            Gets the double format string.
            See <see cref="M:System.Double.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DateTimeFormatString">
      <summary>
            Gets the date time format string.
            See <see cref="M:System.DateTime.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.TimeSpanFormatString">
      <summary>
            Gets the time span format string.
            See <see cref="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.ParameterPrefix">
      <summary>
            Gets the parameter prefix.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlTableNameProvider">
      <summary>
            Table name provider.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ISqlNode">
      <summary>
            A contract for server-independent node in SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlNode">
      <summary>
            Represents any node in Sql expression tree.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlNode.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:Xtensive.Sql.SqlNode.NodeType">
      <summary>
            Gets the type of the node.
            </summary>
      <value>The type of the node.</value>
    </member>
    <member name="T:Xtensive.Sql.SqlStatement">
      <summary>
            Base class for SQL statements.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ISqlCompileUnit">
      <summary>
            A contract for server-independent  SQL compilation unit.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlExpression">
      <summary>
            Defines base class for any sql expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumn.Name">
      <summary>
            Gets or sets the name of this instance.
            </summary>
      <value>The alias.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumn.SqlTable">
      <summary>
            Gets the table reference.
            </summary>
      <value>The table reference.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Add(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Contains(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.CopyTo(Xtensive.Sql.Dml.SqlExpression[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.IndexOf(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Insert(System.Int32,Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Remove(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Dml.Extensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.Extensions.IsNullReference(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Determines whether the specified expression is a null reference.
            Use this method instead of comparison with null,
            because equality operator is overloaded for <see cref="T:Xtensive.Sql.Dml.SqlExpression" />
            to yield equality comparison expression.
            </summary>
      <param name="expression">The expression to check.</param>
      <returns>
        <see langword="true" /> if argument is a null reference; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTable">
      <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table" /> object;
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Name">
      <summary>
            Gets the name of the instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Columns">
      <summary>
            Gets the collection of columns.
            </summary>
      <value>The collection of column references.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Dml.SqlColumn" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.ISqlQueryExpression">
      <summary>
            A contract for server-independent expression in SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlConnection">
      <summary>
            A connection to a database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object with specified <paramref name="statement" />.
            Created command will be associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(System.String)">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object with specified <paramref name="commandText" />.
            Created command will be associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateParameter">
      <summary>
            Creates the parameter.
            </summary>
      <returns>Created parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCursorParameter">
      <summary>
            Creates the cursor parameter.
            </summary>
      <returns>Created parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCharacterLargeObject">
      <summary>
            Creates the character large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull" /> returns <see langword="true" />)
            </summary>
      <returns>Created CLOB.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateBinaryLargeObject">
      <summary>
            Creates the binary large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull" /> returns <see langword="true" />)
            </summary>
      <returns>Created BLOB.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Open">
      <summary>
            Opens the connection.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Close">
      <summary>
            Closes the connection.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction">
      <summary>
            Begins the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            Begins the transaction with the specified <see cref="T:System.Data.IsolationLevel" />.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Commit">
      <summary>
            Commits the current transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Rollback">
      <summary>
            Rollbacks the current transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.MakeSavepoint(System.String)">
      <summary>
            Makes the transaction savepoint.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.RollbackToSavepoint(System.String)">
      <summary>
            Rollbacks current transaction to the specified savepoint.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.ReleaseSavepoint(System.String)">
      <summary>
            Releases the savepoint with the specfied name.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.ClearActiveTransaction">
      <summary>
            Clears the active transaction (i.e. sets <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> to <see langword="null" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateNativeCommand">
      <summary>
            Creates the native command.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.EnsureTransactionIsActive">
      <summary>
            Ensures the transaction is active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> is not <see langword="null" />).
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.EnsureTrasactionIsNotActive">
      <summary>
            Ensures the trasaction is not active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> is <see langword="null" />).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.UnderlyingConnection">
      <summary>
            Gets the underlying connection.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.ActiveTransaction">
      <summary>
            Gets the active transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.CommandTimeout">
      <summary>
            Gets or sets the command timeout.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.State">
      <summary>
            Gets the state of the connection.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.CreateParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.BeginTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.BeginTransaction(System.Data.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.ClearActiveTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.MakeSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Connection.RollbackToSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Firebird.Connection.UnderlyingConnection">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Firebird.Connection.ActiveTransaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.SqlDriver">
      <summary>
            Declares a base functionality of any <see cref="T:Xtensive.Sql.SqlDriver" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(Xtensive.Core.UrlInfo)">
      <summary>
            Creates the driver from the specified connection URL.
            </summary>
      <param name="connectionUrl">The connection url.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(System.String)">
      <summary>
            Creates the driver from the specified connection URL.
            </summary>
      <param name="connectionUrl">The connection url.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(System.String,System.String)">
      <summary>
            Creates the driver from the specified connection string and driver name.
            </summary>
      <param name="provider">The provider.</param>
      <param name="connectionString">The connection string.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(Xtensive.Core.ConnectionInfo)">
      <summary>
            Creates the driver from the specified connection string and driver name.
            </summary>
      <param name="connectionInfo">The connection info.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
      <param name="statement">The Sql.Dom statement.</param>
      <returns>Result of compilation.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit,Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
      <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
      <param name="statement">The Sql.Dom statement.</param>
      <param name="configuration">The options of compilation.</param>
      <returns>Result of compilation.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractCatalog(Xtensive.Sql.SqlConnection)">
      <summary>
            Extracts all schemas from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds all schemas in the database.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractDefaultSchema(Xtensive.Sql.SqlConnection)">
      <summary>
            Extracts the default schema from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds just the default schema in the database.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractSchema(Xtensive.Sql.SqlConnection,System.String)">
      <summary>
            Extracts the specified schema from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
            Extracted <see cref="T:Xtensive.Sql.Model.Schema" /> instance.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection">
      <summary>
            Creates the connection using default connection information
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection(Xtensive.Core.ConnectionInfo)">
      <summary>
            Creates the connection using specified connection information.
            </summary>
      <param name="connectionInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.GetExceptionType(System.Exception)">
      <summary>
            Gets the type of the exception.
            </summary>
      <param name="exception">The exception.</param>
      <returns>Type of the exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateCompiler">
      <summary>
            Creates the SQL DOM compiler.
            </summary>
      <returns>Created compiler.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateTranslator">
      <summary>
            Creates the SQL DOM translator.
            </summary>
      <returns>Created translator</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateExtractor">
      <summary>
            Creates the extractor.
            </summary>
      <returns>Created extractor.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateTypeMapper">
      <summary>
            Creates the type mapper.
            </summary>
      <returns>Created type mapper.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateServerInfoProvider">
      <summary>
            Creates the server info provider.
            </summary>
      <returns>Created server info provider.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection(System.String)">
      <summary>
            Creates connection from the specified <paramref name="connectionString" />.
            </summary>
      <param name="connectionString">Connection string</param>
      <returns>Created connection.</returns>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.CoreServerInfo">
      <summary>
            Gets an instance that provides the most essential information about underlying RDBMS.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.ServerInfo">
      <summary>
            Gets an instance that provides complete information about underlying RDBMS.
            <seealso cref="P:Xtensive.Sql.SqlDriver.ServerInfo" /></summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.TypeMappings">
      <summary>
            Gets the type mappings.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.Translator">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Firebird.Driver.CreateConnection(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.Driver.GetExceptionType(System.Exception)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.SqlDriverFactory">
      <summary>
            Creates drivers from the specified connection info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverFactory.CreateDriver(System.String)">
      <summary>
            Creates the driver from the specified <see cref="T:Xtensive.Core.ConnectionInfo" />.
            </summary>
      <param name="connectionString">The connection string to create driver from.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <summary>
            Builds the connection string from the specified URL.
            </summary>
      <param name="connectionUrl">The connection URL.</param>
      <returns>Built connection string</returns>
    </member>
    <member name="T:Xtensive.Sql.Firebird.DriverFactory">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> factory for Firebird.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Firebird.DriverFactory.CreateDriver(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.DriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Firebird.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Firebird.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Firebird.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Firebird.Resources.Strings.ExFirebirdBelow25IsNotSupported">
      <summary>
              Looks up a localized string similar to Firebird version below 2.5 is not supported!.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Firebird.Resources.Strings.ExInvalidBooleanSmallintValue">
      <summary>
              Looks up a localized string similar to Invalid smallint value for bool!.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlSelect)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.VisitSelectFrom(Xtensive.Sql.Dml.SqlSelect)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlQueryExpression)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlExtract)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlUnary)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlBinary)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Compiler.Visit(Xtensive.Sql.Dml.SqlFunctionCall)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Model.Extractor">
      <summary>
            Builds <see cref="T:Xtensive.Sql.Model.Catalog" /> by extracting the metadata from existing database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExtractCatalog">
      <summary>
            Extracts all schemes from the database.
            </summary>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds all schemes in the database.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExtractSchema(System.String)">
      <summary>
            Extracts the specified schema from the database.
            </summary>
      <returns>Extracted <see cref="T:Xtensive.Sql.Model.Schema" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)">
      <summary>
            Initializes the translator with specified <see cref="T:Xtensive.Sql.SqlConnection" /> and <see cref="T:System.Data.Common.DbTransaction" />.
            </summary>
      <param name="connection">The connection.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.Initialize">
      <summary>
            Performs custom initialization.
            Called within <see cref="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the reader againts the command created from the specified <paramref name="statement" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Executed reader.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(System.String)">
      <summary>
            Executes the reader againts the command created from the specified <paramref name="commandText" />.
            </summary>
      <param name="commandText">The command text to execute.</param>
      <returns>Executed reader.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Extractor.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Extractor.Connection">
      <summary>
            Gets the connection.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerInfoProvider">
      <summary>
            Describes <see cref="T:Xtensive.Sql.Info.ServerInfo" /> provider interface.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCollationInfo">
      <summary>
            Gets the collation info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCharacterSetInfo">
      <summary>
            Gets the character set info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTranslationInfo">
      <summary>
            Gets the translation info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTriggerInfo">
      <summary>
            Gets the trigger info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStoredProcedureInfo">
      <summary>
            Gets the stored procedure info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSequenceInfo">
      <summary>
            Gets the sequence info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDatabaseInfo">
      <summary>
            Gets the database info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetColumnInfo">
      <summary>
            Gets the column info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetViewInfo">
      <summary>
            Gets the view info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSchemaInfo">
      <summary>
            Gets the schema info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTableInfo">
      <summary>
            Gets the table info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTemporaryTableInfo">
      <summary>
            Gets the temporary table info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCheckConstraintInfo">
      <summary>
            Gets the check constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetUniqueConstraintInfo">
      <summary>
            Gets the unique constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetPrimaryKeyInfo">
      <summary>
            Gets the primary key info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetFullTextInfo">
      <summary>
            Gets the referential constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetForeignKeyConstraintInfo">
      <summary>
            Gets the referential constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIndexInfo">
      <summary>
            Gets the index info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetQueryInfo">
      <summary>
            Gets the query info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIdentityInfo">
      <summary>
            Gets the identity info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDataTypesInfo">
      <summary>
            Gets the collection of supported data types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIsolationLevels">
      <summary>
            Gets the supported isolation levels.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDomainInfo">
      <summary>
            Gets the domain info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetAssertionInfo">
      <summary>
            Gets the assertion info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetServerFeatures">
      <summary>
            Gets the server features.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStringIndexingBase">
      <summary>
            Gets the string indexing base.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfoProvider.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.QuoteIdentifier(System.String[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Model.SequenceDescriptor,Xtensive.Sql.Compiler.SequenceDescriptorSection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Ddl.SqlAlterTable,Xtensive.Sql.Compiler.AlterTableSection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Ddl.SqlDropTable)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.SqlNodeType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Dml.SqlFunctionType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Dml.SqlNextValue,Xtensive.Sql.Compiler.NodeSection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Dml.SqlLockType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Dml.SqlDateTimePart)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Dml.SqlSelect,Xtensive.Sql.Compiler.SelectSection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Ddl.SqlCreateIndex,Xtensive.Sql.Compiler.CreateIndexSection)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Firebird.v2_5.Translator.Translate(Xtensive.Sql.Compiler.SqlCompilerContext,Xtensive.Sql.Model.Constraint,Xtensive.Sql.Compiler.ConstraintSection)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.TypeMapper">
      <summary>
            Abstract base class for any value (data) type mapper.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.TypeMapper.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ILargeObject">
      <summary>
            A contract for server-independent native large objects (LOBs) query parameter.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.Nullify">
      <summary>
            Nullifies this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.Erase">
      <summary>
            Erases this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.BindTo(System.Data.Common.DbParameter)">
      <summary>
            Binds this LOB to the specified parameter.
            </summary>
      <param name="parameter">The parameter to bind to.</param>
    </member>
    <member name="P:Xtensive.Sql.ILargeObject.IsNull">
      <summary>
            Gets a value indicating whether this instance is null.
            </summary>
      <value>
        <see langword="true" /> if this instance is null; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.ILargeObject.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
      <value>
        <see langword="true" /> if this instance is empty; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Sql.IBinaryLargeObject">
      <summary>
            A contract for server-independent native binary large objects (BLOBs) query parameter.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.IBinaryLargeObject.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The length.</param>
    </member>
    <member name="T:Xtensive.Sql.ICharacterLargeObject">
      <summary>
            A contract for server-independent character large objects (CLOBs) query parameter.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ICharacterLargeObject.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The length.</param>
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.CreateParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.CreateCursorParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.CreateBinaryLargeObject">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.CreateCharacterLargeObject">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.BeginTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.BeginTransaction(System.Data.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.MakeSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.RollbackToSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.ReleaseSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.ClearActiveTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Oracle.Connection.CreateNativeCommand">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Oracle.Connection.UnderlyingConnection">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Oracle.Connection.ActiveTransaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Oracle.DriverFactory">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> factory for Oracle.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Oracle.DriverFactory.CreateDriver(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Drivers.Oracle.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExAlterSequenceRestartWithIsNotSupported">
      <summary>
              Looks up a localized string similar to ALTER SEQUENCE RESTART WITH is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExInvalidBooleanStringX">
      <summary>
              Looks up a localized string similar to Invalid boolean string '{0}'.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExOracleBelow9i2IsNotSupported">
      <summary>
              Looks up a localized string similar to Oracle below 9i2 is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExOracleDoesNotSupportLocalTemporaryTables">
      <summary>
              Looks up a localized string similar to Oracle does not support local temporary tables.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExOracleDoesNotSupportTrimmingMoreThatOneCharacterAtOnce">
      <summary>
              Looks up a localized string similar to Oracle does not support trimming more that one character at once.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.Oracle.Resources.Strings.ExOracleDoesNotSupportUpdateFromStatements">
      <summary>
              Looks up a localized string similar to Oracle does not support UPDATE FROM statements.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.CreateParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.BeginTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.BeginTransaction(System.Data.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.MakeSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.RollbackToSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.ReleaseSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.Connection.ClearActiveTransaction">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.PostgreSql.Connection.UnderlyingConnection">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.PostgreSql.Connection.ActiveTransaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.PostgreSql.DriverFactory">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> factory for PostgreSQL.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.DriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.DriverFactory.CreateDriver(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.ExFreeTextSearchOnCustomColumnsNotSupported">
      <summary>
              Looks up a localized string similar to FreeText search on custom columns not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.ExPostgreSqlBelow80IsNotSupported">
      <summary>
              Looks up a localized string similar to PostgreSQL below 8.0 is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.ExSqlMatchValueMustBeAnSqlRowInstance">
      <summary>
              Looks up a localized string similar to SqlMatch.Value must be an SqlRow instance..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.PostgreSql.Resources.Strings.ExUrlContainsInvalidXSpecificationXHasToBeY">
      <summary>
              Looks up a localized string similar to URL contains invalid {0} specification. {0} has to be {1}..
            </summary>
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.v8_0.Extractor.ExtractSchemas(Xtensive.Sql.Model.Catalog)">
      <summary>
            Extracts the current user's schemas in the specified catalog.
            </summary>
      <param name="catalog">
      </param>
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.v8_0.Extractor.GetMyUserSysId">
      <summary>
            Gets and caches the inner identifier of the current database user.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.PostgreSql.v8_2.Extractor.ReadRelOption(System.String,System.String,Xtensive.Sql.PostgreSql.RelOptions)">
      <summary>
            Reads a certain reloption value.
            </summary>
      <param name="optionName">The name of the option in lowercase</param>
      <param name="optionValue">The value of the option, maybe empty, but not null</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Connection.CreateParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Connection.BeginTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Connection.BeginTransaction(System.Data.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Connection.ClearActiveTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Connection.#ctor(Xtensive.Sql.SqlDriver,System.String)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.SqlServerCe.Connection.UnderlyingConnection">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.SqlServerCe.Connection.ActiveTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Driver.CreateConnection(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Driver.GetExceptionType(System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.Driver.#ctor(Xtensive.Sql.Info.CoreServerInfo)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.SqlServerCe.DriverFactory">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> factory for Microsoft SQL Server.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.DriverFactory.CreateDriver(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.DriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.ExInvalidBooleanStringX">
      <summary>
              Looks up a localized string similar to Invalid boolean string '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.ExOperationXIsNotSupported">
      <summary>
              Looks up a localized string similar to Operation '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.ExSqlServerBelow2005IsNotSupported">
      <summary>
              Looks up a localized string similar to SQL Server below 2005 is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServerCe.Resources.Strings.ExSqlServerSupportsTrimmingOfSpaceCharactersOnly">
      <summary>
              Looks up a localized string similar to SQL Server supports trimming of space characters only..
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.v3_5.Compiler.Visit(Xtensive.Sql.Ddl.SqlAlterTable)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.v3_5.Compiler.Visit(Xtensive.Sql.Dml.SqlFunctionCall)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.v3_5.Compiler.#ctor(Xtensive.Sql.SqlDriver)">
      <param name="driver">The driver.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlServerCe.v3_5.Translator.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlServerCe.v3_5.Translator" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.CreateParameter">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.BeginTransaction">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.BeginTransaction(System.Data.IsolationLevel)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.MakeSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.RollbackToSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.ReleaseSavepoint(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.Connection.ClearActiveTransaction">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.SqlServer.Connection.UnderlyingConnection">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.SqlServer.Connection.ActiveTransaction">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.SqlServer.DriverFactory">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> factory for Microsoft SQL Server.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlServer.DriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.DriverFactory.CreateDriver(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Drivers.SqlServer.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ExInvalidBooleanStringX">
      <summary>
              Looks up a localized string similar to Invalid boolean string '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ExMultipleLanguagesNotSupportedForFulltextColumnXOfIndexY">
      <summary>
              Looks up a localized string similar to Multiple languages not supported for fulltext column {0} of index {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ExOperationXIsNotSupported">
      <summary>
              Looks up a localized string similar to Operation '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ExSqlServerBelow2005IsNotSupported">
      <summary>
              Looks up a localized string similar to SQL Server below 2005 is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Drivers.SqlServer.Resources.Strings.ExSqlServerSupportsTrimmingOfSpaceCharactersOnly">
      <summary>
              Looks up a localized string similar to SQL Server supports trimming of space characters only..
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlServer.v09.Compiler.Visit(Xtensive.Sql.Ddl.SqlAlterTable)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.v09.Compiler.Visit(Xtensive.Sql.Dml.SqlFunctionCall)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlServer.v09.Compiler.#ctor(Xtensive.Sql.SqlDriver)">
      <param name="driver">The driver.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlServer.v09.Translator.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlServer.v09.Translator" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="T:Xtensive.Sql.Info.EntityInfo">
      <summary>
            Describes a common database entity.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.EntityInfo.MaxIdentifierLength">
      <summary>
            Gets or sets maximal identifier length.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.EntityInfo.AllowedDdlStatements">
      <summary>
            Gets or sets allowed DDL statements for this instance.
            </summary>
      <value>Allowed DDL statements.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.FullTextSearchInfo">
      <summary>
            Describes a full-text capabilities of a database server.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.FullTextSearchInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.CoreServerInfo">
      <summary>
            A information required for creating a driver.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ServerLocation">
      <summary>
            Gets or sets the server location.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ServerVersion">
      <summary>
            Gets or sets the server version.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.DatabaseName">
      <summary>
            Gets or sets the name of the database.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.DefaultSchemaName">
      <summary>
            Gets or sets the default name of the schema.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.MultipleActiveResultSets">
      <summary>
            Gets or sets a value indicating whether multiple active result sets are supported.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.AssertConstraintInfo">
      <summary>
            Describes assert constaint capabilities.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.CheckConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.CheckConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable check constraints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable foreign key constraints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Clustered">
      <summary>
            Indicates that primary key constraints can be declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Nullable">
      <summary>
            Indicates that primary key constraints can be applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo">
      <summary>
            Describes a primary key constaint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.PrimaryKeyConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.UniqueConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.UniqueConstraintInfo" /></summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Clustered">
      <summary>
            Indicates that unique key constraints can be declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Nullable">
      <summary>
            Indicates that unique key constraints can be applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.UniqueConstraintInfo">
      <summary>
            Describes a unique constaint capabilities
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.UniqueConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.FullTextSearchFeatures">
      <summary>
            Defines full-text options.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.None">
      <summary>
            Indicates that RDBMS doesn't support full-text at all.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.SingleKeyRankTable">
      <summary>
            Indicates that RDBMS uses table with 'KEY' and 'RANK' columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.Full">
      <summary>
            Indicates that RDBMS supports column functions to calculate full-text rank.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerFeatures">
      <summary>
            Features of RBMS.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.None">
      <summary>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.LargeObjects">
      <summary>
            Indicates that RDBMS uses large objects (LOBs) for manipulating large data chunks.
            <seealso cref="T:Xtensive.Sql.ICharacterLargeObject" />.
            <seealso cref="T:Xtensive.Sql.IBinaryLargeObject" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters">
      <summary>
            Indicates that RDBMS supports cursor parameters.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.MultipleResultsViaCursorParameters">
      <summary>
            Indicates whether RDBMS supports returning multiple results via cursor parameters.
            Does matter only if <see cref="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters" /> feature is avaliable.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.Savepoints">
      <summary>
            Indicates whether RDBMS supports savepoints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ValueRange">
      <summary>
            Provides a <see cref="T:Xtensive.Sql.Info.ValueRange`1" />s for standard .Net struct types.
            </summary>
      <summary>
            Represents a contiguous range of values.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Bool">
      <summary>
            Standard value range for <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Char">
      <summary>
            Standard value range for <see cref="T:System.Char" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.SByte">
      <summary>
            Standard value range for <see cref="T:System.SByte" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int16">
      <summary>
            Standard value range for <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int32">
      <summary>
            Standard value range for <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int64">
      <summary>
            Standard value range for <see cref="T:System.Int64" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Byte">
      <summary>
            Standard value range for <see cref="T:System.Byte" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt16">
      <summary>
            Standard value range for <see cref="T:System.UInt16" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt32">
      <summary>
            Standard value range for <see cref="T:System.UInt32" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt64">
      <summary>
            Standard value range for <see cref="T:System.UInt64" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Float">
      <summary>
            Standard value range for <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Double">
      <summary>
            Standard value range for <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Decimal">
      <summary>
            Standard value range for <see cref="T:System.Decimal" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.DateTime">
      <summary>
            Standard value range for <see cref="T:System.DateTime" /></summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.TimeSpan">
      <summary>
            Standard value range for <see cref="T:System.TimeSpan" /></summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetMinValue">
      <summary>
            Gets the min value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetMaxValue">
      <summary>
            Gets the max value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetDefaultValue">
      <summary>
            Gets the default value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.HasDefaultValue">
      <summary>
            Determines whether default value has been specified.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Node">
      <summary>
            Represents base lockable named node.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Node.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Node.Name">
      <summary>
            Gets or sets a name of the node.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Node.DbName">
      <summary>
            Gets or sets a db name of the node.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.IPairedNode`1">
      <summary>
            Describes an object that is paired with some <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.IPairedNode`1.UpdatePairedProperty(System.String,`0)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTableNode">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable" /> bound object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableNode.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableNode.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableNode" /> class.
            </summary>
      <param name="dataTable">The dataTable.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTableNode.DataTable">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable" /> this instance belongs to.
            </summary>
      <value>The dataTable this instance belongs to.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.IPartitionable">
      <summary>
            Defines an object that supports partitioning.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IPartitionable.PartitionDescriptor">
      <summary>
            Gets or sets the partition descriptor.
            </summary>
      <value>The partition descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Index">
      <summary>
            Represents an index.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Creates the index column.
            </summary>
      <param name="column">The column.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn,System.Boolean)">
      <summary>
            Creates the index column.
            </summary>
      <param name="column">The column.</param>
      <param name="ascending">The sort direction.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the index column.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.IndexColumn" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression,System.Boolean)">
      <summary>
            Creates the index column.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.IndexColumn" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Columns">
      <summary>
            Columns, this instance is based on.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.NonkeyColumns">
      <summary>
            Non key columns to be added to the the index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Where">
      <summary>
            Gets or sets the index filter expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsUnique">
      <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsFullText">
      <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsBitmap">
      <summary>
            Gets or sets the value indicating that this index is bitmap index.
            A bitmap index is a special kind of index that stores the bulk of its data as bitmaps 
            and answers most queries by performing bitwise logical operations on these bitmaps.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsClustered">
      <summary>
            Gets or sets the value indicating that this index is clustered index.
            Clustered index is the index in which the logical order of the key values 
            determines the physical order of the corresponding rows in a table. 
            The bottom, or leaf, level of the clustered index contains the actual data rows 
            of the table. A table or view is allowed one clustered index at a time.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.FillFactor">
      <summary>
            Specifies a percentage that indicates how full the database server should make the leaf level 
            of each index page during index creation or rebuild. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Filegroup">
      <summary>
            Gets or sets the value indicating that specified index will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the index uses the same filegroup 
            as the underlying table or view.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.PartitionDescriptor">
      <summary>
            Gets or sets the partition descriptor.
            </summary>
      <value>The partition descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.FullTextIndex">
      <summary>
            Represents full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.FullTextIndex.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Creates the full-text index column.
            </summary>
      <param name="column">The column.</param>
      <returns>Newly created <see cref="T:Xtensive.Sql.Model.IndexColumn" /> object.</returns>
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.IsFullText">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.FullTextCatalog">
      <summary>
            Gets or sets the full text catalog.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.UnderlyingUniqueIndex">
      <summary>
            Gets or sets the underlying unique index name.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlExceptionType">
      <summary>
            Possible exeception types.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.Unknown">
      <summary>
            Reason of exception is unknown.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.ConnectionError">
      <summary>
            Connection error (such as timeout).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.SyntaxError">
      <summary>
            Syntax error in query.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.CheckConstraintViolation">
      <summary>
            Check constraint violation (including NOT NULL constraints)
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.UniqueConstraintViolation">
      <summary>
            Unique constraint violation (also denotes unique and primary index key duplication).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.ReferentialConstraintViolation">
      <summary>
            Referential constraint (aka foreign key) violation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.Deadlock">
      <summary>
            Deadlock.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.SerializationFailure">
      <summary>
            Concurrent access serialization failure.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.OperationTimeout">
      <summary>
            Operation timed out.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlExtensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.GetDatabase(Xtensive.Core.UrlInfo)">
      <summary>
            Extracts the database component from the specified <see cref="T:Xtensive.Core.UrlInfo" />.
            </summary>
      <param name="url">The URL.</param>
      <returns>Database name.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.GetSchema(Xtensive.Core.UrlInfo,System.String)">
      <summary>
            Extracts the schema component from the specified <see cref="T:Xtensive.Core.UrlInfo" />.
            If schema is not specified returns <paramref name="defaultValue" />.
            </summary>
      <param name="url">The URL.</param>
      <param name="defaultValue">The default schema name.</param>
      <returns>Schema name.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.ToClrType(Xtensive.Sql.SqlType)">
      <summary>
            Converts the specified <see cref="T:Xtensive.Sql.SqlType" /> to corresponding .NET type.
            </summary>
      <param name="type">The type to convert.</param>
      <returns>Converter type.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlHelper">
      <summary>
            Various helper methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ValidateConnectionUrl(Xtensive.Core.UrlInfo)">
      <summary>
            Validates the specified URL againts charactes that usually forbidden inside connection strings.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithQuotes(System.String[])">
      <summary>
            Quotes the specified identifier with quotes (i.e. "").
            </summary>
      <returns>Quoted identifier.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithBrackets(System.String[])">
      <summary>
            Quotes the specified identifier with square brackets (i.e. []).
            </summary>
      <returns>Quoted indentifier.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.IntervalToMilliseconds(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Converts the specified interval expression to expression
            that represents number of milliseconds in that interval.
            This is a generic implementation via <see cref="T:Xtensive.Sql.Dml.SqlExtract" />s.
            It's suitable for any server, but can be inefficient.
            </summary>
      <param name="interval">The interval to convert.</param>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.IntervalToNanoseconds(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Converts the specified interval expression to expression
            that represents number of milliseconds in that interval.
            This is a generic implementation via <see cref="T:Xtensive.Sql.Dml.SqlExtract" />s.
            It's suitable for any server, but can be inefficient.
            </summary>
      <param name="interval">The interval to convert.</param>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.IntervalAbs(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Converts the specified interval expression to expression
            that represents absolute value (duration) of the specified interval.
            This is a generic implementation that uses comparison with zero interval.
            It's suitable for any server, but can be inefficient.
            </summary>
      <param name="source">The source.</param>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs banker's rounding on the specified argument.
            </summary>
      <param name="value">The value to round.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs banker's rounding on the speicified argument
            to a specified number of fractional digits.
            </summary>
      <param name="value">The value to round.</param>
      <param name="digits">The digits.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs "rounding as tought in school" on the specified argument.
            </summary>
      <param name="value">The value to round.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs "rounding as tought in school" on the specified argument
            to a specified number of fractional digits.
            </summary>
      <param name="argument">The value to round.</param>
      <param name="digits">The digits.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)">
      <summary>
            Converts the specified <see cref="T:System.TimeSpan" /> to string using the specified format string.
            </summary>
      <param name="value">The value.</param>
      <param name="format">The format string.</param>
      <returns>Formatted representation of the <paramref name="value" />.</returns>
      <remarks>
            Format string can contain any of these placeholders:
            <list type="table"><item><term>{0}</term><description>negative sign, if argument represents a negative <see cref="T:System.TimeSpan" />; <see cref="F:System.String.Empty" />, otherwise.</description></item><item><term>{1}</term><description>absolute value of <see cref="P:System.TimeSpan.Days" /> property.</description></item><item><term>{2}</term><description>absolute value of <see cref="P:System.TimeSpan.Hours" /> property.</description></item><item><term>{3}</term><description>absolute value of <see cref="P:System.TimeSpan.Minutes" /> property.</description></item><item><term>{4}</term><description>absolute value of <see cref="P:System.TimeSpan.Seconds" /> property.</description></item><item><term>{5}</term><description>absolute value of <see cref="P:System.TimeSpan.Milliseconds" /> property.</description></item></list></remarks>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ReadDatabaseAndSchema(System.Data.Common.DbConnection,System.String,Xtensive.Sql.Info.CoreServerInfo)">
      <summary>
            Reads the database and schema using the specified query.
            By contract query should return database in first column and schema in second.
            </summary>
      <param name="connection">The connection.</param>
      <param name="queryText">The query text.</param>
      <param name="coreServerInfo">The core server info.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ReduceIsolationLevel(System.Data.IsolationLevel)">
      <summary>
            Reduces the isolation level to the most commonly supported ones.
            </summary>
      <param name="level">The level.</param>
      <returns>Converted isolation level.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteString(System.String)">
      <summary>
            Quotes the string using standard SQL quoting rules.
            </summary>
      <param name="value">The value.</param>
      <returns>Quoted string.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(System.String)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.QueryFeatures)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.ServerFeatures)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="T:Xtensive.Sql.Info.FeaturesExtensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.QueryFeatures,Xtensive.Sql.Info.QueryFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.IndexFeatures,Xtensive.Sql.Info.IndexFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.DataTypeFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ForeignKeyConstraintFeatures,Xtensive.Sql.Info.ForeignKeyConstraintFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ColumnFeatures,Xtensive.Sql.Info.ColumnFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ServerFeatures,Xtensive.Sql.Info.ServerFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDdl">
      <summary>
            A factory for SQL DDL operations.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ValueRangeValidator">
      <summary>
            A range validator for primitive types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ValueRangeValidator.Validate``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
      <summary>
            Ensures that the specified value is in <paramref name="allowedRange" />.
            </summary>
      <typeparam name="T">Type of the value to validate.</typeparam>
      <param name="value">The value.</param>
      <param name="allowedRange">The allowed range.</param>
    </member>
    <member name="M:Xtensive.Sql.ValueRangeValidator.Correct``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
      <summary>
            Corrects the specified value to fall into the <paramref name="allowedRange" />.
            </summary>
      <typeparam name="T">Type of the value to validate</typeparam>
      <param name="value">The value.</param>
      <param name="allowedRange">The allowed range.</param>
      <returns>Corrected value.</returns>
    </member>
    <member name="T:Xtensive.Sql.BoundaryType">
      <summary>
            Specifies to which side of each boundary value interval, left or right, the boundary value
            belongs.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Default">
      <summary>
            Default value is equal to <see cref="F:Xtensive.Sql.BoundaryType.Left" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Left">
      <summary>
            Specifies that boundary value belongs to the left side of boundary value interval.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Right">
      <summary>
            Specifies that boundary value belongs to the right side of boundary value interval.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Catalog">
      <summary>
            Represents a single database catalog that can contain multiple database schemas.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreateSchema(System.String)">
      <summary>
            Creates a schema.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionFunction(System.String,Xtensive.Sql.SqlValueType,System.String[])">
      <summary>
            Creates the partition function.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Type of the input parameter.</param>
      <param name="boundaryValues">The boundary values.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionSchema(System.String,Xtensive.Sql.Model.PartitionFunction,System.String[])">
      <summary>
            Creates the partition schema.
            </summary>
      <param name="name">The name.</param>
      <param name="partitionFunction">The partition function.</param>
      <param name="filegroups">The filegroups.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.DefaultSchema">
      <summary>
            Default <see cref="T:Xtensive.Sql.Model.Schema" /> of this instance.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.Schemas">
      <summary>
            Gets the schemas.
            </summary>
      <value>The schemas.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.PartitionFunctions">
      <summary>
            Gets the partition functions.
            </summary>
      <value>The partition functions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.PartitionSchemas">
      <summary>
            Gets the partition schemes.
            </summary>
      <value>The partition schemes.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.CatalogNode">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog" /> bound object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.CatalogNode.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.CatalogNode.#ctor(Xtensive.Sql.Model.Catalog,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.CatalogNode" /> class.
            </summary>
      <param name="catalog">The catalog.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.CatalogNode.Catalog">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog" /> this instance belongs to.
            </summary>
      <value>The catalog this instance belongs to.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.SchemaNode">
      <summary>
            Represents any <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema" /> bound <see cref="T:Xtensive.Sql.Model.Node" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SchemaNode.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SchemaNode.#ctor(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SchemaNode" /> class.
            </summary>
      <param name="schema">The schema.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.SchemaNode.Schema">
      <summary>
        <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema" /> instance this instance belongs to.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.CharacterSet">
      <summary>
            Represents a character set object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.CharacterSet.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.CheckOptions">
      <summary>
            Levels of checking to be done when inserting or updating data through a view.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Default">
      <summary>
            The same as <see cref="F:Xtensive.Sql.CheckOptions.None" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.None">
      <summary>
            None check options are set.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Local">
      <summary>
            This option is identical to <see cref="F:Xtensive.Sql.CheckOptions.Cascaded" /> option except that you can update 
            a row so that it no longer can be retrieved through the view. 
            This can only happen when the view is directly or indirectly dependent on a view 
            that was defined with no WITH CHECK OPTION clause.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Cascaded">
      <summary>
            This option specifies that every row that is inserted or updated through the view 
            must conform to the definition of the view. In addition, the search conditions 
            of all dependent views are checked when a row is inserted or updated. If a row 
            does not conform to the definition of the view, that row cannot be retrieved using the view.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Collation">
      <summary>
            Represents a collation object thst specifies the rules for how strings 
            of character data are sorted and compared, based on the norms of 
            particular languages and locales.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Collation.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.Assertion">
      <summary>
            Represents a named constraint that may relate to the content
            of individual rows of a table, to the entire contents of a table,
            or to a state required to exist among a number of tables.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Assertion.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Assertion.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.Condition">
      <summary>
            Gets or sets the check condition for this instance.
            </summary>
      <value>The condition.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.IsDeferrable">
      <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.IsInitiallyDeferred">
      <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.Model.Constraint">
      <summary>
            Represents integrity constraint object.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.IsDeferrable">
      <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.IsInitiallyDeferred">
      <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.Condition">
      <summary>
            Gets or sets the check condition for this instance.
            </summary>
      <value>The condition.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Constraint`1">
      <summary>
            Represents integrity constraint object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Constraint`1.ChangeOwner(`0)">
      <summary>
            Changes the owner.
            </summary>
      <param name="value">The owner.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint`1.Owner">
      <summary>
            Gets or sets the constraint owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.TableConstraint">
      <summary>
            Represents a base <see cref="P:Xtensive.Sql.Model.TableConstraint.Table" /> constraint object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.ChangeOwner(Xtensive.Sql.Model.Table)">
      <summary>
            Changes the table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint" /> class.
            </summary>
      <param name="table">The table.</param>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
      <param name="isDeferrable">Is constraint deferrable.</param>
      <param name="isInitiallyDeferred">Is constraint initially deferred.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint" /> class.
            </summary>
      <param name="table">The table.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.TableConstraint.Table">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableConstraint.Table" /> this instance belongs to.
            </summary>
      <value>The table.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.CheckConstraint">
      <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table" /> check constraint.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.DefaultConstraint">
      <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table" /> default constraint.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.DefaultConstraint.Column">
      <summary>
            Gets the column.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.DomainConstraint">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain" /> constraint object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DomainConstraint.ChangeOwner(Xtensive.Sql.Model.Domain)">
      <summary>
            Changes the domain.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DomainConstraint.Domain">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain" /> this instance belongs to.
            </summary>
      <value>The domain.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.ForeignKey">
      <summary>
            Represents a foreign key constraint that provides referential integrity 
            for the data in the column or columns. <see cref="T:Xtensive.Sql.Model.ForeignKey" /> constraints require that 
            each value in the column exists in the corresponding referenced column or columns 
            in the referenced table.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.ForeignKey.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.Columns">
      <summary>
            Gets the referencing columns.
            </summary>
      <value>The referencing columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedColumns">
      <summary>
            Gets the referenced columns.
            </summary>
      <value>The referenced columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedTable">
      <summary>
            Gets or sets the referenced table.
            </summary>
      <value>The referenced table.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.MatchType">
      <summary>
            Match type.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.OnUpdate">
      <summary>
            Specifies what action happens to rows in the table
            when those rows have a referential relationship
            and the referenced row is updated in the parent table.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.OnDelete">
      <summary>
            Specifies what action happens to rows in the table,
            if those rows have a referential relationship and
            the referenced row is deleted from the parent table.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.Model.UniqueConstraint">
      <summary>
            Represents unique table constraint.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.UniqueConstraint.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.UniqueConstraint.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PrimaryKey">
      <summary>
            Represents primary key constraint.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTable">
      <summary>
            An base class for <see cref="T:Xtensive.Sql.Model.Table" /> and <see cref="T:Xtensive.Sql.Model.View" /> types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.CreateIndex(System.String)">
      <summary>
            Creates the index.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.CreateFullTextIndex(System.String)">
      <summary>
            Creates the full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.#ctor(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTable" /> class.
            </summary>
      <param name="schema">The schema.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTable.Indexes">
      <summary>
            Gets the indexes.
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTable.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTableColumn">
      <summary>
            Represent a <see cref="T:Xtensive.Sql.Model.DataTable" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableColumn.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableColumn" /> class.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="name">The name.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.IConstrainable">
      <summary>
            Represents a node that is capable of being constrained.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IConstrainable.Constraints">
      <summary>
            Gets the node constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Domain">
      <summary>
            Represents a domain object that is a set of permissible values. 
            A domain is defined in a schema and is identified by a domain name. 
            The purpose of a domain is to constrain the set of valid values 
            that can be stored in SQL-data by various operations.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.CreateConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the domain constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DataType">
      <summary>
            Gets or sets the data type of the domain.
            </summary>
      <value>The data type.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DefaultValue">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.Collation">
      <summary>
            Gets or sets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DomainConstraints">
      <summary>
            Gets the constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.IndexColumn">
      <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.IndexColumn.Index" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.IndexColumn.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Index">
      <summary>
            Gets or sets the index.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Column">
      <summary>
            Gets or sets the column.
            </summary>
      <value>The column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Ascending">
      <summary>
            Gets or sets a value indicating the ascending or descending sort direction for this instance.
             The default is <see langword="true" />.
            </summary>
      <value>
        <see langword="true" /> if ascending; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Name">
      <summary>
            Gets or sets a name of the node.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Expression">
      <summary>
            Gets or sets the expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Languages">
      <summary>
            Gets or sets the language.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.ISequenceable">
      <summary>
            Defines an object that could be the source of a sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.ISequenceable.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.NodeCollection`1">
      <summary>
            Represents lockable indexed by <see cref="P:Xtensive.Sql.Model.Node.Name" /> collection of <see cref="T:Xtensive.Sql.Model.Node" />s.
            </summary>
      <typeparam name="TNode">Node type</typeparam>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor(System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="capacity">The initial collection capacity.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="collection">The collection whose elements are copied to the new list.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.NodeCollection`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read-only.
            </summary>
      <value>
      </value>
      <returns>
        <see langword="True" /> if this instance is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Xtensive.Sql.Model.NodeCollection`1.Item(System.String)">
      <summary>
            Gets the <typeparamref name="TNode" /> at the specified index.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.PairedNodeCollection`2">
      <summary>
            Represents paired collection of <see cref="T:Xtensive.Sql.Model.Node" />s.
            </summary>
      <typeparam name="TOwner">Owner node type</typeparam>
      <typeparam name="TNode">Item node type</typeparam>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Add(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Remove(`1)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collectionowner.</param>
      <param name="property">Owner collection property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
      <param name="property">Owner collection property.</param>
      <param name="capacity">The initial collection capacity.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String,System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
      <param name="property">Owner collection property.</param>
      <param name="collection">The collection whose elements are copied to the new list.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PairedNodeCollection`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>
        <see langword="True" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Xtensive.Sql.Model.Partition">
      <summary>
            Represents a single partition object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Partition.#ctor(Xtensive.Sql.Model.PartitionDescriptor,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Partition" /> class.
            </summary>
      <param name="partitionDescriptor">The partition descriptor.</param>
      <param name="filegroup">The filegroup.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Partition.Filegroup">
      <summary>
            Gets or sets the tablespace name or a filegroup name (according to RDBMS)
            that contains this instance.
            </summary>
      <value>The tablespace or a filegroup name.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Partition.PartitionDescriptor">
      <summary>
            Gets or sets the partitionDescriptor.
            </summary>
      <value>The partitionDescriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.HashPartition">
      <summary>
            Represents a hash partition.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.ListPartition">
      <summary>
            Represents a list partition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.ListPartition.Values">
      <summary>
            Gets or sets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionDescriptor">
      <summary>
            Represents a set of information concerning object partitioning.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateHashPartition(System.String)">
      <summary>
            Creates the hash partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateListPartition(System.String,System.String[])">
      <summary>
            Creates the list partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateRangePartition(System.String,System.String)">
      <summary>
            Creates the range partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <param name="boundary">The boundary.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionSchema)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionSchema">The partition schema.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionMethod">The partition method.</param>
      <param name="partitionAmount">The partition amount.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionMethod">The partition method.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Column">
      <summary>
            Gets or sets the column against which an object will be partitioned.
            </summary>
      <value>The column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionAmount">
      <summary>
            Gets or sets the partition amount.
            </summary>
      <value>The partition amount.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Partitions">
      <summary>
            Gets the partitions.
            </summary>
      <value>The partitions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionMethod">
      <summary>
            Gets or sets the partition method.
            </summary>
      <value>The partition method.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionSchema">
      <summary>
            Gets or sets the partition schema.
            </summary>
      <value>The partition schema.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionFunction">
      <summary>
            Represents a function in the current catalog that maps the rows of a table or index
            into partitions based on the values of a specified column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionFunction.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.DataType">
      <summary>
            Gets or sets the data type of the column used for partitioning.
            </summary>
      <value>The data type of the column used for partitioning.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryType">
      <summary>
            Gets or sets the boundary type that affects the partitioning behavior.
            </summary>
      <value>The boundary type.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryValues">
      <summary>
            Gets or sets the boundary values for each partition of a partitioned table or index 
            that uses this partition function.
            </summary>
      <value>The boundary values.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionSchema">
      <summary>
            Represents a schema in the current <see cref="T:Xtensive.Sql.Model.Catalog" /> that maps the partitions of a 
            partitioned table or index to filegroups. The number and domain of the partitions of a 
            partitioned table or index are determined in a <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionSchema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionSchema.Filegroups">
      <summary>
            Specifies the names of the filegroups to hold the partitions specified
            by <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction" />. Filegroup name must already exist in the <see cref="T:Xtensive.Sql.Model.Catalog" />.
            </summary>
      <value>The filegroups.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction">
      <summary>
            Gets or sets the partition function.
            </summary>
      <value>The partition function.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.RangePartition">
      <summary>
            Represents a range partition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.RangePartition.Boundary">
      <summary>
            Gets or sets the partition boundary.
            </summary>
      <value>The boundary.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionMethod">
      <summary>
            Enumeration of possible partitioning methods.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.None">
      <summary>
            None.
            Value is <see langword="0x00" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.Range">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on column values falling within a given range.
            Value is <see langword="0x01" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.List">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on columns values matching one of a set of discrete values.
            Value is <see langword="0x02" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.Hash">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on the value returned by a user-defined expression 
            that operates on column values in rows to be inserted into the table.
            Value is <see langword="0x04" />. 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ReferentialAction">
      <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.NoAction">
      <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.Restrict">
      <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.Cascade">
      <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.SetDefault">
      <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.SetNull">
      <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Schema">
      <summary>
            A schema is a persistent descriptor that includes the name of the SQL-schema,
            the  <see cref="T:Xtensive.Sql.Model.CharacterSet"> default character set</see> for the schema,
            and the descriptor of every component of the schema.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateSequence(System.String)">
      <summary>
            Creates the sequence.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTemporaryTable(System.String)">
      <summary>
            Creates the temporary table.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTable(System.String)">
      <summary>
            Creates the table.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The select statement.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative,Xtensive.Sql.CheckOptions)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The select statement.</param>
      <param name="checkOptions">The check options.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Creates the assertion.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
      <param name="isDeferrable">Is assertion deferrable.</param>
      <param name="isInitiallyDeferred">Is assertion initially deferred.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the assertion.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateCharacterSet(System.String)">
      <summary>
            Creates the character set.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTranslation(System.String)">
      <summary>
            Creates the translation.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateCollation(System.String)">
      <summary>
            Creates the collation.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the domain.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Datatype.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType)">
      <summary>
            Creates the domain.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Datatype.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Sequences">
      <summary>
            Gets the sequences.
            </summary>
      <value>The sequences.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Assertions">
      <summary>
            Gets the assertions.
            </summary>
      <value>The assertions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Domains">
      <summary>
            Gets the domains.
            </summary>
      <value>The domains.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Collations">
      <summary>
            Gets the collations.
            </summary>
      <value>The collations.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.CharacterSets">
      <summary>
            Gets the character sets.
            </summary>
      <value>The character sets.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.DefaultCharacterSet">
      <summary>
            Gets or sets the default character set.
            </summary>
      <value>The default character set.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Translations">
      <summary>
            Gets the translations.
            </summary>
      <value>The translations.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Views">
      <summary>
            Gets the views.
            </summary>
      <value>The views.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Tables">
      <summary>
            Gets the tables.
            </summary>
      <value>The tables.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Sequence">
      <summary>
            Represents an object that generates unique numbers, mostly used for primary key values.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Sequence.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Sequence.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Sequence.DataType">
      <summary>
            Gets or sets the data type.
            </summary>
      <value>
      </value>
      <remarks>
            The data type must be exact numeric with scale 0.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.Sequence.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.SequenceDescriptor">
      <summary>
            Represents a set of information concerning sequence.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
      <param name="maxValue">The max value.</param>
      <param name="minValue">The min value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
      <param name="maxValue">The max value.</param>
      <param name="minValue">The min value.</param>
      <param name="isCyclic">The is cyclic.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.StartValue">
      <summary>
            Gets or sets the start value.
            </summary>
      <remarks>
            The start value must lie between the minimum and maximum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Increment">
      <summary>
            Gets or sets the increment.
            </summary>
      <remarks>
            If increment is not specified, then an increment of 1 
            is implicit. Increment must not be 0.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MaxValue">
      <summary>
            Gets or sets the max value.
            </summary>
      <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MinValue">
      <summary>
            Gets or sets the min value.
            </summary>
      <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.LastValue">
      <summary>
            Gets or sets the last value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.IsCyclic">
      <summary>
            Gets or sets a value indicating whether this instance is isCyclic.
            </summary>
      <value>
        <see langword="true" /> if isCyclic; otherwise, <see langword="false" />.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.SqlModelVisitor`1">
      <summary>
            An abstract base class for all database model visitors. 
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.Visit(Xtensive.Sql.Model.Node)">
      <summary>
            Visits a node.
            </summary>
      <param name="node">The node.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
      <summary>
            Visits unique constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
      <summary>
            Visits table constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
      <summary>
            Visits primary key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
      <summary>
            Visits foreign key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
      <summary>
            Visits domain constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitConstraint(Xtensive.Sql.Model.Constraint)">
      <summary>
            Visits a constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
      <summary>
            Visits check constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
      <summary>
            Visits range partition.
            </summary>
      <param name="rangePartition">The range partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
      <summary>
            Visits partition schema.
            </summary>
      <param name="partitionSchema">The partition schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
      <summary>
            Visits partition function.
            </summary>
      <param name="partitionFunction">The partition function.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
      <summary>
            Visits partition descriptor.
            </summary>
      <param name="partitionDescriptor">The partition descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartition(Xtensive.Sql.Model.Partition)">
      <summary>
            Visits a partition.
            </summary>
      <param name="partition">The partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
      <summary>
            Visits list partition.
            </summary>
      <param name="listPartition">The list partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
      <summary>
            Visits hash partition.
            </summary>
      <param name="hashPartition">The hash partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Visits a catalog.
            </summary>
      <param name="catalog">The catalog.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
      <summary>
            Visits character set.
            </summary>
      <param name="characterSet">The character set.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCollation(Xtensive.Sql.Model.Collation)">
      <summary>
            Visits a collation.
            </summary>
      <param name="collation">The collation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Visits data table.
            </summary>
      <param name="dataTable">The data table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Visits data table column.
            </summary>
      <param name="dataTableColumn">The data table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomain(Xtensive.Sql.Model.Domain)">
      <summary>
            Visits a domain.
            </summary>
      <param name="domain">The domain.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
      <summary>
            Visits the full-text index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndex(Xtensive.Sql.Model.Index)">
      <summary>
            Visits an index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
      <summary>
            Visits index column.
            </summary>
      <param name="indexColumn">The index column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Visits a schema.
            </summary>
      <param name="schema">The schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequence(Xtensive.Sql.Model.Sequence)">
      <summary>
            Visits a sequence.
            </summary>
      <param name="sequence">The sequence.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
      <summary>
            Visits sequence descriptor.
            </summary>
      <param name="sequenceDescriptor">The sequence descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTable(Xtensive.Sql.Model.Table)">
      <summary>
            Visits a table.
            </summary>
      <param name="table">The table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
      <summary>
            Visits table column.
            </summary>
      <param name="tableColumn">The table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
      <summary>
            Visits temporary table.
            </summary>
      <param name="temporaryTable">The temporary table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTranslation(Xtensive.Sql.Model.Translation)">
      <summary>
            Visits a translation.
            </summary>
      <param name="translation">The translation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitView(Xtensive.Sql.Model.View)">
      <summary>
            Visits a view.
            </summary>
      <param name="view">The view.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
      <summary>
            Visits view column.
            </summary>
      <param name="viewColumn">The view column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="T:Xtensive.Sql.Model.Table">
      <summary>
            Represents a table object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String,Xtensive.Sql.SqlValueType)">
      <summary>
            Creates the table column.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Column datatype.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String)">
      <summary>
            Creates the table column.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateCheckConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the check constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateDefaultConstraint(System.String,Xtensive.Sql.Model.TableColumn)">
      <summary>
            Creates the default constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="column">The column.</param>
      <returns>Default constraint.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreatePrimaryKey(System.String,Xtensive.Sql.Model.TableColumn[])">
      <summary>
            Creates the primary key.
            </summary>
      <param name="name">The name.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateUniqueConstraint(System.String,Xtensive.Sql.Model.TableColumn[])">
      <summary>
            Creates the unique constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateForeignKey(System.String)">
      <summary>
            Creates the foreign key.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.TableColumns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.TableConstraints">
      <summary>
            Gets the constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.PartitionDescriptor">
      <summary>
            Gets or sets the partitioning descriptor.
            </summary>
      <value>The partitioning descriptor.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.Filegroup">
      <summary>
            Gets or sets the value indicating that specified table will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the table will bw located at the 
            default filegroup.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.TableColumn">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.TableColumn.Table" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.Table)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.DataType">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Sql.SqlValueType" />.
            </summary>
      <value>The datatype.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Domain">
      <summary>
            Gets or sets the domain.
            </summary>
      <value>The domain.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.DefaultValue">
      <summary>
            Specifies the value provided for the column when a value is not explicitly supplied during an insert. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Expression">
      <summary>
            Gets or sets the computed expression that defines the value of a computed column.
            </summary>
      <value>The expression of a computed column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.IsPersisted">
      <summary>
            Gets or sets a value indicating whether RDBMS will physically store the computed values in the table, 
            and update the values when any other columns on which the computed column depends are updated. .
            </summary>
      <value>
        <see langword="true" /> if this instance is persisted; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Collation">
      <summary>
            Gets or sets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.IsNullable">
      <summary>
            Gets or sets a value indicating whether null values are allowed in the column.
            </summary>
      <value>
        <see langword="true" /> if this instance is nullable; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Table">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableColumn.Table" /> this instance belongs to.
            </summary>
      <value>The table.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.TemporaryTable">
      <summary>
            Represents a temporary table object.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.TemporaryTable.IsGlobal">
      <summary>
            Gets or sets a value indicating whether this instance is global. 
            If value is <see langword="false" /> the this instance is local.
            </summary>
      <value>
        <see langword="true" /> if this instance is global; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TemporaryTable.PreserveRows">
      <summary>
            Gets or sets a value indicating whether rows are preserved on commit.
            </summary>
      <value>
        <see langword="true" /> if rows are preserved on commit; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Sql.Model.Translation">
      <summary>
            Represents a characher translation object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Translation.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.View">
      <summary>
            Represents a View node.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.View.CreateColumn(System.String)">
      <summary>
            Creates the view column.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.View.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.View.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.View.ViewColumns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.View.CheckOptions">
      <summary>
            Specifies the level of checking to be done when inserting or updating data through a view.
            If the option is specified, every row that is inserted or updated through the view must
            conform to the definition of that view.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.View.Definition">
      <summary>
            The statement that defines the view. The statement can use more than one table
            and other views.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.View.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.ViewColumn">
      <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.ViewColumn.View" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.ViewColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.ViewColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.View)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.ViewColumn.View">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.ViewColumn.View" /> this instance belongs to.
            </summary>
      <value>The view.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlColumnCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlColumn})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlOrderCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlOrder" />s.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableColumnCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlTableColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlTableColumn})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlTableColumnCollection" /> class.
            </summary>
      <param name="list">The list to wrap.</param>
      <exception cref="T:System.ArgumentNullException">list is null.</exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableColumnCollection.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAggregate.Distinct">
      <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlAggregate" /> is distinct.
            </summary>
      <value>
        <see langword="true" /> if distinct; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAggregate.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlArray`1">
      <summary>
            Represents generic array expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlArray`1.Values">
      <summary>
            Gets the values.
            </summary>
      <values>The values.</values>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlBetween">
      <summary>
            Represents between expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Left">
      <summary>
            Gets the left boundary of the between predicate.
            </summary>
      <value>The left boundary of the between predicate.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Right">
      <summary>
            Gets the right boundary of the between predicate.
            </summary>
      <value>The right boundary of the between predicate.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Expression">
      <summary>
            Gets the expression to compare.
            </summary>
      <value>The expression to compare.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlBinary">
      <summary>
            Represents binary expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBinary.Left">
      <summary>
            Gets the left operand of the binary operator.
            </summary>
      <value>The left operand of the binary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBinary.Right">
      <summary>
            Gets the right operand of the binary operator.
            </summary>
      <value>The right operand of the binary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCollate.Collation">
      <summary>
            Gets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCollate.Operand">
      <summary>
            Gets the operand.
            </summary>
      <value>The operand.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlColumnRef">
      <summary>
            Represents a reference to a SQL column.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumnRef.SqlColumn">
      <summary>
            Gets the SQL column.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlContainer">
      <summary>
            Represents a container that can hold any value.
            An attempt to its translation leads to an error.
            This class can be used to store temporary values inside <see cref="T:Xtensive.Sql.Dml.SqlExpression" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlContainer.Value">
      <summary>
            Gets the value contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Name">
      <summary>
            Gets the name of the cursor.
            </summary>
      <value>The name of the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Insensitive">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor" />
            makes a temporary copy of the data to be used.
            </summary>
      <value>
        <see langword="true" /> if this <see cref="T:Xtensive.Sql.Dml.SqlCursor" /> makes a temporary
            copy of the data to be used; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Scroll">
      <summary>
            Gets or sets a value indicating whether all fetch options are available for this cursor.
            </summary>
      <value>
        <see langword="true" /> if all fetch options are available; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Query">
      <summary>
            Gets or sets the select statement that defines the result set of the cursor.
            </summary>
      <value>The select statement that defines the result set of the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.ReadOnly">
      <summary>
            Gets or sets a value indicating whether cursor is read only.
            </summary>
      <value>
        <see langword="true" /> if cursor is read only; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Columns">
      <summary>
            Gets updatable columns within the cursor.
            </summary>
      <value>Updatable columns within the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.WithHold">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor" /> is holdable cursor.
            </summary>
      <value>
        <see langword="true" /> if this instance is a holdable cursor; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.WithReturn">
      <summary>
            Gets or sets a value indicating whether this instance is result set cursor.
            </summary>
      <value>
        <see langword="true" /> if this instance is result set cursor; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.Arguments">
      <summary>
            Gets the expressions.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.FunctionType">
      <summary>
            Gets the function type.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlLike">
      <summary>
            Represents LIKE predicat.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Pattern">
      <summary>
            Gets the pattern expression.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Escape">
      <summary>
            Gets the escape character expression.
            </summary>
      <value>The escape.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlLiteral`1">
      <summary>
            Represents literal value expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLiteral`1.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlMatch">
      <summary>
            Represents MATCH SQL statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.Value">
      <summary>
            Gets the value which will be tested for matching.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.SubQuery">
      <summary>
            Gets the sub query to search of matching.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.Unique">
      <summary>
            Gets a value indicating whether unique sub query rows for search matching will be used only.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.MatchType">
      <summary>
            Gets the type of the match.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNative.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlNextValue">
      <summary>
            Represents NEXT VALUE FOR expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNextValue.Increment">
      <summary>
            Gets the increment.
            </summary>
      <value>The increment.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNextValue.Sequence">
      <summary>
            Gets the sequence.
            </summary>
      <value>The sequence.</value>
    </member>
    <member name="T:Xtensive.Sql.ISqlLValue">
      <summary>
            A contract for server-independent LValue in SQL DOM query model.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ISqlCursorFetchTarget">
      <summary>
            A contract for server-independent cursor fetch target.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlParameterRef">
      <summary>
            Represents a Sql parameter.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlSubQuery">
      <summary>
            Represents sub query expression.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlSubQuery.ReplaceWith(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSubQuery.Query">
      <summary>
            Gets the query.
            </summary>
      <value>The query.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableColumn">
      <summary>
            Defines a reference to <see cref="T:Xtensive.Sql.Model.DataTableColumn" /> object
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTrim">
      <summary>
            Represents Trim function call.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTrim.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTrim.TrimCharacters">
      <summary>
            Gets the trim characters.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlUnary">
      <summary>
            Represents unary expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUnary.Operand">
      <summary>
            Gets the operand of the unary operator.
            </summary>
      <value>The operand of the unary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUserColumn.Expression">
      <summary>
            Gets the column expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUserFunctionCall.Name">
      <summary>
            Gets the function name.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlVariable.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlVariable.Type">
      <summary>
            Gets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlHint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlHint" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFastFirstRowsHint.Amount">
      <summary>
            Gets the rows amount.
            </summary>
      <value>The row amount.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlForceJoinOrderHint.Tables">
      <summary>
            Gets the corresponding tables.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlJoinHint">
      <summary>
            Represents a join option (hint) for a query optimizer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Method">
      <summary>
            Gets the join method.
            </summary>
      <value>The join method.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Table">
      <summary>
            Gets the table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlJoinMethod">
      <summary>
            A list of available join methods for a table.
            </summary>
      <remarks>
            MS SQL Server supports only <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop" />, <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge" />,
            <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash" /> and <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote" /> methods.
            Oracle supports all methods except <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote" /> method.
            </remarks>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Default">
      <summary>
            Join method is selected by query optimizer.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop">
      <summary>
            Instructs the optimizer to join each specified table to another row source with a nested loops join,
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.LoopWithIndex">
      <summary>
            Instructs the optimizer to join the specified table to another row source with a nested loops join
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoLoop">
      <summary>
            Instructs the optimizer to exclude nested loops joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge">
      <summary>
            Instructs the optimizer to join each specified table with another row source using a sort-merge join.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoMerge">
      <summary>
            Instructs the optimizer to exclude sort-merge joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash">
      <summary>
            Instructs the optimizer to join each specified table with another row source using a hash join.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoHash">
      <summary>
            Instructs the optimizer to exclude hash joins when joining each specified table to another row source using
            the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote">
      <summary>
            Specifies that the join operation is performed on the site of the right table. This is useful
            when the left table is a local table and the right table is a remote table. This method should be used
            only when the left table has fewer rows than the right table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNativeHint.HintText">
      <summary>
            Gets the hint text.
            </summary>
      <value>The hint text.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlJoinedTable.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.JoinExpression">
      <summary>
            Gets the join expression.
            </summary>
      <value>The join expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.AliasedColumns">
      <summary>
            Gets or sets the aliased columns.
            </summary>
      <value>Aliased columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.JoinType">
      <summary>
            Gets the type of the join.
            </summary>
      <value>The type of the join.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Left">
      <summary>
            Gets the left.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Right">
      <summary>
            Gets the right.
            </summary>
      <value>The right.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlMatchType">
      <summary>
            Enums types of search of matching in MATCH SQL statement.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.None">
      <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> then the MATCH
            SQL statement is true.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.Partial">
      <summary>
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            non-null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.Full">
      <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> then the MATCH
            SQL statement is false.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlOrder">
      <summary>
            Represents order specification.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Expression">
      <summary>
            Gets the expression to sort by.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Position">
      <summary>
            Gets the position of column to sort by.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Ascending">
      <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlOrder" /> is ascending.
            </summary>
      <value>
        <see langword="true" /> if ascending; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlQueryRef.Query">
      <summary>
            Gets the query statement.
            </summary>
      <value>The query statement.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableRef">
      <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table" /> object;
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableRef.Name">
      <summary>
            Gets the name of the instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableRef.DataTable">
      <summary>
            Gets the referenced table.
            </summary>
      <value>The table.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAssignment.Left">
      <summary>
            Gets the left operand of the assign statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAssignment.Right">
      <summary>
            Gets the right operand of the assign statement.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Add(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Contains(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Remove(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.IndexOf(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.AcceptVisitor(Xtensive.Sql.ISqlVisitor)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCloseCursor.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDeclareVariable.Variable">
      <summary>
            Gets the variable.
            </summary>
      <value>The variable.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlQueryStatement">
      <summary>
            Base class for DML statements.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlQueryStatement.Hints">
      <summary>
            Gets the collection of join hints.
            </summary>
      <value>The collection of join hints.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlDelete">
      <summary>
            Describes SQL DELETE statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDelete.From">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDelete.Where">
      <summary>
            Gets or sets the WHERE clause expression.
            </summary>
      <value>The WHERE clause expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Option">
      <summary>
            Gets the fetch option.
            </summary>
      <value>The fetch option.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.RowCount">
      <summary>
            Gets the row count.
            </summary>
      <value>The row count.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Targets">
      <summary>
            Gets the targets.
            </summary>
      <value>The targets.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlIf">
      <summary>
            Represents SQL IF...ELSE statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.Condition">
      <summary>
            Gets or sets the condition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.True">
      <summary>
            Gets or sets SQL statement which is carried out if the condition is true.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.False">
      <summary>
            Gets or sets SQL statement which is carried out if the condition is false.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.Into">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.Values">
      <summary>
            Gets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.From">
      <summary>
            Gets or sets the FROM clause expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOpenCursor.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlSelect">
      <summary>
            Represents SQL SELECT statement.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlSelect.ShallowClone">
      <summary>
            Makes a shallow clone of the instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Columns">
      <summary>
            Gets the collection of columns to select.
            </summary>
      <value>The collection of columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.Int32)">
      <summary>
            An indexer that provides access to collection items by their index.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.From">
      <summary>
            Gets or sets from clause.
            </summary>
      <value>The from clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Where">
      <summary>
            Gets or sets the where clause.
            </summary>
      <value>The where clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.GroupBy">
      <summary>
            Gets the collection of columns to group by.
            </summary>
      <value>The collection of columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Having">
      <summary>
            Gets or sets the having clause.
            </summary>
      <value>The having clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.OrderBy">
      <summary>
            Gets the order by clause.
            </summary>
      <value>The order by clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Distinct">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlSelect" /> is distinct.
            </summary>
      <value>
        <see langword="true" /> if distinct is set; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Limit">
      <summary>
            Gets or sets the limit.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Add(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Clear">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Contains(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Remove(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.IndexOf(Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Count">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Update">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Values">
      <summary>
            Gets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Where">
      <summary>
            Gets or sets the WHERE clause expression.
            </summary>
      <value>The WHERE clause expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.From">
      <summary>
            Gets or sets the FROM clause expression.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlWhile">
      <summary>
            Represents SQL while loop.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlWhile.Statement">
      <summary>
            Gets or sets the statement to execute.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlWhile.Condition">
      <summary>
            Gets or sets the condition for the repeated execution
            of an SQL statement or statement block.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerException">
      <summary>
            An <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" /> exception.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <see cref="M:Xtensive.Internals.DocTemplates.SerializableDocTemplate.Ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" copy="true" />
    </member>
    <member name="T:Xtensive.Sql.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExCanNotReadDatabaseAndSchemaNames">
      <summary>
              Looks up a localized string similar to Can not read database and schema names.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExCircularReferenceDetected">
      <summary>
              Looks up a localized string similar to Circular reference is detected..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExColumnAlreadyHasSpecifiedName">
      <summary>
              Looks up a localized string similar to Column already has specified name..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExColumnBelongsToOtherTable">
      <summary>
              Looks up a localized string similar to Column belongs to other table..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExConstraintBelongsToOtherDomain">
      <summary>
              Looks up a localized string similar to Constraint belongs to other domain..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExConstraintBelongsToOtherTable">
      <summary>
              Looks up a localized string similar to Constraint belongs to other table..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExFunctionXIsNotSupported">
      <summary>
              Looks up a localized string similar to Function '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExIncrementMustNotBeZero">
      <summary>
              Looks up a localized string similar to Increment must not be 0..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidActionType">
      <summary>
              Looks up a localized string similar to Invalid action type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsNonNullTypeNameIsAllowedIfAndOnlyIfTypeEqualsSqlTypeUnknown">
      <summary>
              Looks up a localized string similar to Invalid arguments: non-null 'typeName' is allowed if and only if 'type' equals 'SqlType.Unknown'.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsPrecisionAndLengthShouldNotBeUsedTogether">
      <summary>
              Looks up a localized string similar to Invalid arguments: 'precision' and 'length' should not be used together.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsScaleAndPrecisionShouldBeUsedTogether">
      <summary>
              Looks up a localized string similar to Invalid arguments: 'scale' and 'precision' should be used together.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidConstraintType">
      <summary>
              Looks up a localized string similar to Invalid constraint type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidExpressionType">
      <summary>
              Looks up a localized string similar to Invalid expression type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidUsageOfTheOrientationArgument">
      <summary>
              Looks up a localized string similar to Invalid usage of the "orientation" argument..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidUsageOfTheRowCountArgument">
      <summary>
              Looks up a localized string similar to Invalid usage of the "rowCount" argument..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExIsolationLevelXIsNotSupported">
      <summary>
              Looks up a localized string similar to Isolation level '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExItemsForCycleXAreNotSpecified">
      <summary>
              Looks up a localized string similar to Items for cycle '{0}' are not specified..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExJoinExpressionShouldBeNullForCrossApplyAndOuterApply">
      <summary>
              Looks up a localized string similar to Join expression should be NULL for CROSS APPLY &amp; OUTER APPLY..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLengthShouldBeNotNegativeValue">
      <summary>
              Looks up a localized string similar to Length should be not negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLiteralTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Literal type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLockXIsNotSupported">
      <summary>
              Looks up a localized string similar to Lock '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNameForParameterXIsNotFound">
      <summary>
              Looks up a localized string similar to Name for parameter '{0}' is not found'.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNameMustBeNotNullOrEmpty">
      <summary>
              Looks up a localized string similar to Name must be not null or empty..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNodeTypeIsUnknown">
      <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExOnlySqlLiteralOrSqlPlaceholderCanBeUsedInLimitOffset">
      <summary>
              Looks up a localized string similar to Only SqlLiteral or SqlPlaceholder can be used in Limit/Offset.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExOperationXIsNotSupported">
      <summary>
              Looks up a localized string similar to Operation '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPartOfUrlContainsForbiddenCharacters">
      <summary>
              Looks up a localized string similar to Part of URL contains forbidden characters. Forbidden characters: .
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPositionValueShouldBeGreaterThanZero">
      <summary>
              Looks up a localized string similar to Position value should be greater than zero..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPrecisionShouldBeNonNegativeValue">
      <summary>
              Looks up a localized string similar to Precision should be non-negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExReferencedColumnsCountCantBeLessThenOne">
      <summary>
              Looks up a localized string similar to Referenced columns count cannot be less then one..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExReferencingColumnsCountCantBeLessThenOne">
      <summary>
              Looks up a localized string similar to Referencing columns count cannot be less then one..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExRowAmountShouldBePositiveNumber">
      <summary>
              Looks up a localized string similar to Row amount should be positive number..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExScaleShouldBeNonNegativeValue">
      <summary>
              Looks up a localized string similar to Scale should be non-negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSchemaMustBeNotNull">
      <summary>
              Looks up a localized string similar to Schema must be not null..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSizeShouldBeNotNegativeValue">
      <summary>
              Looks up a localized string similar to Size should be not negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSpecifiedConnectionDoesNotBelongToThisDriver">
      <summary>
              Looks up a localized string similar to Specified connection does not belong to this driver..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSpecifiedPrecisionXIsGreaterThanMaximumSupportedByStorageY">
      <summary>
              Looks up a localized string similar to Specified precision ({0}) is greater than maximum supported by storage ({1})..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSqlContainerExpressionCanNotBeCompiled">
      <summary>
              Looks up a localized string similar to Sql container expression can not be compiled..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTableAlreadyHasSpecifiedName">
      <summary>
              Looks up a localized string similar to Table already has specified name..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTablePropertyIsNotSet">
      <summary>
              Looks up a localized string similar to Table is not set..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheDataTypeMustBeExactNumericWithoutScaleOrWithZeroScale">
      <summary>
              Looks up a localized string similar to The data type must be exact numeric without scale or with zero scale..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheDataTypeMustBeExactNumericWithScale0">
      <summary>
              Looks up a localized string similar to The data type must be exact numeric with scale 0..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheMaximumValueMustBeGreaterThanTheMinimumValue">
      <summary>
              Looks up a localized string similar to The maximum value must be greater than the minimum value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheScaleMustBeLessThanOrEqualToPrecision">
      <summary>
              Looks up a localized string similar to The scale must be less than or equal to precision..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheStartValueShouldBeBetweenTheMinimumAndMaximumValue">
      <summary>
              Looks up a localized string similar to The start value should be between the minimum and maximum value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportX">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportXValuesGreatherThanYSuppliedValueIsZ">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}' values greather than '{1}'. Supplied value is '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportXValuesLessThanYSuppliedValueIsZ">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}' values less than '{1}'. Supplied value is '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTransactionShouldBeActive">
      <summary>
              Looks up a localized string similar to Transaction should be active.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTransactionShouldNotBeActive">
      <summary>
              Looks up a localized string similar to Transaction should not be active.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTranslationOfLiteralOfTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Translation of literal of type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTypesOfValuesAreDifferent">
      <summary>
              Looks up a localized string similar to Types of values are different.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExUnboundColumn">
      <summary>
              Looks up a localized string similar to Unbound column '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExValueForPlaceholderXIsNotSet">
      <summary>
              Looks up a localized string similar to Value for placeholder '{0}' is not set..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.FullTextQueries">
      <summary>
              Looks up a localized string similar to Full text queries.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.LogUnableToGetDefaultNodeComparerForTypeXxx">
      <summary>
              Looks up a localized string similar to Unable to get default SQL comparer for type {0}..
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.CheckConstraintInfo">
      <summary>
            Describes a check constraint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.MaxExpressionLength">
      <summary>
            Gets or sets the maximal length of the check expression.
            </summary>
      <value>The maximal length of the check expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ColumnFeatures">
      <summary>
        <para>Defines possible column categories.</para>
        <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute 
            that allows a bitwise combination of its member values.</para>
      </summary>
      <remarks>
        <para>It is well known that RDBMS servers stores data at table columns.
            Most of columns requires that their values have been specified by user
            but there are some exceptions of that rule (e.g. <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Identity" />
            or <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Computed" /> columns).</para>
        <para>If you working on your own <see cref="T:Xtensive.Sql.SqlDriver">RDBMS driver</see> 
            implementation you have to provide correct <see cref="T:Xtensive.Sql.Info.ServerInfo">information</see>
            about RDBMS capabilities. As a consequence you have to specify what 
            column categories are supported (see example below).</para>
      </remarks>
      <example>
      </example>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.None">
      <summary>
            RDBMS server does not support any special columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.Identity">
      <summary>
            RDBMS server supports identity columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.Computed">
      <summary>
            RDBMS server supports computed columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ColumnInfo">
      <summary>
            Describes a table column.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ColumnInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintActions">
      <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.None">
      <summary>
            No actions are supported.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.NoAction">
      <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Restrict">
      <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Cascade">
      <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetDefault">
      <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetNull">
      <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ConstraintFeatures">
      <summary>
        <para>Defines optional features for RDBMS constraints.</para>
        <para>An exact feature set depends on a certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Clustered">
      <summary>
            Indicates that primary and unique key constraints can be
            declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Nullable">
      <summary>
            Indicates that primary and unique key constraints can be
            applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeCollection">
      <summary>
            Represents a collection of <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> objects that describes all data types existing in database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeCollection.Lock(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> by the specified native type name.
            </summary>
      <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> instance.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(Xtensive.Sql.SqlType)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> by the specified <see cref="T:Xtensive.Sql.SqlType" />.
            </summary>
      <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> instance.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Boolean">
      <summary>
            Boolean (bit).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int8">
      <summary>
            Signed Byte (8 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt8">
      <summary>
            Unsigned byte.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int16">
      <summary>
            Small integer (16 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt16">
      <summary>
            Unsigned small integer (word).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int32">
      <summary>
            Integer (32 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt32">
      <summary>
            Unsigned integer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int64">
      <summary>
            Long integer (64 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt64">
      <summary>
            Unsigned long integer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Decimal">
      <summary>
            Numeric data type with fixed precision and scale.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Float">
      <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Double">
      <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.DateTime">
      <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Interval">
      <summary>
            A representation of the interval data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Char">
      <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarChar">
      <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarCharMax">
      <summary>
            Variable-length Unicode data with a maximum length of 230 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Binary">
      <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinary">
      <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinaryMax">
      <summary>
            Variable-length binary data from 0 through 231-1 (2,147,483,647) bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Guid">
      <summary>
            A globally unique identifier (GUID). 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeFeatures">
      <summary>
            Defines a list of features those are allows to describe
            RDBMS capabilities concerning a certain data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.None">
      <summary>
            Indicates that RDBMS supports nothing additional
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.FillFactor">
      <summary>
            Indicates that RDBMS supports fill factor property
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.KeyConstraint">
      <summary>
            Indicates that RDBMS allows key constraints
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Multiple">
      <summary>
            Indicates that RDBMS allows multiple columns
            of the mentioned data type in a single table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Nullable">
      <summary>
            Indicates that RDBMS allows null values
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Identity">
      <summary>
            Indicates that RDBMS allows to declare identity
            column of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Default">
      <summary>
            Indicates that RDBMS allows to specify default value
            for a column of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Grouping">
      <summary>
            Indicates that RDBMS supports grouping operations
            by columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Ordering">
      <summary>
            Indicates that RDBMS supports ordering operations
            by columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Clustering">
      <summary>
            Indicates that RDBMS allows to build clustered index
            which includes key columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Indexing">
      <summary>
            Indicates that RDBMS allows to build index
            which includes key columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.NonKeyIndexing">
      <summary>
            Indicates that RDBMS allows to include column of the 
            mentioned data type as non-key part of some index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.ZeroLengthValueIsNull">
      <summary>
            Indicates that RDBMS treats zero length value as NULL.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeInfo">
      <summary>
            Describes a data type.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Fractional(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.Int32,System.String[])">
      <summary>
            Creates a fractional <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Range(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.String[])">
      <summary>
            Ranges a range <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Stream(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.Int32,System.String[])">
      <summary>
            Creates a stream <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Regular(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.String[])">
      <summary>
            Creates a regular <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /></summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.Type">
      <summary>
            Gets the SQL type
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.Features">
      <summary>
            Gets the features of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.NativeTypes">
      <summary>
            Gets the native database type names.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxLength">
      <summary>
            Gets the maximum length of this data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxPrecision">
      <summary>
            Gets the maximum precision of this data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.ValueRange">
      <summary>
            Gets the range.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DdlStatements">
      <summary>
            Enumerates possible Data Definition Language(DDL) statements
            in accordance with SQL92 standard.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.None">
      <summary>
            Indicates that RDBMS does not support any DDL statement
            for the mentioned database entity.
            </summary>
      <value>0x0</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Create">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Create" /> statement
            for the mentioned database entity.
            For constraints this indicates that RDBMS supports ADD statement.
            </summary>
      <value>0x1</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Alter">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Alter" /> statement
            for the mentioned database entity.
            </summary>
      <value>0x2</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Drop">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Drop" /> statement
            for the mentioned database entity.
            </summary>
      <value>0x4</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.All">
      <summary>
            Indicates that RDBMS supports all DDL statements
            for the mentioned database entity.
            </summary>
      <value>0x7</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IdentityFeatures">
      <summary>
        <para>Defines a list of typical features of identity columns.</para>
        <para>You can combine this features to describe certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.None">
      <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.StartValue">
      <summary>
            Indicates that RDBMS allows to specify start value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Increment">
      <summary>
            Indicates that RDBMS supports automaticaly incrementing
            identity columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Minimum">
      <summary>
            Indicates that RDBMS allows to specify minimum value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Maximum">
      <summary>
            Indicates that RDBMS allows to specify maximun value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Cycle">
      <summary>
            Indicates that RDBMS allows cycles in generated
            sequences of identity column values.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.IdentityInfo">
      <summary>
            Describes an identity source.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IdentityInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IndexFeatures">
      <summary>
        <para>Defines a list of possible index features.</para>
        <para>You can combine this features to describe certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.None">
      <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Clustered">
      <summary>
            Indicates that RDBMS supports clustered indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.NonKeyColumns">
      <summary>
            Indicates that RDBMS allows to include some columns as
            non key part of an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.FillFactor">
      <summary>
            Indicates that RDBMS allows to specify fill factor for an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Unique">
      <summary>
            Indicates that RDBMS supports unique indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.MaxDop">
      <summary>
            Indicates that RDBMS allows to specify max degree of parallelism
            parameter for an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.FullText">
      <summary>
            Indicates that RDBMS supports full-text indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.SortOrder">
      <summary>
            Indicates that RDBMS supports specifying sort order (i.e. asc or desc) for each column in index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Filtered">
      <summary>
            Indicates that RDBMS supports filtered/partial indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Expressions">
      <summary>
            Indicates that RDBMS supports indexes, based on expressions.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.IndexInfo">
      <summary>
            Describes an index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.MaxLength">
      <summary>
            Gets or sets the maximal index length in bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.PartitionMethods">
      <summary>
            Gets or sets supported partition methods.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IsolationLevels">
      <summary>
        <para>Defines a list of possible transaction isolation levels.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.None">
      <summary>
            Indicates that RDBMS does not support transaction isolation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadUncommitted">
      <summary>
            Indicates that RDBMS allows to execute transactions without isolation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.Serializable">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Serializable" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.Snapshot">
      <summary>
            Indicates that RDBMS allows to execute transactions with
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Snapshot" /> isolation level.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PartitionMethods">
      <summary>
        <para>Defines a list of possible horisontal partitioning types.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.None">
      <summary>
            Indicates that RDBMS does not support partitioning.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.List">
      <summary>
            Indicates that RDBMS supports list partitioning.
            List partitioning enables you to explicitly control how rows map to partitions
            by specifying a list of discrete values in the description for each partition.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Range">
      <summary>
            Indicates that RDBMS supports range partitioning.
            Range partitioning maps data to partitions
            based on ranges of partition key values that you establish for each partition.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Hash">
      <summary>
            Indicates that RDBMS supports hash partitioning.
            Hash partitioning maps data to partitions
            based on a hashing algorithm that evenly distributes rows among partitions,
            giving partitions approximately the same size.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Interval">
      <summary>
            Indicates that RDBMS supports interval partitioning.
            Interval partitioning is an extension of range partitioning
            which instructs the database to automatically create partitions
            of a specified interval when data inserted into the table exceeds all of the range partitions.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.QueryFeatures">
      <summary>
            Defines a list of features which affects query generation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.None">
      <summary>
            There are no features affecting query generation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters">
      <summary>
            Indicates that it is possible to use named query parameters.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.ParameterPrefix">
      <summary>
            Indicates that parameter prefix should be used for parameter names
            (in the case when <see cref="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters" /> option is active).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.ExplicitJoinOrder">
      <summary>
            Indicates that RDBMS requires multi-table joins to have explicit order.
            (like "(a join b) join c")
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DdlBatches">
      <summary>
            Indicates that RDBMS supports batch query execution for DDL statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DmlBatches">
      <summary>
            Indicates that RDBMS supports batch query execution for DML statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Hints">
      <summary>
            Indicates that RDBMS supports query optimizer hints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.CrossApply">
      <summary>
            Indicates that RDBMS supports CROSS APPLY and OUTER APPLY operators.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.FullBooleanExpressionSupport">
      <summary>
            Indicates that RDBMS allows boolean expressions in equality/inequality comparisons,
            inside CASE and COALESCE operators.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.UpdateFrom">
      <summary>
            Indicates that RDBMS supports UPDATE ... FROM statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Limit">
      <summary>
            Indicates that RDBMS supports result limiting operator (LIMIT and TOP).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Offset">
      <summary>
            Indicates that RDBMS supports result skipping operator (OFFSET and SKIP).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.MulticolumnIn">
      <summary>
            Indicates that RDBMS supports multicolumn IN operator.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DefaultValues">
      <summary>
            Indicates whether RDBMS supports INSERT INTO Table DEFAULT VALUES syntax.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.RowNumber">
      <summary>
            Indicates whether RDBMS supports ROW_NUMBER window function.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.ScalarSubquery">
      <summary>
            Indicates whether RDBMS supports subqueries that return a scalar result.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Paging">
      <summary>
            Indicates that RDBMS supports paging operators (<see cref="F:Xtensive.Sql.Info.QueryFeatures.Limit" /> and <see cref="F:Xtensive.Sql.Info.QueryFeatures.Offset" />).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Batches">
      <summary>
            Indicates that RDBMS supports batches for both DDL and DML statements.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.QueryInfo">
      <summary>
            Describes a query.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxLength">
      <summary>
            Gets or sets the maximal length of a query text in characters.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxComparisonOperations">
      <summary>
            Gets or sets the maximal number of comparison operations for a single query.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxNestedSubqueriesAmount">
      <summary>
            Gets or sets the nested subqueries amount.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.ParameterPrefix">
      <summary>
            Gets or sets the Parameter prefix.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo">
      <summary>
            Describes a reference constraint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Actions">
      <summary>
            Gets or sets the constraint rules.
            </summary>
      <value>The rules.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.SequenceFeatures">
      <summary>
            Defines a list of sequence related features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.None">
      <summary>
            Indicates that RDBMS server does not support anything special
            regarding sequences.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.Cache">
      <summary>
            Indicates that RDBMS supports caching of sequence values
            (i.e. it would be possible to take several sequential values at a time
            and then use those values without access to sequence object).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.Order">
      <summary>
            Indicates that RDBMS allows to specify for a sequence an 
            order of generated values (ascending or descending).
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.SequenceInfo">
      <summary>
            Describes a sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.SequenceInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerInfo">
      <summary>
            Represents a set of information concerning RDBMS capabilities.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfo.Build(Xtensive.Sql.Info.ServerInfoProvider)">
      <summary>
            Builds the server info using specified <see cref="T:Xtensive.Sql.Info.ServerInfoProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.IsolationLevels">
      <summary>
            Gets the server supported isolation levels.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.FullTextSearch">
      <summary>
            Gets the server supported isolation levels.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Assertion">
      <summary>
            Gets the assertion constraint info.
            </summary>
      <value>The assertion constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.CharacterSet">
      <summary>
            Gets the character set info.
            </summary>
      <value>The character set info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Collation">
      <summary>
            Gets the collation info.
            </summary>
      <value>The collation info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Column">
      <summary>
            Gets the column info.
            </summary>
      <value>The column info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.CheckConstraint">
      <summary>
            Gets the check constraint info.
            </summary>
      <value>The check constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Database">
      <summary>
            Gets the database info.
            </summary>
      <value>The database info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Domain">
      <summary>
            Gets the domain info.
            </summary>
      <value>The domain info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Identity">
      <summary>
            Gets the identity info.
            </summary>
      <value>The identity info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Index">
      <summary>
            Gets the index info.
            </summary>
      <value>The index info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.PrimaryKey">
      <summary>
            Gets the primary key constraint info.
            </summary>
      <value>The primary key constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Query">
      <summary>
            Gets the query info.
            </summary>
      <value>The query info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.ForeignKey">
      <summary>
            Gets the referential constraint info.
            </summary>
      <value>The referential constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Schema">
      <summary>
            Gets the schema info.
            </summary>
      <value>The schema info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Sequence">
      <summary>
            Gets the sequence info.
            </summary>
      <value>The sequence info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.StoredProcedure">
      <summary>
            Gets the stored procedure info.
            </summary>
      <value>The stored procedure info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Table">
      <summary>
            Gets the table info.
            </summary>
      <value>The table info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.TemporaryTable">
      <summary>
            Gets the temporary table info.
            </summary>
      <value>The temporary table info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Translation">
      <summary>
            Gets the translation info.
            </summary>
      <value>The translation info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Trigger">
      <summary>
            Gets the trigger info.
            </summary>
      <value>The trigger info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.UniqueConstraint">
      <summary>
            Gets the unique constraint info.
            </summary>
      <value>The unique constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.View">
      <summary>
            Gets the view info.
            </summary>
      <value>The view info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.DataTypes">
      <summary>
            Gets the data types.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.ServerFeatures">
      <summary>
            Gets the server features.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.StringIndexingBase">
      <summary>
            Gets the string indexing base. Normally is equal to 1.
            </summary>
      <value>The string indexing base.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.TableInfo">
      <summary>
            Describes a table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TableInfo.PartitionMethods">
      <summary>
            Gets supported partition methods.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TableInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.TemporaryTableFeatures">
      <summary>
            Defines a list of possible temporary table features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.None">
      <summary>
            Indicates that RDBMS does not support temporary tables.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Global">
      <summary>
            Indicates that RDBMS supports globally visible temporary tables.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Local">
      <summary>
            Indicates that RDBMS supports temporary tables
            which are visible only in a local context.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.DeleteRowsOnCommit">
      <summary>
            Indicates that RDBMS allows to delete rows on commit.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.PreserveRowsOnCommit">
      <summary>
            Indicates that RDBMS allows to preserve rows on commit.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.TemporaryTableInfo">
      <summary>
            Describes a temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ValueRange`1">
      <summary>
            Represents a strictly typed contiguous range of values.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="minValue">The min value.</param>
      <param name="maxValue">The max value.</param>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0,System.Nullable{`0})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="minValue">The min value.</param>
      <param name="maxValue">The max value.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.MinValue">
      <summary>
            A minimum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.MaxValue">
      <summary>
            A maximum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.DefaultValue">
      <summary>
            A default value from the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
      <value>
            A value belonging to the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />
            or <see langword="null" /> if not specified.
            </value>
    </member>
    <member name="T:Xtensive.Sql.Info.ViewFeatures">
      <summary>
            Defines a list of RDBMS dependent view features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.None">
      <summary>
            Indicates that RDBMS does not support features from this list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.Local">
      <summary>
            Indicates that RDBMS allows to create local views
            those are visible only in current execution context.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.Cascaded">
      <summary>
            Indicates that RDBMS allows to create views based on
            some other views instead of tables.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlType">
      <summary>
            Enumerates supported SQL column types.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Unknown">
      <summary>
            An unknown type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Boolean">
      <summary>
            Boolean.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int8">
      <summary>
            Signed byte (8 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt8">
      <summary>
            Unsigned byte (8 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int16">
      <summary>
            Small integer (16 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt16">
      <summary>
            Unsigned small integer (16 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int32">
      <summary>
            Integer (32 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt32">
      <summary>
            Unsigned integer (32 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int64">
      <summary>
            Long integer (64 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt64">
      <summary>
            Unsigned long (64 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Decimal">
      <summary>
            Numeric data type with fixed precision and scale.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Float">
      <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Double">
      <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.DateTime">
      <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Interval">
      <summary>
            Datetime interval.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Char">
      <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarChar">
      <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarCharMax">
      <summary>
            Variable-length Unicode data with a maximum length of 2^30 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Binary">
      <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarBinary">
      <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarBinaryMax">
      <summary>
        <para>Variable-length binary data from 0 through 2^31-1 (2,147,483,647) bytes.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Guid">
      <summary>
            A globally unique identifier (GUID). 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDml">
      <summary>
            A factory for SQL DML operations.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDml.RawConcat(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Concates underlying expression without any sign between.
            </summary>
      <param name="left">Left expression</param>
      <param name="right">Right expression</param>
      <returns>New <see cref="T:Xtensive.Sql.Dml.SqlBinary" /> expression.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlValueType">
      <summary>
            Represents an SQL type with specific <see cref="P:Xtensive.Sql.SqlValueType.Length" />, <see cref="P:Xtensive.Sql.SqlValueType.Scale" /> and <see cref="P:Xtensive.Sql.SqlValueType.Precision" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.Equals(Xtensive.Sql.SqlValueType)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.op_Equality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.op_Inequality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeName">Name of the type.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="typeName">Name of the type.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
        <see cref="M:Xtensive.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true" />
      </summary>
      <param name="type">The type.</param>
      <param name="typeName">Name of the type.</param>
      <param name="length">The length.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Type">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.SqlType" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.TypeName">
      <summary>
            Gets the name of the type in case when <see cref="P:Xtensive.Sql.SqlValueType.Type" /> has value <see cref="F:Xtensive.Sql.SqlType.Unknown" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Length">
      <summary>
            Gets or sets the length.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Scale">
      <summary>
            Gets the scale.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Precision">
      <summary>
            Gets the precision.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.TypeMapping">
      <summary>
            Value (data) type mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.TypeMappingCollection">
      <summary>
            A collection of <see cref="T:Xtensive.Sql.TypeMapping" /> objects.
            </summary>
    </member>
  </members>
</doc>