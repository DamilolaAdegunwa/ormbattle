<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Storage.Providers.Sql</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager">
      <summary>
            A temporary table manager specific to SQL Server CE
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableManager">
      <summary>
            A manager of temporary tables.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.BuildDescriptor(System.String,Xtensive.Core.Tuples.TupleDescriptor)">
      <summary>
            Builds the descriptor of a temporary table.
            </summary>
      <param name="name">The name of the temporary table.</param>
      <param name="source">The source.</param>
      <returns>Built descriptor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.BuildDescriptor(System.String,Xtensive.Core.Tuples.TupleDescriptor,System.String[])">
      <summary>
            Builds the descriptor of a temporary table.
            </summary>
      <param name="name">The name of the temporary table.</param>
      <param name="source">The source.</param>
      <param name="fieldNames">The names of field in temporary table.</param>
      <returns>Built descriptor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.Acquire(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Acquires the lock on the specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
      <returns>A <see cref="T:System.IDisposable" /> implementor that should be used to free acquired lock.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.CreateTemporaryTable(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Creates the temporary table with the specified name.
            </summary>
      <param name="schema">The schema to create table in.</param>
      <param name="tableName">Name of the table.</param>
      <returns>Created table.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.InitializeTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Initializes the table. This is called once per session on a first acquire request.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.AcquireTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Gets the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.ReleaseTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Releases the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableManager.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.CreateTemporaryTable(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Creates the temporary table with the specified name.
            </summary>
      <param name="schema">The schema to create table in.</param>
      <param name="tableName">Name of the table.</param>
      <returns>Created table.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.InitializeTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Initializes the table. This is called once per session on a first acquire request.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.AcquireTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Gets the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.TemporaryTableManager.ReleaseTable(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Releases the lock on a temporary table.
            </summary>
      <param name="descriptor">The descriptor.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SessionHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Session" />-level handler for SQL storages.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.IQueryExecutor">
      <summary>
            A service, that provides SQL query execution functionality.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteTupleReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes the specified request.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> that contains result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteScalar(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteScalar(System.String)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="commandText">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteNonQuery(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.ExecuteNonQuery(System.String)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="commandText">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.Store(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Core.Tuples.Tuple})">
      <summary>
            Stores the specified tuples in specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
      <param name="tuples">The tuples to store.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.IQueryExecutor.Clear(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Clears the specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#ExecuteTupleReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes the specified request.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> that contains result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#ExecuteNonQuery(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#ExecuteScalar(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#ExecuteNonQuery(System.String)">
      <summary>
            Executes the specified non query statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#ExecuteScalar(System.String)">
      <summary>
            Executes the specified scalar statement. This method is similar to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Result of execution.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#Store(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Core.Tuples.Tuple})">
      <summary>
            Stores the specified tuples in specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
      <param name="tuples">The tuples to store.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#Sql#IQueryExecutor#Clear(Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor)">
      <summary>
            Clears the specified temporary table.
            </summary>
      <param name="descriptor">The descriptor of temporary table.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#IDirectSqlService#CreateCommand">
      <exception cref="T:System.InvalidOperationException">Connection is not open.</exception>
      <summary>
            Creates the <see cref="T:System.Data.Common.DbCommand" /> object associated with the
            current <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Connection" /> and <see cref="P:Xtensive.Storage.Providers.IDirectSqlService.Transaction" />.
            </summary>
      <returns>Newly created <see cref="T:System.Data.Common.DbCommand" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#ICachingKeyGeneratorService#NextBulk``1(Xtensive.Storage.CachingKeyGenerator{``0})">
      <summary>
            Gets the bulk of keys.
            </summary>
      <typeparam name="TFieldType">The type of the key field.</typeparam>
      <param name="generator">The key generator requested the bulk of keys.</param>
      <returns>
            The sequence enumerating the next bulk of keys.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.GetNextImplementation(Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.GetSequenceBasedNextImplementation(Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation based on real sequence.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
      <exception cref="T:System.InvalidOperationException">Required sequence is not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.GetTableBasedNextImplementation(Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Gets the "next sequence number" implementation based on regular table with
            auto-increment column.
            </summary>
      <param name="providerInfo">The provider info.</param>
      <param name="schema">The schema.</param>
      <param name="sequenceMappingName">Name of the sequence mapping.</param>
      <returns>SQL compile unit making the necessary action.</returns>
      <exception cref="T:System.InvalidOperationException">Required schema object is not found.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.ExecuteQueryTasks(System.Collections.Generic.IEnumerable{Xtensive.Storage.Internals.QueryTask},System.Boolean)">
      <summary>
            Executes the specified query tasks.
            </summary>
      <param name="queryTasks">The query tasks to execute.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> partial execution is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.BeginTransaction(System.Transactions.IsolationLevel)">
      <summary>
            Opens the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.CreateSavepoint(System.String)">
      <summary>
            Makes the savepoint.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.RollbackToSavepoint(System.String)">
      <summary>
            Rollbacks to savepoint.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.ReleaseSavepoint(System.String)">
      <summary>
            Releases the savepoint.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.CommitTransaction">
      <summary>
            Commits the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.RollbackTransaction">
      <summary>
            Rollbacks the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Persist(System.Collections.Generic.IEnumerable{Xtensive.Storage.Internals.PersistAction},System.Boolean)">
      <summary>
            Persists changed entities.
            </summary>
      <param name="persistActions">The registry.</param>
      <param name="allowPartialExecution">if set to <see langword="true" /> dirty flush is allowed.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.AddBaseServiceRegistrations(System.Collections.Generic.List{Xtensive.Core.IoC.ServiceRegistration})">
      <summary>
            Adds base service registration entries into the list of
            registrations used by <see cref="M:Xtensive.Storage.Providers.SessionHandler.CreateBaseServices" />
            method.
            </summary>
      <param name="registrations">The list of service registrations.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SessionHandler.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#IDirectSqlService#Connection">
      <summary>
            Gets the underlying connection that is currently in use.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.Xtensive#Storage#Providers#IDirectSqlService#Transaction">
      <summary>
            Gets the underlying transaction that is currently running.
            <see langword="null" />, if transaction isn't running now.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.TransactionIsStarted">
      <summary>
            Gets a value indicating whether transaction is actually started.
            This indicates presence of outermost transaction only.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SessionHandler.Connection">
      <summary>
            Gets the connection.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor">
      <summary>
            A command processor that arranges incoming commands into series of batches
            to minimize client-server network roundtrips.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandProcessor">
      <summary>
            A command processor.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.DefaultParameterNamePrefix">
      <summary>
            Default parameter name prefix.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.factory">
      <summary>
            Factory of command parts.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.tasks">
      <summary>
            Currently registered tasks.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.domainHandler">
      <summary>
            A SQL handler of current domain.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.driver">
      <summary>
            A SQL driver.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.session">
      <summary>
            Session this command processor is bound to.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.connection">
      <summary>
            Connection this command processor is bound to.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.reenterCount">
      <summary>
            Number of recursive enters in query execution methods.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandProcessor.activeCommand">
      <summary>
            Active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes all registred requests plus the specified one query,
            returning <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the last query.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the specified request.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests(System.Boolean)">
      <summary>
            Executes all registred requests,
            optionally skipping the last requests according to 
            <paramref name="allowPartialExecution" /> argument.
            </summary>
      <param name="allowPartialExecution">
            if set to <see langword="true" /> command processor is allowed to skip last request,
            if it decides to.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests">
      <summary>
            Executes the all registered requests.
            Calling this method is equivalent to calling <see cref="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ExecuteRequests(System.Boolean)" /> with <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.RegisterTask(Xtensive.Storage.Providers.Sql.SqlTask)">
      <summary>
            Registers the specified task for execution.
            </summary>
      <param name="task">The task to register.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.ClearTasks">
      <summary>
            Clears all registered tasks.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.RunTupleReader(System.Data.Common.DbDataReader,Xtensive.Core.Tuples.TupleDescriptor)">
      <summary>
            Wrapps the specified <see cref="T:System.Data.Common.DbDataReader" />
            into a <see cref="T:System.Collections.Generic.IEnumerator`1" /> according to a specified <see cref="T:Xtensive.Core.Tuples.TupleDescriptor" />.
            </summary>
      <param name="reader">The reader to wrap.</param>
      <param name="descriptor">The descriptor of a result.</param>
      <returns>Created <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.AllocateCommand">
      <summary>
            Allocates the active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.DisposeCommand">
      <summary>
            Disposes the active command.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessor.#ctor(Xtensive.Storage.Providers.Sql.DomainHandler,Xtensive.Storage.Session,Xtensive.Sql.SqlConnection,Xtensive.Storage.Providers.Sql.CommandPartFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" /> class.
            </summary>
      <param name="domainHandler">The domain handler.</param>
      <param name="session">The session.</param>
      <param name="connection">The connection.</param>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ExecuteRequests(System.Boolean)">
      <summary>
            Executes all registred requests,
            optionally skipping the last requests according to 
            <paramref name="allowPartialExecution" /> argument.
            </summary>
      <param name="allowPartialExecution">
            if set to <see langword="true" /> command processor is allowed to skip last request,
            if it decides to.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.BatchingCommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes all registred requests plus the specified one query,
            returning <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the last query.
            </summary>
      <param name="request">The request to execute.</param>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the specified request.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandPartFactory">
      <summary>
            A factory of <see cref="T:Xtensive.Storage.Providers.Sql.CommandPart" />s.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPartFactory.connection">
      <summary>
            Connection this command part factory is bound to,
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandPartFactory.CreatePersistCommandPart(Xtensive.Storage.Providers.Sql.SqlPersistTask,System.String)">
      <summary>
            Creates the persist command part.
            </summary>
      <param name="task">The task.</param>
      <param name="parameterNamePrefix">The parameter name prefix.</param>
      <returns>Created command part.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandPartFactory.CreateQueryCommandPart(Xtensive.Storage.Providers.Sql.SqlQueryTask,System.String)">
      <summary>
            Creates the query command part.
            </summary>
      <param name="task">The task.</param>
      <param name="parameterNamePrefix">The parameter name prefix.</param>
      <returns>Created command part.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Command">
      <summary>
            A command ready for execution.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.AddPart(Xtensive.Storage.Providers.Sql.CommandPart)">
      <summary>
            Adds the part to this command.
            </summary>
      <param name="part">The part to add.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.AddPart(Xtensive.Storage.Providers.Sql.CommandPart,Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Adds the part to this command.
            </summary>
      <param name="part">The part to add.</param>
      <param name="task">The task.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.ExecuteNonQuery">
      <summary>
            Executes this command. This method is equivalent of <seealso cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.ExecuteReader">
      <summary>
            Executes this command. This method is equivalent of <seealso cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Command.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Command.Statements">
      <summary>
            Gets the statements this command is consist of.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Command.QueryTasks">
      <summary>
            Gets the query tasks registered in this command.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandPart">
      <summary>
            A part of a command.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Query">
      <summary>
            Query text.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Parameters">
      <summary>
            Parameters bound to this command part.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.CommandPart.Disposables">
      <summary>
            Objects that should be disposed uppon this command part completion.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CommandProcessorFactory">
      <summary>
            A handlers that is capable of creating <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessorFactory.CreateCommandProcessor(Xtensive.Storage.Session,Xtensive.Sql.SqlConnection)">
      <summary>
            Creates the command processor.
            </summary>
      <param name="session">The session.</param>
      <param name="connection">The connection.</param>
      <returns>Created command processor.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.CommandProcessorFactory.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.CursorCommandPartFactory">
      <summary>
            A command part factory that wraps queries into "open cursor" statements
            to return multiple query results from single batch.
            Currently this is very Oracle specific.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlPersistTask">
      <summary>
            A persist task (i.e. INSERT, UPDATE, DELETE) for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlTask">
      <summary>
            An abstract task for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <summary>
            Processes this command with the specified <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
      <param name="processor">The processor to use.</param>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlPersistTask.RequestSequence">
      <summary>
            A request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlPersistTask.Tuple">
      <summary>
            A tuple containing parameter for request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlPersistTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <summary>
            Processes this command with the specified <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
      <param name="processor">The processor to use.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlQueryTask">
      <summary>
            A query task (i.e. SELECT) for <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request">
      <summary>
            A request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.ParameterContext">
      <summary>
            A parameter context to activate during parameters binding.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Output">
      <summary>
            A list of tuples to store result in.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.ProcessWith(Xtensive.Storage.Providers.Sql.CommandProcessor)">
      <summary>
            Processes this command with the specified <see cref="T:Xtensive.Storage.Providers.Sql.CommandProcessor" />.
            </summary>
      <param name="processor">The processor to use.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.#ctor(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlQueryTask" /> class.
            </summary>
      <param name="request">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlQueryTask.#ctor(Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Core.Parameters.ParameterContext,System.Collections.Generic.List{Xtensive.Core.Tuples.Tuple})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlQueryTask" /> class.
            </summary>
      <param name="request">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Request" />.</param>
      <param name="parameterContext">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.ParameterContext" />.</param>
      <param name="output">A value for <see cref="F:Xtensive.Storage.Providers.Sql.SqlQueryTask.Output" />.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.NonTransactionalStage">
      <summary>
            Enumerates non-transactional stages.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.Prologue">
      <summary>
            Prologue.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.NonTransactionalStage.Epilogue">
      <summary>
            Epilogue.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.DomainHandler">
      <summary>
            A domain handler specific to Microsoft SQL Server RDBMS.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DomainHandler">
      <summary>
        <see cref="T:Xtensive.Storage.Domain" />-level handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetCompilerProviderContainerTypes">
      <summary>
            Gets the sequence of compiler provider container types.
            </summary>
      <returns>The sequence of compiler provider container types.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreatePostCompiler(Xtensive.Storage.Rse.Compilation.ICompiler)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler" />.
            </summary>
      <param name="compiler">Currently used compiler instance.</param>
      <returns>A new post-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetDataReaderAccessor(Xtensive.Core.Tuples.TupleDescriptor)">
      <summary>
            Creates (or retrieves from cache) <see cref="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor" /> 
            for the specified <see cref="T:Xtensive.Core.Tuples.TupleDescriptor" />.
            </summary>
      <param name="descriptor">The descriptor.</param>
      <returns>A <see cref="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor" /> 
            for the specified <see cref="T:Xtensive.Core.Tuples.TupleDescriptor" /></returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.GetPersistRequest(Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask)">
      <summary>
            Gets the persist request for the specified <paramref name="task" />.
            </summary>
      <param name="task">The task to get request from.</param>
      <returns>A <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> that represents <paramref name="task" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.ResolveOrderingDescriptor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Creates <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> for specified 
            <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
      <param name="provider">The provider for which <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> 
            should be created.</param>
      <returns>A newly created <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.BuildMapping">
      <exception cref="T:Xtensive.Storage.DomainBuilderException">Something went wrong.</exception>
      <summary>
            Builds the mapping schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.CreatePreCompiler">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" />.
            </summary>
      <returns>A new pre-compiler.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DomainHandler.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Schema">
      <summary>
            Gets the storage schema.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Mapping">
      <summary>
            Gets the model mapping.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.PersistRequestBuilder">
      <summary>
            Gets the SQL request builder.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.TemporaryTableManager">
      <summary>
            Gets the temporary table manager.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.CommandProcessorFactory">
      <summary>
            Gets the command processor factory.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.DomainHandler.Driver">
      <summary>
            Gets the SQL driver.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServerCe.HandlerFactory">
      <summary>
            Storage provider for SQL Server Ce.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.HandlerFactory">
      <summary>
            Base handler factory for SQL storages.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.ProcessAggregate(Xtensive.Storage.Providers.Sql.SqlProvider,System.Collections.Generic.List{Xtensive.Sql.Dml.SqlExpression},Xtensive.Storage.Rse.AggregateColumn)">
      <summary>
            Translates <see cref="T:Xtensive.Storage.Rse.AggregateColumn" /> to corresponding <see cref="T:Xtensive.Sql.Dml.SqlExpression" />.
            </summary>
      <param name="source">The source <see cref="T:Xtensive.Storage.Providers.Sql.SqlProvider" />.</param>
      <param name="sourceColumns">The source columns.</param>
      <param name="aggregateColumn">The aggregate column.</param>
      <returns>Aggregate processing result (expression).</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.#ctor(Xtensive.Storage.Providers.HandlerAccessor)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlCompiler" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlCompiler.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.DomainHandler">
      <summary>
            Gets the SQL domain handler.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.Driver">
      <summary>
            Gets the SQL driver.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.ProviderInfo">
      <summary>
            Gets the provider info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlCompiler.Handlers">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.HandlerAccessor" /> object providing access to available storage handlers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DbDataReaderAccessor">
      <summary>
            Provider-level <see cref="T:System.Data.Common.DbDataReader" /> accessor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Driver">
      <summary>
            SQL provider driver.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor">
      <summary>
            A command processor that simply executes all incoming commands immediately.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ExecuteRequests(System.Boolean)">
      <summary>
            Executes all registred requests,
            optionally skipping the last requests according to 
            <paramref name="allowPartialExecution" /> argument.
            </summary>
      <param name="allowPartialExecution">
            if set to <see langword="true" /> command processor is allowed to skip last request,
            if it decides to.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ExecuteRequestsWithReader(Xtensive.Storage.Providers.Sql.QueryRequest)">
      <summary>
            Executes all registred requests plus the specified one query,
            returning <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the last query.
            </summary>
      <param name="lastRequest">The request to execute.</param>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the specified request.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlQueryTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SimpleCommandProcessor.ProcessTask(Xtensive.Storage.Providers.Sql.SqlPersistTask)">
      <summary>
            Processes the specified task.
            </summary>
      <param name="task">The task to process.</param>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.DbCommandExtensions">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.DbCommandExtensions.ToHumanReadableString(System.Data.Common.DbCommand)">
      <summary>
            Converts the specified <see cref="T:System.Data.Common.DbCommand" /> to human readable string.
            </summary>
      <param name="command">The command to beautify.</param>
      <returns>Human readable representation of the specified command.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.RequestOptions">
      <summary>
            Options for <see cref="T:Xtensive.Storage.Providers.Sql.Request" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.RequestOptions.Empty">
      <summary>
            Empty option set.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.RequestOptions.AllowBatching">
      <summary>
            Batching of this request is allowed.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryRowFilterParameterBinding">
      <summary>
            A special version of <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" /> used for complex filters.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding">
      <summary>
            A binding of a parameter for <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.ParameterBinding.#ctor(Xtensive.Sql.TypeMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.ParameterBinding" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping">
      <summary>
            Gets the type mapping.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.ParameterBinding.ParameterReference">
      <summary>
            Gets the parameter reference.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryParameterBinding.#ctor(System.Func{System.Object},Xtensive.Sql.TypeMapping,Xtensive.Storage.Providers.Sql.QueryParameterBindingType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" /> class.
            </summary>
      <param name="valueAccessor">Value for <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" />.</param>
      <param name="typeMapping">Value for <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" />.</param>
      <param name="bindingType">Value for <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.BindingType" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryParameterBinding.#ctor(System.Func{System.Object},Xtensive.Sql.TypeMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" /> class.
            .
            </summary>
      <param name="valueAccessor">
      </param>
      <param name="typeMapping">
      </param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor">
      <summary>
            Gets the value accessor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.BindingType">
      <summary>
            Gets the type of the binding.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRowFilterParameterBinding.RowTypeMapping">
      <summary>
            Gets the complex type mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryParameterBindingType">
      <summary>
            Possible types of <see cref="T:Xtensive.Storage.Providers.Sql.QueryParameterBinding" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.Regular">
      <summary>
            Indicates no special handling of parameter values.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.SmartNull">
      <summary>
            Indicates that special handling of null values is performed.
            If <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" /> returns <see langword="null" />
            generated query with contain "something is null" check instead of "something = @p".
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.BooleanConstant">
      <summary>
            Indicates that <see cref="T:System.Boolean" /> parameters is automatically propagated to constants
            according to a value returned by <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" />.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.LimitOffset">
      <summary>
            Indicates that parameter is a argument for paging operators
            and should be inlined in query as constant value.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.QueryParameterBindingType.RowFilter">
      <summary>
            Indicates that parameter is row filter argument (i.e. a number of parameter vectors).
            <see cref="P:Xtensive.Storage.Providers.Sql.QueryParameterBinding.ValueAccessor" /> returns a collection of <see cref="T:Xtensive.Core.Tuples.Tuple" />s.
            <see cref="P:Xtensive.Storage.Providers.Sql.ParameterBinding.TypeMapping" /> is ignored in this case.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.ColumnMapping">
      <summary>
            Defines column mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.SecondaryIndexMapping">
      <summary>
            Defines secondary index mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.ModelMapping">
      <summary>
            Defines model mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Mappings.PrimaryIndexMapping">
      <summary>
            Defines primary index mapping.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler">
      <summary>
            Upgrades storage schema.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.UpgradeSchema(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo)">
      <summary>
            Upgrades the storage.
            </summary>
      <param name="upgradeActions">The upgrade actions.</param>
      <param name="sourceSchema">The source schema.</param>
      <param name="targetSchema">The target schema.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.ExtractSchema">
      <summary>
            Extracts the schema.
            </summary>
      <returns>The extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.ExtractNativeSchema">
      <summary>
            Extracts the native schema.
            </summary>
      <returns>The native extracted schema.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SchemaUpgradeHandler.CreateTypeInfo(System.Type,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Creates the type info.
            </summary>
      <param name="type">The type.</param>
      <param name="length">The length.</param>
      <returns>Newly created <see cref="T:Xtensive.Storage.Indexing.Model.TypeInfo" />.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Oracle.DomainHandler">
      <summary>
            A domain handler for Oracle RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.Oracle.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.Oracle.HandlerFactory">
      <summary>
            Storage provider for Oracle.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.DomainHandler">
      <summary>
            A domain handler specific to PostgreSQL RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.PostgreSql.HandlerFactory">
      <summary>
            Storage provider for PostgreSQL.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServer.DomainHandler">
      <summary>
            A domain handler specific to Microsoft SQL Server RDBMS.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Servers.SqlServer.DomainHandler.CreateCompiler">
      <summary>
            Creates the compiler.
            </summary>
      <returns>A new compiler.</returns>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Servers.SqlServer.HandlerFactory">
      <summary>
            Storage provider for MS SQL.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlActionTranslator">
      <summary>
            Translates upgrade <see cref="T:Xtensive.Modelling.Actions.NodeAction" />s to Sql.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.Translate">
      <summary>
            Translates all registered actions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.VisitCopyDataAction(Xtensive.Modelling.Actions.DataAction)">
      <exception cref="T:System.InvalidOperationException">Can not create copy command 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.ProcessUpdateDataAction(Xtensive.Modelling.Actions.DataAction)">
      <exception cref="T:System.InvalidOperationException">Can not create update command 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CreateConditionalExpression(Xtensive.Modelling.Comparison.Hints.DataHint,Xtensive.Sql.Dml.SqlTableRef)">
      <exception cref="T:System.InvalidOperationException">Can not create expression 
            with specific hint parameters.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlActionTranslator.#ctor(Xtensive.Modelling.Actions.ActionSequence,Xtensive.Sql.Model.Schema,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Indexing.Model.StorageInfo,Xtensive.Storage.Providers.ProviderInfo,Xtensive.Storage.Providers.Sql.Driver,System.String,System.Collections.Generic.List{System.String},System.Func{Xtensive.Sql.ISqlCompileUnit,System.Object},System.Func{Xtensive.Sql.ISqlCompileUnit,System.Int32},System.Func{Xtensive.Storage.Providers.ProviderInfo,Xtensive.Sql.Model.Schema,System.String,Xtensive.Sql.ISqlCompileUnit})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlActionTranslator" /> class.
            </summary>
      <param name="actions">The actions to translate.</param>
      <param name="schema">The schema.</param>
      <param name="sourceModel">The source model.</param>
      <param name="targetModel">The target model.</param>
      <param name="providerInfo">The provider info.</param>
      <param name="driver">The driver.</param>
      <param name="typeIdColumnName">Name of the type id column.</param>
      <param name="enforceChangedColumns">Columns thats types must be changed 
            enforced (without type conversion verification).</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CleanupDataCommands">
      <summary>
            Gets the data cleanup commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.PreUpgradeCommands">
      <summary>
            Gets the command thats must be 
            executed before upgrade commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.UpgradeCommands">
      <summary>
            Gets the translation result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.CopyDataCommands">
      <summary>
            Gets the data copy commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.PostUpgradeCommands">
      <summary>
            Gets the post upgrade commands, thats
            must be executed after data manipulate commands.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.NonTransactionalPrologCommands">
      <summary>
            Gets the non transactional commands that should be executed non transactionally.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlActionTranslator.NonTransactionalEpilogCommands">
      <summary>
            Gets the non transactional commands that should be executed non transactionally.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.QueryRequest">
      <summary>
            Query request.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Request">
      <summary>
            Base class for any SQL request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.GetCompiledStatement(Xtensive.Storage.Providers.Sql.DomainHandler)">
      <summary>
            Gets the compiled statement.
            </summary>
      <param name="domainHandler">The domain handler.</param>
      <returns>Compiled statement.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.CheckOptions(Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
            Checks that specified options are enabled for this request.
            </summary>
      <param name="requiredOptions">The required options.</param>
      <returns>
        <see langword="true" /> is specified options is suppored;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.#ctor(Xtensive.Sql.ISqlCompileUnit,Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.Request" /> class.
            </summary>
      <param name="statement">The statement.</param>
      <param name="options">The options.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.Request.#ctor(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.Request" /> class.
            </summary>
      <param name="statement">The statement.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Request.Statement">
      <summary>
            Gets the statement of this request.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Request.Options">
      <summary>
            Gets the options of this request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryRequest.#ctor(Xtensive.Sql.Dml.SqlSelect,Xtensive.Core.Tuples.TupleDescriptor,Xtensive.Storage.Providers.Sql.RequestOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" /> class.
            </summary>
      <param name="statement">The statement.</param>
      <param name="tupleDescriptor">The tuple descriptor.</param>
      <param name="options">The options.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.QueryRequest.#ctor(Xtensive.Sql.Dml.SqlSelect,Xtensive.Core.Tuples.TupleDescriptor,Xtensive.Storage.Providers.Sql.RequestOptions,System.Collections.Generic.IEnumerable{Xtensive.Storage.Providers.Sql.QueryParameterBinding})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" /> class.
            </summary>
      <param name="statement">The statement.</param>
      <param name="tupleDescriptor">The tuple descriptor.</param>
      <param name="options">The options.</param>
      <param name="parameterBindings">The parameter bindings.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.SelectStatement">
      <summary>
            Gets the select statement.
            </summary>
      <value>The select statement.</value>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.ParameterBindings">
      <summary>
            Gets the parameter bindings.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.QueryRequest.TupleDescriptor">
      <summary>
            Gets the record set header.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExColumnXIsNotFoundInTableY">
      <summary>
              Looks up a localized string similar to Column '{0}' is not found in table '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExCommandsAreNotTranslatedYet">
      <summary>
              Looks up a localized string similar to Commands are not translated yet..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExConnectionIsNotOpen">
      <summary>
              Looks up a localized string similar to Connection is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExEnumerationIsAlreadyFinished">
      <summary>
              Looks up a localized string similar to Enumeration is already finished..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExEnumerationIsNotStarted">
      <summary>
              Looks up a localized string similar to Enumeration is not started..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorOnInsert">
      <summary>
              Looks up a localized string similar to Unable to insert instance of type '{0}' with specified key. Query affected {1} tables, but expected {2} tables..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorOnUpdate">
      <summary>
              Looks up a localized string similar to Unable to update instance of type {0} with specified key. Query affected {1} tables, but expecrted {2} tables..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorXOriginalMessageY">
      <summary>
              Looks up a localized string similar to Error '{0}'. Original message: {1}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExErrorXWhileExecutingQueryYOriginalMessageZ">
      <summary>
              Looks up a localized string similar to Error '{0}' while executing query '{1}'. Original message: {2}.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIncorrectCommandParameters">
      <summary>
              Looks up a localized string similar to Incorrect command parameters..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIndexIsChanged">
      <summary>
              Looks up a localized string similar to Index '{0}' is changed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExIndexXIsNotFound">
      <summary>
              Looks up a localized string similar to Index '{0}' is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExInstanceMultipleResults">
      <summary>
              Looks up a localized string similar to Multiple instances of type '{0}' with specified key are found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExInstanceNotFound">
      <summary>
              Looks up a localized string similar to Instance of type '{0}' with specified key is not found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExMemberXIsNotSupported">
      <summary>
              Looks up a localized string similar to Member '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExMultipleResults">
      <summary>
              Looks up a localized string similar to Specified query returns multiple results..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExOnlyEqualityRangesAreSupported">
      <summary>
              Looks up a localized string similar to Only equality ranges are supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider">
      <summary>
              Looks up a localized string similar to The ordering of records is not specified for RowNumberProvider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExParametersCountIsNotSameAsSourceColumnListsCount">
      <summary>
              Looks up a localized string similar to Parameters count is not same as source column lists count..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExReaderIsNotInConsistentState">
      <summary>
              Looks up a localized string similar to Reader is not in consistent state..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExRowNumberWindowFunctionIsNotSupportedOnThisVersionOfPostgreSql">
      <summary>
              Looks up a localized string similar to ROW_NUMBER window function is not supported on this version of PostgreSQL.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExSequenceXIsNotFoundInStorage">
      <summary>
              Looks up a localized string similar to Sequence '{0}' is not found in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExSourceColumnListContainsNullValues">
      <summary>
              Looks up a localized string similar to Source column list contains null values..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExStringTrimSupportedOnlyWithConstants">
      <summary>
              Looks up a localized string similar to String.Trim(char[]), String.TrimStart(char[]), string.TrimEnd(char[]) supported only with argument being array of constants..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTableXIsNotFound">
      <summary>
              Looks up a localized string similar to Table '{0}' is not found in storage..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTemporaryTableXIsLocked">
      <summary>
              Looks up a localized string similar to Temporary table '{0}' is locked.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTransactionIsAlreadyOpen">
      <summary>
              Looks up a localized string similar to Transaction is already open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTransactionIsNotOpen">
      <summary>
              Looks up a localized string similar to Transaction is not open..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTypeHasNoPrimaryIndex">
      <summary>
              Looks up a localized string similar to Type '{0}' has no primary index..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnableToCreateConnection">
      <summary>
              Looks up a localized string similar to Unable to create the connection. Check if all needed assemblies are available..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnableToFindColumnInPrimaryIndex">
      <summary>
              Looks up a localized string similar to Unable to find column '{0}' of index '{1}' in primary index..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnsupportedColumnType">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported by current storage provider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExUnsupportedIndex">
      <summary>
              Looks up a localized string similar to Index '{0}' with attributes '{1}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.ExXIsNotSupported">
      <summary>
              Looks up a localized string similar to '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXBeginningTransactionWithYIsolationLevel">
      <summary>
              Looks up a localized string similar to Session '{0}'. Beginning transaction @ {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXClosingConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Closing connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXCommitTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Commit transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXCreatingConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Creating connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXMakeSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Make savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXOpeningConnectionY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Opening connection '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXQueryY">
      <summary>
               Looks up a localized string similar to Session '{0}'. SQL batch: 
            {1}.
             </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXReleaseSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Release savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXRollbackToSavepointY">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback to savepoint '{1}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXRollbackTransaction">
      <summary>
              Looks up a localized string similar to Session '{0}'. Rollback transaction..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.Resources.Strings.LogSessionXSchemaUpgradeScriptY">
      <summary>
               Looks up a localized string similar to Session '{0}'. Schema upgrade script:
            {1}.
             </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlTemporaryDataProvider">
      <summary>
            Abstract base class for any SQL temporary data provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlProvider">
      <summary>
            Unified SQL provider implementation (<see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.AppendDescriptionTo(System.Text.StringBuilder,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.AppendCommandTo(Xtensive.Sql.Compiler.SqlCompilationResult,System.Text.StringBuilder,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.#ctor(Xtensive.Storage.Providers.HandlerAccessor,Xtensive.Storage.Providers.Sql.QueryRequest,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlProvider" /> class.
            </summary>
      <param name="origin">The origin.</param>
      <param name="handlers">The handlers.</param>
      <param name="sources">The sources.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlProvider.#ctor(Xtensive.Storage.Providers.Sql.SqlProvider,Xtensive.Sql.Dml.SqlTable)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlProvider" /> class.
            </summary>
      <param name="provider">The provider.</param>
      <param name="permanentReference">The permanent reference.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.Request">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Providers.Sql.QueryRequest" /> associated with this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.PermanentReference">
      <summary>
            Gets the permanent reference (<see cref="T:Xtensive.Sql.Dml.SqlQueryRef" />) for <see cref="T:Xtensive.Sql.Dml.SqlSelect" /> associated with this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlProvider.DomainHandler">
      <summary>
            Gets the domain handler this provider is bound to.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlModelConverter">
      <summary>
            Converts <see cref="T:Xtensive.Sql.Model.Catalog" /> to indexing storage model.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.GetConversionResult">
      <summary>
            Get the result of conversion specified 
            <see cref="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.Schema" /> to <see cref="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.StorageInfo" />.
            </summary>
      <returns>The storage model.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Visits a schema.
            </summary>
      <param name="schema">The schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.Visit(Xtensive.Sql.Model.Node)">
      <summary>
            Visits a node.
            </summary>
      <param name="node">The node.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTable(Xtensive.Sql.Model.Table)">
      <summary>
            Visits a table.
            </summary>
      <param name="table">The table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
      <summary>
            Visits table column.
            </summary>
      <param name="tableColumn">The table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
      <summary>
            Visits foreign key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
      <summary>
            Visits primary key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
      <summary>
            Visits the full-text index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitIndex(Xtensive.Sql.Model.Index)">
      <summary>
            Visits an index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSequence(Xtensive.Sql.Model.Sequence)">
      <summary>
            Visits a sequence.
            </summary>
      <param name="sequence">The sequence.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitGeneratorTable(Xtensive.Sql.Model.Table)">
      <summary>
            Visits the generator table.
            </summary>
      <param name="generatorTable">The generator table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.ExtractType(Xtensive.Sql.Model.TableColumn)">
      <summary>
            Extracts the <see cref="T:Xtensive.Storage.Indexing.Model.TypeInfo" /> from <see cref="T:Xtensive.Sql.Model.TableColumn" />.
            </summary>
      <param name="column">The column.</param>
      <returns>Data type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.ConvertReferentialAction(Xtensive.Sql.ReferentialAction)">
      <summary>
            Converts the <see cref="T:Xtensive.Sql.ReferentialAction" /> to 
            <see cref="T:Xtensive.Storage.Indexing.Model.ReferentialAction" />.
            </summary>
      <param name="toConvert">The action to convert.</param>
      <returns>Converted action.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.FindIndex(Xtensive.Storage.Indexing.Model.TableInfo,System.Collections.Generic.List{Xtensive.Storage.Indexing.Model.ColumnInfo})">
      <summary>
            Finds the specific index by key columns.
            </summary>
      <param name="table">The table.</param>
      <param name="keyColumns">The key columns.</param>
      <returns>The index.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.IsGeneratorTable(Xtensive.Sql.Model.Table)">
      <summary>
            Determines whether specific table used as sequence.
            </summary>
      <param name="table">The table.</param>
      <returns>
        <see langword="true" /> if table used as sequence; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.#ctor(Xtensive.Sql.Model.Schema,Xtensive.Storage.Providers.ProviderInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.SqlModelConverter" /> class.
            </summary>
      <param name="storageSchema">The schema.</param>
      <param name="providerInfo">The provider info.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits unique constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits index column.
            </summary>
      <param name="indexColumn">The index column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCatalog(Xtensive.Sql.Model.Catalog)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a catalog.
            </summary>
      <param name="catalog">The catalog.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits character set.
            </summary>
      <param name="characterSet">The character set.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCollation(Xtensive.Sql.Model.Collation)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a collation.
            </summary>
      <param name="collation">The collation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDataTable(Xtensive.Sql.Model.DataTable)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits data table.
            </summary>
      <param name="dataTable">The data table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits data table column.
            </summary>
      <param name="dataTableColumn">The data table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDomain(Xtensive.Sql.Model.Domain)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a domain.
            </summary>
      <param name="domain">The domain.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits hash partition.
            </summary>
      <param name="hashPartition">The hash partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits list partition.
            </summary>
      <param name="listPartition">The list partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartition(Xtensive.Sql.Model.Partition)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a partition.
            </summary>
      <param name="partition">The partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits partition descriptor.
            </summary>
      <param name="partitionDescriptor">The partition descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits partition function.
            </summary>
      <param name="partitionFunction">The partition function.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits partition schema.
            </summary>
      <param name="partitionSchema">The partition schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits table constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits domain constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitConstraint(Xtensive.Sql.Model.Constraint)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits check constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits range partition.
            </summary>
      <param name="rangePartition">The range partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits sequence descriptor.
            </summary>
      <param name="sequenceDescriptor">The sequence descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits temporary table.
            </summary>
      <param name="temporaryTable">The temporary table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitTranslation(Xtensive.Sql.Model.Translation)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a translation.
            </summary>
      <param name="translation">The translation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitView(Xtensive.Sql.Model.View)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits a view.
            </summary>
      <param name="view">The view.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.SqlModelConverter.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
      <exception cref="T:System.NotSupportedException">Method is not supported.</exception>
      <summary>
            Visits view column.
            </summary>
      <param name="viewColumn">The view column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.StorageInfo">
      <summary>
            Gets the storage info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.ProviderInfo">
      <summary>
            Gets the provider info.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.SqlModelConverter.Schema">
      <summary>
            Gets the schema.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding">
      <summary>
            A binding of a parameter for <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistParameterBinding.#ctor(System.Int32,Xtensive.Sql.TypeMapping,Xtensive.Storage.Providers.Sql.PersistParameterBindingType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding" /> class.
            </summary>
      <param name="fieldIndex">Index of the field that contain new value.</param>
      <param name="typeMapping">The type mapping.</param>
      <param name="bindingType">Type of the binding.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistParameterBinding.#ctor(System.Int32,Xtensive.Sql.TypeMapping)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding" /> class.
            </summary>
      <param name="fieldIndex">Index of the field that contain new value.</param>
      <param name="typeMapping">The type mapping.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistParameterBinding.BindingType">
      <summary>
            Gets the type of the binding.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistParameterBinding.FieldIndex">
      <summary>
            Gets the index of the field to extract value from.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistParameterBindingType">
      <summary>
            Possible types of <see cref="T:Xtensive.Storage.Providers.Sql.PersistParameterBinding" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.Regular">
      <summary>
            Indicates that no special handling of parameter is performed.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.CharacterLob">
      <summary>
            Indicates that parameter is a large character object and should be persisted via <see cref="T:Xtensive.Sql.ICharacterLargeObject" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistParameterBindingType.BinaryLob">
      <summary>
            Indicates that parameter is a large binary object and should be persisted via <see cref="T:Xtensive.Sql.IBinaryLargeObject" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequest">
      <summary>
            Modification (Insert, Update, Delete) request.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequest.#ctor(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> class.
            </summary>
      <param name="statement">The statement.</param>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequest.#ctor(Xtensive.Sql.ISqlCompileUnit,System.Collections.Generic.IEnumerable{Xtensive.Storage.Providers.Sql.PersistParameterBinding})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> class.
            </summary>
      <param name="statement">The statement.</param>
      <param name="parameterBindings">The parameter bindings.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequest.ParameterBindings">
      <summary>
            Gets the parameter bindings.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder">
      <summary>
            Builder of <see cref="T:Xtensive.Storage.Providers.Sql.Request" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.Build(Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask)">
      <summary>
            Builds the request.
            </summary>
      <param name="task">The request builder task.</param>
      <returns>
        <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" /> instance for the specified <paramref name="task" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.Initialize">
      <summary>
            Initializer. 
            Invoked right after creation and initial configuration of the handler.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder" /> class.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilderContext">
      <summary>
        <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder" /> context.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask">
      <summary>
            A task for <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestBuilder" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                </param>
      <exception cref="T:System.NullReferenceException">
                    The <paramref name="obj" /> parameter is null.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Type">
      <summary>
            Gets the type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.FieldMap">
      <summary>
            Gets the field map that describes updated fields.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.PersistRequestBuilderTask.Kind">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequestKind" />.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.PersistRequestKind">
      <summary>
            Kinds of <see cref="T:Xtensive.Storage.Providers.Sql.PersistRequest" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Insert">
      <summary>
            Insert request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Remove">
      <summary>
            Remove request.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Providers.Sql.PersistRequestKind.Update">
      <summary>
            Update request.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.SqlStoreProvider">
      <summary>
            Default implementation of SQL temporary data provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor">
      <summary>
            A descriptor of temporary table.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor" /> class.
            </summary>
      <param name="name">A value for <see cref="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.Name" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.Name">
      <summary>
            Gets the unique name of this temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.TupleDescriptor">
      <summary>
            Gets or sets the tuple descriptor associated with this table descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.CreateStatement">
      <summary>
            Gets or sets the table creation script.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.DropStatement">
      <summary>
            Gets or sets the table destruction script.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.StoreRequest">
      <summary>
            Gets or sets the persist request used to store data in temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.ClearRequest">
      <summary>
            Gets or sets the clear reqest used to delete all data from temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableDescriptor.QueryStatement">
      <summary>
            Gets or sets the query statement associated with this table descriptor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Providers.Sql.TemporaryTableStateRegistry">
      <summary>
            A registry of temporary tables.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Providers.Sql.TemporaryTableStateRegistry.States">
      <summary>
            Gets or sets the states of temporary tables.
            </summary>
    </member>
  </members>
</doc>