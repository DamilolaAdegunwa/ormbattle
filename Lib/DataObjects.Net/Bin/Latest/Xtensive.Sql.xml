<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Sql</name>
  </assembly>
  <members>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerNamingScope.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.GetName(System.Object)">
      <summary>
            Gets the name for the specified <paramref name="parameter" />.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>Name for the specified parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlParameterNameProvider.#ctor(Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilationResult">
      <summary>
            Represents a <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" /> compilation results.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetParameterName(System.Object)">
      <summary>
            Gets the name of the <paramref name="parameter" /> assigned during compilation.
            All explicitly named parameters are not searched by this method.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>Assigned name.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText">
      <summary>
            Gets the textual representation of SQL DOM statement compilation.
            </summary>
      <value>The SQL text command.</value>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilationResult.GetCommandText(Xtensive.Sql.Compiler.SqlPostCompilerConfiguration)">
      <summary>
            Gets the textual representation of SQL DOM statement compilation.
            Query is postprocessed using the specified <paramref name="configuration" />.
            </summary>
      <param name="configuration">The postcompiler configuration.</param>
      <returns>The SQL text command.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlDriverBound">
      <summary>
            A <see cref="T:Xtensive.Sql.SqlDriver" /> bound object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverBound.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlDriverBound" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.SqlDriverBound.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompiler.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerConfiguration">
      <summary>
            A various options for <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlCompilerConfiguration" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.ForcedAliasing">
      <summary>
            Gets or sets a value indicating whether full automatic aliasing is enforced.
            </summary>
      <value>
        <see langword="true" /> if full automatic aliasing is enforced; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlCompilerConfiguration.ParameterNamePrefix">
      <summary>
            Gets or sets the parameter prefix.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerOutputScope.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteString(System.String)">
      <summary>
            Returns quoted string.
            </summary>
      <param name="str">Unquoted string.</param>
      <returns>Quoted string.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.QuoteIdentifier(System.String[])">
      <summary>
            Returns string holding quoted identifier name.
            </summary>
      <param name="names">An <see cref="T:System.Array" /> of unquoted identifier name parts.</param>
      <returns>Quoted identifier name.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.BuildBatch(System.String[])">
      <summary>
            Builds the batch from specified SQL statements.
            </summary>
      <param name="statements">The statements.</param>
      <returns>String containing the whole batch.</returns>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlTranslator.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.FloatFormatString">
      <summary>
            Gets the float format string.
            See <see cref="M:System.Double.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DoubleFormatString">
      <summary>
            Gets the double format string.
            See <see cref="M:System.Double.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.DateTimeFormatString">
      <summary>
            Gets the date time format string.
            See <see cref="M:System.DateTime.ToString(System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.TimeSpanFormatString">
      <summary>
            Gets the time span format string.
            See <see cref="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)" /> for details.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Compiler.SqlTranslator.ParameterPrefix">
      <summary>
            Gets the parameter prefix.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlNode">
      <summary>
            Represents any node in Sql expression tree.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlNode.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="P:Xtensive.Sql.SqlNode.NodeType">
      <summary>
            Gets the type of the node.
            </summary>
      <value>The type of the node.</value>
    </member>
    <member name="T:Xtensive.Sql.SqlStatement">
      <summary>
            Base class for SQL statements.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlExpression">
      <summary>
            Defines base class for any sql expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumn.Name">
      <summary>
            Gets or sets the name of this instance.
            </summary>
      <value>The alias.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumn.SqlTable">
      <summary>
            Gets the table reference.
            </summary>
      <value>The table reference.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Add(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Contains(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.CopyTo(Xtensive.Sql.Dml.SqlExpression[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.IndexOf(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Insert(System.Int32,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.Remove(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlExpressionList.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlExpressionList.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="T:Xtensive.Sql.Dml.Extensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.Extensions.IsNullReference(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Determines whether the specified expression is a null reference.
            Use this method instead of comparison with null,
            because equality operator is overloaded for <see cref="T:Xtensive.Sql.Dml.SqlExpression" />
            to yield equality comparison expression.
            </summary>
      <param name="expression">The expression to check.</param>
      <returns>
        <see langword="true" /> if argument is a null reference; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTable">
      <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table" /> object;
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlTable.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Name">
      <summary>
            Gets the name of the instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Columns">
      <summary>
            Gets the collection of columns.
            </summary>
      <value>The collection of column references.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTable.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Dml.SqlColumn" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.Info.FullTextSearchInfo">
      <summary>
            Describes a full-text capabilities of a database server.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.EntityInfo">
      <summary>
            Describes a common database entity.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.EntityInfo.MaxIdentifierLength">
      <summary>
            Gets or sets maximal identifier length.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.EntityInfo.AllowedDdlStatements">
      <summary>
            Gets or sets allowed DDL statements for this instance.
            </summary>
      <value>Allowed DDL statements.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.FullTextSearchInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.CoreServerInfo">
      <summary>
            A information required for creating a driver.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ServerLocation">
      <summary>
            Gets or sets the server location.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ServerVersion">
      <summary>
            Gets or sets the server version.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.ConnectionString">
      <summary>
            Gets or sets the connection string.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.DatabaseName">
      <summary>
            Gets or sets the name of the database.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.DefaultSchemaName">
      <summary>
            Gets or sets the default name of the schema.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CoreServerInfo.MultipleActiveResultSets">
      <summary>
            Gets or sets a value indicating whether multiple active result sets are supported.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.AssertConstraintInfo">
      <summary>
            Describes assert constaint capabilities.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.CheckConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.CheckConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.CheckConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable check constraints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable foreign key constraints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Clustered">
      <summary>
            Indicates that primary key constraints can be declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PrimaryKeyConstraintFeatures.Nullable">
      <summary>
            Indicates that primary key constraints can be applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PrimaryKeyConstraintInfo">
      <summary>
            Describes a primary key constaint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.PrimaryKeyConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.UniqueConstraintFeatures">
      <summary>
            Possible features for <see cref="T:Xtensive.Sql.Info.UniqueConstraintInfo" /></summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Clustered">
      <summary>
            Indicates that unique key constraints can be declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.UniqueConstraintFeatures.Nullable">
      <summary>
            Indicates that unique key constraints can be applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.UniqueConstraintInfo">
      <summary>
            Describes a unique constaint capabilities
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.UniqueConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.FullTextSearchFeatures">
      <summary>
            Defines full-text options.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.None">
      <summary>
            Indicates that RDBMS doesn't support full-text at all.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.SingleKeyRankTable">
      <summary>
            Indicates that RDBMS uses table with 'KEY' and 'RANK' columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.FullTextSearchFeatures.Full">
      <summary>
            Indicates that RDBMS supports column functions to calculate full-text rank.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerFeatures">
      <summary>
            Features of RBMS.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.None">
      <summary>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.LargeObjects">
      <summary>
            Indicates that RDBMS uses large objects (LOBs) for manipulating large data chunks.
            <seealso cref="T:Xtensive.Sql.ICharacterLargeObject" />.
            <seealso cref="T:Xtensive.Sql.IBinaryLargeObject" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters">
      <summary>
            Indicates that RDBMS supports cursor parameters.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.MultipleResultsViaCursorParameters">
      <summary>
            Indicates whether RDBMS supports returning multiple results via cursor parameters.
            Does matter only if <see cref="F:Xtensive.Sql.Info.ServerFeatures.CursorParameters" /> feature is avaliable.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ServerFeatures.Savepoints">
      <summary>
            Indicates whether RDBMS supports savepoints.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ValueRange">
      <summary>
            Provides a <see cref="T:Xtensive.Sql.Info.ValueRange`1" />s for standard .Net struct types.
            </summary>
      <summary>
            Represents a contiguous range of values.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Bool">
      <summary>
            Standard value range for <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Char">
      <summary>
            Standard value range for <see cref="T:System.Char" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.SByte">
      <summary>
            Standard value range for <see cref="T:System.SByte" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int16">
      <summary>
            Standard value range for <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int32">
      <summary>
            Standard value range for <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Int64">
      <summary>
            Standard value range for <see cref="T:System.Int64" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Byte">
      <summary>
            Standard value range for <see cref="T:System.Byte" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt16">
      <summary>
            Standard value range for <see cref="T:System.UInt16" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt32">
      <summary>
            Standard value range for <see cref="T:System.UInt32" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.UInt64">
      <summary>
            Standard value range for <see cref="T:System.UInt64" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Float">
      <summary>
            Standard value range for <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Double">
      <summary>
            Standard value range for <see cref="T:System.Double" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.Decimal">
      <summary>
            Standard value range for <see cref="T:System.Decimal" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.DateTime">
      <summary>
            Standard value range for <see cref="T:System.DateTime" /></summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ValueRange.TimeSpan">
      <summary>
            Standard value range for <see cref="T:System.TimeSpan" /></summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetMinValue">
      <summary>
            Gets the min value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetMaxValue">
      <summary>
            Gets the max value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.GetDefaultValue">
      <summary>
            Gets the default value.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange.HasDefaultValue">
      <summary>
            Determines whether default value has been specified.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Index">
      <summary>
            Represents an Index object.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTableNode">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable" /> bound object.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Node">
      <summary>
            Represents base lockable named node.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Node.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Node.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Node" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Node.Name">
      <summary>
            Gets or sets a name of the node.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Node.DbName">
      <summary>
            Gets or sets a db name of the node.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.IPairedNode`1">
      <summary>
            Describes an object that is paired with some <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.IPairedNode`1.UpdatePairedProperty(System.String,`0)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableNode.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#DataTable}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.DataTable)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableNode.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableNode" /> class.
            </summary>
      <param name="dataTable">The dataTable.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTableNode.DataTable">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DataTableNode.DataTable" /> this instance belongs to.
            </summary>
      <value>The dataTable this instance belongs to.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.IPartitionable">
      <summary>
            Defines an object that supports partitioning.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IPartitionable.PartitionDescriptor">
      <summary>
            Gets or sets the partition descriptor.
            </summary>
      <value>The partition descriptor.</value>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Creates the index column.
            </summary>
      <param name="column">The column.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn,System.Boolean)">
      <summary>
            Creates the index column.
            </summary>
      <param name="column">The column.</param>
      <param name="ascending">The sort direction.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the index column.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.IndexColumn" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.CreateIndexColumn(Xtensive.Sql.Dml.SqlExpression,System.Boolean)">
      <summary>
            Creates the index column.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.IndexColumn" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Index.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Columns">
      <summary>
            Columns, this instance is based on.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.NonkeyColumns">
      <summary>
            Non key columns to be added to the the index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Where">
      <summary>
            Gets or sets the index filter expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsUnique">
      <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsFullText">
      <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsBitmap">
      <summary>
            Gets or sets the value indicating that this index is bitmap index.
            A bitmap index is a special kind of index that stores the bulk of its data as bitmaps 
            and answers most queries by performing bitwise logical operations on these bitmaps.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.IsClustered">
      <summary>
            Gets or sets the value indicating that this index is clustered index.
            Clustered index is the index in which the logical order of the key values 
            determines the physical order of the corresponding rows in a table. 
            The bottom, or leaf, level of the clustered index contains the actual data rows 
            of the table. A table or view is allowed one clustered index at a time.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.FillFactor">
      <summary>
            Specifies a percentage that indicates how full the database server should make the leaf level 
            of each index page during index creation or rebuild. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.Filegroup">
      <summary>
            Gets or sets the value indicating that specified index will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the index uses the same filegroup 
            as the underlying table or view.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Index.PartitionDescriptor">
      <summary>
            Gets or sets the partition descriptor.
            </summary>
      <value>The partition descriptor.</value>
    </member>
    <member name="M:Xtensive.Sql.Model.FullTextIndex.CreateIndexColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Creates the full-text index column.
            </summary>
      <param name="column">The column.</param>
      <returns>Newly created <see cref="T:Xtensive.Sql.Model.IndexColumn" /> object.</returns>
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.IsFullText">
      <summary>
            Gets or sets the value indicating that this index is unique index.
            Unique index is one in which no two rows are permitted to have the same index key value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.FullTextCatalog">
      <summary>
            Gets or sets the full text catalog.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.FullTextIndex.UnderlyingUniqueIndex">
      <summary>
            Gets or sets the underlying unique index name.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDriver">
      <summary>
            Declares a base functionality of any <see cref="T:Xtensive.Sql.SqlDriver" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(Xtensive.Core.UrlInfo)">
      <summary>
            Creates the driver from the specified connection URL.
            </summary>
      <param name="connectionUrl">The connection url.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(System.String)">
      <summary>
            Creates the driver from the specified connection URL.
            </summary>
      <param name="connectionUrl">The connection url.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(System.String,System.String)">
      <summary>
            Creates the driver from the specified connection string and driver name.
            </summary>
      <param name="provider">The provider.</param>
      <param name="connectionString">The connection string.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Create(Xtensive.Core.ConnectionInfo)">
      <summary>
            Creates the driver from the specified connection string and driver name.
            </summary>
      <param name="connectionInfo">The connection info.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
      <param name="statement">The Sql.Dom statement.</param>
      <returns>Result of compilation.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.Compile(Xtensive.Sql.ISqlCompileUnit,Xtensive.Sql.Compiler.SqlCompilerConfiguration)">
      <summary>
            Compiles the specified statement into SQL command representation.
            </summary>
      <param name="statement">The Sql.Dom statement.</param>
      <param name="configuration">The options of compilation.</param>
      <returns>Result of compilation.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractCatalog(Xtensive.Sql.SqlConnection)">
      <summary>
            Extracts all schemas from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds all schemas in the database.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractDefaultSchema(Xtensive.Sql.SqlConnection)">
      <summary>
            Extracts the default schema from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds just the default schema in the database.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.ExtractSchema(Xtensive.Sql.SqlConnection,System.String)">
      <summary>
            Extracts the specified schema from the database.
            </summary>
      <param name="connection">The connection.</param>
      <returns>
            Extracted <see cref="T:Xtensive.Sql.Model.Schema" /> instance.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection">
      <summary>
            Creates the connection using default connection information
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection(Xtensive.Core.ConnectionInfo)">
      <summary>
            Creates the connection using specified connection information.
            </summary>
      <param name="connectionInfo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.GetExceptionType(System.Exception)">
      <summary>
            Gets the type of the exception.
            </summary>
      <param name="exception">The exception.</param>
      <returns>Type of the exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateCompiler">
      <summary>
            Creates the SQL DOM compiler.
            </summary>
      <returns>Created compiler.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateTranslator">
      <summary>
            Creates the SQL DOM translator.
            </summary>
      <returns>Created translator</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateExtractor">
      <summary>
            Creates the extractor.
            </summary>
      <returns>Created extractor.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateTypeMapper">
      <summary>
            Creates the type mapper.
            </summary>
      <returns>Created type mapper.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateServerInfoProvider">
      <summary>
            Creates the server info provider.
            </summary>
      <returns>Created server info provider.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriver.CreateConnection(System.String)">
      <summary>
            Creates connection from the specified <paramref name="connectionString" />.
            </summary>
      <param name="connectionString">Connection string</param>
      <returns>Created connection.</returns>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.CoreServerInfo">
      <summary>
            Gets an instance that provides the most essential information about underlying RDBMS.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.ServerInfo">
      <summary>
            Gets an instance that provides complete information about underlying RDBMS.
            <seealso cref="P:Xtensive.Sql.SqlDriver.ServerInfo" /></summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.TypeMappings">
      <summary>
            Gets the type mappings.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlDriver.Translator">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Compiler.SqlTranslator" />.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlExceptionType">
      <summary>
            Possible exeception types.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.Unknown">
      <summary>
            Reason of exception is unknown.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.ConnectionError">
      <summary>
            Connection error (such as timeout).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.SyntaxError">
      <summary>
            Syntax error in query.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.CheckConstraintViolation">
      <summary>
            Check constraint violation (including NOT NULL constraints)
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.UniqueConstraintViolation">
      <summary>
            Unique constraint violation (also denotes unique and primary index key duplication).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.ReferentialConstraintViolation">
      <summary>
            Referential constraint (aka foreign key) violation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.Deadlock">
      <summary>
            Deadlock.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.SerializationFailure">
      <summary>
            Concurrent access serialization failure.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlExceptionType.OperationTimeout">
      <summary>
            Operation timed out.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlExtensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.GetDatabase(Xtensive.Core.UrlInfo)">
      <summary>
            Extracts the database component from the specified <see cref="T:Xtensive.Core.UrlInfo" />.
            </summary>
      <param name="url">The URL.</param>
      <returns>Database name.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.GetSchema(Xtensive.Core.UrlInfo,System.String)">
      <summary>
            Extracts the schema component from the specified <see cref="T:Xtensive.Core.UrlInfo" />.
            If schema is not specified returns <paramref name="defaultValue" />.
            </summary>
      <param name="url">The URL.</param>
      <param name="defaultValue">The default schema name.</param>
      <returns>Schema name.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlExtensions.ToClrType(Xtensive.Sql.SqlType)">
      <summary>
            Converts the specified <see cref="T:Xtensive.Sql.SqlType" /> to corresponding .NET type.
            </summary>
      <param name="type">The type to convert.</param>
      <returns>Converter type.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlHelper">
      <summary>
            Various helper methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ValidateConnectionUrl(Xtensive.Core.UrlInfo)">
      <summary>
            Validates the specified URL againts charactes that usually forbidden inside connection strings.
            </summary>
      <param name="url">The URL.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithQuotes(System.String[])">
      <summary>
            Quotes the specified identifier with quotes (i.e. "").
            </summary>
      <returns>Quoted identifier.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteIdentifierWithBrackets(System.String[])">
      <summary>
            Quotes the specified identifier with square brackets (i.e. []).
            </summary>
      <returns>Quoted indentifier.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.IntervalToMilliseconds(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Converts the specified interval expression to expression
            that represents number of milliseconds in that interval.
            This is a generic implementation via <see cref="T:Xtensive.Sql.Dml.SqlExtract" />s.
            It's suitable for any server, but can be inefficient.
            </summary>
      <param name="interval">The interval to convert.</param>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.IntervalAbs(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Converts the specified interval expression to expression
            that represents absolute value (duration) of the specified interval.
            This is a generic implementation that uses comparison with zero interval.
            It's suitable for any server, but can be inefficent.
            </summary>
      <param name="source">The source.</param>
      <returns>Result of conversion.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs banker's rounding on the specified argument.
            </summary>
      <param name="value">The value to round.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.BankersRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs banker's rounding on the speicified argument
            to a specified number of fractional digits.
            </summary>
      <param name="value">The value to round.</param>
      <param name="digits">The digits.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs "rounding as tought in school" on the specified argument.
            </summary>
      <param name="value">The value to round.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.RegularRound(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Performs "rounding as tought in school" on the specified argument
            to a specified number of fractional digits.
            </summary>
      <param name="argument">The value to round.</param>
      <param name="digits">The digits.</param>
      <returns>Result of rounding.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.TimeSpanToString(System.TimeSpan,System.String)">
      <summary>
            Converts the specified <see cref="T:System.TimeSpan" /> to string using the specified format string.
            </summary>
      <param name="value">The value.</param>
      <param name="format">The format string.</param>
      <returns>Formatted representation of the <paramref name="value" />.</returns>
      <remarks>
            Format string can contain any of these placeholders:
            <list type="table"><item><term>{0}</term><description>negative sign, if argument represents a negative <see cref="T:System.TimeSpan" />; <see cref="F:System.String.Empty" />, otherwise.</description></item><item><term>{1}</term><description>absolute value of <see cref="P:System.TimeSpan.Days" /> property.</description></item><item><term>{2}</term><description>absolute value of <see cref="P:System.TimeSpan.Hours" /> property.</description></item><item><term>{3}</term><description>absolute value of <see cref="P:System.TimeSpan.Minutes" /> property.</description></item><item><term>{4}</term><description>absolute value of <see cref="P:System.TimeSpan.Seconds" /> property.</description></item><item><term>{5}</term><description>absolute value of <see cref="P:System.TimeSpan.Milliseconds" /> property.</description></item></list></remarks>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ReadDatabaseAndSchema(System.Data.Common.DbConnection,System.String,Xtensive.Sql.Info.CoreServerInfo)">
      <summary>
            Reads the database and schema using the specified query.
            By contract query should return database in first column and schema in second.
            </summary>
      <param name="connection">The connection.</param>
      <param name="queryText">The query text.</param>
      <param name="coreServerInfo">The core server info.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.ReduceIsolationLevel(System.Data.IsolationLevel)">
      <summary>
            Reduces the isolation level to the most commonly supported ones.
            </summary>
      <param name="level">The level.</param>
      <returns>Converted isolation level.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.QuoteString(System.String)">
      <summary>
            Quotes the string using standard SQL quoting rules.
            </summary>
      <param name="value">The value.</param>
      <returns>Quoted string.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(System.String)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.QueryFeatures)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlHelper.NotSupported(Xtensive.Sql.Info.ServerFeatures)">
      <summary>
            Creates a <see cref="T:System.NotSupportedException" /> with message that says that <paramref name="feature" />
            is not supported by current storage.
            </summary>
      <param name="feature">The feature.</param>
      <returns>Created exception.</returns>
    </member>
    <member name="T:Xtensive.Sql.Info.FeaturesExtensions">
      <summary>
            Various extension methods related to this namespace.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.QueryFeatures,Xtensive.Sql.Info.QueryFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.IndexFeatures,Xtensive.Sql.Info.IndexFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.DataTypeFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ForeignKeyConstraintFeatures,Xtensive.Sql.Info.ForeignKeyConstraintFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ColumnFeatures,Xtensive.Sql.Info.ColumnFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.FeaturesExtensions.Supports(Xtensive.Sql.Info.ServerFeatures,Xtensive.Sql.Info.ServerFeatures)">
      <summary>
            Determines whether the specified active features is supported.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlConnection">
      <summary>
            A connection to a database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object with specified <paramref name="statement" />.
            Created command will be associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCommand(System.String)">
      <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object with specified <paramref name="commandText" />.
            Created command will be associated with the current connection.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateParameter">
      <summary>
            Creates the parameter.
            </summary>
      <returns>Created parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCursorParameter">
      <summary>
            Creates the cursor parameter.
            </summary>
      <returns>Created parameter.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateCharacterLargeObject">
      <summary>
            Creates the character large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull" /> returns <see langword="true" />)
            </summary>
      <returns>Created CLOB.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateBinaryLargeObject">
      <summary>
            Creates the binary large object bound to this connection.
            Created object initially have NULL value (<see cref="P:Xtensive.Sql.ILargeObject.IsNull" /> returns <see langword="true" />)
            </summary>
      <returns>Created BLOB.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Open">
      <summary>
            Opens the connection.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Close">
      <summary>
            Closes the connection.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction">
      <summary>
            Begins the transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>
            Begins the transaction with the specified <see cref="T:System.Data.IsolationLevel" />.
            </summary>
      <param name="isolationLevel">The isolation level.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Commit">
      <summary>
            Commits the current transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Rollback">
      <summary>
            Rollbacks the current transaction.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.MakeSavepoint(System.String)">
      <summary>
            Makes the transaction savepoint.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.RollbackToSavepoint(System.String)">
      <summary>
            Rollbacks current transaction to the specified savepoint.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.ReleaseSavepoint(System.String)">
      <summary>
            Releases the savepoint with the specfied name.
            </summary>
      <param name="name">The name of the savepoint.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.Dispose">
      <summary>
                    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.ClearActiveTransaction">
      <summary>
            Clears the active transaction (i.e. sets <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> to <see langword="null" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.CreateNativeCommand">
      <summary>
            Creates the native command.
            </summary>
      <returns>Created command.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.EnsureTransactionIsActive">
      <summary>
            Ensures the transaction is active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> is not <see langword="null" />).
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlConnection.EnsureTrasactionIsNotActive">
      <summary>
            Ensures the trasaction is not active (i.e. <see cref="P:Xtensive.Sql.SqlConnection.ActiveTransaction" /> is <see langword="null" />).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.UnderlyingConnection">
      <summary>
            Gets the underlying connection.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.ActiveTransaction">
      <summary>
            Gets the active transaction.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlConnection.State">
      <summary>
            Gets the state of the connection.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDdl">
      <summary>
            A factory for SQL DDL operations.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ValueTypeMapping.DataRangeValidator">
      <summary>
            A validator for primitive types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ValueTypeMapping.DataRangeValidator.Validate``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
      <summary>
            Ensures that the specified value is in <paramref name="allowedRange" />.
            </summary>
      <typeparam name="T">Type of the value to validate.</typeparam>
      <param name="value">The value.</param>
      <param name="allowedRange">The allowed range.</param>
    </member>
    <member name="M:Xtensive.Sql.ValueTypeMapping.DataRangeValidator.Correct``1(``0,Xtensive.Sql.Info.ValueRange{``0})">
      <summary>
            Corrects the specified value to fall into the <paramref name="allowedRange" />.
            </summary>
      <typeparam name="T">Type of the value to validate</typeparam>
      <param name="value">The value.</param>
      <param name="allowedRange">The allowed range.</param>
      <returns>Corrected value.</returns>
    </member>
    <member name="M:Xtensive.Sql.ValueTypeMapping.TypeMapper.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDriverFactory">
      <summary>
            Creates drivers from the specified connection info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverFactory.CreateDriver(System.String)">
      <summary>
            Creates the driver from the specified <see cref="T:Xtensive.Core.ConnectionInfo" />.
            </summary>
      <param name="connectionString">The connection string to create driver from.</param>
      <returns>Created driver.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlDriverFactory.BuildConnectionString(Xtensive.Core.UrlInfo)">
      <summary>
            Builds the connection string from the specified URL.
            </summary>
      <param name="connectionUrl">The connection URL.</param>
      <returns>Built connection string</returns>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerInfoProvider">
      <summary>
            Describes <see cref="T:Xtensive.Sql.Info.ServerInfo" /> provider interface.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCollationInfo">
      <summary>
            Gets the collation info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCharacterSetInfo">
      <summary>
            Gets the character set info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTranslationInfo">
      <summary>
            Gets the translation info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTriggerInfo">
      <summary>
            Gets the trigger info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStoredProcedureInfo">
      <summary>
            Gets the stored procedure info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSequenceInfo">
      <summary>
            Gets the sequence info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDatabaseInfo">
      <summary>
            Gets the database info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetColumnInfo">
      <summary>
            Gets the column info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetViewInfo">
      <summary>
            Gets the view info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetSchemaInfo">
      <summary>
            Gets the schema info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTableInfo">
      <summary>
            Gets the table info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetTemporaryTableInfo">
      <summary>
            Gets the temporary table info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetCheckConstraintInfo">
      <summary>
            Gets the check constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetUniqueConstraintInfo">
      <summary>
            Gets the unique constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetPrimaryKeyInfo">
      <summary>
            Gets the primary key info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetFullTextInfo">
      <summary>
            Gets the referential constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetForeignKeyConstraintInfo">
      <summary>
            Gets the referential constraint info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIndexInfo">
      <summary>
            Gets the index info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetQueryInfo">
      <summary>
            Gets the query info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIdentityInfo">
      <summary>
            Gets the identity info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDataTypesInfo">
      <summary>
            Gets the collection of supported data types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetIsolationLevels">
      <summary>
            Gets the supported isolation levels.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetDomainInfo">
      <summary>
            Gets the domain info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetAssertionInfo">
      <summary>
            Gets the assertion info.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetServerFeatures">
      <summary>
            Gets the server features.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.GetStringIndexingBase">
      <summary>
            Gets the string indexing base.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfoProvider.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Info.ServerInfoProvider" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfoProvider.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.BoundaryType">
      <summary>
            Specifies to which side of each boundary value interval, left or right, the boundary value
            belongs.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Default">
      <summary>
            Default value is equal to <see cref="F:Xtensive.Sql.BoundaryType.Left" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Left">
      <summary>
            Specifies that boundary value belongs to the left side of boundary value interval.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.BoundaryType.Right">
      <summary>
            Specifies that boundary value belongs to the right side of boundary value interval.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Catalog">
      <summary>
            Represents a single database catalog that can contain multiple database schemas.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreateSchema(System.String)">
      <summary>
            Creates a schema.
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionFunction(System.String,Xtensive.Sql.SqlValueType,System.String[])">
      <summary>
            Creates the partition function.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Type of the input parameter.</param>
      <param name="boundaryValues">The boundary values.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.CreatePartitionSchema(System.String,Xtensive.Sql.Model.PartitionFunction,System.String[])">
      <summary>
            Creates the partition schema.
            </summary>
      <param name="name">The name.</param>
      <param name="partitionFunction">The partition function.</param>
      <param name="filegroups">The filegroups.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Catalog.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.DefaultSchema">
      <summary>
            Default <see cref="T:Xtensive.Sql.Model.Schema" /> of this instance.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.Schemas">
      <summary>
            Gets the schemas.
            </summary>
      <value>The schemas.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.PartitionFunctions">
      <summary>
            Gets the partition functions.
            </summary>
      <value>The partition functions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Catalog.PartitionSchemas">
      <summary>
            Gets the partition schemes.
            </summary>
      <value>The partition schemes.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.CatalogNode">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog" /> bound object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.CatalogNode.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.CatalogNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Catalog}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Catalog)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.CatalogNode.#ctor(Xtensive.Sql.Model.Catalog,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.CatalogNode" /> class.
            </summary>
      <param name="catalog">The catalog.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.CatalogNode.Catalog">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.CatalogNode.Catalog" /> this instance belongs to.
            </summary>
      <value>The catalog this instance belongs to.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.CharacterSet">
      <summary>
            Represents a character set object.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.SchemaNode">
      <summary>
            Represents any <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema" /> bound <see cref="T:Xtensive.Sql.Model.Node" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SchemaNode.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SchemaNode.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Schema}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Schema)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SchemaNode.#ctor(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SchemaNode" /> class.
            </summary>
      <param name="schema">The schema.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.SchemaNode.Schema">
      <summary>
        <see cref="P:Xtensive.Sql.Model.SchemaNode.Schema" /> instance this instance belongs to.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.CharacterSet.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.CheckOptions">
      <summary>
            Levels of checking to be done when inserting or updating data through a view.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Default">
      <summary>
            The same as <see cref="F:Xtensive.Sql.CheckOptions.None" />.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.None">
      <summary>
            None check options are set.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Local">
      <summary>
            This option is identical to <see cref="F:Xtensive.Sql.CheckOptions.Cascaded" /> option except that you can update 
            a row so that it no longer can be retrieved through the view. 
            This can only happen when the view is directly or indirectly dependent on a view 
            that was defined with no WITH CHECK OPTION clause.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.CheckOptions.Cascaded">
      <summary>
            This option specifies that every row that is inserted or updated through the view 
            must conform to the definition of the view. In addition, the search conditions 
            of all dependent views are checked when a row is inserted or updated. If a row 
            does not conform to the definition of the view, that row cannot be retrieved using the view.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Collation">
      <summary>
            Represents a collation object thst specifies the rules for how strings 
            of character data are sorted and compared, based on the norms of 
            particular languages and locales.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Collation.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.Assertion">
      <summary>
            Represents a named constraint that may relate to the content
            of individual rows of a table, to the entire contents of a table,
            or to a state required to exist among a number of tables.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Assertion.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Assertion.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.Condition">
      <summary>
            Gets or sets the check condition for this instance.
            </summary>
      <value>The condition.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.IsDeferrable">
      <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Assertion.IsInitiallyDeferred">
      <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.Model.CheckConstraint">
      <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table" /> check constraint.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.TableConstraint">
      <summary>
            Represents a base <see cref="P:Xtensive.Sql.Model.TableConstraint.Table" /> constraint object.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Constraint`1">
      <summary>
            Represents integrity constraint object.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Constraint">
      <summary>
            Represents integrity constraint object.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.IsDeferrable">
      <summary>
            Indicates that the constraint is deferrable or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.IsInitiallyDeferred">
      <summary>
            Indicates that the initial constraint mode is deferred or not.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint.Condition">
      <summary>
            Gets or sets the check condition for this instance.
            </summary>
      <value>The condition.</value>
    </member>
    <member name="M:Xtensive.Sql.Model.Constraint`1.ChangeOwner(`0)">
      <summary>
            Changes the owner.
            </summary>
      <param name="value">The owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Constraint`1.Xtensive#Sql#Model#IPairedNode{T}#UpdatePairedProperty(System.String,`0)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Constraint`1.Owner">
      <summary>
            Gets or sets the constraint owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.ChangeOwner(Xtensive.Sql.Model.Table)">
      <summary>
            Changes the table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint" /> class.
            </summary>
      <param name="table">The table.</param>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
      <param name="isDeferrable">Is constraint deferrable.</param>
      <param name="isInitiallyDeferred">Is constraint initially deferred.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableConstraint.#ctor(Xtensive.Sql.Model.Table,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.TableConstraint" /> class.
            </summary>
      <param name="table">The table.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.TableConstraint.Table">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableConstraint.Table" /> this instance belongs to.
            </summary>
      <value>The table.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.DefaultConstraint">
      <summary>
            Represents <see cref="T:Xtensive.Sql.Model.Table" /> default constraint.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.DefaultConstraint.Column">
      <summary>
            Gets the column.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.DomainConstraint">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain" /> constraint object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DomainConstraint.ChangeOwner(Xtensive.Sql.Model.Domain)">
      <summary>
            Changes the domain.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DomainConstraint.Domain">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.DomainConstraint.Domain" /> this instance belongs to.
            </summary>
      <value>The domain.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.ForeignKey">
      <summary>
            Represents a foreign key constraint that provides referential integrity 
            for the data in the column or columns. <see cref="T:Xtensive.Sql.Model.ForeignKey" /> constraints require that 
            each value in the column exists in the corresponding referenced column or columns 
            in the referenced table.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.ForeignKey.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.Columns">
      <summary>
            Gets the referencing columns.
            </summary>
      <value>The referencing columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedColumns">
      <summary>
            Gets the referenced columns.
            </summary>
      <value>The referenced columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.ReferencedTable">
      <summary>
            Gets or sets the referenced table.
            </summary>
      <value>The referenced table.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.MatchType">
      <summary>
            Match type.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.OnUpdate">
      <summary>
            Specifies what action happens to rows in the table
            when those rows have a referential relationship
            and the referenced row is updated in the parent table.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.ForeignKey.OnDelete">
      <summary>
            Specifies what action happens to rows in the table,
            if those rows have a referential relationship and
            the referenced row is deleted from the parent table.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Xtensive.Sql.Model.PrimaryKey">
      <summary>
            Represents primary key constraint.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.UniqueConstraint">
      <summary>
            Represents unique table constraint.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.UniqueConstraint.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.UniqueConstraint.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTable">
      <summary>
            An base class for <see cref="T:Xtensive.Sql.Model.Table" /> and <see cref="T:Xtensive.Sql.Model.View" /> types.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.CreateIndex(System.String)">
      <summary>
            Creates the index.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.CreateFullTextIndex(System.String)">
      <summary>
            Creates the full-text index.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTable.#ctor(Xtensive.Sql.Model.Schema,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTable" /> class.
            </summary>
      <param name="schema">The schema.</param>
      <param name="name">The name.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTable.Indexes">
      <summary>
            Gets the indexes.
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.DataTable.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.DataTableColumn">
      <summary>
            Represent a <see cref="T:Xtensive.Sql.Model.DataTable" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.DataTableColumn.#ctor(Xtensive.Sql.Model.DataTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.DataTableColumn" /> class.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="name">The name.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.Domain">
      <summary>
            Represents a domain object that is a set of permissible values. 
            A domain is defined in a schema and is identified by a domain name. 
            The purpose of a domain is to constrain the set of valid values 
            that can be stored in SQL-data by various operations.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.IConstrainable">
      <summary>
            Represents a node that is capable of being constrained.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IConstrainable.Constraints">
      <summary>
            Gets the node constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.CreateConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the domain constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Domain.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DataType">
      <summary>
            Gets or sets the data type of the domain.
            </summary>
      <value>The data type.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DefaultValue">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.Collation">
      <summary>
            Gets or sets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.DomainConstraints">
      <summary>
            Gets the constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Domain.Xtensive#Sql#Model#IConstrainable#Constraints">
      <summary>
            Gets the constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Extractor">
      <summary>
            Builds <see cref="T:Xtensive.Sql.Model.Catalog" /> by extracting the metadata from existing database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExtractCatalog">
      <summary>
            Extracts all schemes from the database.
            </summary>
      <returns>
        <see cref="T:Xtensive.Sql.Model.Catalog" /> that holds all schemes in the database.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExtractSchema(System.String)">
      <summary>
            Extracts the specified schema from the database.
            </summary>
      <returns>Extracted <see cref="T:Xtensive.Sql.Model.Schema" /> instance.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)">
      <summary>
            Initializes the translator with specified <see cref="T:Xtensive.Sql.SqlConnection" /> and <see cref="T:System.Data.Common.DbTransaction" />.
            </summary>
      <param name="connection">The connection.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.Initialize">
      <summary>
            Performs custom initialization.
            Called within <see cref="M:Xtensive.Sql.Model.Extractor.Initialize(Xtensive.Sql.SqlConnection)" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(Xtensive.Sql.ISqlCompileUnit)">
      <summary>
            Executes the reader againts the command created from the specified <paramref name="statement" />.
            </summary>
      <param name="statement">The statement to execute.</param>
      <returns>Executed reader.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.ExecuteReader(System.String)">
      <summary>
            Executes the reader againts the command created from the specified <paramref name="commandText" />.
            </summary>
      <param name="commandText">The command text to execute.</param>
      <returns>Executed reader.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Extractor.#ctor(Xtensive.Sql.SqlDriver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Extractor" /> class.
            </summary>
      <param name="driver">The driver.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Extractor.Driver">
      <summary>
            Gets the driver.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Extractor.Connection">
      <summary>
            Gets the connection.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.IndexColumn">
      <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.IndexColumn.Index" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.IndexColumn.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.IndexColumn.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#Index}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.Index)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Index">
      <summary>
            Gets or sets the index.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Column">
      <summary>
            Gets or sets the column.
            </summary>
      <value>The column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Ascending">
      <summary>
            Gets or sets a value indicating the ascending or descending sort direction for this instance.
             The default is <see langword="true" />.
            </summary>
      <value>
        <see langword="true" /> if ascending; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Name">
      <summary>
            Gets or sets a name of the node.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Expression">
      <summary>
            Gets or sets the expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.IndexColumn.Languages">
      <summary>
            Gets or sets the language.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.ISequenceable">
      <summary>
            Defines an object that could be the source of a sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.ISequenceable.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.NodeCollection`1">
      <summary>
            Represents lockable indexed by <see cref="P:Xtensive.Sql.Model.Node.Name" /> collection of <see cref="T:Xtensive.Sql.Model.Node" />s.
            </summary>
      <typeparam name="TNode">Node type</typeparam>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.Add(`0)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.NodeCollection`1" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.NodeCollection`1" /> class.
            </summary>
      <param name="capacity">The initial collection capacity.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.NodeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.NodeCollection`1" /> class.
            </summary>
      <param name="collection">The collection whose elements are copied to the new list.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.NodeCollection`1.IsReadOnly">
      <summary>
            Gets a value indicating whether this instance is read-only.
            </summary>
      <value>
      </value>
      <returns>
        <see langword="True" /> if this instance is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Xtensive.Sql.Model.NodeCollection`1.Item(System.String)">
      <summary>
            Gets the <typeparamref name="TNode" /> at the specified index.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.PairedNodeCollection`2">
      <summary>
            Represents paired collection of <see cref="T:Xtensive.Sql.Model.Node" />s.
            </summary>
      <typeparam name="TOwner">Owner node type</typeparam>
      <typeparam name="TNode">Item node type</typeparam>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Add(`1)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.Remove(`1)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collectionowner.</param>
      <param name="property">Owner collection property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
      <param name="property">Owner collection property.</param>
      <param name="capacity">The initial collection capacity.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PairedNodeCollection`2.#ctor(`0,System.String,System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PairedNodeCollection`2" /> class.
            </summary>
      <param name="owner">The collection owner.</param>
      <param name="property">Owner collection property.</param>
      <param name="collection">The collection whose elements are copied to the new list.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PairedNodeCollection`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>
        <see langword="True" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Xtensive.Sql.Model.HashPartition">
      <summary>
            Represents a hash partition.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Partition">
      <summary>
            Represents a single partition object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Partition.Xtensive#Sql#Model#IPairedNode{Xtensive#Sql#Model#PartitionDescriptor}#UpdatePairedProperty(System.String,Xtensive.Sql.Model.PartitionDescriptor)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Partition.#ctor(Xtensive.Sql.Model.PartitionDescriptor,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.Partition" /> class.
            </summary>
      <param name="partitionDescriptor">The partition descriptor.</param>
      <param name="filegroup">The filegroup.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Partition.Filegroup">
      <summary>
            Gets or sets the tablespace name or a filegroup name (according to RDBMS)
            that contains this instance.
            </summary>
      <value>The tablespace or a filegroup name.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Partition.PartitionDescriptor">
      <summary>
            Gets or sets the partitionDescriptor.
            </summary>
      <value>The partitionDescriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.ListPartition">
      <summary>
            Represents a list partition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.ListPartition.Values">
      <summary>
            Gets or sets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionDescriptor">
      <summary>
            Represents a set of information concerning object partitioning.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateHashPartition(System.String)">
      <summary>
            Creates the hash partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateListPartition(System.String,System.String[])">
      <summary>
            Creates the list partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <param name="values">The values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.CreateRangePartition(System.String,System.String)">
      <summary>
            Creates the range partition.
            </summary>
      <param name="filegroup">The filegroup.</param>
      <param name="boundary">The boundary.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionSchema)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionSchema">The partition schema.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionMethod">The partition method.</param>
      <param name="partitionAmount">The partition amount.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionDescriptor.#ctor(Xtensive.Sql.Model.IPartitionable,Xtensive.Sql.Model.TableColumn,Xtensive.Sql.Model.PartitionMethod)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.PartitionDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="column">The column.</param>
      <param name="partitionMethod">The partition method.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Column">
      <summary>
            Gets or sets the column against which an object will be partitioned.
            </summary>
      <value>The column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionAmount">
      <summary>
            Gets or sets the partition amount.
            </summary>
      <value>The partition amount.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.Partitions">
      <summary>
            Gets the partitions.
            </summary>
      <value>The partitions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionMethod">
      <summary>
            Gets or sets the partition method.
            </summary>
      <value>The partition method.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionDescriptor.PartitionSchema">
      <summary>
            Gets or sets the partition schema.
            </summary>
      <value>The partition schema.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionFunction">
      <summary>
            Represents a function in the current catalog that maps the rows of a table or index
            into partitions based on the values of a specified column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionFunction.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.DataType">
      <summary>
            Gets or sets the data type of the column used for partitioning.
            </summary>
      <value>The data type of the column used for partitioning.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryType">
      <summary>
            Gets or sets the boundary type that affects the partitioning behavior.
            </summary>
      <value>The boundary type.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionFunction.BoundaryValues">
      <summary>
            Gets or sets the boundary values for each partition of a partitioned table or index 
            that uses this partition function.
            </summary>
      <value>The boundary values.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionSchema">
      <summary>
            Represents a schema in the current <see cref="T:Xtensive.Sql.Model.Catalog" /> that maps the partitions of a 
            partitioned table or index to filegroups. The number and domain of the partitions of a 
            partitioned table or index are determined in a <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.PartitionSchema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionSchema.Filegroups">
      <summary>
            Specifies the names of the filegroups to hold the partitions specified
            by <see cref="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction" />. Filegroup name must already exist in the <see cref="T:Xtensive.Sql.Model.Catalog" />.
            </summary>
      <value>The filegroups.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.PartitionSchema.PartitionFunction">
      <summary>
            Gets or sets the partition function.
            </summary>
      <value>The partition function.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.RangePartition">
      <summary>
            Represents a range partition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.RangePartition.Boundary">
      <summary>
            Gets or sets the partition boundary.
            </summary>
      <value>The boundary.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.PartitionMethod">
      <summary>
            Enumeration of possible partitioning methods.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.None">
      <summary>
            None.
            Value is <see langword="0x00" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.Range">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on column values falling within a given range.
            Value is <see langword="0x01" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.List">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on columns values matching one of a set of discrete values.
            Value is <see langword="0x02" />. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Model.PartitionMethod.Hash">
      <summary>
            Indicates that table rows should be assigned to partitions 
            based on the value returned by a user-defined expression 
            that operates on column values in rows to be inserted into the table.
            Value is <see langword="0x04" />. 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ReferentialAction">
      <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.NoAction">
      <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.Restrict">
      <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.Cascade">
      <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.SetDefault">
      <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.ReferentialAction.SetNull">
      <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Model.Schema">
      <summary>
            A schema is a persistent descriptor that includes the name of the SQL-schema,
            the  <see cref="T:Xtensive.Sql.Model.CharacterSet"> default character set</see> for the schema,
            and the descriptor of every component of the schema.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateSequence(System.String)">
      <summary>
            Creates the sequence.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTemporaryTable(System.String)">
      <summary>
            Creates the temporary table.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTable(System.String)">
      <summary>
            Creates the table.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The select statement.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateView(System.String,Xtensive.Sql.Dml.SqlNative,Xtensive.Sql.CheckOptions)">
      <summary>
            Creates the view.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The select statement.</param>
      <param name="checkOptions">The check options.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Creates the assertion.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
      <param name="isDeferrable">Is assertion deferrable.</param>
      <param name="isInitiallyDeferred">Is assertion initially deferred.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateAssertion(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the assertion.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateCharacterSet(System.String)">
      <summary>
            Creates the character set.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateTranslation(System.String)">
      <summary>
            Creates the translation.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateCollation(System.String)">
      <summary>
            Creates the collation.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the domain.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Datatype.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.CreateDomain(System.String,Xtensive.Sql.SqlValueType)">
      <summary>
            Creates the domain.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Datatype.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.ChangeCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Changes the catalog.
            </summary>
      <param name="value">The new value of catalog property.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Schema.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Sequences">
      <summary>
            Gets the sequences.
            </summary>
      <value>The sequences.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Assertions">
      <summary>
            Gets the assertions.
            </summary>
      <value>The assertions.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Domains">
      <summary>
            Gets the domains.
            </summary>
      <value>The domains.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Collations">
      <summary>
            Gets the collations.
            </summary>
      <value>The collations.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.CharacterSets">
      <summary>
            Gets the character sets.
            </summary>
      <value>The character sets.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.DefaultCharacterSet">
      <summary>
            Gets or sets the default character set.
            </summary>
      <value>The default character set.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Translations">
      <summary>
            Gets the translations.
            </summary>
      <value>The translations.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Views">
      <summary>
            Gets the views.
            </summary>
      <value>The views.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Tables">
      <summary>
            Gets the tables.
            </summary>
      <value>The tables.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Schema.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.Sequence">
      <summary>
            Represents an object that generates unique numbers, mostly used for primary key values.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Sequence.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Sequence.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Sequence.DataType">
      <summary>
            Gets or sets the data type.
            </summary>
      <value>
      </value>
      <remarks>
            The data type must be exact numeric with scale 0.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.Sequence.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.SequenceDescriptor">
      <summary>
            Represents a set of information concerning sequence.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
      <param name="maxValue">The max value.</param>
      <param name="minValue">The min value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.SequenceDescriptor.#ctor(Xtensive.Sql.Model.ISequenceable,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Model.SequenceDescriptor" /> class.
            </summary>
      <param name="owner">The owner.</param>
      <param name="startValue">The start value.</param>
      <param name="increment">The increment.</param>
      <param name="maxValue">The max value.</param>
      <param name="minValue">The min value.</param>
      <param name="isCyclic">The is cyclic.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Owner">
      <summary>
            Gets or sets the owner.
            </summary>
      <value>The owner.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.StartValue">
      <summary>
            Gets or sets the start value.
            </summary>
      <remarks>
            The start value must lie between the minimum and maximum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.Increment">
      <summary>
            Gets or sets the increment.
            </summary>
      <remarks>
            If increment is not specified, then an increment of 1 
            is implicit. Increment must not be 0.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MaxValue">
      <summary>
            Gets or sets the max value.
            </summary>
      <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.MinValue">
      <summary>
            Gets or sets the min value.
            </summary>
      <remarks>
            The maximum value must be greater than the minimum value.
            </remarks>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.LastValue">
      <summary>
            Gets or sets the last value.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.SequenceDescriptor.IsCyclic">
      <summary>
            Gets or sets a value indicating whether this instance is isCyclic.
            </summary>
      <value>
        <see langword="true" /> if isCyclic; otherwise, <see langword="false" />.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.SqlModelVisitor`1">
      <summary>
            An abstract base class for all database model visitors. 
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.Visit(Xtensive.Sql.Model.Node)">
      <summary>
            Visits a node.
            </summary>
      <param name="node">The node.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitUniqueConstraint(Xtensive.Sql.Model.UniqueConstraint)">
      <summary>
            Visits unique constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableConstraint(Xtensive.Sql.Model.TableConstraint)">
      <summary>
            Visits table constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPrimaryKey(Xtensive.Sql.Model.PrimaryKey)">
      <summary>
            Visits primary key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitForeignKey(Xtensive.Sql.Model.ForeignKey)">
      <summary>
            Visits foreign key.
            </summary>
      <param name="key">The key.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomainConstraint(Xtensive.Sql.Model.DomainConstraint)">
      <summary>
            Visits domain constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitConstraint(Xtensive.Sql.Model.Constraint)">
      <summary>
            Visits a constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCheckConstraint(Xtensive.Sql.Model.CheckConstraint)">
      <summary>
            Visits check constraint.
            </summary>
      <param name="constraint">The constraint.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitRangePartition(Xtensive.Sql.Model.RangePartition)">
      <summary>
            Visits range partition.
            </summary>
      <param name="rangePartition">The range partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionSchema(Xtensive.Sql.Model.PartitionSchema)">
      <summary>
            Visits partition schema.
            </summary>
      <param name="partitionSchema">The partition schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionFunction(Xtensive.Sql.Model.PartitionFunction)">
      <summary>
            Visits partition function.
            </summary>
      <param name="partitionFunction">The partition function.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartitionDescriptor(Xtensive.Sql.Model.PartitionDescriptor)">
      <summary>
            Visits partition descriptor.
            </summary>
      <param name="partitionDescriptor">The partition descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitPartition(Xtensive.Sql.Model.Partition)">
      <summary>
            Visits a partition.
            </summary>
      <param name="partition">The partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitListPartition(Xtensive.Sql.Model.ListPartition)">
      <summary>
            Visits list partition.
            </summary>
      <param name="listPartition">The list partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitHashPartition(Xtensive.Sql.Model.HashPartition)">
      <summary>
            Visits hash partition.
            </summary>
      <param name="hashPartition">The hash partition.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCatalog(Xtensive.Sql.Model.Catalog)">
      <summary>
            Visits a catalog.
            </summary>
      <param name="catalog">The catalog.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCharacterSet(Xtensive.Sql.Model.CharacterSet)">
      <summary>
            Visits character set.
            </summary>
      <param name="characterSet">The character set.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitCollation(Xtensive.Sql.Model.Collation)">
      <summary>
            Visits a collation.
            </summary>
      <param name="collation">The collation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Visits data table.
            </summary>
      <param name="dataTable">The data table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDataTableColumn(Xtensive.Sql.Model.DataTableColumn)">
      <summary>
            Visits data table column.
            </summary>
      <param name="dataTableColumn">The data table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitDomain(Xtensive.Sql.Model.Domain)">
      <summary>
            Visits a domain.
            </summary>
      <param name="domain">The domain.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitFullTextIndex(Xtensive.Sql.Model.FullTextIndex)">
      <summary>
            Visits the full-text index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndex(Xtensive.Sql.Model.Index)">
      <summary>
            Visits an index.
            </summary>
      <param name="index">The index.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitIndexColumn(Xtensive.Sql.Model.IndexColumn)">
      <summary>
            Visits index column.
            </summary>
      <param name="indexColumn">The index column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Visits a schema.
            </summary>
      <param name="schema">The schema.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequence(Xtensive.Sql.Model.Sequence)">
      <summary>
            Visits a sequence.
            </summary>
      <param name="sequence">The sequence.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitSequenceDescriptor(Xtensive.Sql.Model.SequenceDescriptor)">
      <summary>
            Visits sequence descriptor.
            </summary>
      <param name="sequenceDescriptor">The sequence descriptor.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTable(Xtensive.Sql.Model.Table)">
      <summary>
            Visits a table.
            </summary>
      <param name="table">The table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTableColumn(Xtensive.Sql.Model.TableColumn)">
      <summary>
            Visits table column.
            </summary>
      <param name="tableColumn">The table column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTemporaryTable(Xtensive.Sql.Model.TemporaryTable)">
      <summary>
            Visits temporary table.
            </summary>
      <param name="temporaryTable">The temporary table.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitTranslation(Xtensive.Sql.Model.Translation)">
      <summary>
            Visits a translation.
            </summary>
      <param name="translation">The translation.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitView(Xtensive.Sql.Model.View)">
      <summary>
            Visits a view.
            </summary>
      <param name="view">The view.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.SqlModelVisitor`1.VisitViewColumn(Xtensive.Sql.Model.ViewColumn)">
      <summary>
            Visits view column.
            </summary>
      <param name="viewColumn">The view column.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="T:Xtensive.Sql.Model.Table">
      <summary>
            Represents a table object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String,Xtensive.Sql.SqlValueType)">
      <summary>
            Creates the table column.
            </summary>
      <param name="name">The name.</param>
      <param name="dataType">Column datatype.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateColumn(System.String)">
      <summary>
            Creates the table column.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateCheckConstraint(System.String,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Creates the check constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateDefaultConstraint(System.String,Xtensive.Sql.Model.TableColumn)">
      <summary>
            Creates the default constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="column">The column.</param>
      <returns>Default constraint.</returns>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreatePrimaryKey(System.String,Xtensive.Sql.Model.TableColumn[])">
      <summary>
            Creates the primary key.
            </summary>
      <param name="name">The name.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateUniqueConstraint(System.String,Xtensive.Sql.Model.TableColumn[])">
      <summary>
            Creates the unique constraint.
            </summary>
      <param name="name">The name.</param>
      <param name="columns">The columns.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.CreateForeignKey(System.String)">
      <summary>
            Creates the foreign key.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.Table.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.TableColumns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.TableConstraints">
      <summary>
            Gets the constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.PartitionDescriptor">
      <summary>
            Gets or sets the partitioning descriptor.
            </summary>
      <value>The partitioning descriptor.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.Filegroup">
      <summary>
            Gets or sets the value indicating that specified table will be created on the specified tablespace or filegroup. 
            If no location is specified and the table or view is not partitioned, the table will bw located at the 
            default filegroup.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.Table.Xtensive#Sql#Model#IConstrainable#Constraints">
      <summary>
            Gets the node constraints.
            </summary>
      <value>The constraints.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.TableColumn">
      <summary>
            Represents a <see cref="P:Xtensive.Sql.Model.TableColumn.Table" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.Table)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.TableColumn.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.DataType">
      <summary>
            Gets or sets the <see cref="T:Xtensive.Sql.SqlValueType" />.
            </summary>
      <value>The datatype.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Domain">
      <summary>
            Gets or sets the domain.
            </summary>
      <value>The domain.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.DefaultValue">
      <summary>
            Specifies the value provided for the column when a value is not explicitly supplied during an insert. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.SequenceDescriptor">
      <summary>
            Gets or sets the sequence descriptor.
            </summary>
      <value>The sequence descriptor.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Expression">
      <summary>
            Gets or sets the computed expression that defines the value of a computed column.
            </summary>
      <value>The expression of a computed column.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.IsPersisted">
      <summary>
            Gets or sets a value indicating whether RDBMS will physically store the computed values in the table, 
            and update the values when any other columns on which the computed column depends are updated. .
            </summary>
      <value>
        <see langword="true" /> if this instance is persisted; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Collation">
      <summary>
            Gets or sets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.IsNullable">
      <summary>
            Gets or sets a value indicating whether null values are allowed in the column.
            </summary>
      <value>
        <see langword="true" /> if this instance is nullable; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TableColumn.Table">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.TableColumn.Table" /> this instance belongs to.
            </summary>
      <value>The table.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.TemporaryTable">
      <summary>
            Represents a temporary table object.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.TemporaryTable.IsGlobal">
      <summary>
            Gets or sets a value indicating whether this instance is global. 
            If value is <see langword="false" /> the this instance is local.
            </summary>
      <value>
        <see langword="true" /> if this instance is global; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Model.TemporaryTable.PreserveRows">
      <summary>
            Gets or sets a value indicating whether rows are preserved on commit.
            </summary>
      <value>
        <see langword="true" /> if rows are preserved on commit; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="T:Xtensive.Sql.Model.Translation">
      <summary>
            Represents a characher translation object.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.Translation.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Sql.Model.View">
      <summary>
            Represents a View node.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.View.CreateColumn(System.String)">
      <summary>
            Creates the view column.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.View.ChangeSchema(Xtensive.Sql.Model.Schema)">
      <summary>
            Changes the schema.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.View.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.View.ViewColumns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Model.View.CheckOptions">
      <summary>
            Specifies the level of checking to be done when inserting or updating data through a view.
            If the option is specified, every row that is inserted or updated through the view must
            conform to the definition of that view.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.View.Definition">
      <summary>
            The statement that defines the view. The statement can use more than one table
            and other views.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Model.View.Columns">
      <summary>
            Gets the columns.
            </summary>
      <value>The columns.</value>
    </member>
    <member name="T:Xtensive.Sql.Model.ViewColumn">
      <summary>
            Represent a <see cref="P:Xtensive.Sql.Model.ViewColumn.View" /> bound column.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Model.ViewColumn.ChangeDataTable(Xtensive.Sql.Model.DataTable)">
      <summary>
            Changes the data table.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Xtensive.Sql.Model.ViewColumn.UpdatePairedProperty(System.String,Xtensive.Sql.Model.View)">
      <summary>
            Updates the paired property.
            </summary>
      <param name="property">The collection property name.</param>
      <param name="value">The collection owner.</param>
    </member>
    <member name="P:Xtensive.Sql.Model.ViewColumn.View">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Sql.Model.ViewColumn.View" /> this instance belongs to.
            </summary>
      <value>The view.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlColumnCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlColumnCollection" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlColumn})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlColumnCollection" /> class.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlOrderCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlOrder" />s.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableColumnCollection">
      <summary>
            Represents collection of <see cref="T:Xtensive.Sql.Dml.SqlColumn" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlTableColumnCollection.#ctor(System.Collections.Generic.IList{Xtensive.Sql.Dml.SqlTableColumn})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlTableColumnCollection" /> class.
            </summary>
      <param name="list">The list to wrap.</param>
      <exception cref="T:System.ArgumentNullException">list is null.</exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableColumnCollection.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAggregate.Distinct">
      <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlAggregate" /> is distinct.
            </summary>
      <value>
        <see langword="true" /> if distinct; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAggregate.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlArray`1">
      <summary>
            Represents generic array expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlArray`1.Values">
      <summary>
            Gets the values.
            </summary>
      <values>The values.</values>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlBetween">
      <summary>
            Represents between expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Left">
      <summary>
            Gets the left boundary of the between predicate.
            </summary>
      <value>The left boundary of the between predicate.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Right">
      <summary>
            Gets the right boundary of the between predicate.
            </summary>
      <value>The right boundary of the between predicate.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBetween.Expression">
      <summary>
            Gets the expression to compare.
            </summary>
      <value>The expression to compare.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlBinary">
      <summary>
            Represents binary expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBinary.Left">
      <summary>
            Gets the left operand of the binary operator.
            </summary>
      <value>The left operand of the binary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBinary.Right">
      <summary>
            Gets the right operand of the binary operator.
            </summary>
      <value>The right operand of the binary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCollate.Collation">
      <summary>
            Gets the collation.
            </summary>
      <value>The collation.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCollate.Operand">
      <summary>
            Gets the operand.
            </summary>
      <value>The operand.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlColumnRef">
      <summary>
            Represents a reference to a SQL column.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlColumnRef.SqlColumn">
      <summary>
            Gets the SQL column.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlContainer">
      <summary>
            Represents a container that can hold any value.
            An attempt to its translation leads to an error.
            This class can be used to store temporary values inside <see cref="T:Xtensive.Sql.Dml.SqlExpression" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlContainer.Value">
      <summary>
            Gets the value contained in this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Name">
      <summary>
            Gets the name of the cursor.
            </summary>
      <value>The name of the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Insensitive">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor" />
            makes a temporary copy of the data to be used.
            </summary>
      <value>
        <see langword="true" /> if this <see cref="T:Xtensive.Sql.Dml.SqlCursor" /> makes a temporary
            copy of the data to be used; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Scroll">
      <summary>
            Gets or sets a value indicating whether all fetch options are available for this cursor.
            </summary>
      <value>
        <see langword="true" /> if all fetch options are available; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Query">
      <summary>
            Gets or sets the select statement that defines the result set of the cursor.
            </summary>
      <value>The select statement that defines the result set of the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.ReadOnly">
      <summary>
            Gets or sets a value indicating whether cursor is read only.
            </summary>
      <value>
        <see langword="true" /> if cursor is read only; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.Columns">
      <summary>
            Gets updatable columns within the cursor.
            </summary>
      <value>Updatable columns within the cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.WithHold">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlCursor" /> is holdable cursor.
            </summary>
      <value>
        <see langword="true" /> if this instance is a holdable cursor; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCursor.WithReturn">
      <summary>
            Gets or sets a value indicating whether this instance is result set cursor.
            </summary>
      <value>
        <see langword="true" /> if this instance is result set cursor; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.Arguments">
      <summary>
            Gets the expressions.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFunctionCall.FunctionType">
      <summary>
            Gets the function type.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlLike">
      <summary>
            Represents LIKE predicat.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Pattern">
      <summary>
            Gets the pattern expression.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLike.Escape">
      <summary>
            Gets the escape character expression.
            </summary>
      <value>The escape.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlLiteral`1">
      <summary>
            Represents literal value expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlLiteral`1.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlMatch">
      <summary>
            Represents MATCH SQL statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.Value">
      <summary>
            Gets the value which will be tested for matching.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.SubQuery">
      <summary>
            Gets the sub query to search of matching.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.Unique">
      <summary>
            Gets a value indicating whether unique sub query rows for search matching will be used only.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlMatch.MatchType">
      <summary>
            Gets the type of the match.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#GetTypeCode">
      <summary>
            Returns the <see cref="T:System.TypeCode"></see> for this instance.
            </summary>
      <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"></see> of the class or value type that implements this interface.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
      <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
      <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
      <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
      <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
      <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number using the specified culture-specific formatting information.
            </summary>
      <returns>
            A <see cref="T:System.Decimal"></see> number equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"></see> using the specified culture-specific formatting information.
            </summary>
      <returns>
            A <see cref="T:System.DateTime"></see> instance equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"></see> using the specified culture-specific formatting information.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> instance equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlNative.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>
            Converts the value of this instance to an <see cref="T:System.Object"></see> of the specified <see cref="T:System.Type"></see> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
      <returns>
            An <see cref="T:System.Object"></see> instance of type conversionType whose value is equivalent to the value of this instance.
            </returns>
      <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information. </param>
      <param name="conversionType">The <see cref="T:System.Type"></see> to which the value of this instance is converted. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNative.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlNextValue">
      <summary>
            Represents NEXT VALUE FOR expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNextValue.Sequence">
      <summary>
            Gets the sequence.
            </summary>
      <value>The sequence.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlParameterRef">
      <summary>
            Represents a Sql parameter.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlSubQuery">
      <summary>
            Represents sub query expression.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlSubQuery.ReplaceWith(Xtensive.Sql.Dml.SqlExpression)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSubQuery.Query">
      <summary>
            Gets the query.
            </summary>
      <value>The query.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableColumn">
      <summary>
            Defines a reference to <see cref="T:Xtensive.Sql.Model.DataTableColumn" /> object
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTrim">
      <summary>
            Represents Trim function call.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTrim.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTrim.TrimCharacters">
      <summary>
            Gets the trim characters.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlUnary">
      <summary>
            Represents unary expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUnary.Operand">
      <summary>
            Gets the operand of the unary operator.
            </summary>
      <value>The operand of the unary operator.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUserColumn.Expression">
      <summary>
            Gets the column expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUserFunctionCall.Name">
      <summary>
            Gets the function name.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlVariable.Name">
      <summary>
            Gets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlVariable.Type">
      <summary>
            Gets the type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlHint.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Dml.SqlHint" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFastFirstRowsHint.Amount">
      <summary>
            Gets the rows amount.
            </summary>
      <value>The row amount.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlForceJoinOrderHint.Tables">
      <summary>
            Gets the corresponding tables.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlJoinHint">
      <summary>
            Represents a join option (hint) for a query optimizer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Method">
      <summary>
            Gets the join method.
            </summary>
      <value>The join method.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinHint.Table">
      <summary>
            Gets the table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlJoinMethod">
      <summary>
            A list of available join methods for a table.
            </summary>
      <remarks>
            MS SQL Server supports only <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop" />, <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge" />,
            <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash" /> and <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote" /> methods.
            Oracle supports all methods except <see cref="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote" /> method.
            </remarks>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Default">
      <summary>
            Join method is selected by query optimizer.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Loop">
      <summary>
            Instructs the optimizer to join each specified table to another row source with a nested loops join,
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.LoopWithIndex">
      <summary>
            Instructs the optimizer to join the specified table to another row source with a nested loops join
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoLoop">
      <summary>
            Instructs the optimizer to exclude nested loops joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Merge">
      <summary>
            Instructs the optimizer to join each specified table with another row source using a sort-merge join.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoMerge">
      <summary>
            Instructs the optimizer to exclude sort-merge joins when joining each specified table to another row source
            using the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Hash">
      <summary>
            Instructs the optimizer to join each specified table with another row source using a hash join.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.NoHash">
      <summary>
            Instructs the optimizer to exclude hash joins when joining each specified table to another row source using
            the specified table as the inner table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlJoinMethod.Remote">
      <summary>
            Specifies that the join operation is performed on the site of the right table. This is useful
            when the left table is a local table and the right table is a remote table. This method should be used
            only when the left table has fewer rows than the right table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlNativeHint.HintText">
      <summary>
            Gets the hint text.
            </summary>
      <value>The hint text.</value>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlJoinedTable.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.JoinExpression">
      <summary>
            Gets the join expression.
            </summary>
      <value>The join expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinedTable.AliasedColumns">
      <summary>
            Gets or sets the aliased columns.
            </summary>
      <value>Aliased columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.JoinType">
      <summary>
            Gets the type of the join.
            </summary>
      <value>The type of the join.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Left">
      <summary>
            Gets the left.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Right">
      <summary>
            Gets the right.
            </summary>
      <value>The right.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlJoinExpression.Expression">
      <summary>
            Gets the expression.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlMatchType">
      <summary>
            Enums types of search of matching in MATCH SQL statement.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.None">
      <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> then the MATCH
            SQL statement is true.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.Partial">
      <summary>
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            non-null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Dml.SqlMatchType.Full">
      <summary>
            If there exists a null value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> then the MATCH
            SQL statement is false.
            If there exists a row of the <see cref="P:Xtensive.Sql.Dml.SqlMatch.SubQuery" /> such that each
            value of <see cref="P:Xtensive.Sql.Dml.SqlMatch.Value" /> equals its corresponding value in row,
            then the MATCH SQL statement is true. Otherwise, the MATCH SQL statement is false.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlOrder">
      <summary>
            Represents order specification.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Expression">
      <summary>
            Gets the expression to sort by.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Position">
      <summary>
            Gets the position of column to sort by.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOrder.Ascending">
      <summary>
            Gets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlOrder" /> is ascending.
            </summary>
      <value>
        <see langword="true" /> if ascending; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlQueryRef.Query">
      <summary>
            Gets the query statement.
            </summary>
      <value>The query statement.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlTableRef">
      <summary>
            Describes a reference to <see cref="T:Xtensive.Sql.Model.Table" /> object;
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableRef.Name">
      <summary>
            Gets the name of the instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlTableRef.DataTable">
      <summary>
            Gets the referenced table.
            </summary>
      <value>The table.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAssignment.Left">
      <summary>
            Gets the left operand of the assign statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlAssignment.Right">
      <summary>
            Gets the right operand of the assign statement.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Add(Xtensive.Sql.SqlStatement)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Contains(Xtensive.Sql.SqlStatement)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Remove(Xtensive.Sql.SqlStatement)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.IndexOf(Xtensive.Sql.SqlStatement)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.System#Collections#Generic#IEnumerable{Xtensive#Sql#SqlStatement}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlBatch.AcceptVisitor(Xtensive.Sql.ISqlVisitor)">
      <inheritdoc />
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlBatch.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlCloseCursor.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDeclareVariable.Variable">
      <summary>
            Gets the variable.
            </summary>
      <value>The variable.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlDelete">
      <summary>
            Describes SQL DELETE statement.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlQueryStatement">
      <summary>
            Base class for DML statements.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlQueryStatement.Hints">
      <summary>
            Gets the collection of join hints.
            </summary>
      <value>The collection of join hints.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDelete.From">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlDelete.Where">
      <summary>
            Gets or sets the WHERE clause expression.
            </summary>
      <value>The WHERE clause expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Option">
      <summary>
            Gets the fetch option.
            </summary>
      <value>The fetch option.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.RowCount">
      <summary>
            Gets the row count.
            </summary>
      <value>The row count.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlFetch.Targets">
      <summary>
            Gets the targets.
            </summary>
      <value>The targets.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlIf">
      <summary>
            Represents SQL IF...ELSE statement.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.Condition">
      <summary>
            Gets or sets the condition.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.True">
      <summary>
            Gets or sets SQL statement which is carried out if the condition is true.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlIf.False">
      <summary>
            Gets or sets SQL statement which is carried out if the condition is false.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.Into">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.Values">
      <summary>
            Gets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlInsert.From">
      <summary>
            Gets or sets the FROM clause expression.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlOpenCursor.Cursor">
      <summary>
            Gets the cursor.
            </summary>
      <value>The cursor.</value>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlSelect">
      <summary>
            Represents SQL SELECT statement.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlSelect.ShallowClone">
      <summary>
            Makes a shallow clone of the instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Columns">
      <summary>
            Gets the collection of columns to select.
            </summary>
      <value>The collection of columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.String)">
      <summary>
            An indexer that provides access to collection items by their names.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Item(System.Int32)">
      <summary>
            An indexer that provides access to collection items by their index.
            Returns <see langword="null" /> if there is no such item.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.From">
      <summary>
            Gets or sets from clause.
            </summary>
      <value>The from clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Where">
      <summary>
            Gets or sets the where clause.
            </summary>
      <value>The where clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.GroupBy">
      <summary>
            Gets the collection of columns to group by.
            </summary>
      <value>The collection of columns.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Having">
      <summary>
            Gets or sets the having clause.
            </summary>
      <value>The having clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.OrderBy">
      <summary>
            Gets the order by clause.
            </summary>
      <value>The order by clause.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Distinct">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Xtensive.Sql.Dml.SqlSelect" /> is distinct.
            </summary>
      <value>
        <see langword="true" /> if distinct is set; otherwise, <see langword="false" />.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Limit">
      <summary>
            Gets or sets the limit.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlSelect.Offset">
      <summary>
            Gets or sets the offset.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Add(Xtensive.Sql.SqlStatement)">
      <summary>
                    Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <param name="item">
                    The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Clear">
      <summary>
                    Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. 
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Contains(Xtensive.Sql.SqlStatement)">
      <summary>
                    Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.CopyTo(Xtensive.Sql.SqlStatement[],System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in <paramref name="array" /> at which copying begins.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or-
                <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or-
                
                    The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.
                
                    -or-
                
                    Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Remove(Xtensive.Sql.SqlStatement)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
      <param name="item">
                    The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.IndexOf(Xtensive.Sql.SqlStatement)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
                </summary>
      <returns>
                    The index of <paramref name="item" /> if found in the list; otherwise, -1.
                </returns>
      <param name="item">
                    The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.Insert(System.Int32,Xtensive.Sql.SqlStatement)">
      <summary>
                    Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.System#Collections#Generic#IEnumerable{Xtensive#Sql#SqlStatement}#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.Dml.SqlStatementBlock.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Count">
      <summary>
                    Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
                </returns>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
                </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlStatementBlock.Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
                </exception>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Update">
      <summary>
            Gets or sets the table.
            </summary>
      <value>The table to change.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Values">
      <summary>
            Gets the values.
            </summary>
      <value>The values.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.Where">
      <summary>
            Gets or sets the WHERE clause expression.
            </summary>
      <value>The WHERE clause expression.</value>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlUpdate.From">
      <summary>
            Gets or sets the FROM clause expression.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Dml.SqlWhile">
      <summary>
            Represents SQL while loop.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlWhile.Statement">
      <summary>
            Gets or sets the statement to execute.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Dml.SqlWhile.Condition">
      <summary>
            Gets or sets the condition for the repeated execution
            of an SQL statement or statement block.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Compiler.SqlCompilerException">
      <summary>
            A <see cref="T:Xtensive.Sql.Compiler.SqlCompiler" /> exception
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Compiler.SqlCompilerException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Xtensive.Sql.Compiler.SqlCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes the instance of <see cref="T:Xtensive.Sql.Compiler.SqlCompilerException" /> class.
            </summary>
      <param name="info">Serialization info to get the deserialized data from.</param>
      <param name="context">Streaming context.</param>
    </member>
    <member name="T:Xtensive.Sql.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExCanNotReadDatabaseAndSchemaNames">
      <summary>
              Looks up a localized string similar to Can not read database and schema names.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExCircularReferenceDetected">
      <summary>
              Looks up a localized string similar to Circular reference is detected..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExColumnAlreadyHasSpecifiedName">
      <summary>
              Looks up a localized string similar to Column already has specified name..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExColumnBelongsToOtherTable">
      <summary>
              Looks up a localized string similar to Column belongs to other table..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExConstraintBelongsToOtherDomain">
      <summary>
              Looks up a localized string similar to Constraint belongs to other domain..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExConstraintBelongsToOtherTable">
      <summary>
              Looks up a localized string similar to Constraint belongs to other table..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExFunctionXIsNotSupported">
      <summary>
              Looks up a localized string similar to Function '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExIncrementMustNotBeZero">
      <summary>
              Looks up a localized string similar to Increment must not be 0..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidActionType">
      <summary>
              Looks up a localized string similar to Invalid action type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsNonNullTypeNameIsAllowedIfAndOnlyIfTypeEqualsSqlTypeUnknown">
      <summary>
              Looks up a localized string similar to Invalid arguments: non-null 'typeName' is allowed if and only if 'type' equals 'SqlType.Unknown'.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsPrecisionAndLengthShouldNotBeUsedTogether">
      <summary>
              Looks up a localized string similar to Invalid arguments: 'precision' and 'length' should not be used together.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidArgumentsScaleAndPrecisionShouldBeUsedTogether">
      <summary>
              Looks up a localized string similar to Invalid arguments: 'scale' and 'precision' should be used together.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidConstraintType">
      <summary>
              Looks up a localized string similar to Invalid constraint type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidExpressionType">
      <summary>
              Looks up a localized string similar to Invalid expression type..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidUsageOfTheOrientationArgument">
      <summary>
              Looks up a localized string similar to Invalid usage of the "orientation" argument..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExInvalidUsageOfTheRowCountArgument">
      <summary>
              Looks up a localized string similar to Invalid usage of the "rowCount" argument..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExIsolationLevelXIsNotSupported">
      <summary>
              Looks up a localized string similar to Isolation level '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExItemsForCycleXAreNotSpecified">
      <summary>
              Looks up a localized string similar to Items for cycle '{0}' are not specified..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExJoinExpressionShouldBeNullForCrossApplyAndOuterApply">
      <summary>
              Looks up a localized string similar to Join expression should be NULL for CROSS APPLY &amp; OUTER APPLY..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLengthShouldBeNotNegativeValue">
      <summary>
              Looks up a localized string similar to Length should be not negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLiteralTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Literal type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExLockXIsNotSupported">
      <summary>
              Looks up a localized string similar to Lock '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNameForParameterXIsNotFound">
      <summary>
              Looks up a localized string similar to Name for parameter '{0}' is not found'.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNameMustBeNotNullOrEmpty">
      <summary>
              Looks up a localized string similar to Name must be not null or empty..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExNodeTypeIsUnknown">
      <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExOnlySqlLiteralOrSqlPlaceholderCanBeUsedInLimitOffset">
      <summary>
              Looks up a localized string similar to Only SqlLiteral or SqlPlaceholder can be used in Limit/Offset.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExOperationXIsNotSupported">
      <summary>
              Looks up a localized string similar to Operation '{0}' is not supported.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPartOfUrlContainsForbiddenCharacters">
      <summary>
              Looks up a localized string similar to Part of URL contains forbidden characters. Forbidden characters: .
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPositionValueShouldBeGreaterThanZero">
      <summary>
              Looks up a localized string similar to Position value should be greater than zero..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExPrecisionShouldBeNonNegativeValue">
      <summary>
              Looks up a localized string similar to Precision should be non-negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExReferencedColumnsCountCantBeLessThenOne">
      <summary>
              Looks up a localized string similar to Referenced columns count cannot be less then one..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExReferencingColumnsCountCantBeLessThenOne">
      <summary>
              Looks up a localized string similar to Referencing columns count cannot be less then one..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExRowAmountShouldBePositiveNumber">
      <summary>
              Looks up a localized string similar to Row amount should be positive number..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExScaleShouldBeNonNegativeValue">
      <summary>
              Looks up a localized string similar to Scale should be non-negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSchemaMustBeNotNull">
      <summary>
              Looks up a localized string similar to Schema must be not null..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSizeShouldBeNotNegativeValue">
      <summary>
              Looks up a localized string similar to Size should be not negative value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSpecifiedConnectionDoesNotBelongToThisDriver">
      <summary>
              Looks up a localized string similar to Specified connection does not belong to this driver..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSpecifiedPrecisionXIsGreaterThanMaximumSupportedByStorageY">
      <summary>
              Looks up a localized string similar to Specified precision ({0}) is greater than maximum supported by storage ({1})..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExSqlContainerExpressionCanNotBeCompiled">
      <summary>
              Looks up a localized string similar to Sql container expression can not be compiled..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTableAlreadyHasSpecifiedName">
      <summary>
              Looks up a localized string similar to Table already has specified name..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTablePropertyIsNotSet">
      <summary>
              Looks up a localized string similar to Table is not set..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheDataTypeMustBeExactNumericWithoutScaleOrWithZeroScale">
      <summary>
              Looks up a localized string similar to The data type must be exact numeric without scale or with zero scale..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheDataTypeMustBeExactNumericWithScale0">
      <summary>
              Looks up a localized string similar to The data type must be exact numeric with scale 0..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheMaximumValueMustBeGreaterThanTheMinimumValue">
      <summary>
              Looks up a localized string similar to The maximum value must be greater than the minimum value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheScaleMustBeLessThanOrEqualToPrecision">
      <summary>
              Looks up a localized string similar to The scale must be less than or equal to precision..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTheStartValueShouldBeBetweenTheMinimumAndMaximumValue">
      <summary>
              Looks up a localized string similar to The start value should be between the minimum and maximum value..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportX">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportXValuesGreatherThanYSuppliedValueIsZ">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}' values greather than '{1}'. Supplied value is '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExThisStorageDoesNotSupportXValuesLessThanYSuppliedValueIsZ">
      <summary>
              Looks up a localized string similar to This storage does not support '{0}' values less than '{1}'. Supplied value is '{2}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTransactionShouldBeActive">
      <summary>
              Looks up a localized string similar to Transaction should be active.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTransactionShouldNotBeActive">
      <summary>
              Looks up a localized string similar to Transaction should not be active.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTranslationOfLiteralOfTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Translation of literal of type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTypesOfValuesAreDifferent">
      <summary>
              Looks up a localized string similar to Types of values are different.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExTypeXIsNotSupported">
      <summary>
              Looks up a localized string similar to Type '{0}' is not supported..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExUnboundColumn">
      <summary>
              Looks up a localized string similar to Unbound column '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.ExValueForPlaceholderXIsNotSet">
      <summary>
              Looks up a localized string similar to Value for placeholder '{0}' is not set..
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.FullTextQueries">
      <summary>
              Looks up a localized string similar to Full text queries.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Resources.Strings.LogUnableToGetDefaultNodeComparerForTypeXxx">
      <summary>
              Looks up a localized string similar to Unable to get default SQL comparer for type {0}..
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.CheckConstraintInfo">
      <summary>
            Describes a check constraint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.CheckConstraintInfo.MaxExpressionLength">
      <summary>
            Gets or sets the maximal length of the check expression.
            </summary>
      <value>The maximal length of the check expression.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ColumnFeatures">
      <summary>
        <para>Defines possible column categories.</para>
        <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute 
            that allows a bitwise combination of its member values.</para>
      </summary>
      <remarks>
        <para>It is well known that RDBMS servers stores data at table columns.
            Most of columns requires that their values have been specified by user
            but there are some exceptions of that rule (e.g. <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Identity" />
            or <see cref="F:Xtensive.Sql.Info.ColumnFeatures.Computed" /> columns).</para>
        <para>If you working on your own <see cref="T:Xtensive.Sql.SqlDriver">RDBMS driver</see> 
            implementation you have to provide correct <see cref="T:Xtensive.Sql.Info.ServerInfo">information</see>
            about RDBMS capabilities. As a consequence you have to specify what 
            column categories are supported (see example below).</para>
      </remarks>
      <example>
      </example>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.None">
      <summary>
            RDBMS server does not support any special columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.Identity">
      <summary>
            RDBMS server supports identity columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ColumnFeatures.Computed">
      <summary>
            RDBMS server supports computed columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ColumnInfo">
      <summary>
            Describes a table column.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ColumnInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintActions">
      <summary>
            Defines all possible actions applicable in the case
            of foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.None">
      <summary>
            No actions are supported.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.NoAction">
      <summary>
            Indicates that RDBMS is capable to do nothing in the case of some
            foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Restrict">
      <summary>
            Indicates that RDBMS is capable to block execution of any instruction
            leading to foreign key conflict.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.Cascade">
      <summary>
            Indicates that RDBMS is capable to perform some cascading operation
            (delete or update) in order to preserve referential integrity if
            it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetDefault">
      <summary>
            Indicates that RDBMS is capable to assign default value to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ForeignKeyConstraintActions.SetNull">
      <summary>
            Indicates that RDBMS is capable to assign <b>NULL</b> to a field
            referenced by foreign key constraint in order to preserve referential 
            integrity if it violated by some executed instruction.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ConstraintFeatures">
      <summary>
        <para>Defines optional features for RDBMS constraints.</para>
        <para>An exact feature set depends on a certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.None">
      <summary>
            Indicates that RDBMS does not support any additional features
            for its constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Clustered">
      <summary>
            Indicates that primary and unique key constraints can be
            declared clustered.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Deferrable">
      <summary>
            Indicates that RDBMS supports deferrable constraints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ConstraintFeatures.Nullable">
      <summary>
            Indicates that primary and unique key constraints can be
            applied to nullable columns.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeCollection">
      <summary>
            Represents a collection of <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> objects that describes all data types existing in database.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeCollection.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possibly) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked as well.</param>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeCollection.System#Collections#Generic#IEnumerable{Xtensive#Sql#Info#DataTypeInfo}#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> by the specified native type name.
            </summary>
      <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> instance.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Item(Xtensive.Sql.SqlType)">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> by the specified <see cref="T:Xtensive.Sql.SqlType" />.
            </summary>
      <value>The <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /> instance.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Boolean">
      <summary>
            Boolean (bit).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int8">
      <summary>
            Signed Byte (8 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt8">
      <summary>
            Unsigned byte.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int16">
      <summary>
            Small integer (16 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt16">
      <summary>
            Unsigned small integer (word).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int32">
      <summary>
            Integer (32 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt32">
      <summary>
            Unsigned integer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Int64">
      <summary>
            Long integer (64 bit integer).
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.UInt64">
      <summary>
            Unsigned long integer.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Decimal">
      <summary>
            Numeric data type with fixed precision and scale.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Float">
      <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Double">
      <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.DateTime">
      <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Interval">
      <summary>
            A representation of the interval data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Char">
      <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarChar">
      <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarCharMax">
      <summary>
            Variable-length Unicode data with a maximum length of 230 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Binary">
      <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinary">
      <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.VarBinaryMax">
      <summary>
            Variable-length binary data from 0 through 231-1 (2,147,483,647) bytes. 
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeCollection.Guid">
      <summary>
            A globally unique identifier (GUID). 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeFeatures">
      <summary>
            Defines a list of features those are allows to describe
            RDBMS capabilities concerning a certain data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.None">
      <summary>
            Indicates that RDBMS supports nothing additional
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.FillFactor">
      <summary>
            Indicates that RDBMS supports fill factor property
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.KeyConstraint">
      <summary>
            Indicates that RDBMS allows key constraints
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Multiple">
      <summary>
            Indicates that RDBMS allows multiple columns
            of the mentioned data type in a single table.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Nullable">
      <summary>
            Indicates that RDBMS allows null values
            for the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Identity">
      <summary>
            Indicates that RDBMS allows to declare identity
            column of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Default">
      <summary>
            Indicates that RDBMS allows to specify default value
            for a column of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Grouping">
      <summary>
            Indicates that RDBMS supports grouping operations
            by columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Ordering">
      <summary>
            Indicates that RDBMS supports ordering operations
            by columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Clustering">
      <summary>
            Indicates that RDBMS allows to build clustered index
            which includes key columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.Indexing">
      <summary>
            Indicates that RDBMS allows to build index
            which includes key columns of the mentioned data type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.NonKeyIndexing">
      <summary>
            Indicates that RDBMS allows to include column of the 
            mentioned data type as non-key part of some index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DataTypeFeatures.ZeroLengthValueIsNull">
      <summary>
            Indicates that RDBMS treats zero length value as NULL.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DataTypeInfo">
      <summary>
            Describes a data type.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Fractional(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.Int32,System.String[])">
      <summary>
            Creates a fractional <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Range(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,Xtensive.Sql.Info.ValueRange,System.String[])">
      <summary>
            Ranges a range <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Stream(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.Int32,System.String[])">
      <summary>
            Creates a stream <see cref="T:Xtensive.Sql.Info.DataTypeInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.DataTypeInfo.Regular(Xtensive.Sql.SqlType,Xtensive.Sql.Info.DataTypeFeatures,System.String[])">
      <summary>
            Creates a regular <see cref="T:Xtensive.Sql.Info.DataTypeInfo" /></summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.Type">
      <summary>
            Gets the SQL type
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.Features">
      <summary>
            Gets the features of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.NativeTypes">
      <summary>
            Gets the native database type names.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxLength">
      <summary>
            Gets the maximum length of this data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.MaxPrecision">
      <summary>
            Gets the maximum precision of this data type.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.DataTypeInfo.ValueRange">
      <summary>
            Gets the range.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.DdlStatements">
      <summary>
            Enumerates possible Data Definition Language(DDL) statements
            in accordance with SQL92 standard.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.None">
      <summary>
            Indicates that RDBMS does not support any DDL statement
            for the mentioned database entity.
            </summary>
      <value>0x0</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Create">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Create" /> statement
            for the mentioned database entity.
            For constraints this indicates that RDBMS supports ADD statement.
            </summary>
      <value>0x1</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Alter">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Alter" /> statement
            for the mentioned database entity.
            </summary>
      <value>0x2</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.Drop">
      <summary>
            Indicates that RDBMS supports <see cref="F:Xtensive.Sql.Info.DdlStatements.Drop" /> statement
            for the mentioned database entity.
            </summary>
      <value>0x4</value>
    </member>
    <member name="F:Xtensive.Sql.Info.DdlStatements.All">
      <summary>
            Indicates that RDBMS supports all DDL statements
            for the mentioned database entity.
            </summary>
      <value>0x7</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IdentityFeatures">
      <summary>
        <para>Defines a list of typical features of identity columns.</para>
        <para>You can combine this features to describe certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.None">
      <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.StartValue">
      <summary>
            Indicates that RDBMS allows to specify start value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Increment">
      <summary>
            Indicates that RDBMS supports automaticaly incrementing
            identity columns.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Minimum">
      <summary>
            Indicates that RDBMS allows to specify minimum value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Maximum">
      <summary>
            Indicates that RDBMS allows to specify maximun value
            for an identity column.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IdentityFeatures.Cycle">
      <summary>
            Indicates that RDBMS allows cycles in generated
            sequences of identity column values.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.IdentityInfo">
      <summary>
            Describes an identity source.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IdentityInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IndexFeatures">
      <summary>
        <para>Defines a list of possible index features.</para>
        <para>You can combine this features to describe certain RDBMS capabilities.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.None">
      <summary>
            Indicates that RDBMS does not support any feature in the list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Clustered">
      <summary>
            Indicates that RDBMS supports clustered indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.NonKeyColumns">
      <summary>
            Indicates that RDBMS allows to include some columns as
            non key part of an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.FillFactor">
      <summary>
            Indicates that RDBMS allows to specify fill factor for an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Unique">
      <summary>
            Indicates that RDBMS supports unique indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.MaxDop">
      <summary>
            Indicates that RDBMS allows to specify max degree of parallelism
            parameter for an index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.FullText">
      <summary>
            Indicates that RDBMS supports full-text indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.SortOrder">
      <summary>
            Indicates that RDBMS supports specifying sort order (i.e. asc or desc) for each column in index.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Filtered">
      <summary>
            Indicates that RDBMS supports filtered/partial indexes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IndexFeatures.Expressions">
      <summary>
            Indicates that RDBMS supports indexes, based on expressions.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.IndexInfo">
      <summary>
            Describes an index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.MaxLength">
      <summary>
            Gets or sets the maximal index length in bytes.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per index.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.PartitionMethods">
      <summary>
            Gets or sets supported partition methods.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.IndexInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.IsolationLevels">
      <summary>
        <para>Defines a list of possible transaction isolation levels.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.None">
      <summary>
            Indicates that RDBMS does not support transaction isolation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadUncommitted">
      <summary>
            Indicates that RDBMS allows to execute transactions without isolation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.ReadCommitted" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.RepeatableRead" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.Serializable">
      <summary>
            Indicates that RDBMS allows to execute transactions with the
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Serializable" /> isolation level.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.IsolationLevels.Snapshot">
      <summary>
            Indicates that RDBMS allows to execute transactions with
            <see cref="F:Xtensive.Sql.Info.IsolationLevels.Snapshot" /> isolation level.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.PartitionMethods">
      <summary>
        <para>Defines a list of possible horisontal partitioning types.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.None">
      <summary>
            Indicates that RDBMS does not support partitioning.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.List">
      <summary>
            Indicates that RDBMS supports list partitioning.
            List partitioning enables you to explicitly control how rows map to partitions
            by specifying a list of discrete values in the description for each partition.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Range">
      <summary>
            Indicates that RDBMS supports range partitioning.
            Range partitioning maps data to partitions
            based on ranges of partition key values that you establish for each partition.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Hash">
      <summary>
            Indicates that RDBMS supports hash partitioning.
            Hash partitioning maps data to partitions
            based on a hashing algorithm that evenly distributes rows among partitions,
            giving partitions approximately the same size.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.PartitionMethods.Interval">
      <summary>
            Indicates that RDBMS supports interval partitioning.
            Interval partitioning is an extension of range partitioning
            which instructs the database to automatically create partitions
            of a specified interval when data inserted into the table exceeds all of the range partitions.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.QueryFeatures">
      <summary>
            Defines a list of features which affects query generation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.None">
      <summary>
            There are no features affecting query generation.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters">
      <summary>
            Indicates that it is possible to use named query parameters.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.ParameterPrefix">
      <summary>
            Indicates that parameter prefix should be used for parameter names
            (in the case when <see cref="F:Xtensive.Sql.Info.QueryFeatures.NamedParameters" /> option is active).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.ExplicitJoinOrder">
      <summary>
            Indicates that RDBMS requires multi-table joins to have explicit order.
            (like "(a join b) join c")
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DdlBatches">
      <summary>
            Indicates that RDBMS supports batch query execution for DDL statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DmlBatches">
      <summary>
            Indicates that RDBMS supports batch query execution for DML statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Hints">
      <summary>
            Indicates that RDBMS supports query optimizer hints.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.CrossApply">
      <summary>
            Indicates that RDBMS supports CROSS APPLY and OUTER APPLY operators.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.FullBooleanExpressionSupport">
      <summary>
            Indicates that RDBMS allows boolean expressions in equality/inequality comparisons,
            inside CASE and COALESCE operators.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.UpdateFrom">
      <summary>
            Indicates that RDBMS supports UPDATE ... FROM statements.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Limit">
      <summary>
            Indicates that RDBMS supports result limiting operator (LIMIT and TOP).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Offset">
      <summary>
            Indicates that RDBMS supports result skipping operator (OFFSET and SKIP).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.MulticolumnIn">
      <summary>
            Indicates that RDBMS supports multicolumn IN operator.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.DefaultValues">
      <summary>
            Indicates whether RDBMS supports INSERT INTO Table DEFAULT VALUES syntax.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.RowNumber">
      <summary>
            Indicates whether RDBMS supports ROW_NUMBER window function.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Paging">
      <summary>
            Indicates that RDBMS supports paging operators (<see cref="F:Xtensive.Sql.Info.QueryFeatures.Limit" /> and <see cref="F:Xtensive.Sql.Info.QueryFeatures.Offset" />).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.QueryFeatures.Batches">
      <summary>
            Indicates that RDBMS supports batches for both DDL and DML statements.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.QueryInfo">
      <summary>
            Describes a query.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxLength">
      <summary>
            Gets or sets the maximal length of a query text in characters.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxComparisonOperations">
      <summary>
            Gets or sets the maximal number of comparison operations for a single query.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.MaxNestedSubqueriesAmount">
      <summary>
            Gets or sets the nested subqueries amount.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.ParameterPrefix">
      <summary>
            Gets or sets the Parameter prefix.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.QueryInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ForeignKeyConstraintInfo">
      <summary>
            Describes a reference constraint capabilities.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ForeignKeyConstraintInfo.Actions">
      <summary>
            Gets or sets the constraint rules.
            </summary>
      <value>The rules.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.SequenceFeatures">
      <summary>
            Defines a list of sequence related features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.None">
      <summary>
            Indicates that RDBMS server does not support anything special
            regarding sequences.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.Cache">
      <summary>
            Indicates that RDBMS supports caching of sequence values
            (i.e. it would be possible to take several sequential values at a time
            and then use those values without access to sequence object).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.SequenceFeatures.Order">
      <summary>
            Indicates that RDBMS allows to specify for a sequence an 
            order of generated values (ascending or descending).
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.SequenceInfo">
      <summary>
            Describes a sequence.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.SequenceInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.ServerInfo">
      <summary>
            Represents a set of information concerning RDBMS capabilities.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfo.Build(Xtensive.Sql.Info.ServerInfoProvider)">
      <summary>
            Builds the server info using specified <see cref="T:Xtensive.Sql.Info.ServerInfoProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="M:Xtensive.Sql.Info.ServerInfo.Lock(System.Boolean)">
      <summary>
            Locks the instance and (possible) all dependent objects.
            </summary>
      <param name="recursive">
        <see langword="True" /> if all dependent objects should be locked too.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.IsolationLevels">
      <summary>
            Gets the server supported isolation levels.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.FullTextSearch">
      <summary>
            Gets the server supported isolation levels.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Assertion">
      <summary>
            Gets the assertion constraint info.
            </summary>
      <value>The assertion constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.CharacterSet">
      <summary>
            Gets the character set info.
            </summary>
      <value>The character set info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Collation">
      <summary>
            Gets the collation info.
            </summary>
      <value>The collation info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Column">
      <summary>
            Gets the column info.
            </summary>
      <value>The column info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.CheckConstraint">
      <summary>
            Gets the check constraint info.
            </summary>
      <value>The check constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Database">
      <summary>
            Gets the database info.
            </summary>
      <value>The database info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Domain">
      <summary>
            Gets the domain info.
            </summary>
      <value>The domain info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Identity">
      <summary>
            Gets the identity info.
            </summary>
      <value>The identity info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Index">
      <summary>
            Gets the index info.
            </summary>
      <value>The index info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.PrimaryKey">
      <summary>
            Gets the primary key constraint info.
            </summary>
      <value>The primary key constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Query">
      <summary>
            Gets the query info.
            </summary>
      <value>The query info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.ForeignKey">
      <summary>
            Gets the referential constraint info.
            </summary>
      <value>The referential constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Schema">
      <summary>
            Gets the schema info.
            </summary>
      <value>The schema info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Sequence">
      <summary>
            Gets the sequence info.
            </summary>
      <value>The sequence info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.StoredProcedure">
      <summary>
            Gets the stored procedure info.
            </summary>
      <value>The stored procedure info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Table">
      <summary>
            Gets the table info.
            </summary>
      <value>The table info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.TemporaryTable">
      <summary>
            Gets the temporary table info.
            </summary>
      <value>The temporary table info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Translation">
      <summary>
            Gets the translation info.
            </summary>
      <value>The translation info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.Trigger">
      <summary>
            Gets the trigger info.
            </summary>
      <value>The trigger info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.UniqueConstraint">
      <summary>
            Gets the unique constraint info.
            </summary>
      <value>The unique constraint info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.View">
      <summary>
            Gets the view info.
            </summary>
      <value>The view info.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.DataTypes">
      <summary>
            Gets the data types.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.ServerFeatures">
      <summary>
            Gets the server features.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ServerInfo.StringIndexingBase">
      <summary>
            Gets the string indexing base. Normally is equal to 1.
            </summary>
      <value>The string indexing base.</value>
    </member>
    <member name="T:Xtensive.Sql.Info.TableInfo">
      <summary>
            Describes a table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TableInfo.PartitionMethods">
      <summary>
            Gets supported partition methods.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TableInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.TemporaryTableFeatures">
      <summary>
            Defines a list of possible temporary table features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.None">
      <summary>
            Indicates that RDBMS does not support temporary tables.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Global">
      <summary>
            Indicates that RDBMS supports globally visible temporary tables.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.Local">
      <summary>
            Indicates that RDBMS supports temporary tables
            which are visible only in a local context.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.DeleteRowsOnCommit">
      <summary>
            Indicates that RDBMS allows to delete rows on commit.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.TemporaryTableFeatures.PreserveRowsOnCommit">
      <summary>
            Indicates that RDBMS allows to preserve rows on commit.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.TemporaryTableInfo">
      <summary>
            Describes a temporary table.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.Features">
      <summary>
            Gets or sets the features of this instance.
            </summary>
      <value>The features.</value>
    </member>
    <member name="P:Xtensive.Sql.Info.TemporaryTableInfo.MaxNumberOfColumns">
      <summary>
            Gets or sets the maximum number of columns per table.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.Info.ValueRange`1">
      <summary>
            Represents a strictly typed contiguous range of values.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Info.ValueRange`1" /> class.
            </summary>
      <param name="minValue">The min value.</param>
      <param name="maxValue">The max value.</param>
    </member>
    <member name="M:Xtensive.Sql.Info.ValueRange`1.#ctor(`0,`0,System.Nullable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.Info.ValueRange`1" /> class.
            </summary>
      <param name="minValue">The min value.</param>
      <param name="maxValue">The max value.</param>
      <param name="defaultValue">The default value.</param>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.MinValue">
      <summary>
            A minimum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.MaxValue">
      <summary>
            A maximum value in the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.Info.ValueRange`1.DefaultValue">
      <summary>
            A default value from the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />.
            </summary>
      <value>
            A value belonging to the <see cref="T:Xtensive.Sql.Info.ValueRange`1" />
            or <see langword="null" /> if not specified.
            </value>
    </member>
    <member name="T:Xtensive.Sql.Info.ViewFeatures">
      <summary>
            Defines a list of RDBMS dependent view features.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.None">
      <summary>
            Indicates that RDBMS does not support features from this list.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.Local">
      <summary>
            Indicates that RDBMS allows to create local views
            those are visible only in current execution context.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.Info.ViewFeatures.Cascaded">
      <summary>
            Indicates that RDBMS allows to create views based on
            some other views instead of tables.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlType">
      <summary>
            Enumerates supported SQL column types.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Unknown">
      <summary>
            An unknown type.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Boolean">
      <summary>
            Boolean.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int8">
      <summary>
            Signed byte (8 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt8">
      <summary>
            Unsigned byte (8 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int16">
      <summary>
            Small integer (16 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt16">
      <summary>
            Unsigned small integer (16 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int32">
      <summary>
            Integer (32 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt32">
      <summary>
            Unsigned integer (32 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Int64">
      <summary>
            Long integer (64 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.UInt64">
      <summary>
            Unsigned long (64 bit).
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Decimal">
      <summary>
            Numeric data type with fixed precision and scale.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Float">
      <summary>
            Floating point number data from –3.40E + 38 through 3.40E + 38. 
            Storage size is 4 bytes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Double">
      <summary>
            Floating point number data from - 1.79E + 308 through 1.79E + 308.
            Storage size is 8 bytes.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.DateTime">
      <summary>
            Date and time data from January 1, 1753 through December 31, 9999, 
            to an accuracy of one three-hundredth of a second (equivalent to 3.33 
            milliseconds or 0.00333 seconds). Values are rounded to increments 
            of .000, .003, or .007 seconds.
            Storage size is 8 bytes. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Interval">
      <summary>
            Datetime interval.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Char">
      <summary>
            Fixed-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size is two times n bytes. 
            The SQL-92 synonyms for nchar are national char and national character.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarChar">
      <summary>
            Variable-length Unicode character data of n characters. 
            n must be a value from 1 through 4,000. Storage size, in bytes, is two times 
            the number of characters entered. The data entered can be 0 characters in length. 
            The SQL-92 synonyms for nvarchar are national char varying and national character varying.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarCharMax">
      <summary>
            Variable-length Unicode data with a maximum length of 2^30 - 1 (1,073,741,823) 
            characters. Storage size, in bytes, is two times the number of characters entered. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Binary">
      <summary>
            Fixed-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is n+4 bytes. 
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarBinary">
      <summary>
            Variable-length binary data of n bytes. n must be a value from 1 through 8,000. 
            Storage size is the actual length of the data entered + 4 bytes, not n bytes. 
            The data entered can be 0 bytes in length. 
            The SQL-92 synonym for varbinary is binary varying.
            </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.VarBinaryMax">
      <summary>
        <para>Variable-length binary data from 0 through 2^31-1 (2,147,483,647) bytes.</para>
      </summary>
    </member>
    <member name="F:Xtensive.Sql.SqlType.Guid">
      <summary>
            A globally unique identifier (GUID). 
            </summary>
    </member>
    <member name="T:Xtensive.Sql.SqlDml">
      <summary>
            A factory for SQL DML operations.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlDml.RawConcat(Xtensive.Sql.Dml.SqlExpression,Xtensive.Sql.Dml.SqlExpression)">
      <summary>
            Concates underlying expression without any sign between.
            </summary>
      <param name="left">Left expression</param>
      <param name="right">Right expression</param>
      <returns>New <see cref="T:Xtensive.Sql.Dml.SqlBinary" /> expression.</returns>
    </member>
    <member name="T:Xtensive.Sql.SqlValueType">
      <summary>
            Represents an SQL type with specific <see cref="P:Xtensive.Sql.SqlValueType.Length" />, <see cref="P:Xtensive.Sql.SqlValueType.Scale" /> and <see cref="P:Xtensive.Sql.SqlValueType.Precision" />.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.Equals(Xtensive.Sql.SqlValueType)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.Equals(System.Object)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.op_Equality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.op_Inequality(Xtensive.Sql.SqlValueType,Xtensive.Sql.SqlValueType)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
      <param name="length">The length.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Xtensive.Sql.SqlValueType.#ctor(Xtensive.Sql.SqlType,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Sql.SqlValueType" /> class.
            </summary>
      <param name="type">The type.</param>
      <param name="typeName">Name of the type.</param>
      <param name="length">The length.</param>
      <param name="precision">The precision.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Type">
      <summary>
            Gets the <see cref="T:Xtensive.Sql.SqlType" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.TypeName">
      <summary>
            Gets the name of the type in case when <see cref="P:Xtensive.Sql.SqlValueType.Type" /> has value <see cref="F:Xtensive.Sql.SqlType.Unknown" />.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Length">
      <summary>
            Gets or sets the length.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Scale">
      <summary>
            Gets the scale.
            </summary>
    </member>
    <member name="P:Xtensive.Sql.SqlValueType.Precision">
      <summary>
            Gets the precision.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.IBinaryLargeObject">
      <summary>
            A server-independed wrapper for using native binary large objects (BLOBs) as query parameters.
            </summary>
    </member>
    <member name="T:Xtensive.Sql.ILargeObject">
      <summary>
            A server-independed wrapper for using native large objects (LOBs) as query parameters.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.Nullify">
      <summary>
            Nullifies this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.Erase">
      <summary>
            Erases this instance.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ILargeObject.BindTo(System.Data.Common.DbParameter)">
      <summary>
            Binds this LOB to the specified parameter.
            </summary>
      <param name="parameter">The parameter to bind to.</param>
    </member>
    <member name="P:Xtensive.Sql.ILargeObject.IsNull">
      <summary>
            Gets a value indicating whether this instance is null.
            </summary>
      <value>
        <see langword="true" /> if this instance is null; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:Xtensive.Sql.ILargeObject.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
      <value>
        <see langword="true" /> if this instance is empty; otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="M:Xtensive.Sql.IBinaryLargeObject.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The length.</param>
    </member>
    <member name="T:Xtensive.Sql.ICharacterLargeObject">
      <summary>
            A server-independed wrapper for using character large objects (CLOBs) as query parameters.
            </summary>
    </member>
    <member name="M:Xtensive.Sql.ICharacterLargeObject.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a part of the specified buffer to this LOB.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
      <param name="count">The length.</param>
    </member>
  </members>
</doc>