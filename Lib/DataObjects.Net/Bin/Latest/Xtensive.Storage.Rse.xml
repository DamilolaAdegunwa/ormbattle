<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Xtensive.Storage.Rse</name>
  </assembly>
  <members>
    <member name="T:Xtensive.Storage.Rse.AggregateColumn">
      <summary>
            Aggregate column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Column">
      <summary>
            Base class for any column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Equals(Xtensive.Storage.Rse.Column)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Equals(System.Object)">
      <summary>
                    Indicates whether the current object is equal to another object of the same type.
                </summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
                </returns>
      <param name="other">
                    An object to compare with this object.
                </param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.GetHashCode">
      <summary>
                    Serves as a hash function for a particular type. 
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.op_Equality(Xtensive.Storage.Rse.Column,Xtensive.Storage.Rse.Column)">
      <summary>
            Implements the equality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for equality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.op_Inequality(Xtensive.Storage.Rse.Column,Xtensive.Storage.Rse.Column)">
      <summary>
            Implements the inequality operator.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the comparison for inequality.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Name" />.
            </summary>
      <param name="newName">The new name value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Name" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Column.#ctor(System.String,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Column" /> class.
            .
            </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Name">
      <summary>
            Gets the column name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Index">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Column.Type">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumn.#ctor(Xtensive.Storage.Rse.AggregateColumnDescriptor,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.AggregateColumn" /> class.
            </summary>
      <param name="descriptor">
        <see cref="T:Xtensive.Storage.Rse.AggregateColumnDescriptor" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumn.SourceIndex" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.AggregateType">
      <summary>
            Gets the aggregate function.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.SourceIndex">
      <summary>
            Gets the source column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumn.Descriptor">
      <summary>
            Gets column descriptor.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.AggregateColumnDescriptor">
      <summary>
            Descriptor of the calculated column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumnDescriptor.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.AggregateColumnDescriptor.#ctor(System.String,System.Int32,Xtensive.Storage.Rse.AggregateType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.AggregateColumnDescriptor" /> class.
            </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.SourceIndex" /> property value.</param>
      <param name="aggregateType">The <see cref="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.AggregateType" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.Name">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.SourceIndex">
      <summary>
            Gets the column index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.AggregateColumnDescriptor.AggregateType">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.ApplyParameter">
      <summary>
            A parameter for accessing current tuple of left (outer) <see cref="T:Xtensive.Storage.Rse.Providers.Provider" />
            within right (inner) <see cref="T:Xtensive.Storage.Rse.Providers.Provider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.ApplyParameter" /> class.
            </summary>
      <param name="name">Value for <see cref="P:Xtensive.Storage.Rse.ApplyParameter.Name" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.ApplyParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.ApplyParameter" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.ApplyParameter.Name">
      <summary>
            Gets the name of this parameter.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Xtensive.Storage.Rse.ApplyParameter.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Xtensive.Storage.Rse.ApplySequenceType">
      <summary>
            Apply operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.Default">
      <summary>
        <see cref="F:Xtensive.Storage.Rse.ApplySequenceType.All" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.All">
      <summary>
            All rows.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.First">
      <summary>
            Expects at least one row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.Single">
      <summary>
            Expects single row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.FirstOrDefault">
      <summary>
            Applies only first row if it exists; otherwise applies default row.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.ApplySequenceType.SingleOrDefault">
      <summary>
            Applies single row if it exists; otherwise applies default row.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.Compiler`1">
      <summary>
            Abstract base class for RSE <see cref="T:Xtensive.Storage.Rse.Providers.Provider" /> compilers that implements visitor pattern.
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />s into <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ICompiler`1">
      <summary>
            Provider compiler contract.
            </summary>
      <typeparam name="TResult">Compilation result.</typeparam>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ICompiler">
      <summary>
            Provider compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.ICompiler.OuterReferences">
      <summary>
            Gets the outer referenced provider for <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.ICompiler.Location">
      <summary>
            Gets execution site location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler`1.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ICompiler`1.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.Xtensive#Storage#Rse#Compilation#ICompiler#ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.Xtensive#Storage#Rse#Compilation#ICompiler#Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>Compiled provider, if compiler can handle the compilation of specified provider;
            otherwise, <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
      <param name="cp">The provider to compile.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" />.
            </summary>
      <param name="provider">Row number provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.Compiler`1.#ctor(Xtensive.Core.Location)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.Compiler`1" /> class.
            </summary>
      <param name="location">Location.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.Compiler`1.Location">
      <summary>
            Gets execution site location.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.Compiler`1.OuterReferences">
      <summary>
            Gets the outer referenced provider for <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.ClientCompiler">
      <summary>
            Default implementation of <see cref="T:Xtensive.Storage.Rse.Compilation.Compiler`1" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.RseCompiler">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">The provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" />.
            </summary>
      <param name="provider">Row number provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.RseCompiler.#ctor(Xtensive.Core.Location)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.RseCompiler" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.RseCompiler.DefaultClientLocation">
      <summary>
            Gets the default client location.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.RseCompiler.DefaultServerLocation">
      <summary>
            Gets the default server location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Determines whether the <paramref name="provider" /> can be considered 
            as compatible with the providers produced by the current compiler.
            </summary>
      <param name="provider">The provider to check.</param>
      <returns>
        <see langword="true" /> if the specified provider is compatible; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.ToCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Wraps the specified <paramref name="provider" />
            to a provider that appears as the result of compilation 
            by this compiler (i.e. call of <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.IsCompatible(Xtensive.Storage.Rse.Providers.ExecutableProvider)" /> 
            on the result of this method should always return <see langword="true" />).
            </summary>
      <param name="provider">The provider to wrap to a compatible provider.</param>
      <returns>Wrapping provider compatible with this compiler;
            <see langword="null" />, if wrapping is not possible.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <exception cref="T:System.NotSupportedException">
      </exception>
      <summary>
            Compiles <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.ClientCompiler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.ClientCompiler" /> class.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.EmptyPostCompiler">
      <summary>
            Empty <see cref="T:Xtensive.Storage.Rse.Compilation.IPostCompiler" /> implementation.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.IPostCompiler">
      <summary>
            Provider's tree post-compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.IPostCompiler.Process(Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.EmptyPreCompiler">
      <summary>
            Empty <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" /> implementation.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.IPreCompiler">
      <summary>
            Provider's tree pre-compiler contract.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.IPreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.EmptyPreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer">
      <summary>
            An expression visitor specialized for finding tuple access expressions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.VisitUnknown(System.Linq.Expressions.Expression)">
      <summary>
            Visits the unknown expression.
            </summary>
      <param name="e">The unknown expression.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.NotSupportedException">Thrown by the base implementation of this method, 
            if unknown expression isn't recognized by its overrides.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
            Visits the method call expression.
            </summary>
      <param name="mc">The method call expression.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression)">
      <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="expression">The predicate.</param>
      <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.Gather(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Gathers used columns from specified <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="expression">The predicate.</param>
      <param name="parameter">The tuple parameter to be considered.</param>
      <returns>List containing all used columns (order and uniqueness are not guaranteed).</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer.#ctor(System.Action{Xtensive.Storage.Rse.ApplyParameter,System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Helpers.TupleAccessGatherer" /> class.
            </summary>
      <param name="registerOuterColumn">A <see langword="delegate" /> invoked on each outer column usage.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter">
      <summary>
            An expression visitor specialized for rewriting tuple access expressions.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.VisitUnknown(System.Linq.Expressions.Expression)">
      <summary>
            Visits the unknown expression.
            </summary>
      <param name="e">The unknown expression.</param>
      <returns>Visit result.</returns>
      <exception cref="T:System.NotSupportedException">Thrown by the base implementation of this method, 
            if unknown expression isn't recognized by its overrides.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
            Visits the method call expression.
            </summary>
      <param name="mc">The method call expression.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression)">
      <summary>
            Replaces column usages according to a specified map.
            </summary>
      <param name="expression">The predicate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.Rewrite(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Replaces column usages according to a specified map.
            </summary>
      <param name="expression">The predicate.</param>
      <param name="parameter">The tuple parameter to be considered.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter.#ctor(System.Collections.Generic.IList{System.Int32},System.Func{Xtensive.Storage.Rse.ApplyParameter,System.Int32,System.Int32},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Helpers.TupleAccessRewriter" /> class.
            </summary>
      <param name="resolveOuterColumn">A <see langword="delegate" /> invoked when outer column usage is to be rewritten.</param>
      <param name="mappings">The mappings.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.IncludeAlgorithm">
      <summary>
            Include algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.Auto">
      <summary>
            Inclusion algorithm must be automatically chosen based on filter data.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.ComplexCondition">
      <summary>
            Inclusion is described as a complex condition (expression).
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.IncludeAlgorithm.TemporaryTable">
      <summary>
            Inclusion is described via temporary table.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.Default">
      <summary>
            Default join operation type.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.Inner">
      <summary>
            Inner join.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinType.LeftOuter">
      <summary>
            Left outer join.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.LockBehavior">
      <summary>
            Lock behavior.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Default">
      <summary>
            Default lock behavior. Equals to <see cref="F:Xtensive.Storage.Rse.LockBehavior.Wait" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Wait">
      <summary>
            Wait until a lock is released.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.ThrowIfLocked">
      <summary>
            Throw exception if a lock is occupied.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockBehavior.Skip">
      <summary>
            Skip locked records.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.LockMode">
      <summary>
            Lock mode.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Default">
      <summary>
            Default lock mode. Equals to <see cref="F:Xtensive.Storage.Rse.LockMode.Shared" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Shared">
      <summary>
            Shared lock.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Update">
      <summary>
            Lock for the following update.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.LockMode.Exclusive">
      <summary>
            Exclusive lock.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.BaseOrderingCorrectorRewriter">
      <summary>
            Abstract base class for correctors of ordering of records.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> visitor class. Result is <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ProviderVisitor">
      <summary>
            Abstract <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> visitor class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.Visit(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Visits the specified <paramref name="cp" />.
            </summary>
      <param name="cp">The <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> to visit.</param>
      <returns>Visit result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Predicate join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">Apply provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRowNumber(Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" />.
            </summary>
      <param name="provider">Row number provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">RangeSet provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitInclude(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" />.
            </summary>
      <param name="provider">Include provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ProviderVisitor.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitCompilable(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Visits the compilable provider.
            </summary>
      <param name="cp">The compilable provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitTransfer(Xtensive.Storage.Rse.Providers.Compilable.TransferProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" />.
            </summary>
      <param name="provider">Execution site provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitTake(Xtensive.Storage.Rse.Providers.Compilable.TakeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" />.
            </summary>
      <param name="provider">Take provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSkip(Xtensive.Storage.Rse.Providers.Compilable.SkipProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" />.
            </summary>
      <param name="provider">Skip provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSelect(Xtensive.Storage.Rse.Providers.Compilable.SelectProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" />.
            </summary>
      <param name="provider">Select provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSeek(Xtensive.Storage.Rse.Providers.Compilable.SeekProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" />.
            </summary>
      <param name="provider">Seek provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRaw(Xtensive.Storage.Rse.Providers.Compilable.RawProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" />.
            </summary>
      <param name="provider">Raw provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRange(Xtensive.Storage.Rse.Providers.Compilable.RangeProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" />.
            </summary>
      <param name="provider">Range provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitRangeSet(Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" />.
            </summary>
      <param name="provider">RangeSet provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitSort(Xtensive.Storage.Rse.Providers.Compilable.SortProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" />.
            </summary>
      <param name="provider">Sort provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitJoin(Xtensive.Storage.Rse.Providers.Compilable.JoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" />.
            </summary>
      <param name="provider">Join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitFilter(Xtensive.Storage.Rse.Providers.Compilable.FilterProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" />.
            </summary>
      <param name="provider">Filter provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitDistinct(Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" />.
            </summary>
      <param name="provider">Distinct provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitCalculate(Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" />.
            </summary>
      <param name="provider">Calculate provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitAlias(Xtensive.Storage.Rse.Providers.Compilable.AliasProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" />.
            </summary>
      <param name="provider">Alias provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitAggregate(Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" />.
            </summary>
      <param name="provider">Aggregate provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitStore(Xtensive.Storage.Rse.Providers.Compilable.StoreProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
      <param name="provider">Store provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitIndex(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" />.
            </summary>
      <param name="provider">Index provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitReindex(Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />.
            </summary>
      <param name="provider">Reindex provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitPredicateJoin(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />.
            </summary>
      <param name="provider">Predicate join provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitExistence(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" />.
            </summary>
      <param name="provider">Existence provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitApply(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider)">
      <summary>
            Visits <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" />.
            </summary>
      <param name="provider">Apply provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitIntersect(Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" />.
            </summary>
      <param name="provider">Intersect provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitExcept(Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" />.
            </summary>
      <param name="provider">Except provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitConcat(Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
      <param name="provider">Concat provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitUnion(Xtensive.Storage.Rse.Providers.Compilable.UnionProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" />.
            </summary>
      <param name="provider">Union provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.VisitLock(Xtensive.Storage.Rse.Providers.Compilable.LockProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="provider">Lock provider.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.OnRecursionExit(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
            Called after recursion exit.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.OnRecursionEntrance(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
            Called before recursion entrance.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProviderVisitor.#ctor(System.Func{Xtensive.Storage.Rse.Providers.Provider,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
      <inheritdoc />
      <param name="expressionTranslator">Expression translator.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.BaseOrderingCorrectorRewriter.SetActualOrdering(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Sets the actual ordering for <paramref name="provider" />.
            </summary>
      <param name="provider">The provider.</param>
      <param name="ordering">The actual ordering.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector">
      <summary>
            Converts <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" /> to <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" />, if possible.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ApplyProviderCorrection.ApplyProviderCorrector" /> class.
            </summary>
      <param name="throwOnCorrectionFault">if set to <see langword="true" /> 
            then <see cref="T:System.InvalidOperationException" /> will be thrown in case of 
            the correction's fault; otherwise the origin <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            will be returned.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor">
      <summary>
            Descriptor of a provider's ordering behavior.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsOrderSensitive">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            is sensitive to records order.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.PreservesOrder">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            preserves records order.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.BreaksOrder">
      <summary>
            Gets a value indicating whether the provider is order breaker,
            such as <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" /> or <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsSorter">
      <summary>
            Gets a value indicating whether the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> 
            sorts records.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> class.
            </summary>
      <param name="isOrderSensitive">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsOrderSensitive" />.</param>
      <param name="preservesOrder">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.PreservesOrder" />.</param>
      <param name="isOrderingBoundary">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.BreaksOrder" />.</param>
      <param name="isSorter">value of <see cref="F:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor.IsSorter" />.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.SkipTakeCorrector">
      <summary>
            Corrects an using of <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" /> and <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" /></summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.SkipTakeCorrector.Xtensive#Storage#Rse#Compilation#IPreCompiler#Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer">
      <summary>
            Optimizer that selects indexes and their key's ranges to be used.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer.#ctor(Xtensive.Storage.Model.DomainModel,Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IndexOptimizer" /> class.
            </summary>
      <param name="domainModel">The domain model.</param>
      <param name="providerResolver">The statistics provider resolver.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.TupleExpressionInfo">
      <summary>
            Information about expression containing an access to a field of tuple.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.CnfParser">
      <summary>
            Extractor of <see cref="T:Xtensive.Indexing.RangeSet`1" /> from a boolean expression in a conjunctive normal form.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver">
      <summary>
            Resolver of a <see cref="T:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1" /> for a specified <see cref="T:Xtensive.Storage.Model.IndexInfo" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.IOptimizationInfoProviderResolver.Resolve(Xtensive.Storage.Model.IndexInfo)">
      <summary> 
            Resolves the <see cref="T:Xtensive.Indexing.Optimization.IOptimizationInfoProvider`1" /> for <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The description of the index.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler">
      <summary>
            Composite optimizer.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler.Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler.#ctor(Xtensive.Storage.Rse.Compilation.IPreCompiler[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.PreCompilation.CompositePreCompiler" /> class.
            </summary>
      <param name="preCompilers">Pre-compilers to be composed.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector">
      <summary>
            Corrects an ordering of records.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector.Xtensive#Storage#Rse#Compilation#IPreCompiler#Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector.#ctor(System.Func{Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.OrderingCorrector" /> class.
            </summary>
      <param name="orderingDescriptorResolver">The resolver of
            <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</param>
      <param name="setActualOrderOnly">If set to <see langword="true" /> then the actual order will be set 
            in <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />. Other modifications will not be performed.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.IndexSelection.RsExtractionResult">
      <summary>
            Result of extraction a <see cref="T:Xtensive.Indexing.RangeSet`1" /> from a predicate.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.ColumnMappingInspector.VisitFreeText(Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider)">
      <summary>
            Visits the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FreeTextProvider" />.
            </summary>
      <param name="provider">FreeText provider.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.PreCompilation.Optimization.RedundantColumnOptimizer">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Compilation.IPreCompiler" /> implementation that removes redundant columns in tree.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.PreCompilation.Optimization.RedundantColumnOptimizer.Xtensive#Storage#Rse#Compilation#IPreCompiler#Process(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Processes the specified provider's tree.
            </summary>
      <param name="rootProvider">The root provider.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider">
      <summary>
            Produces concatenation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider">
      <summary>
            Base class for binary operation provider over 
            the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> providers.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.CompilableProvider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordSet" /><see cref="P:Xtensive.Storage.Rse.RecordSet.Provider" />,
            that can be compiled.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Provider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordSet" /><see cref="P:Xtensive.Storage.Rse.RecordSet.Provider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.Initialize(System.Type)">
      <summary>
            Performs initialization (see <see cref="M:Xtensive.Storage.Rse.Providers.Provider.Initialize" />) of the provider 
            if type of <see langword="this" /> is the same as <paramref name="ctorType" />.
            Invoked by <see cref="T:Xtensive.Core.Aspects.InitializableAttribute" /> aspect in the epilogue of any 
            constructor of this type and its ancestors.
            </summary>
      <param name="ctorType">The type, which constructor has invoked this method.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendBodyTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's representation to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendDescriptionTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's description to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.AppendTitleTo(System.Text.StringBuilder,System.Int32)">
      <summary>
            Appends the provider's title representation to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="sb">The <see cref="T:System.Text.StringBuilder" /> to use.</param>
      <param name="indent">The indent.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.TitleToString">
      <summary>
            Gets the string representation of provider title
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider title as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Provider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.Provider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Provider" /> class.
            </summary>
      <param name="type">The type of the provider.</param>
      <param name="sources">
        <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Type">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.Providers.ProviderType" /> of the current instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Sources">
      <summary>
            Gets or sets the source providers 
            "consumed" by this provider to produce results of current provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Provider.Header">
      <summary>
            Gets or sets the header of the record sequence this provide produces.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.Provider[])">
      <inheritdoc />
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.CompilableProvider.#cctor">
      <summary>
            Initializes the <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.CompilableProvider.EmptyOrder">
      <summary>
            Gets the empty order.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.CompilableProvider.Result">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> wrapping this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder">
      <summary>
            Gets the expected indexes of columns <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> should be ordered by.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider" /> class.
            </summary>
      <param name="type">The type of provider.</param>
      <param name="left">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.</param>
      <param name="right">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left">
      <summary>
            Left source.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right">
      <summary>
            Right source.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider.EnsureConcatIsPossible">
      <exception cref="T:System.InvalidOperationException">Something went wrong.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ConcatProvider" /> class.
            </summary>
      <param name="left">The left provider to intersect.</param>
      <param name="right">The right provider to intersect.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider">
      <summary>
            Compilable provider that returns <see cref="T:System.Boolean" /> column. 
            Column value is <see langword="true" /> if source value equal to one of provided values; otherwise <see langword="false" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider">
      <summary>
            Base class for unary operation provider over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider" /> class.
            </summary>
      <param name="type">The type of the provider.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source">
      <summary>
            Source provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IInlinableProvider">
      <summary>
            A compilable provider, which columns can be inlined during translation to SQL.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IInlinableProvider.IsInlined">
      <summary>
            Gets a value indicating whether columns of a provider should be inlined.
            For non-SQL storages this property has no effect on compilation.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.IncludeAlgorithm,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Core.Tuples.Tuple}}},System.String,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider" /> class.
            </summary>
      <param name="source">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.</param>
      <param name="algorithm">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.Algorithm" />.</param>
      <param name="isInlined">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.IsInlined" />.</param>
      <param name="filterDataSource">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilterDataSource" />.</param>
      <param name="resultColumnName">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.ResultColumnName" />.</param>
      <param name="filteredColumns">A value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilteredColumns" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.IsInlined">
      <summary>
            Gets a value indicating whether result column should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.ResultColumnName">
      <summary>
            Gets the name of the column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.Algorithm">
      <summary>
            Gets the algorithm that performes filtering.
            For non-SQL storages value of this field has no effect.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilteredColumns">
      <summary>
            Gets the filtered columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider.FilterDataSource">
      <summary>
            Gets filter data.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider">
      <summary>
            Acquires the lock for a data in a source provider.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.LockMode">
      <summary>
            The delegate returning the mode of the lock to be acquired.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.LockBehavior">
      <summary>
            The delegate returning the behavior of the lock.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="lockMode">The mode of the lock to be acquired.</param>
      <param name="lockBehavior">The behavior of the lock.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LockProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{Xtensive.Storage.Rse.LockMode},System.Func{Xtensive.Storage.Rse.LockBehavior})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="lockMode">The delegate returning the mode of the lock to be acquired.</param>
      <param name="lockBehavior">The delegate returning the behavior of the lock.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider">
      <summary>
            Produces union between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider.EnsureUnionIsPossible">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.UnionProvider" /> class.
            </summary>
      <param name="left">The left provider for union.</param>
      <param name="right">The right provider for union.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider">
      <summary>
            Produces except operation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExceptProvider" /> class.
            </summary>
      <param name="left">The left provider to execute except operation.</param>
      <param name="right">The right provider to to execute except operation.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider">
      <summary>
            Produces intersect operation between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IntersectProvider" /> class.
            </summary>
      <param name="left">The left provider to intersect.</param>
      <param name="right">The right provider to intersect.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider">
      <summary>
            Gets the specified <see cref="T:Xtensive.Indexing.RangeSet`1" /> from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}}}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range">
      <summary>
            Gets the range set parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.CompiledRange">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeSetProvider.Range" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationContextOptions">
      <summary>
            Various options for <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Providers.EnumerationContextOptions.GreedyEnumerator">
      <summary>
            Indicates that <see cref="T:System.Collections.Generic.IEnumerator`1" /> of the root provider
            should be fully read before returning data to user.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1">
      <summary>
            An abstract base class for executable provider having <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left" /> and <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right" /> data sources.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ExecutableProvider`1">
      <summary>
            Abstract base class for <typeparamref name="TOrigin" />-typed executable providers.
            </summary>
      <typeparam name="TOrigin">The type of the <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" />.</typeparam>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ExecutableProvider">
      <summary>
            Abstract base class for any <see cref="T:Xtensive.Storage.Rse.RecordSet" /><see cref="P:Xtensive.Storage.Rse.RecordSet.Provider" />,
            that does not need to be compiled.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.ICachingProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers that compute and cache the result before the enumeration.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ICachingProvider.IsResultCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets a value indicating whether the result of this provider is cached for the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> - 
            i.e. its enumeration won't lead to a significant delay needed for the computation in this context.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ICachingProvider.EnsureResultIsCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Ensures the result is cached in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            This method can be called more then once.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Returns either cached result (if available), or a result of <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" />.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnAfterEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumeration is finished.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1">
      <remarks>
            The implementation of this method checks if specified service <typeparamref name="T" />
            was registered by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.AddService``1" />, and returns <c>this as T</c>, if this is <see langword="true" />;
            otherwise, <see langword="null" />.
            </remarks>
      <summary>
            Gets the service of the specified type <typeparamref name="T" />.
            Returns <see langword="null" />, if there is no such service.
            </summary>
      <typeparam name="T">The type of the service to get.</typeparam>
      <returns>The service of specified type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.AddService``1">
      <summary>
            Registers the service as "supported".
            This method should be called only from thread-safe methods,
            such as <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.BuildHeader" />.
            </summary>
      <typeparam name="T">The type of service to register.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Xtensive#Storage#Rse#Providers#ICachingProvider#IsResultCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets a value indicating whether the result of this provider is cached for the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> - 
            i.e. its enumeration won't lead to a significant delay needed for the computation in this context.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Xtensive#Storage#Rse#Providers#ICachingProvider#EnsureResultIsCached(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Ensures the result is cached in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            This method can be called more then once.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.BuildHeader">
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> property value.</param>
      <param name="sources">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin">
      <summary>
            Gets the provider this provider is compiled from.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.IsCacheable">
      <summary>
            Gets or sets a value indicating whether this instance can be
            cached and further returned as result of compilation of
            <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> once more by the same 
            <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Location">
      <summary>
            Gets or sets execution site location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider`1" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="sources">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Sources" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin">
      <summary>
            Gets the provider this provider is compiled from.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="left">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left" /> property value.</param>
      <param name="right">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Left">
      <summary>
            Gets the "left" data source of this provider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.BinaryExecutableProvider`1.Right">
      <summary>
            Gets the "right" data source of this provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1">
      <summary>
            An abstract base class for executable provider having a single data <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source">
      <summary>
            Gets the only data source of this provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.IncludeProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IncludeProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.IncludeProvider" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MultySeekProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MultySeekProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeSetProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper">
      <summary>
            Various extension methods for manipulating expressions with <see cref="T:Xtensive.Core.Tuples.Tuple" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.IsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            Checks if expression is access to tuple.
            </summary>
      <param name="expression">Expression to check.</param>
      <param name="tupleParameter">Tuple parameter that access must be on.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.IsTupleAccess(System.Linq.Expressions.Expression)">
      <summary>
            Checks if expression is access to tuple.
            </summary>
      <param name="expression">Expression to check.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression)">
      <summary>
            If <paramref name="expression" /> is an access to tuple element
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            </summary>
      <param name="expression">An expression to check.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
      <summary>
            If <paramref name="expression" /> is an access to tuple element.
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            This method only accepts access to specified parameter and access to outer parameters (<see cref="T:Xtensive.Storage.Rse.ApplyParameter" />).
            </summary>
      <param name="expression">An expression to check.</param>
      <param name="currentParameter">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> considered as current parameter.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.AsTupleAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
            If <paramref name="expression" /> is an access to tuple element.
            returns <paramref name="expression" /> casted to <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            Otherwise returns <see langword="null" />.
            This method only accepts access to specified parameters and access to outer parameters (<see cref="T:Xtensive.Storage.Rse.ApplyParameter" />).
            </summary>
      <param name="expression">An expression to check.</param>
      <param name="currentParameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />s  considered as current parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.GetTupleAccessArgument(System.Linq.Expressions.Expression)">
      <summary>
            Gets the tuple access argument (column index).
            </summary>
      <param name="expression">An expression describing an access to tuple element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Helpers.TupleExpressionHelper.GetApplyParameter(System.Linq.Expressions.Expression)">
      <summary>
            Tries to extract apply parameter from <paramref name="expression" />.
            If <paramref name="expression" /> is an access to column of outer tuple returns <see cref="T:Xtensive.Storage.Rse.ApplyParameter" /> instance.
            Otherwise returns <see langword="null" />.
            </summary>
      <param name="expression">The expression describing an access to outer tuple.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.AggregateType">
      <summary>
            Defines the set of aggregate functions.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Avg">
      <summary>
            Average of the values in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Count">
      <summary>
            A count of the values in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Max">
      <summary>
            Highest value in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Min">
      <summary>
            Lowest value in a column.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.AggregateType.Sum">
      <summary>
            Total of values in a column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.CalculatedColumn">
      <summary>
            Calculated column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumn.#ctor(Xtensive.Storage.Rse.CalculatedColumnDescriptor,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.CalculatedColumn" /> class.
            </summary>
      <param name="descriptor">
        <see cref="T:Xtensive.Storage.Rse.CalculatedColumnDescriptor" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumn.Expression">
      <summary>
            Gets the column expression.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.CalculatedColumnDescriptor">
      <summary>
            Descriptor of the calculated column.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumnDescriptor.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.CalculatedColumnDescriptor.#ctor(System.String,System.Type,System.Linq.Expressions.Expression{System.Func{Xtensive.Core.Tuples.Tuple,System.Object}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.CalculatedColumnDescriptor" /> class.
            </summary>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Name" /> property value.</param>
      <param name="type">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Type" /> property value.</param>
      <param name="expression">The <see cref="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Expression" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Name">
      <summary>
            Gets the column name.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Type">
      <summary>
            Gets the column type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.CalculatedColumnDescriptor.Expression">
      <summary>
            Gets the column expression.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.CompilationContext">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> compilation context.
            </summary>
      <remarks>
        <para id="About">
            This class has default instance - use its <see cref="P:Xtensive.Storage.Rse.Compilation.CompilationContext.Default" />
            property to get it.
            </para>
      </remarks>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationContext.DefaultCacheSize">
      <summary>
            Gets the size of compilation cache.
            Currently it is 256 (compilation results).
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationContext.Default">
      <summary>
            Gets the default instance of <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Compiles the specified provider by passing it to <see cref="T:Xtensive.Storage.Rse.Compilation.ICompiler" />.
            <see cref="M:Xtensive.Storage.Rse.Compilation.ICompiler.Compile(Xtensive.Storage.Rse.Providers.CompilableProvider)" /> method.
            </summary>
      <param name="provider">The provider to compile.</param>
      <returns>The result of the compilation.</returns>
      <exception cref="T:System.InvalidOperationException">Can't compile the specified 
            <paramref name="provider" />.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.CreateEnumerationContext">
      <summary>
            Creates the enumeration context suitable 
            for compilation results produced by this
            <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" />.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.CreateCache(System.Int32)">
      <summary>
            Creates RSE compilation cache.
            </summary>
      <param name="cacheSize">Size of the cache.</param>
      <returns>RSE compilation cache.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.CreateActiveScope">
      <summary>
            Creates the associated scope.
            </summary>
      <returns>New instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationScope" /> type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.ICompiler,Xtensive.Storage.Rse.Compilation.IPostCompiler})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" /> class.
            </summary>
      <param name="compilerProvider">The compiler provider.</param>
      <param name="preCompilerProvider">The pre-compiler provider.</param>
      <param name="postCompilerProvider">The post-compiler provider.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.#ctor(System.Func{Xtensive.Storage.Rse.Compilation.ICompiler},System.Func{Xtensive.Storage.Rse.Compilation.IPreCompiler},System.Func{Xtensive.Storage.Rse.Compilation.ICompiler,Xtensive.Storage.Rse.Compilation.IPostCompiler},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" /> class.
            </summary>
      <param name="compilerProvider">The compiler provider.</param>
      <param name="preCompilerProvider">The pre-compiler provider.</param>
      <param name="postCompilerProvider">The post-compiler provider.</param>
      <param name="cacheSize">Size of the cache.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.CompilationContext.Resolver">
      <summary>
            Gets or sets the <see cref="P:Xtensive.Storage.Rse.Compilation.CompilationContext.Current" /> compilation context resolver to use
            when there is no active <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" />.
            </summary>
      <remarks>
            The setter of this property can be invoked just once per application lifetime; 
            assigned resolver can not be changed.
            </remarks>
      <exception cref="T:System.NotSupportedException">Resolver is already assigned.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.CompilationContext.Current">
      <summary>
            Gets the current compilation context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.CompilationContext.IsActive">
      <summary>
            Indicates whether current context is active.
            </summary>
      <seealso cref="M:Xtensive.Core.IoC.IContext.Activate" />
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.CompilationContext.CacheEntry">
      <summary>
            Describes RSE compilation cache entry.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationContext.CacheEntry.Key">
      <summary>
            Entry key.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Compilation.CompilationContext.CacheEntry.Value">
      <summary>
            Entry value.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationContext.CacheEntry.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext.CacheEntry" /> class.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.CompilationScope">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" /> activation scope. 
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationScope.Activate(Xtensive.Storage.Rse.Compilation.CompilationContext)">
      <summary>
            Initializes the scope.
            </summary>
      <param name="newContext">The new context.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:Xtensive.Core.IoC.Scope`1.Context" /> is already initialized.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationScope.#ctor(Xtensive.Storage.Rse.Compilation.CompilationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationScope" /> class.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.CompilationScope.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.CompilationScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.CompilationScope.Context">
      <summary>
            Gets the context of this scope.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.DefaultCompilationContext">
      <summary>
            Default <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" /> implementation.
            </summary>
      <remarks>
        <para id="About">
            This class has default instance - use its <see cref="P:Xtensive.Storage.Rse.Compilation.DefaultCompilationContext.Default" />
            property to get it.
            </para>
      </remarks>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultCompilationContext.ResolveOrderingDescriptor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Default method to resolve <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" /> 
            for <paramref name="provider" />.
            </summary>
      <param name="provider">The provider.</param>
      <returns>Resolved <see cref="T:Xtensive.Storage.Rse.PreCompilation.Correction.ProviderOrderingDescriptor" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultCompilationContext.CreateEnumerationContext">
      <summary>
            Creates the enumeration context suitable 
            for compilation results produced by this
            <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" />.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultCompilationContext.#ctor">
      <inheritdoc />
    </member>
    <member name="T:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext">
      <summary>
            Default <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> implementation.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationContext">
      <summary>
            The single enumeration attempt context for the <see cref="T:Xtensive.Storage.Rse.Providers.ExecutableProvider" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.CreateNew">
      <summary>
            Factory method. Creates new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.SetValue``1(System.Object,``0)">
      <summary>
            Caches the value in the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="value">The value to cache.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.GetValue``1(System.Object)">
      <summary>
            Gets the cached value from the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <returns>Cached value with the specified key;
            <see langword="null" />, if no cached value is found, or it is already expired.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.SetValue``1(System.Object,System.String,``0)">
      <summary>
            Caches the value in the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="name">The cache name.</param>
      <param name="value">The value to cache.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.GetValue``1(System.Object,System.String)">
      <summary>
            Gets the cached value from the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="key">The cache key.</param>
      <param name="name">The cache name.</param>
      <returns>
            Cached value with the specified key;
            <see langword="null" />, if no cached value is found, or it is already expired.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.CheckOptions(Xtensive.Storage.Rse.Providers.EnumerationContextOptions)">
      <summary>
            Checks whenever the specified option set is enable for this context.
            </summary>
      <param name="requiredOptions">The options to check.</param>
      <returns>
        <see langword="true" /> if the speicifed options set is enable in this context;
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.EnsureIsActive">
      <summary>
            Ensures the context is active.
            </summary>
      <exception cref="T:System.InvalidOperationException">Context is not active.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.Options">
      <summary>
            Gets the options of this context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.GlobalTemporaryData">
      <summary>
            Gets the global temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.TransactionTemporaryData">
      <summary>
            Gets the transaction temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationContext.IsActive">
      <summary>
            Indicates whether current context is active.
            </summary>
      <seealso cref="M:Xtensive.Core.IoC.IContext.Activate" />
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.CreateNew">
      <summary>
            Factory method. Creates new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.CreateActiveScope">
      <summary>
            Creates the associated scope.
            </summary>
      <returns>New instance of the <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> type.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.Options">
      <summary>
            Gets the options of this context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.GlobalTemporaryData">
      <summary>
            Gets the global temporary data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Compilation.DefaultEnumerationContext.TransactionTemporaryData">
      <exception cref="T:System.NotSupportedException">Always thrown by this property getter.</exception>
      <summary>
            Gets the transaction temporary data.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider">
      <summary>
            Compilable provider that calculates columns from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.CalculatedColumnDescriptor[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns" />.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Storage.Rse.CalculatedColumnDescriptor[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="isInlined">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.IsInlined" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.IsInlined">
      <summary>
            Gets a value indicating whether calculated columns should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.CalculatedColumns">
      <summary>
            Gets the calculated columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.CalculateProvider.ResizeTransform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider">
      <summary>
            Distinct provider
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.DistinctProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider">
      <summary>
            Compilable provider that returns <see cref="T:System.Boolean" /> column. 
            Column value is <see langword="true" /> if <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> contains any result; otherwise <see langword="false" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider.ExistenceColumnName">
      <summary>
            Gets the name of the existence column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader">
      <summary>
            Base class for <see cref="T:Xtensive.Storage.Rse.RecordSet" /><see cref="T:Xtensive.Indexing.IIndexReader`2" />s.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.MoveNext">
      <summary>
                    Advances the enumerator to the next element of the collection.
                </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.MoveTo(Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple})">
      <summary>
            Moves the internal pointer to the specified key.
            You still should call <see cref="M:System.Collections.IEnumerator.MoveNext" />
            after calling this method to make 
            <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> property value available.
            </summary>
      <param name="key">The key to move to.</param>
      <remarks>
        <note type="caution">
              The specified <paramref name="key" /> must be 
              inside the <see cref="P:Xtensive.Indexing.IIndexReader`2.Range" /> of this reader.
            </note>
      </remarks>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Reset">
      <summary>
                    Sets the enumerator to its initial position, which is before the first element in the collection.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The collection was modified after the enumerator was created. 
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.#ctor(Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader" /> class.
            </summary>
      <param name="provider">
        <see cref="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Provider" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Dispose">
      <summary>
            Performs the tasks associated with freeing, releasing, or resetting unmanaged resources
            or associated <see cref="T:System.IDisposable" /> objects.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Provider">
      <summary>
            Gets the provider this reader is created for.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Range">
      <summary>
            Gets the range of enumeration.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Direction">
      <summary>
            Gets the direction of enumeration relatively to index key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.System#Collections#IEnumerator#Current">
      <summary>
                    Gets the current element in the collection.
                </summary>
      <returns>
                    The current element in the collection.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The enumerator is positioned before the first element of the collection or after the last element.
                </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.Internal.VirtualIndexReader.Current">
      <summary>
                    Gets the element in the collection at the current position of the enumerator.
                </summary>
      <returns>
                    The element in the collection at the current position of the enumerator.
                </returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Storage.Model.IndexAttributes.Typed" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">Source executable provider.</param>
      <param name="typeIdColumn">Index of typeId column.</param>
      <param name="typeId">Identifiers of the type.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.Count">
      <summary>
            Gets the number of elements contained in a collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.AsymmetricKeyCompare">
      <summary>
            Gets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.EntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.KeyComparer">
      <summary>
            Gets key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.TypedIndexProvider.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Storage.Model.IndexAttributes.View" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
      <param name="columnMap">The column map.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.AsymmetricKeyCompare">
      <summary>
            Gets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.EntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.KeyComparer">
      <summary>
            Gets key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.ViewIndexProvider.Count">
      <summary>
            Gets the number of elements contained in a collection.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.TransferType">
      <summary>
            Enumerates transfer preference options.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Default">
      <summary>
            Default option is a <see cref="F:Xtensive.Storage.Rse.TransferType.Server" />.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Server">
      <summary>
            Prefer server execution.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TransferType.Client">
      <summary>
            Prefer client execution.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.TransferType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="options">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.TransferType,Xtensive.Core.UrlInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="options">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options" /> property value.</param>
      <param name="location">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Location" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Options">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.TransferType" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TransferProvider.Location">
      <summary>
            Gets the execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider">
      <summary>
            Compilable provider that applies aggregate functions to grouped columns from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.GetAggregateColumnType(System.Type,Xtensive.Storage.Rse.AggregateType)">
      <summary>
            Gets the type of the aggregate column according to a <see cref="T:Xtensive.Storage.Rse.AggregateType" /> and original column type.
            </summary>
      <param name="sourceColumnType">Type of the source column.</param>
      <param name="aggregateType">Type of the aggregate.</param>
      <returns>The type of aggregate column.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32[],Xtensive.Storage.Rse.AggregateColumnDescriptor[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnDescriptors">The descriptors of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.AggregateColumns" />.</param>
      <param name="groupIndexes">The column indexes to group by.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.AggregateColumns">
      <summary>
            Gets the aggregate columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.GroupColumnIndexes">
      <summary>
            Gets column indexes to group by.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AggregateProvider.Transform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.JoinAlgorithm">
      <summary>
             Join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Default">
      <summary>
             Default join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Loop">
      <summary>
             Loop join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.NestedLoop">
      <summary>
             Nested Loop join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Merge">
      <summary>
             Merge join algorithm.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.JoinAlgorithm.Hash">
      <summary>
             Hash join algorithm.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider">
      <summary>
            Abstract base class for <see cref="T:Xtensive.Storage.Rse.Providers.CompilableProvider" /> that's aware of its location.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Core.Location,Xtensive.Storage.Rse.Providers.Provider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.LocationAwareProvider.Location">
      <summary>
            Gets or sets execution site location.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider">
      <summary>
            Compilable provider that adds row number to <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="columnName">The name of <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.SystemColumn" />.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.SystemColumn">
      <summary>
            Gets the row number column.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RowNumberProvider.ResizeTransform">
      <summary>
            Gets header resize transform.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider">
      <summary>
            Produces join between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.Predicate" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Core.Tuples.Tuple,Xtensive.Core.Tuples.Tuple,System.Boolean}},Xtensive.Storage.Rse.JoinType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider.Predicate">
      <summary>
            Gets the predicate.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider">
      <summary>
            Provides access to some previously stored named <see cref="T:Xtensive.Storage.Rse.RecordSet" /> 
            or stores the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> with the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" /> class.
            </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="scope">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope" /> property value.</param>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.Providers.Provider,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> property value.</param>
      <param name="scope">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope" /> property value.</param>
      <param name="name">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.#ctor(Xtensive.Storage.Rse.Providers.Provider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Scope">
      <summary>
            Gets the scope of saved data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Name">
      <summary>
            Gets the name of saved data.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider.Source">
      <summary>
            Source provider.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider">
      <summary>
            Compilable provider that iterates over <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> 
            provider result for each item from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.#ctor(Xtensive.Storage.Rse.ApplyParameter,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.#ctor(Xtensive.Storage.Rse.ApplyParameter,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,System.Boolean,Xtensive.Storage.Rse.ApplySequenceType,Xtensive.Storage.Rse.JoinType)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ApplyParameter">
      <summary>
            Gets the apply parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.IsInlined">
      <summary>
            Gets a value indicating whether columns of this provider should be inlined.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.ApplyType">
      <summary>
            Gets apply type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider.SequenceType">
      <summary>
            Gets a value indicating whether applying of single or first row expected.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData">
      <summary>
            Global temporary data context.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Get(System.String)">
      <summary>
            Gets the specified value by its name.
            </summary>
      <param name="name">The name of the value.</param>
      <returns>
            Specified value, if found;
            otherwise, <see langword="null" />.
            </returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Set(System.String,System.Object)">
      <summary>
            Sets the value of the specified name.
            </summary>
      <param name="name">The name to set the value of.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.Executable.GlobalTemporaryData" /> instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.TemporaryDataScope">
      <summary>
            Temporary data lifetime scope.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Enumeration">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />-level scope.
            Temporary data "lives" for the duration of enumeration it is created in.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Transaction">
      <summary>
        <see cref="F:Xtensive.Storage.Rse.TemporaryDataScope.Transaction" />-level scope.
            Temporary data "lives" for the duration of transaction it is created in.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.TemporaryDataScope.Global">
      <summary>
            Global (<see cref="F:Xtensive.Storage.Rse.TemporaryDataScope.Global" />-level) scope.
            Temporary data "lives" infinitely.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase">
      <summary>
            Base class for any compilable sorting providers
            (<see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" /> and <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" />).
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractor(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Extracts the key part from <paramref name="tuple" /> using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractorTransform" />.
            </summary>
      <param name="tuple">The tuple to extract the key from.</param>
      <returns>A tuple containing extracted order key.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.#ctor(Xtensive.Storage.Rse.Providers.ProviderType,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase" /> class.
            </summary>
      <param name="providerType">Provider type.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order">
      <summary>
            Sort order of the index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyExtractorTransform">
      <summary>
            Gets the key extractor transform.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.OrderKeyComparer">
      <summary>
            Gets the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> key comparer.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider">
      <summary>
            Compilable provider that returns one record if it matches specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="key">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Core.Tuples.Tuple)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="key">Wrapped to <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key">
      <summary>
            Seek parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.CompiledKey">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SeekProvider.Key" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider">
      <summary>
            Compilable provider that skips result records from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />. Skip amount is specified using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" /> class.
            </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider" /> class.
            </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SkipProvider.Count">
      <summary>
            Skip amount function.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider">
      <summary>
            Compilable provider that takes first N result records from <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />. Amount of records is specified using <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> property.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Func{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" /> class.
            </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider" /> class.
            </summary>
      <param name="provider">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="count">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.TakeProvider.Count">
      <summary>
            Take amount function.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.EnumerationScope">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> activation scope.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationScope.Open">
      <summary>
            Create the new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> using 
            <see cref="M:Xtensive.Storage.Rse.Compilation.CompilationContext.CreateEnumerationContext" /> method of the
            <see cref="P:Xtensive.Storage.Rse.Compilation.CompilationContext.Current" /> compilation context, 
            if <see cref="P:Xtensive.Storage.Rse.Providers.EnumerationScope.CurrentContext" /> is <see langword="null" />.
            Otherwise, returns <see langword="null" />.
            </summary>
      <returns>Either new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> or <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Active <see cref="T:Xtensive.Storage.Rse.Compilation.CompilationContext" /> absents.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationScope.Block">
      <summary>
            Create the new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> having
            <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" /> property set to <see langword="null" />, 
            if <see cref="P:Xtensive.Storage.Rse.Providers.EnumerationScope.CurrentContext" /> is not <see langword="null" />.
            Otherwise, returns <see langword="null" />.
            In fact, temporarily blocks current <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />
            and ensures next call to <see cref="M:Xtensive.Storage.Rse.Providers.EnumerationScope.Open" /> will return 
            a new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" />.
            </summary>
      <returns>Either new <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> or <see langword="null" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.EnumerationScope.#ctor(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationScope" /> class.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationScope.CurrentContext">
      <summary>
            Gets the current context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.EnumerationScope.Context">
      <summary>
            Gets the context of this scope.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.CalculateProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ExistenceProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.ExistenceProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.ExistenceProvider" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.HashJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.PredicateJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.PredicateJoinProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.PredicateJoinProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.PredicateJoinProvider" /> class.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ApplyProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.ApplyProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.ApplyProvider" /> class.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IHasNamedResult">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IHasNamedResult.Scope">
      <summary>
            Gets the scope of the result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.IHasNamedResult.Name">
      <summary>
            Gets the name of the saved result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.StoreProvider.Scope">
      <summary>
            Gets the scope of the result.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.StoreProvider.Name">
      <summary>
            Gets the name of the saved result.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SeekProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1">
      <summary>
            Fully transparent provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.GetService``1">
      <summary>
            Gets the service of the specified type <typeparamref name="T" />.
            Returns <see langword="null" />, if there is no such service.
            </summary>
      <typeparam name="T">The type of the service to get.</typeparam>
      <returns>The service of specified type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1.#ctor(`0,Xtensive.Storage.Rse.Providers.ExecutableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.TransparentProvider`1" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Executable.UnaryExecutableProvider`1.Source" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SkipProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.TakeProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.IListProvider">
      <summary>
            Returned as service (see <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.GetService``1" />) 
            by providers supporting random access to their items.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.IListProvider.GetItem(System.Int32)">
      <summary>
            Gets the item by its index.
            </summary>
      <param name="index">The index to get the item at.</param>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1">
      <summary>
            Executable provider that makes decision which real executable provider to use.
            </summary>
      <typeparam name="TOrigin">Compilable provider.</typeparam>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.BuildSubstitution">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Substitution" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.GetService``1">
      <summary>
            Gets the service of the specified type <typeparamref name="T" />.
            Returns <see langword="null" />, if there is no such service.
            </summary>
      <typeparam name="T">The type of the service to get.</typeparam>
      <returns>The service of specified type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.OnAfterEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumeration is finished.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.SubstitutingProvider`1.Substitution">
      <summary>
            Gets the real provider used by this class.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.ColumnGroupCollection">
      <summary>
            Read only collection of <see cref="T:Xtensive.Storage.Model.ColumnGroup" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnGroupCollection.GetGroupIndexBySegment(Xtensive.Core.Segment{System.Int32})">
      <summary>
            Gets the index of the group by provided <paramref name="segment" />.
            </summary>
      <param name="segment">Segment of record' columns.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnGroupCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Storage.Model.ColumnGroup})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.ColumnGroupCollection" /> class.
            </summary>
      <param name="items">The collection items.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnGroupCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.ColumnGroup" /> by specified group index.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnGroupCollection.Empty">
      <summary>
            Gets the empty <see cref="T:Xtensive.Storage.Rse.ColumnGroupCollection" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSetHeaderExtensions">
      <summary>
        <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> related extension methods.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeaderExtensions.IndexOf(Xtensive.Storage.Rse.RecordSetHeader,System.String)">
      <summary>
            Gets index of column with specified name.
            </summary>
      <param name="header">The header to search in.</param>
      <param name="columnName">Name of the column to get.</param>
      <returns>Index of the specified column.
            <see langword="-1" />, if there is no column with specified name.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeaderExtensions.GetRecordSetHeader(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object for the specified <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The index info to get the header for.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Log">
      <summary>
            Log for this namespace.
            </summary>
    </member>
    <member name="F:Xtensive.Storage.Rse.Log.Name">
      <summary>
            Gets the name of this log.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider">
      <summary>
            Builds an index over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> ordering 
            them by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.ReindexProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider">
      <summary>
            Enumerates specified array of <see cref="T:Xtensive.Core.Tuples.Tuple" /> instances.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{Xtensive.Core.Tuples.Tuple}}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" /> class.
            </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.#ctor(Xtensive.Storage.Rse.RecordSetHeader,System.Collections.Generic.IEnumerable{Xtensive.Core.Tuples.Tuple})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RawProvider" /> class.
            </summary>
      <param name="header">The <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property value.</param>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source">
      <summary>
            Raw data source - an array of tuples.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.CompiledSource">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RawProvider.Source" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider">
      <summary>
            Aliases the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> with specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="alias">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.AliasProvider.Alias">
      <summary>
            Alias of the result.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider">
      <summary>
            Gives access to the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Index" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Get(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider" /> for the specified <paramref name="index" />.
            </summary>
      <param name="index">The index to get the provider for.</param>
      <returns>Existing or newly created provider for the specified <paramref name="index" />.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.IndexProvider.Index">
      <summary>
            Reference to the <see cref="T:Xtensive.Storage.Model.IndexInfo" /> instance within the domain.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider">
      <summary>
            Produces equality join between <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Left" /> and 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.BinaryProvider.Right" /> sources.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.JoinType,Xtensive.Storage.Rse.JoinAlgorithm,Xtensive.Core.Pair{System.Int32}[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" /> class.
            </summary>
      <param name="left">The left provider to join.</param>
      <param name="right">The right provider to join.</param>
      <param name="joinType">The join operation type.</param>
      <param name="joinAlgorithm">The join algorithm.</param>
      <param name="equalIndexes">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes" /> property value.</param>
      <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.JoinType,Xtensive.Storage.Rse.JoinAlgorithm,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider" /> class.
            </summary>
      <param name="left">The left provider to join.</param>
      <param name="right">The right provider to join.</param>
      <param name="joinType">The join operation type.</param>
      <param name="joinAlgorithm">The join algorithm.</param>
      <param name="equalIndexes">Transformed to the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes" /> property value.</param>
      <exception cref="T:System.ArgumentException">Wrong arguments.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.JoinType">
      <summary>
            Join operation type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.JoinAlgorithm">
      <summary>
            Join algorithm.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualIndexes">
      <summary>
            Pairs of equal column indexes.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.JoinProvider.EqualColumns">
      <summary>
            Pairs of equal columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider">
      <summary>
            Gets the specified <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}}}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="range">The value for <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" /> function property.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range">
      <summary>
            Gets the range parameter.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.CompiledRange">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.RangeProvider.Range" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider">
      <summary>
            Compilable provider that declares select operator over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.BuildHeader">
      <summary>
            Builds the <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" />.
            This method is invoked just once on each provider.
            </summary>
      <returns>Newly created <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> to assign to <see cref="P:Xtensive.Storage.Rse.Providers.Provider.Header" /> property.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.CreateExpectedColumnsOrdering">
      <summary>
            Creates <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> describing the expected ordering of columns.
            </summary>
      <returns>Created <see cref="T:Xtensive.Core.Collections.DirectionCollection`1" /> to assign to 
            <see cref="P:Xtensive.Storage.Rse.Providers.CompilableProvider.ExpectedOrder" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider" /> class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.SelectProvider.ColumnIndexes">
      <summary>
            Indexes of columns that should be selected from the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider">
      <summary>
            Compilable provider that sorts the 
            <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> by <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SortProvider.Initialize">
      <summary>
            Performs initialization of the provider.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.SortProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.SortProvider" /> class.
            </summary>
      <param name="source">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" /> property value.</param>
      <param name="order">The <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.OrderProviderBase.Order" /> property value.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider">
      <summary>
            Compilable provider that declares filtering operation 
            over the <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.UnaryProvider.Source" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,System.Linq.Expressions.Expression{System.Func{Xtensive.Core.Tuples.Tuple,System.Boolean}})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider" /> class.
            </summary>
      <param name="source">The source provider.</param>
      <param name="predicate">The predicate.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.Predicate">
      <summary>
            Filtering predicate expression.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.CompiledPredicate">
      <summary>
            Gets the compiled <see cref="P:Xtensive.Storage.Rse.Providers.Compilable.FilterProvider.Predicate" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.FilterProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Storage.Model.IndexAttributes.Filtered" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="provider">Source executable provider.</param>
      <param name="typeIdColumn">Index of typeId column.</param>
      <param name="typeIds">Identifiers of descendants types.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.Count">
      <summary>
            Gets the number of elements contained in a collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.AsymmetricKeyCompare">
      <summary>
            Gets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.EntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.KeyComparer">
      <summary>
            Gets key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.FilterIndexProvider.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Storage.Model.IndexAttributes.Join" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.Compilable.IndexProvider,System.Int32,System.Collections.Generic.List{Xtensive.Core.Pair{System.Int32,System.Collections.Generic.List{System.Int32}}},Xtensive.Storage.Rse.Providers.ExecutableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="keyColumnsCount">Count of key columns.</param>
      <param name="root">Root index provider.</param>
      <param name="inheritors">Inheritor index providers.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.JoinIndexProvider.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider">
      <summary>
            General virtual <see cref="F:Xtensive.Storage.Model.IndexAttributes.Union" /> index provider for all indexing storage handlers.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider,Xtensive.Storage.Rse.Providers.ExecutableProvider[])">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider" /> class.
            </summary>
      <param name="origin">The <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider`1.Origin" /> property value.</param>
      <param name="sourceProviders">Providers of inheritor indexes.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.Count">
      <summary>
            Gets the number of elements contained in a collection.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.AsymmetricKeyCompare">
      <summary>
            Gets the delegate used to compare 
            <see cref="T:Xtensive.Indexing.Entire`1" /> for <typeparamref name="TKey" /> type and <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.EntireKeyComparer">
      <summary>
            Gets the <see cref="T:Xtensive.Indexing.Entire`1" /> comparer for <typeparamref name="TKey" /> type.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.KeyComparer">
      <summary>
            Gets key comparer.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.VirtualIndex.UnionIndexProvider.KeyExtractor">
      <summary>
            Gets key extractor associated with the index.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.OuterMergeJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.LoopJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.MergeJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.NestedLoopJoinProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.GetService``1">
      <summary>
            Gets the service of the specified type <typeparamref name="T" />.
            Returns <see langword="null" />, if there is no such service.
            </summary>
      <typeparam name="T">The type of the service to get.</typeparam>
      <returns>The service of specified type.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.ReindexProvider.Initialize">
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:Xtensive.Storage.Rse.Providers.ExecutableProvider.Origin" /> is null.</exception>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RawProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RawProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetKeys(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetItems(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetItems(Xtensive.Indexing.RangeSet{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumerating all the <see cref="T:Xtensive.Core.Tuples.Tuple" />s in the given range.
            </summary>
      <param name="range">A <see cref="T:Xtensive.Indexing.Range`1" /> to enumerate through.</param>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> for the range.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Seek(Xtensive.Indexing.Ray{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Seek(Xtensive.Core.Tuples.Tuple)">
      <summary>
            Seeks for the specified item in the ordered enumerable.
            </summary>
      <param name="ray">Item to locate.</param>
      <returns>Result of seek operation.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.CreateReader(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}})">
      <summary>
            Creates <see cref="T:Xtensive.Indexing.IIndexReader`2" /> object allowing to enumerate 
            the items in the specified <paramref name="range" />.
            </summary>
      <param name="range">The range to provide the reader for.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResult(System.String)">
      <summary>
            Gets the measurement for <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="name" />.
            </summary>
      <param name="name">The name of the measure.</param>
      <returns>The measurement result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResults(System.String[])">
      <summary>
            Gets the measurements for a set of <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="names" />.
            </summary>
      <param name="names">The names of measures to get.</param>
      <returns>The <see cref="T:System.Array" /> of measurement results for specified <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" />s.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResult(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}},System.String)">
      <summary>
            Gets the measurement result for <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="name" />.
            </summary>
      <param name="range">The range of <see cref="T:Xtensive.Core.Tuples.Tuple" />s.</param>
      <param name="name">The name of the measure.</param>
      <returns>The measurement result.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.GetMeasureResults(Xtensive.Indexing.Range{Xtensive.Indexing.Entire{Xtensive.Core.Tuples.Tuple}},System.String[])">
      <summary>
            Gets the measurement result for a set of <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" /> with the specified <paramref name="names" />.
            </summary>
      <param name="range">The range of <see cref="T:Xtensive.Core.Tuples.Tuple" />s.</param>
      <param name="names">The names of measures to get.</param>
      <returns>The <see cref="T:System.Array" /> of measurement results for specified <see cref="T:Xtensive.Indexing.Measures.IMeasure`2" />s.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.OnBeforeEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Called when enumerator is created on this provider.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.OnEnumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)">
      <summary>
            Gets the sequence this provider provides in the specified <see cref="T:Xtensive.Storage.Rse.Providers.EnumerationContext" />.
            Invoked by <see cref="M:Xtensive.Storage.Rse.Providers.ExecutableProvider.Enumerate(Xtensive.Storage.Rse.Providers.EnumerationContext)" /> method in case there is no cached result for the specified context.
            </summary>
      <param name="context">The enumeration context.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.ParametersToString">
      <summary>
            Gets the string representation of provider parameters 
            for the <see cref="M:Xtensive.Storage.Rse.Providers.Provider.ToString" /> method.    
            </summary>
      <returns>Provider parameters as a single line string.</returns>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.RangeProvider.Count">
      <summary>
            Gets the number of elements contained in a collection.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.MappedColumn">
      <summary>
            Mapped column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(System.String,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.MappedColumn" /> class.
            </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(Xtensive.Storage.Model.ColumnInfoRef,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.MappedColumn" /> class.
            </summary>
      <param name="columnInfoRef">
        <see cref="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.MappedColumn.#ctor(Xtensive.Storage.Model.ColumnInfoRef,System.String,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.MappedColumn" /> class.
            </summary>
      <param name="columnInfoRef">
        <see cref="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef" /> property value.</param>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.MappedColumn.ColumnInfoRef">
      <summary>
            Gets the reference that describes a column.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.ColumnCollection">
      <summary>
            Collection of <see cref="T:Xtensive.Storage.Rse.Column" /> items.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.Join(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Joins this collection with specified the column collection.
            </summary>
      <param name="joined">The joined.</param>
      <returns>The joined collection.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.Alias(System.String)">
      <summary>
            Aliases the specified <see cref="T:Xtensive.Storage.Rse.Column" /> collection.
            </summary>
      <param name="alias">The alias to add.</param>
      <returns>Aliased collection of columns.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.ColumnCollection.#ctor(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.ColumnCollection" /> class.
            </summary>
      <param name="collection">Collection of items to add.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.ColumnCollection.Item(System.String)">
      <summary>
            Gets <see cref="T:Xtensive.Storage.Rse.Column" /> by provided <paramref name="fullName" />.
            </summary>
      <remarks>
            Returns <see cref="T:Xtensive.Storage.Rse.Column" /> if it was found; otherwise <see langword="null" />.
            </remarks>
      <param name="fullName">Full name of the <see cref="T:Xtensive.Storage.Rse.Column" /> to find.</param>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSetHeader">
      <summary>
            Header of <see cref="T:Xtensive.Storage.Rse.RecordSet" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Alias(System.String)">
      <summary>
            Aliases the header.
            </summary>
      <param name="alias">The alias to apply.</param>
      <returns>Aliased header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Add(Xtensive.Storage.Rse.Column)">
      <summary>
            Adds the specified column to header.
            </summary>
      <param name="column">The column.</param>
      <returns>The constructed header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Add(System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Adds the specified columns to header.
            </summary>
      <param name="columns">The columns.</param>
      <returns>The constructed header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Join(Xtensive.Storage.Rse.RecordSetHeader)">
      <summary>
            Joins the header with the specified one.
            </summary>
      <param name="joined">The header to join.</param>
      <returns>The joined header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Select(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Selects the specified columns from the header.
            </summary>
      <param name="selectedColumns">The indexes of columns to select.</param>
      <returns>A new header containing only specified columns.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.Sort(Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Sorts the header in the specified order.
            </summary>
      <param name="sortOrder">Order to sort this header in.</param>
      <returns>A new sorted header.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.GetHeader(Xtensive.Storage.Model.IndexInfo)">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object for the specified <paramref name="indexInfo" />.
            </summary>
      <param name="indexInfo">The index info to get the header for.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> object.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Core.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> class.
            </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Core.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Storage.Model.ColumnGroup})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> class.
            </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="groups">Column groups.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Core.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},Xtensive.Core.Tuples.TupleDescriptor,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> class.
            </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
      <param name="order">Result sort order.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetHeader.#ctor(Xtensive.Core.Tuples.TupleDescriptor,System.Collections.Generic.IEnumerable{Xtensive.Storage.Rse.Column},System.Collections.Generic.IEnumerable{Xtensive.Storage.Model.ColumnGroup},Xtensive.Core.Tuples.TupleDescriptor,Xtensive.Core.Collections.DirectionCollection{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" /> class.
            </summary>
      <param name="tupleDescriptor">Descriptor of the result item.</param>
      <param name="columns">Result columns.</param>
      <param name="groups">Column groups.</param>
      <param name="orderKeyDescriptor">Descriptor of ordered columns.</param>
      <param name="order">Result sort order.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>columns.Count</c> is out of range.</exception>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Length">
      <summary>
            Gets the length of this instance.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.ColumnGroups">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> keys.
            </summary>
      <value>The keys.</value>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Columns">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> columns.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.TupleDescriptor">
      <summary>
            Gets the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> tuple descriptor.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.Order">
      <summary>
            Gets the indexes of columns <see cref="T:Xtensive.Storage.Rse.RecordSet" /> is ordered by.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSetHeader.OrderTupleDescriptor">
      <summary>
            Gets the tuple descriptor describing 
            a set of <see cref="P:Xtensive.Storage.Rse.RecordSetHeader.Order" /> columns.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.RecordSet">
      <summary>
            Provides access to a sequence of <see cref="T:Xtensive.Core.Tuples.Tuple" />s
            exposed by its <see cref="P:Xtensive.Storage.Rse.RecordSet.Provider" />, as well as wide
            range of extension methods (see <see cref="T:Xtensive.Storage.Rse.RecordSetExtensions" />)
            to operate with them.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.Load(Xtensive.Storage.Rse.RecordSetHeader,Xtensive.Storage.Rse.TemporaryDataScope,System.String)">
      <summary>
            Creates <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.StoreProvider" /> with specified <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />
            and name for saved context data .
            </summary>
      <param name="header">The result header.</param>
      <param name="scope">The result scope.</param>
      <param name="name">The result name.</param>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection.
                </summary>
      <returns>
                    A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
                </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.ToString">
      <summary>
                    Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
                </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSet.#ctor(Xtensive.Storage.Rse.Providers.CompilableProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.RecordSet" /> class.
            </summary>
      <param name="provider">
        <see cref="P:Xtensive.Storage.Rse.RecordSet.Provider" /> property value.</param>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSet.Header">
      <summary>
            Gets the header of the <see cref="T:Xtensive.Storage.Rse.RecordSet" />.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.RecordSet.Provider">
      <summary>
            Gets the provider this <see cref="T:Xtensive.Storage.Rse.RecordSet" /> is bound to.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetExtensions.Lock(Xtensive.Storage.Rse.RecordSet,Xtensive.Storage.Rse.LockMode,Xtensive.Storage.Rse.LockBehavior)">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="source">The source.</param>
      <param name="lockMode">The lock mode.</param>
      <param name="lockBehavior">The lock behavior.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> which is the result of 
            the created <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.RecordSetExtensions.Lock(Xtensive.Storage.Rse.RecordSet,System.Func{Xtensive.Storage.Rse.LockMode},System.Func{Xtensive.Storage.Rse.LockBehavior})">
      <summary>
            Creates the <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.
            </summary>
      <param name="source">The source.</param>
      <param name="lockMode">The delegate returning the lock mode.</param>
      <param name="lockBehavior">The delegate returning the lock behavior.</param>
      <returns>The <see cref="T:Xtensive.Storage.Rse.RecordSet" /> which is the result of 
            the created <see cref="T:Xtensive.Storage.Rse.Providers.Compilable.LockProvider" />.</returns>
    </member>
    <member name="T:Xtensive.Storage.Rse.Resources.Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExAggregateXIsNotSupportedForTypeY">
      <summary>
              Looks up a localized string similar to Aggregate '{0}' is not supported for type '{1}'.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExAtLeastOneColumnIndexPairMustBeSpecified">
      <summary>
              Looks up a localized string similar to At least one column index pair must be specified..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCanNotCompileNoCompiler">
      <summary>
              Looks up a localized string similar to Can't compile - active CompilationContext has no Compiler (Compiler is null)..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCanNotCompileNoEnumerationContext">
      <summary>
              Looks up a localized string similar to Can't compile - no active EnumerationContext exists..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantCompileProviderX">
      <summary>
              Looks up a localized string similar to Can't compile the provider '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantConvertXToY">
      <summary>
              Looks up a localized string similar to Can't convert the {0} to the {1}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCantOpenEnumerationScopeSinceThereIsNoCurrentCompilationContext">
      <summary>
              Looks up a localized string similar to Can't open EnumerationScope, since there is no current CompilationContext..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnGroupCouldNotBeFound">
      <summary>
              Looks up a localized string similar to Column group could not be found..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnsUsedByCalculatedColumnExpressionContainingApplyParameterAreRemoved">
      <summary>
              Looks up a localized string similar to Columns used by the CalculatedColumn's expression containing the ApplyParameter are removed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExColumnsUsedByPredicateContainingApplyParameterAreRemoved">
      <summary>
              Looks up a localized string similar to Columns used by the predicate containing ApplyParameter are removed..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExCurrentCompilerIsNotSuitableForThisOperationMostLikelyThereIsNoActiveSession">
      <summary>
              Looks up a localized string similar to Current compiler is not suitable for this operation, most likely there is no active Session..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExFilterTupleDescriptorMistmatchesWithSourceMappingDescriptor">
      <summary>
              Looks up a localized string similar to Filter tuple descriptor mistmatches with source mapping descriptor..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExInvalidFieldNameX">
      <summary>
              Looks up a localized string similar to Invalid field name '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustBeRoot">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must be the root expression..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustHaveXForm">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must have the '{0}' form..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExNormalizedExpressionMustNotBeRoot">
      <summary>
              Looks up a localized string similar to The normalized boolean expression must not be the root expression..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOnlySingleColumnKeySupported">
      <summary>
              Looks up a localized string similar to Only single-column key supported..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOrderingOfRecordsIsNotSpecifiedForRowNumberProvider">
      <summary>
              Looks up a localized string similar to The ordering of records is not specified for RowNumberProvider..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExOrderKeyNotFoundInMapping">
      <summary>
              Looks up a localized string similar to Order key not found in mapping..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExParameterXIsNotATupleAccessExpression">
      <summary>
              Looks up a localized string similar to Parameter '{0}' is not a tuple access expression.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExPredicateContainsAccessesToDifferentApplyParameters">
      <summary>
              Looks up a localized string similar to Predicate contains accesses to different ApplyParameters..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExProviderMustBeEitherCompilableProviderOrExecutableProvider">
      <summary>
              Looks up a localized string similar to Provider must be either CompilableProvider or ExecutableProvider.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExSelectProviderRemovesColumnsUsedForOrdering">
      <summary>
              Looks up a localized string similar to The SelectProvider removes columns used for an ordering..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExSequenceContainsMoreThanOneElement">
      <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExTypeOfExpressionReturnValueIsNotX">
      <summary>
              Looks up a localized string similar to The type of the expression's return value is not '{0}'..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExUnableToInitializeJoinIndexProviderColumnsCountMismatch">
      <summary>
              Looks up a localized string similar to Unable to initialize JoinIndexProvider. Columns count mismatch..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExValueIsAlreadyAssigned">
      <summary>
              Looks up a localized string similar to Value is already assigned.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExValueOfParameterWCantBeXIfValueOfParameterYIsZ">
      <summary>
              Looks up a localized string similar to The value of the parameter {0} can't be {1}, if the value of the parameter {2} is {3}..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExXCantBeExecuted">
      <summary>
              Looks up a localized string similar to {0} can't be executed on specified sources..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.ExXMustBeActive">
      <summary>
              Looks up a localized string similar to '{0}' must be active..
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.NotAvailable">
      <summary>
              Looks up a localized string similar to n/a.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Resources.Strings.RowNumberX">
      <summary>
              Looks up a localized string similar to RowNumber{0}.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData">
      <summary>
            Transaction transaction-level temporary data context.
            </summary>
    </member>
    <member name="P:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData.Current">
      <summary>
            Gets the current <see cref="T:Xtensive.Storage.Rse.Providers.Executable.TransactionTemporaryData" /> instance.
            </summary>
    </member>
    <member name="T:Xtensive.Storage.Rse.SystemColumn">
      <summary>
            System column of the <see cref="T:Xtensive.Storage.Rse.RecordSetHeader" />.
            </summary>
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.Clone(System.Int32)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.Clone(System.String)">
      <summary>
            Creates clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.
            </summary>
      <param name="newIndex">The new index value.</param>
      <returns>Clone of the column, but with another <see cref="P:Xtensive.Storage.Rse.Column.Index" />.</returns>
    </member>
    <member name="M:Xtensive.Storage.Rse.SystemColumn.#ctor(System.String,System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Rse.SystemColumn" /> class.
            </summary>
      <param name="name">
        <see cref="P:Xtensive.Storage.Rse.Column.Name" /> property value.</param>
      <param name="index">
        <see cref="P:Xtensive.Storage.Rse.Column.Index" /> property value.</param>
      <param name="type">
        <see cref="P:Xtensive.Storage.Rse.Column.Type" /> property value.</param>
    </member>
  </members>
</doc>