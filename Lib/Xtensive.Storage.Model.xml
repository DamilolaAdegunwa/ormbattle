<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xtensive.Storage.Model</name>
    </assembly>
    <members>
        <member name="T:Xtensive.Storage.Model.AssociationInfo">
            <summary>
            Describes single association.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Node">
             <summary>
            An abstract base class for model node.
             </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.ValidateName(System.String)">
            <summary>
            Performs additional custom processes before setting new name to this instance.
            </summary>
            <param name="newName">The new name of this instance.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.UpdateState(System.Boolean)">
            <summary>
            Updates the internal state of this instance.
            </summary>
            <param name="recursive"><see langword="True"/> if all dependent objects should be updated as well.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.UpdateState">
            <summary>
            Updates the internal state of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.Node"/> class.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.Node"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Node.Name">
            <summary>
            Gets the name of this instance.
            </summary>
        </member>
        <member name="E:Xtensive.Storage.Model.Node.Changing">
            <inheritdoc/>
        </member>
        <member name="E:Xtensive.Storage.Model.Node.Changed">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.AssociationInfo.ExtractForeignKey(Xtensive.Core.Tuples.Tuple)">
            <summary>
            Extracts the foreign key from the specified <see cref="T:Xtensive.Core.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The tuple.</param>
            <returns><see cref="T:Xtensive.Core.Tuples.Tuple"/> instance with the extracted foreign key.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.AssociationInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.AssociationInfo.#ctor(Xtensive.Storage.Model.FieldInfo,Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.Multiplicity,System.Nullable{Xtensive.Storage.OnRemoveAction},System.Nullable{Xtensive.Storage.OnRemoveAction})">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="ownerField">The referencing field.</param>
            <param name="targetType">The referenced type.</param>
            <param name="multiplicity">The association multiplicity.</param>
            <param name="onTargetRemove">The <see cref="T:Xtensive.Storage.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType"/> object removal.</param>
            <param name="onOwnerRemove">The <see cref="T:Xtensive.Storage.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerType"/> object removal.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.OwnerType">
            <summary>
            Gets the owner type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.OwnerField">
            <summary>
            Gets the owner field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.AuxiliaryType">
            <summary>
            Gets the auxiliary persistent type that represents this association.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.UnderlyingIndex">
            <summary>
            Gets the underlying index for this instance.
            </summary>
            <value>The underlying index.</value>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.IsMaster">
            <summary>
            Gets a value indicating whether this instance is master association.
            </summary>
            <value>
            <see langword="true"/> if this instance is master association; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.IsPaired">
            <summary>
            Gets a value indicating whether this instance is paired.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.IsLoop">
            <summary>
            Gets a value indicating whether this instance represents a loop.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.Master">
            <summary>
            Gets master association.
            </summary>
            <remarks>
            If association is master, returns it. Otherwise returns paired association.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Unable to find master association.</exception>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.Multiplicity">
            <summary>
            Gets the association multiplicity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.Reversed">
            <summary>
            Gets or sets the reversed paired <see cref="T:Xtensive.Storage.Model.AssociationInfo"/> for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.OnTargetRemove">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType"/> object removal.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.AssociationInfo.OnOwnerRemove">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.OnRemoveAction"/> that will be applied on <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerType"/> object removal.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.NodeCollection`1">
            <summary>
            A base class for collection of nodes in model.
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
        </member>
        <member name="F:Xtensive.Storage.Model.NodeCollection`1.Empty">
            <summary>
            Gets empty collection.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.Add(`0)">
            <summary>
            Adds new element to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.InvalidOperationException">Item already exists.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.Contains(System.String)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value"><typeparamref name="TNode"/> if it was found; otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if value is found by specified <paramref name="key"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.NodeCollection`1.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.NodeCollection`1.Item(System.String)">
            <summary>
            An indexer that provides access to collection items.
            Returns <see langword="default(TNode)"/> if there is no such item.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.AssociationInfoCollection.Find(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Storage.Model.TypeInfo"/>.
            </summary>
            <param name="type"><see cref="T:Xtensive.Storage.Model.TypeInfo"/> to find associations for.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Model.AssociationInfoCollection.Find(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the associations for the specified <see cref="T:Xtensive.Storage.Model.TypeInfo"/>.
            </summary>
            <param name="type"><see cref="T:Xtensive.Storage.Model.TypeInfo"/> to find outgoing associations for.</param>
            <param name="target">if set to <see langword="true"/> then only target associations will be returned; otherwise only owner associations.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Storage.Model.ColumnGroup">
            <summary>
            Describes a group of columns that belongs to the specified <see cref="P:Xtensive.Storage.Model.ColumnGroup.HierarchyInfoRef"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnGroup.#ctor(Xtensive.Storage.Model.HierarchyInfoRef,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnGroup.#ctor(Xtensive.Storage.Model.HierarchyInfoRef,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <param name="keys">The keys.</param>
            <param name="columns">The columns.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnGroup.HierarchyInfoRef">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.HierarchyInfoRef"/> pointing to <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/>
            this column group belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnGroup.Keys">
            <summary>
            Gets the indexes of key columns.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnGroup.Columns">
            <summary>
            Gets the indexes of all columns.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.GetComparer(System.Globalization.CultureInfo)">
            <summary>
            Gets the <see cref="T:System.Collections.IComparer"/> instance.
            </summary>
            <param name="cultureInfo">The <see cref="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo"/> object.</param>
            <returns>The instance in <see cref="T:System.Collections.IComparer"/> to compare values of type <see cref="P:Xtensive.Storage.Model.ColumnInfo.ValueType"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.Equals(Xtensive.Storage.Model.ColumnInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="field">The <see cref="P:Xtensive.Storage.Model.ColumnInfo.Field"/> property value.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfo.#ctor(Xtensive.Storage.Model.FieldInfo,System.Type)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="field"><see cref="P:Xtensive.Storage.Model.ColumnInfo.Field"/> property value.</param>
            <param name="valueType"><see cref="P:Xtensive.Storage.Model.ColumnInfo.ValueType"/> property value.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsSystem">
            <summary>
            Gets or sets a value indicating whether this column is system.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsDeclared">
            <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsInherited">
            <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this column is contained by primary key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether column is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether  property will be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Field">
            <summary>
            Gets or sets corresponding field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Length">
            <summary>
            Gets or sets the length of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Scale">
            <summary>
            Gets or sets the scale of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Precision">
            <summary>
            Gets or sets the precision of the column.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.ValueType">
            <summary>
            Specifies the type that should be used to store the
            value of the field (available for properties that can be mapped
            to multiple data types).
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo">
            <summary>
            Gets or sets column <see cref="P:Xtensive.Storage.Model.ColumnInfo.CultureInfo"/> info.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfo.Indexes">
            <summary>
            Gets or the indexes this field is included to.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.ColumnInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Implicit(Xtensive.Storage.Model.ColumnInfo)~Xtensive.Storage.Model.ColumnInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Inequality(Xtensive.Storage.Model.ColumnInfoRef,Xtensive.Storage.Model.ColumnInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.op_Equality(Xtensive.Storage.Model.ColumnInfoRef,Xtensive.Storage.Model.ColumnInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Equals(Xtensive.Storage.Model.ColumnInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.#ctor(Xtensive.Storage.Model.ColumnInfo)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="columnInfo">The <see cref="T:Xtensive.Storage.Model.ColumnInfo"/> instance.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.ColumnInfoRef.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="typeName">Column type name.</param>
            <param name="columnName">Column name.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfoRef.TypeName">
            <summary>
            Gets type name of reflecting <see cref="T:Xtensive.Storage.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfoRef.FieldName">
            <summary>
            Gets name of the <see cref="T:Xtensive.Storage.Model.FieldInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfoRef.ColumnName">
            <summary>
            Gets name of the <see cref="T:Xtensive.Storage.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.ColumnInfoRef.CultureInfo">
            <summary>
            Gets <see cref="P:Xtensive.Storage.Model.ColumnInfoRef.CultureInfo"/> info of the <see cref="T:Xtensive.Storage.Model.ColumnInfo"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.ComparerProvider">
            <summary>
            Provides comparers for primitive types and strings.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.ComparerProvider.GetComparer(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Gets the comparer according to type and culture.
            </summary>
            <param name="type">The type.</param>
            <param name="cultureInfo">The culture info.</param>
            <returns></returns>
        </member>
        <member name="T:Xtensive.Storage.Model.DomainModelExtensions">
            <summary>
            Extension methods related to <see cref="T:Xtensive.Storage.Model.DomainModel"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.DomainModelExtensions.ToStoredModel(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Converts speicified <see cref="T:Xtensive.Storage.Model.DomainModel"/> to corresponding <see cref="T:Xtensive.Storage.Model.Stored.StoredDomainModel"/>.
            </summary>
            <param name="model">The model to convert.</param>
            <returns>A result of conversion.</returns>
        </member>
        <member name="T:Xtensive.Storage.Model.MappingNode">
            <summary>
            A <see cref="T:Xtensive.Storage.Model.Node"/> that can be mapped to existing schema node.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.MappingNode.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.MappingNode.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.MappingNode.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The name of this instance.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.MappingNode.MappingName">
            <summary>
            Gets or sets mapping name of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.ExtractValue(Xtensive.Core.Tuples.Tuple)">
            <summary>
            Extracts the field value from the specified <see cref="T:Xtensive.Core.Tuples.Tuple"/>.
            </summary>
            <param name="tuple">The tuple to extract value from.</param>
            <returns><see cref="T:Xtensive.Core.Tuples.Tuple"/> instance with the extracted value.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.ExtractColumns">
            <summary>
            Extracts field columns recursive.
            </summary>
            <returns>List of <see cref="T:Xtensive.Storage.Model.ColumnInfo"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.Equals(Xtensive.Storage.Model.FieldInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.FieldAttributes)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsSystem">
            <summary>
            Gets a value indicating whether this property is system.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsTypeId">
            <summary>
            Gets a value indicating whether this property contains Type identifier.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsDeclared">
            <summary>
            Gets or sets a value indicating whether this instance is declared in <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsEnum">
            <summary>
            Gets a value indicating whether this property is enum.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsInherited">
            <summary>
            Gets or sets a value indicating whether this instance is inherited from parent <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsPrimaryKey">
            <summary>
            Gets a value indicating whether this property is contained by primary key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsNested">
            <summary>
            Gets a value indicating whether this property is nested.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsExplicit">
            <summary>
            Gets a value indicating whether this property explicitly implemented.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsInterfaceImplementation">
            <summary>
            Gets a value indicating whether this property implements property of one or more interfaces.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsPrimitive">
            <summary>
            Gets a value indicating whether this property is primitive field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsEntity">
            <summary>
            Gets a value indicating whether this property is reference to Entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsStructure">
            <summary>
            Gets a value indicating whether this property is structure field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsEntitySet">
            <summary>
            Gets a value indicating whether this property is reference to EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether property is nullable.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.IsLazyLoad">
            <summary>
            Gets or sets a value indicating whether property will be loaded on demand.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.OriginalName">
            <summary>
            Gets or sets original name of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.ValueType">
            <summary>
            Gets or sets the type of the value of this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.ItemType">
            <summary>
            Gets or sets the item type for field that describes the EntitySet.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Length">
            <summary>
            Gets or sets the maximal length of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Scale">
            <summary>
            Gets or sets the scale of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Precision">
            <summary>
            Gets or sets the precision of the field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.MappingInfo">
            <summary>
            Gets <see cref="P:Xtensive.Storage.Model.FieldInfo.MappingInfo"/> for current field.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.UnderlyingProperty">
            <summary>
            Gets the underlying system property.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Parent">
            <summary>
            Gets or sets the parent field for nested fields.
            </summary>
            <remarks>
            For not nested fields return value is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.ReflectedType">
            <summary>
            Gets the type that was used to obtain this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.DeclaringType">
            <summary>
            Gets the type where the field is declared.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Fields">
            <summary>
            Gets the nested fields.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Column">
            <summary>
            Gets or sets the column associated with this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.Association">
            <summary>
            Gets or sets the field association.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.CultureInfo">
            <summary>
            Gets or sets field <see cref="P:Xtensive.Storage.Model.FieldInfo.CultureInfo"/> info.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.FieldInfo.AdapterIndex">
            <summary>
            Gets or sets field's adapter index.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfoCollection.Find(Xtensive.Storage.Model.FieldAttributes)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfoCollection.Find(Xtensive.Storage.Model.FieldAttributes,Xtensive.Core.MatchType)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.FieldInfoCollection.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.GeneratorInfo.#ctor(System.Type,Xtensive.Storage.Model.KeyInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="type">The type.</param>
            <param name="keyInfo">The key info.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.GeneratorInfo.CacheSize">
            <summary>
            Gets or sets the size of the generator cache.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.GeneratorInfo.KeyInfo">
            <summary>
            Gets the <see cref="P:Xtensive.Storage.Model.GeneratorInfo.KeyInfo"/> property for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.GeneratorInfo.KeyGeneratorType">
            <summary>
            Gets the type instance of which is responsible for key generation.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.GeneratorInfo.TupleDescriptor">
            <summary>
            Gets or sets the tuple descriptor for key.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.InheritanceSchema,Xtensive.Storage.Model.KeyInfo,Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="root">The hierarchy root.</param>
            <param name="schema">The schema.</param>
            <param name="keyInfo">The key info.</param>
            <param name="generatorInfo">The generator info.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfo.Root">
            <summary>
            Gets the root of the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfo.Schema">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.InheritanceSchema"/> for this hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfo.Types">
            <summary>
            Gets the types of the current <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfo.KeyInfo">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Storage.Model.HierarchyInfo.KeyInfo"/> property for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfo.GeneratorInfo">
            <summary>
            Gets or sets the <see cref="P:Xtensive.Storage.Model.HierarchyInfo.GeneratorInfo"/> property for this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.HierarchyInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.op_Implicit(Xtensive.Storage.Model.HierarchyInfo)~Xtensive.Storage.Model.HierarchyInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.op_Inequality(Xtensive.Storage.Model.HierarchyInfoRef,Xtensive.Storage.Model.HierarchyInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.op_Equality(Xtensive.Storage.Model.HierarchyInfoRef,Xtensive.Storage.Model.HierarchyInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.Equals(Xtensive.Storage.Model.HierarchyInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.HierarchyInfoRef.#ctor(Xtensive.Storage.Model.HierarchyInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="hierarchyInfo"><see cref="T:Xtensive.Storage.Model.HierarchyInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.HierarchyInfoRef.TypeName">
            <summary>
            Name of the base type in the hierarchy.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.IndexInfo">
            <summary>
            Describes a single index in terms of storage.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.GetDefaultFetchColumnsIndexes">
            <summary>
            Gets the default fetch columns indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.GetKeyFetchColumnsIndexes">
            <summary>
            Gets the key fetch columns indexes.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexAttributes)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="declaringType">The <see cref="T:Xtensive.Storage.Model.TypeInfo"/> that declares this instance.</param>
            <param name="indexAttributes"><see cref="T:Xtensive.Storage.Model.IndexAttributes"/> attributes for this instance.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexInfo,System.Boolean)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="reflectedType">Reflected type.</param>
            <param name="ancestorIndex">The ancestors index.</param>
            <param name="isAbstract">If set to <see langword="true"/> then 
            the flag <see cref="F:Xtensive.Storage.Model.IndexAttributes.Abstract"/> will be added to 
            the property <see cref="P:Xtensive.Storage.Model.IndexInfo.Attributes"/>.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfo.#ctor(Xtensive.Storage.Model.TypeInfo,Xtensive.Storage.Model.IndexAttributes,Xtensive.Storage.Model.IndexInfo,Xtensive.Storage.Model.IndexInfo[])">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="reflectedType">Reflected type.</param>
            <param name="indexAttributes">The index attributes.</param>
            <param name="baseIndex">Base index.</param>
            <param name="baseIndexes">The base indexes.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.Columns">
            <summary>
            Gets a collection of all the columns that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.KeyColumns">
            <summary>
            Gets a collection of columns that are included into the index as index key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.ValueColumns">
            <summary>
            Gets a collection of non key columns that are included into the index as index value.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.IncludedColumns">
            <summary>
            Gets a Collection of columns that are included into the index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor containing all the <see cref="P:Xtensive.Storage.Model.IndexInfo.Columns"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.KeyTupleDescriptor">
            <summary>
            Gets the tuple descriptor containing just <see cref="P:Xtensive.Storage.Model.IndexInfo.KeyColumns"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.UnderlyingIndexes">
            <summary>
            Gets the underlying indexes for this instance. 
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.DeclaringType">
            <summary>
            Gets the type that declares this member.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.ReflectedType">
            <summary>
            Gets the type that was used to obtain this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.DeclaringIndex">
            <summary>
            Gets the declaring index for this index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this instance is primary index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.IsUnique">
            <summary>
            Gets or sets a value indicating whether this instance is unique index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.IsVirtual">
            <summary>
            Gets or sets a value indicating whether this instance is virtual index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfo.IsSecondary">
            <summary>
            Gets a value indicating whether this instance is secondary index.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.IndexInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.IndexInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.IndexInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Implicit(Xtensive.Storage.Model.IndexInfo)~Xtensive.Storage.Model.IndexInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.IndexInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.Equals(Xtensive.Storage.Model.IndexInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Equality(Xtensive.Storage.Model.IndexInfoRef,Xtensive.Storage.Model.IndexInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.op_Inequality(Xtensive.Storage.Model.IndexInfoRef,Xtensive.Storage.Model.IndexInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.IndexInfoRef.#ctor(Xtensive.Storage.Model.IndexInfo)">
            <summary>
              <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="indexInfo"><see cref="T:Xtensive.Storage.Model.IndexInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfoRef.IndexName">
            <summary>
            Name of the index.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.IndexInfoRef.TypeName">
            <summary>
            Name of the reflecting type.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.InheritanceSchema">
            <summary>
            Enumerates all supported 'class to tables mapping' schemes.
            </summary>
            <remarks>See M.Fowler - "Patterns of Enterprise Application Architecture".</remarks>
        </member>
        <member name="F:Xtensive.Storage.Model.InheritanceSchema.Default">
            <summary>
            Is equal to <see cref="F:Xtensive.Storage.Model.InheritanceSchema.ClassTable"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.InheritanceSchema.ClassTable">
            <summary>
            One table per class in the inheritance structure. Inherited properties are stored in the parent class.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.InheritanceSchema.SingleTable">
            <summary>
            Maps all fields of all classes of an inheritance structure into a single table.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.InheritanceSchema.ConcreteTable">
            <summary>
            One table for each concrete class in the inheritance hierarchy. 
            Inherited properties are duplicated in the descendant tables.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyInfo.#ctor">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.Fields">
            <summary>
            Gets the fields that are included in the key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.Columns">
            <summary>
            Gets the columns that are included in the key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.TypeIdFieldIndex">
            <summary>
            Gets the index of the field with <see cref="P:Xtensive.Storage.Model.FieldInfo.IsTypeId"/>==<see langword="true"/>.
            If there is no such field, returns <see langword="-1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.TypeIdColumnIndex">
            <summary>
            Gets the index of the column related to field with <see cref="P:Xtensive.Storage.Model.FieldInfo.IsTypeId"/>==<see langword="true"/>.
            If there is no such field, returns <see langword="-1"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.Length">
            <summary>
            Gets the length of the key.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor of the key.
            </summary>
            <value></value>
        </member>
        <member name="T:Xtensive.Storage.Model.ModelVisitor`1">
            <summary>
            An abstract base class for all <see cref="T:Xtensive.Storage.Model.DomainModel"/> visitors.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.Visit(Xtensive.Storage.Model.Node)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>Visit result.</returns>
            <exception cref="T:System.ArgumentException">Node type is unknown.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitKeyField(Xtensive.Storage.Model.KeyField)">
            <summary>
            Visits key field.
            </summary>
            <param name="keyField">The key field.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitColumnInfo(Xtensive.Storage.Model.ColumnInfo)">
            <summary>
            Visits a column.
            </summary>
            <param name="column">The column.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitFieldInfo(Xtensive.Storage.Model.FieldInfo)">
            <summary>
            Visits a field.
            </summary>
            <param name="field">The field.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitKeyInfo(Xtensive.Storage.Model.KeyInfo)">
            <summary>
            Visits a key.
            </summary>
            <param name="key">The key.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitIndexInfo(Xtensive.Storage.Model.IndexInfo)">
            <summary>
            Visits an index.
            </summary>
            <param name="index">The index.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitHierarchyInfo(Xtensive.Storage.Model.HierarchyInfo)">
            <summary>
            Visits a hierarchy.
            </summary>
            <param name="hierarchy">The hierarchy.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitTypeInfo(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Visits a type.
            </summary>
            <param name="type">The type.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitAssociationInfo(Xtensive.Storage.Model.AssociationInfo)">
            <summary>
            Visits an association.
            </summary>
            <param name="association">The association.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitGeneratorInfo(Xtensive.Storage.Model.GeneratorInfo)">
            <summary>
            Visits a generator.
            </summary>
            <param name="generator">The generator.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.ModelVisitor`1.VisitDomainModel(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Visits domain model.
            </summary>
            <param name="domainModel">The domain model.</param>
            <returns>Visit result.</returns>
        </member>
        <member name="T:Xtensive.Storage.OnRemoveAction">
            <summary>
            Defines actions that can be taken to preserve referential integrity.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.OnRemoveAction.Default">
            <summary>
            The same as <see cref="F:Xtensive.Storage.OnRemoveAction.Deny"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.OnRemoveAction.Deny">
            <summary>
            Indicates that exception will be thrown in case that removing object 
            is referenced by other object.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.OnRemoveAction.Cascade">
            <summary>
            Indicates that delete cascading operation will be taken on objects 
            that are referenced by removing object.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.OnRemoveAction.Clear">
            <summary>
            Indicates that <see langword="null"/> value will be assigned 
            to corresponding reference fields of referencing object
            or the whole item that is used in n-ry relations will be removed.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredAssociationInfo">
            <summary>
            An xml serializable representation of <see cref="T:Xtensive.Storage.Model.AssociationInfo"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredNode">
            <summary>
            A xml serializable representation of <see cref="F:Xtensive.Storage.Model.Stored.StoredNode.MappingName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredNode.Name">
            <summary>
            <see cref="P:Xtensive.Storage.Model.Node.Name"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredNode.MappingName">
            <summary>
            <see cref="P:Xtensive.Storage.Model.MappingNode.MappingName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingField">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.OwnerField"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingFieldName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencingField"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.TargetType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedTypeName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReferencedType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Multiplicity">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.Multiplicity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.MultiplicityName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Multiplicity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Reversed">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.Reversed"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ReversedName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.Reversed"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.IsMaster">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.IsMaster"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.AssociationInfo.AuxiliaryType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorTypeName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredAssociationInfo.ConnectorType"/>
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredDomainModel">
            <summary>
            An xml serializable representation of <see cref="T:Xtensive.Storage.Model.DomainModel"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Types">
            <summary>
            <see cref="P:Xtensive.Storage.Model.DomainModel.Types"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Associations">
            <summary>
            <see cref="P:Xtensive.Storage.Model.DomainModel.Associations"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredDomainModel.Hierarchies">
            <summary>
            <see cref="P:Xtensive.Storage.Model.DomainModel.Hierarchies"/>
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.Stored.StoredDomainModel.UpdateReferences">
            <summary>
            Updates all references within this model.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredFieldInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.FieldInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.DeclaringType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.DeclaringType"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.PropertyName">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.UnderlyingProperty"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.OriginalName">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.OriginalName"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.ValueType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.ValueType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Parent">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.Parent"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Fields">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.Fields"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.Length">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.Length"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.ItemType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.ItemType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsSystem">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsSystem"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsTypeId">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsTypeId"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEnum">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEnum"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsPrimaryKey">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsPrimaryKey"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsExplicit">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsExplicit"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsInterfaceImplementation">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsInterfaceImplementation"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsPrimitive">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsPrimitive"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEntity">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEntity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsStructure">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsStructure"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsEntitySet">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsEntitySet"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsNullable">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsNullable"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsLazyLoad">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsLazyLoad"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Stored.StoredFieldInfo.IsNested">
            <summary>
            <see cref="P:Xtensive.Storage.Model.FieldInfo.IsNested"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredHierarchyInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.HierarchyInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.Root">
            <summary>
            <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Root"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.Schema">
            <summary>
            <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Schema"/>
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredHierarchyInfo.Types">
            <summary>
            <see cref="P:Xtensive.Storage.Model.HierarchyInfo.Types"/>.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Stored.StoredTypeInfo">
            <summary>
            A xml serializable representation of <see cref="T:Xtensive.Storage.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.UnderlyingType">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.UnderlyingType"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.TypeId">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.HierarchyRoot">
            <summary>
            If is not <see langword="null"/> declares this instance as hierarchy root
            and value of this property speicifes <see cref="T:Xtensive.Storage.Model.InheritanceSchema"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Hierarchy">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.Hierarchy"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Fields">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.Fields"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllFields">
            <summary>
            Contains all fields inherited by this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>
            plus all fields in declared in this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Associations">
            <summary>
            Associations outgoing from this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Ancestor">
            <summary>
            Gets the ancestors of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AncestorName">
            <summary>
            Name of <see cref="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Ancestor"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllAncestors">
            <summary>
            Gets both direct and indirect ancestors of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.Descendants">
            <summary>
            Gets direct descendants of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.AllDescendants">
            <summary>
            Gets both direct and indirect descendants of this <see cref="T:Xtensive.Storage.Model.Stored.StoredTypeInfo"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsEntity">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.IsEntity"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsAbstract">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.IsAbstract"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsInterface">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.IsInterface"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsStructure">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.IsStructure"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsSystem">
            <summary>
            <see cref="P:Xtensive.Storage.Model.TypeInfo.IsSystem"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.Stored.StoredTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.GenericDefinitionTypeName">
            <summary>
            Gets the name of the generic definition type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.GenericArgumentTypeName">
            <summary>
            Gets the name of the generic argument type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsHierarchyRoot">
            <summary>
            Gets a value indicating whether this instance is hierarchy root.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Stored.StoredTypeInfo.IsGeneric">
            <summary>
            Gets a value indicating whether underlying type is generic.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeIndexInfoCollection.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeIndexInfoCollection.GetIndexesContainingAllData">
            <summary>
            Gets the minimal set of indexes containing all data for the type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeIndexInfoCollection.PrimaryIndex">
            <summary>
            Gets the primary index in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeIndexInfoCollection.RealPrimaryIndexes">
            <summary>
            Gets the list of real primary index in this instance.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.KeyField">
            <summary>
            Describes a field that is a part of a primary key.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyField.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyField.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyField.#ctor(System.String)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.KeyField.#ctor(System.String,Xtensive.Core.Direction)">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.KeyField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.KeyField.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Log">
            <summary>
            Log for this namespace.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.Log.Name">
            <summary>
            Gets the name of this log.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExComparerForTypeIsNotAvailable">
            <summary>
              Looks up a localized string similar to Comparer for type &apos;{0}&apos; is not available..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExCouldNotResolveXYWithinDomain">
            <summary>
              Looks up a localized string similar to Could not resolve {0} &apos;{1}&apos; within the domain..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExItemWithKeyXWasNotFound">
            <summary>
              Looks up a localized string similar to Item with key &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExKeyContainsMultipleFieldsWithIsTypeIdTrueFlag">
            <summary>
              Looks up a localized string similar to Key contains multiple fields with IsTypeId==true flag..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExNodeTypeIsUnknown">
            <summary>
              Looks up a localized string similar to Node type is unknown..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExTypeIdIsNotAssignedForTypeX">
            <summary>
              Looks up a localized string similar to TypeId is not assigned for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ExUnableToFindMasterAssociation">
            <summary>
              Looks up a localized string similar to Unable to find master association of association &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.ItemWithNameXAlreadyExists">
            <summary>
              Looks up a localized string similar to Item with name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.NodeFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeIdForTypeXIsAlreadyAssigned">
            <summary>
              Looks up a localized string similar to TypeId for type {0} is already assigned..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeIdXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type with TypeId={0} is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.TypeXIsNotRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not registered..
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.Resources.Strings.UnnamedNodeDisplayName">
            <summary>
              Looks up a localized string similar to &lt;Unnamed&gt;.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.DomainModel">
            <summary>
            Represents a model of <see cref="N:Xtensive.Storage"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.DomainModel.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.DomainModel.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.DomainModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xtensive.Storage.Model.DomainModel"/> class.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.DomainModel.Types">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instances contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.DomainModel.RealIndexes">
            <summary>
            Gets real indexes contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.DomainModel.Hierarchies">
            <summary>
            Gets the hierarchies.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.DomainModel.Associations">
            <summary>
            Gets or sets the associations.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.DomainModel.Generators">
            <summary>
            Gets or sets the generators.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.TypeInfo">
            <summary>
            Represents an object describing any persistent type.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.TypeInfo.NoTypeId">
            <summary>
            "No <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId"/>" value (<see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId"/> is unknown or undefined).
            Value is <see langword="0"/>.
            </summary>
        </member>
        <member name="F:Xtensive.Storage.Model.TypeInfo.MinTypeId">
            <summary>
            Minimal possible <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId"/> value.
            Value is <see langword="100"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.CreateEntityTuple(Xtensive.Core.Tuples.Tuple)">
            <summary>
            Creates the tuple prototype with specified <paramref name="primaryKey"/>.
            </summary>
            <param name="primaryKey">The primary key to use.</param>
            <returns>
            The <see cref="P:Xtensive.Storage.Model.TypeInfo.TuplePrototype"/> with "injected"
            (see <see cref="F:Xtensive.Storage.Model.TypeInfo.primaryKeyInjector"/>) <paramref name="primaryKey"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetDescendants">
            <summary>
            Gets the direct descendants of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetDescendants(System.Boolean)">
            <summary>
            Gets descendants of this instance.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested descendants will be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetInterfaces">
            <summary>
            Gets the direct persistent interfaces this instance implements.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetInterfaces(System.Boolean)">
            <summary>
            Gets the persistent interfaces this instance implements.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implemented interfaces will be returned.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetImplementors">
            <summary>
            Gets the direct implementors of this instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetImplementors(System.Boolean)">
            <summary>
            Gets the direct implementors of this instance.
            </summary>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implementors will be returned.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetAncestor">
            <summary>
            Gets the ancestor.
            </summary>
            <returns>The ancestor</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetAncestors">
            <summary>
            Gets the ancestors recursively. Root-to-inheritor order.
            </summary>
            <returns>The ancestor</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetRoot">
            <summary>
            Gets the root of the hierarchy.
            </summary>
            <returns>The hierarchy root.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetTargetAssociations">
            <summary>
            Gets the associations this instance is participating in as target (it is referenced by other entities).
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetOwnerAssociations">
            <summary>
            Gets the associations this instance is participating in as owner (it has references to other entities).
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.GetRemovalAssociationSequence">
            <summary>
            Gets the association sequence for entity removal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.UpdateState(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.Lock(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfo.#ctor(Xtensive.Storage.Model.DomainModel,Xtensive.Storage.Model.TypeAttributes)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="model">The model.</param>
            <param name="typeAttributes">The type attributes.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsEntity">
            <summary>
            Gets a value indicating whether this instance is entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsAbstract">
            <summary>
            Gets a value indicating whether this instance is abstract entity.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsInterface">
            <summary>
            Gets a value indicating whether this instance is interface.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsStructure">
            <summary>
            Gets a value indicating whether this instance is structure.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsSystem">
            <summary>
            Gets a value indicating whether this instance is system type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is a leaf type,
            i.e. its <see cref="M:Xtensive.Storage.Model.TypeInfo.GetDescendants"/> method returns <see langword="0"/>.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.UnderlyingType">
            <summary>
            Gets or sets the underlying system type.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Columns">
            <summary>
            Gets the columns contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Indexes">
            <summary>
            Gets the indexes for this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Fields">
            <summary>
            Gets the fields contained in this instance.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.FieldMap">
            <summary>
            Gets the field map for implemented interfaces.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Model">
            <summary>
            Gets the <see cref="T:Xtensive.Storage.Model.DomainModel"/> this instance belongs to.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.Hierarchy">
            <summary>
            Gets or sets the hierarchy.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.TypeId">
            <summary>
            Gets or sets the type id.
            </summary>
            <value></value>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.TupleDescriptor">
            <summary>
            Gets the tuple descriptor.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfo.TuplePrototype">
            <summary>
            Gets the persistent type prototype.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.TypeInfoCollection">
            <summary>
            Represents collection of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instances and is indexed by <see cref="T:System.Type"/> and name.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Contains(System.Type)">
            <summary>
            Determines whether this instance contains an item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <see langword="true"/> if this instance contains the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.TryGetValue(System.Type,Xtensive.Storage.Model.TypeInfo@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value"><see cref="T:Xtensive.Storage.Model.TypeInfo"/> if it was found; otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if value is found by specified <paramref name="key"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindAncestor(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Finds the ancestor of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search ancestor for.</param>
            <returns><see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that is ancestor of specified <paramref name="item"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindDescendants(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Finds the set of direct descendants of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search descendants for.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are descendants of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindDescendants(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the set of descendants of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search descendants for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested descendants will be returned.</param>
            <returns>
              <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are descendants of specified <paramref name="item"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="item"/> implements.
            </summary>
            <param name="item">The type to search interfaces for.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are implemented by specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="item"/> implements.
            </summary>
            <param name="item">The type to search interfaces for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and non-direct implemented interfaces will be returned.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are implemented by specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindImplementors(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Finds the set of direct implementors of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search implementors for.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are implementors of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindImplementors(Xtensive.Storage.Model.TypeInfo,System.Boolean)">
            <summary>
            Finds the set of implementors of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search implementors for.</param>
            <param name="recursive">if set to <see langword="true"/> then both direct and nested implementors will be returned.</param>
            <returns>
              <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that are implementors of specified <paramref name="item"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindRoot(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Finds the root of the specified <paramref name="item"/>.
            </summary>
            <param name="item">The type to search root for.</param>
            <returns><see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance that is root of specified <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.BuildTypeIdIndex">
            <summary>
            Generates the type ids.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindAncestor(System.Type)">
            <summary>
            Finds the ancestor of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type to search ancestor for.</param>
            <returns><see name="TypeDef"/> instance that is ancestor of specified <paramref name="type"/> or 
            <see langword="null"/> if the ancestor is not found in this collection.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.FindInterfaces(System.Type)">
            <summary>
            Find the <see cref="T:System.Collections.Generic.IList`1"/> of interfaces that specified <paramref name="type"/> implements.
            </summary>
            <param name="type">The type to search interfaces for.</param>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> of <see name="TypeDef"/> instance that are implemented by the specified <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Remove(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Removes element from the the collection.
            </summary>
            <param name="value">Item to remove.</param>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the
            collection instance.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Clear">
            <summary>
            Removes all objects from the
            collection instance.
            </summary>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Contains(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            Determines whether collection contains a specific item.
            </summary>
            <param name="item">Value to search for.</param>
            <returns>
              <see langword="True"/> if the object is found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.Find(Xtensive.Storage.Model.TypeAttributes)">
            <summary>
            Finds all <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instances according to specified criteria.
            </summary>
            <param name="criteria">The attributes.</param>
            <returns><see cref="T:Xtensive.Core.Collections.ICountable`1"/> that contains all found instances.</returns>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoCollection.OnInserted(Xtensive.Storage.Model.TypeInfo,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Item(System.Type)">
            <summary>
            An indexer that provides access to collection items.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Item(System.Int32)">
            <summary>
            An indexer that provides access to collection items by their <see cref="P:Xtensive.Storage.Model.TypeInfo.TypeId"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Item was not found.</exception>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Structures">
            <summary>
            Gets the structures that are contained in this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Entities">
            <summary>
            Gets the entities that are contained in this collection.
            </summary>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoCollection.Interfaces">
            <summary>
            Gets the interfaces that are contained in this collection.
            </summary>
        </member>
        <member name="T:Xtensive.Storage.Model.TypeInfoRef">
            <summary>
            Loosely-coupled reference that describes <see cref="T:Xtensive.Storage.Model.TypeInfo"/> instance.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.Resolve(Xtensive.Storage.Model.DomainModel)">
            <summary>
            Resolves this instance to <see cref="T:Xtensive.Storage.Model.TypeInfo"/> object within specified <paramref name="model"/>.
            </summary>
            <param name="model">Domain model.</param>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Implicit(Xtensive.Storage.Model.TypeInfo)~Xtensive.Storage.Model.TypeInfoRef">
            <summary>
            Creates reference for <see cref="T:Xtensive.Storage.Model.TypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Inequality(Xtensive.Storage.Model.TypeInfoRef,Xtensive.Storage.Model.TypeInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorEq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.op_Equality(Xtensive.Storage.Model.TypeInfoRef,Xtensive.Storage.Model.TypeInfoRef)">
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.OperatorNeq(Xtensive.Core.Internals.DocTemplates.ClassDocTemplate,Xtensive.Core.Internals.DocTemplates.ClassDocTemplate)" copy="true"/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.Equals(Xtensive.Storage.Model.TypeInfoRef)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xtensive.Storage.Model.TypeInfoRef.#ctor(Xtensive.Storage.Model.TypeInfo)">
            <summary>
            <see cref="M:Xtensive.Core.Internals.DocTemplates.ClassDocTemplate.Ctor" copy="true"/>
            </summary>
            <param name="typeInfo"><see cref="T:Xtensive.Storage.Model.TypeInfo"/> object to make reference for.</param>
        </member>
        <member name="P:Xtensive.Storage.Model.TypeInfoRef.TypeName">
            <summary>
            Name of the type.
            </summary>
        </member>
    </members>
</doc>
