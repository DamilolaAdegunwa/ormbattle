//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer for SQL Server tool.
// Code is generated on: 12.03.2010 18:36:15
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using Devart.Data.SqlServer.Linq;

namespace OrmBattle.LinqConnectModel
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "PerformanceTest")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))] 
    public partial class PerformanceTestDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(PerformanceTestDataContext));


        #region Extensibility Method Definitions
    
        partial void OnCreated();

        partial void InsertKeyTable(KeyTable instance);
        partial void UpdateKeyTable(KeyTable instance);
        partial void DeleteKeyTable(KeyTable instance);
        partial void InsertSimplest(Simplest instance);
        partial void UpdateSimplest(Simplest instance);
        partial void DeleteSimplest(Simplest instance);
        #endregion

        static PerformanceTestDataContext() {
          //compiledQueryCache.MaxSize = 1200;
        }

        public PerformanceTestDataContext() :
          base(global::OrmBattle.LinqConnectModel.Properties.Settings.Default.PerformanceTestConnectionString, mappingSource) //GetConnectionString("PerformanceTestConnectionString")
        {
          OnCreated(); MaxBatchSize = 20;
        }

        private static string GetConnectionString(string connectionStringName) {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public PerformanceTestDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated(); MaxBatchSize = 20;
        }

        public PerformanceTestDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated(); MaxBatchSize = 20;
        }

        public PerformanceTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated(); MaxBatchSize = 20;
        }

        public PerformanceTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated(); MaxBatchSize = 20;
        }

        public Devart.Data.Linq.Table<KeyTable> KeyTables
        {
            get
            {
                return this.GetTable<KeyTable>();
            }
        }

        public Devart.Data.Linq.Table<Simplest> Simplests
        {
            get
            {
                return this.GetTable<Simplest>();
            }
        }
    }


    /// <summary>
    /// There are no comments for KeyTable in the schema.
    /// </summary>
    [Table(Name = @"dbo.KeyTable")]
    public partial class KeyTable : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _NextId;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnNextIdChanging(int value);
        partial void OnNextIdChanged();
        #endregion

        public KeyTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NextId in the schema.
        /// </summary>
        [Column(Storage = "_NextId", CanBeNull = false, DbType = "int NOT NULL")]
        public int NextId
        {
            get
            {
                return this._NextId;
            }
            set
            {
                if (this._NextId != value)
                {
                    this.OnNextIdChanging(value);
                    this.SendPropertyChanging();
                    this._NextId = value;
                    this.SendPropertyChanged("NextId");
                    this.OnNextIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Simplest in the schema.
    /// </summary>
    [Table(Name = @"dbo.Simplests")]
    public partial class Simplest : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private long _Value;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnValueChanging(long value);
        partial void OnValueChanged();
        #endregion

        public Simplest()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "bigint NOT NULL", IsPrimaryKey = true, UpdateCheck = UpdateCheck.Never)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Storage = "_Value", CanBeNull = false, DbType = "bigint NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging();
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
